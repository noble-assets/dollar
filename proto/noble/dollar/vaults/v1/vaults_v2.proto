syntax = "proto3";

package noble.dollar.vaults.v1;

import "amino/amino.proto";
import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "google/protobuf/timestamp.proto";
import "noble/dollar/vaults/v1/vaults.proto";
import "noble/dollar/vaults/v1/nav.proto";
import "noble/dollar/vaults/v1/fees.proto";
import "noble/dollar/vaults/v1/cross_chain.proto";

option go_package = "dollar.noble.xyz/v2/types/vaults";

// V2 Vault message service for share-based accounting
service VaultV2Msg {
  option (cosmos.msg.v1.service) = true;

  // Deposit tokens to receive shares
  rpc Deposit(MsgDeposit) returns (MsgDepositResponse);

  // Withdraw tokens by burning shares
  rpc Withdraw(MsgWithdraw) returns (MsgWithdrawResponse);

  // Request exit to join withdrawal queue
  rpc RequestExit(MsgRequestExit) returns (MsgRequestExitResponse);

  // Cancel exit request
  rpc CancelExit(MsgCancelExit) returns (MsgCancelExitResponse);

  // Set yield preference
  rpc SetYieldPreference(MsgSetYieldPreference) returns (MsgSetYieldPreferenceResponse);

  // Process exit queue (authority only)
  rpc ProcessExitQueue(MsgProcessExitQueue) returns (MsgProcessExitQueueResponse);

  // Update vault NAV (authority only)
  rpc UpdateNAV(MsgUpdateNAV) returns (MsgUpdateNAVResponse);
}

// V2 Query service for share-based vault
service VaultV2Query {
  // Get vault state
  rpc VaultState(QueryVaultStateRequest) returns (QueryVaultStateResponse);

  // Get user position
  rpc UserPosition(QueryUserPositionRequest) returns (QueryUserPositionResponse);

  // Get current share price
  rpc SharePrice(QuerySharePriceRequest) returns (QuerySharePriceResponse);

  // Get deposit/withdrawal pricing
  rpc PricingInfo(QueryPricingInfoRequest) returns (QueryPricingInfoResponse);

  // Get exit queue status
  rpc ExitQueue(QueryExitQueueRequest) returns (QueryExitQueueResponse);

  // Preview deposit outcome
  rpc DepositPreview(QueryDepositPreviewRequest) returns (QueryDepositPreviewResponse);

  // Preview withdrawal outcome
  rpc WithdrawalPreview(QueryWithdrawalPreviewRequest) returns (QueryWithdrawalPreviewResponse);
}

// MsgDeposit allows users to deposit tokens and receive shares
message MsgDeposit {
  option (cosmos.msg.v1.signer) = "signer";
  option (amino.name) = "dollar/vaults/v2/Deposit";

  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  // User making the deposit
  string signer = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // Vault type
  VaultType vault_type = 2;

  // Amount to deposit
  string amount = 3 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];

  // Minimum shares expected (slippage protection)
  string min_shares = 4 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];

  // Whether to forgo yield for redistribution
  bool forgo_yield = 5;
}

// MsgDepositResponse returns the result of a deposit
message MsgDepositResponse {
  // Shares minted for the user
  string shares_minted = 1 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];

  // Share price at time of deposit
  string share_price = 2 [
    (cosmos_proto.scalar) = "cosmos.Dec",
    (gogoproto.customtype) = "cosmossdk.io/math.LegacyDec",
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];

  // Fee charged
  string fee_charged = 3 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];
}

// MsgWithdraw allows users to withdraw tokens by burning shares
message MsgWithdraw {
  option (cosmos.msg.v1.signer) = "signer";
  option (amino.name) = "dollar/vaults/v2/Withdraw";

  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  // User making the withdrawal
  string signer = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // Vault type
  VaultType vault_type = 2;

  // Shares to burn (0 = withdraw all)
  string shares = 3 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];

  // Minimum tokens expected (slippage protection)
  string min_tokens = 4 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];
}

// MsgWithdrawResponse returns the result of a withdrawal
message MsgWithdrawResponse {
  // Tokens withdrawn
  string tokens_withdrawn = 1 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];

  // Shares burned
  string shares_burned = 2 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];

  // Share price at time of withdrawal
  string share_price = 3 [
    (cosmos_proto.scalar) = "cosmos.Dec",
    (gogoproto.customtype) = "cosmossdk.io/math.LegacyDec",
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];

  // Fee charged
  string fee_charged = 4 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];
}

// MsgRequestExit allows users to join the exit queue for large withdrawals
message MsgRequestExit {
  option (cosmos.msg.v1.signer) = "signer";
  option (amino.name) = "dollar/vaults/v2/RequestExit";

  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  // User requesting exit
  string signer = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // Vault type
  VaultType vault_type = 2;

  // Shares to exit with
  string shares = 3 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];
}

// MsgRequestExitResponse returns the exit request details
message MsgRequestExitResponse {
  // Queue position
  uint64 queue_position = 1;

  // Estimated completion time
  google.protobuf.Timestamp estimated_completion = 2 [
    (gogoproto.nullable) = false,
    (gogoproto.stdtime) = true
  ];

  // Exit request ID
  string exit_id = 3;
}

// MsgCancelExit allows users to cancel their exit request
message MsgCancelExit {
  option (cosmos.msg.v1.signer) = "signer";
  option (amino.name) = "dollar/vaults/v2/CancelExit";

  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  // User cancelling exit
  string signer = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // Exit request ID to cancel
  string exit_id = 2;
}

// MsgCancelExitResponse confirms exit cancellation
message MsgCancelExitResponse {
  // Shares returned to user
  string shares_returned = 1 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];
}

// MsgSetYieldPreference allows users to set their yield preference
message MsgSetYieldPreference {
  option (cosmos.msg.v1.signer) = "signer";
  option (amino.name) = "dollar/vaults/v2/SetYieldPreference";

  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  // User setting preference
  string signer = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // Vault type
  VaultType vault_type = 2;

  // Whether to forgo yield
  bool forgo_yield = 3;
}

// MsgSetYieldPreferenceResponse confirms yield preference update
message MsgSetYieldPreferenceResponse {
  // Previous preference
  bool previous_preference = 1;

  // New preference
  bool new_preference = 2;
}

// MsgProcessExitQueue processes pending exit requests
message MsgProcessExitQueue {
  option (cosmos.msg.v1.signer) = "authority";
  option (amino.name) = "dollar/vaults/v2/ProcessExitQueue";

  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  // Authority processing the queue
  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // Vault type to process
  VaultType vault_type = 2;

  // Maximum number of requests to process
  uint64 max_requests = 3;
}

// MsgProcessExitQueueResponse returns processing results
message MsgProcessExitQueueResponse {
  // Number of requests processed
  uint64 requests_processed = 1;

  // Total tokens distributed
  string tokens_distributed = 2 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];

  // Total shares burned
  string shares_burned = 3 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];
}

// MsgUpdateNAV updates the vault's NAV
message MsgUpdateNAV {
  option (cosmos.msg.v1.signer) = "authority";
  option (amino.name) = "dollar/vaults/v2/UpdateNAV";

  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  // Authority updating NAV
  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // Vault type
  VaultType vault_type = 2;

  // New NAV value
  string new_nav = 3 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];

  // Update reason
  string reason = 4;
}

// MsgUpdateNAVResponse confirms NAV update
message MsgUpdateNAVResponse {
  // Previous NAV
  string previous_nav = 1 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];

  // New NAV
  string new_nav = 2 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];

  // NAV change percentage (basis points)
  int32 change_percentage = 3;
}

// UserPosition represents a user's position in the V2 vault system
message UserPosition {
  // User's share balance
  string shares = 1 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];

  // Principal deposited (for tracking)
  string principal_deposited = 2 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];

  // Average entry price
  string avg_entry_price = 3 [
    (cosmos_proto.scalar) = "cosmos.Dec",
    (gogoproto.customtype) = "cosmossdk.io/math.LegacyDec",
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];

  // First deposit timestamp
  google.protobuf.Timestamp first_deposit = 4 [
    (gogoproto.nullable) = false,
    (gogoproto.stdtime) = true
  ];

  // Last activity timestamp
  google.protobuf.Timestamp last_activity = 5 [
    (gogoproto.nullable) = false,
    (gogoproto.stdtime) = true
  ];

  // Yield preference setting
  bool forgo_yield = 6;

  // Exit requests for this user
  repeated ExitRequest exit_requests = 7;
}

// ExitRequest represents a request to exit the vault via the queue
message ExitRequest {
  // Unique request ID
  string request_id = 1;

  // User making the request
  bytes user_address = 2;

  // Vault type
  VaultType vault_type = 3;

  // Shares to exit with
  string shares = 4 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];

  // Request timestamp
  google.protobuf.Timestamp requested_at = 5 [
    (gogoproto.nullable) = false,
    (gogoproto.stdtime) = true
  ];

  // Queue position
  uint64 queue_position = 6;

  // Expected tokens to receive (at request time)
  string expected_tokens = 7 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];

  // Request status
  ExitRequestStatus status = 8;
}

// ExitRequestStatus represents the status of an exit request
enum ExitRequestStatus {
  option (gogoproto.goproto_enum_prefix) = false;

  // Request is pending in queue
  EXIT_STATUS_PENDING = 0;
  // Request is being processed
  EXIT_STATUS_PROCESSING = 1;
  // Request has been completed
  EXIT_STATUS_COMPLETED = 2;
  // Request was cancelled
  EXIT_STATUS_CANCELLED = 3;
  // Request expired
  EXIT_STATUS_EXPIRED = 4;
}

// Query messages

message QueryVaultStateRequest {
  VaultType vault_type = 1;
}

message QueryVaultStateResponse {
  VaultState vault_state = 1;
  NAVConfig nav_config = 2;
  FeeConfig fee_config = 3;
}

message QueryUserPositionRequest {
  string address = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  VaultType vault_type = 2;
}

message QueryUserPositionResponse {
  UserPosition position = 1;
  string current_value = 2 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];
  string unrealized_gain = 3 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];
}

message QuerySharePriceRequest {
  VaultType vault_type = 1;
}

message QuerySharePriceResponse {
  string share_price = 1 [
    (cosmos_proto.scalar) = "cosmos.Dec",
    (gogoproto.customtype) = "cosmossdk.io/math.LegacyDec",
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];
  google.protobuf.Timestamp last_update = 2 [
    (gogoproto.nullable) = false,
    (gogoproto.stdtime) = true
  ];
}

message QueryPricingInfoRequest {
  VaultType vault_type = 1;
  string amount = 2 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];
  bool is_deposit = 3; // true for deposit, false for withdrawal
}

message QueryPricingInfoResponse {
  PricingInfo pricing_info = 1;
}

message QueryExitQueueRequest {
  VaultType vault_type = 1;
  string user_address = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

message QueryExitQueueResponse {
  repeated ExitRequest user_requests = 1;
  uint64 total_queue_length = 2;
  string total_queued_shares = 3 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];
}

message QueryDepositPreviewRequest {
  VaultType vault_type = 1;
  string amount = 2 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];
}

message QueryDepositPreviewResponse {
  string estimated_shares = 1 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];
  string share_price = 2 [
    (cosmos_proto.scalar) = "cosmos.Dec",
    (gogoproto.customtype) = "cosmossdk.io/math.LegacyDec",
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];
  string fee_amount = 3 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];
}

message QueryWithdrawalPreviewRequest {
  VaultType vault_type = 1;
  string shares = 2 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];
}

message QueryWithdrawalPreviewResponse {
  string estimated_tokens = 1 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];
  string share_price = 2 [
    (cosmos_proto.scalar) = "cosmos.Dec",
    (gogoproto.customtype) = "cosmossdk.io/math.LegacyDec",
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];
  string fee_amount = 3 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];
}

syntax = "proto3";

package noble.dollar.vaults.v2;

import "amino/amino.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "google/protobuf/timestamp.proto";
import "noble/dollar/vaults/v1/vaults.proto";

option go_package = "dollar.noble.xyz/v2/types/vaults/v2";

// EventDeposit is emitted when a user deposits into a V2 vault
message EventDeposit {
  // User address making the deposit
  string depositor = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // Vault type
  noble.dollar.vaults.v1.VaultType vault_type = 2;

  // Amount deposited
  string amount_deposited = 3 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];

  // Shares received
  string shares_received = 4 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];

  // Share price at time of deposit
  string share_price = 5 [
    (cosmos_proto.scalar) = "cosmos.Dec",
    (gogoproto.customtype) = "cosmossdk.io/math.LegacyDec",
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];

  // Fees paid
  string fees_paid = 6 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];

  // Block height
  int64 block_height = 7;

  // Timestamp
  google.protobuf.Timestamp timestamp = 8 [
    (gogoproto.nullable) = false,
    (gogoproto.stdtime) = true
  ];
}

// EventWithdraw is emitted when a user withdraws from a V2 vault
message EventWithdraw {
  // User address making the withdrawal
  string withdrawer = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // Vault type
  noble.dollar.vaults.v1.VaultType vault_type = 2;

  // Shares redeemed
  string shares_redeemed = 3 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];

  // Amount withdrawn
  string amount_withdrawn = 4 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];

  // Share price at time of withdrawal
  string share_price = 5 [
    (cosmos_proto.scalar) = "cosmos.Dec",
    (gogoproto.customtype) = "cosmossdk.io/math.LegacyDec",
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];

  // Fees paid
  string fees_paid = 6 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];

  // Block height
  int64 block_height = 7;

  // Timestamp
  google.protobuf.Timestamp timestamp = 8 [
    (gogoproto.nullable) = false,
    (gogoproto.stdtime) = true
  ];
}

// EventExitRequested is emitted when a user requests an exit from a staked vault
message EventExitRequested {
  // User address requesting exit
  string requester = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // Vault type
  noble.dollar.vaults.v1.VaultType vault_type = 2;

  // Shares to exit
  string shares_to_exit = 3 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];

  // Exit request ID
  string exit_request_id = 4;

  // Expected unlock time
  google.protobuf.Timestamp expected_unlock_time = 5 [
    (gogoproto.nullable) = false,
    (gogoproto.stdtime) = true
  ];

  // Block height
  int64 block_height = 6;

  // Timestamp
  google.protobuf.Timestamp timestamp = 7 [
    (gogoproto.nullable) = false,
    (gogoproto.stdtime) = true
  ];
}

// EventExitCancelled is emitted when a user cancels an exit request
message EventExitCancelled {
  // User address cancelling exit
  string requester = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // Vault type
  noble.dollar.vaults.v1.VaultType vault_type = 2;

  // Exit request ID that was cancelled
  string exit_request_id = 3;

  // Shares returned to staking
  string shares_returned = 4 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];

  // Block height
  int64 block_height = 5;

  // Timestamp
  google.protobuf.Timestamp timestamp = 6 [
    (gogoproto.nullable) = false,
    (gogoproto.stdtime) = true
  ];
}

// EventExitProcessed is emitted when exit requests are processed
message EventExitProcessed {
  // Number of exit requests processed
  int32 requests_processed = 1;

  // Total shares processed
  string total_shares_processed = 2 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];

  // Total amount distributed
  string total_amount_distributed = 3 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];

  // Block height
  int64 block_height = 4;

  // Timestamp
  google.protobuf.Timestamp timestamp = 5 [
    (gogoproto.nullable) = false,
    (gogoproto.stdtime) = true
  ];
}

// EventNAVUpdated is emitted when NAV is updated for a vault
message EventNAVUpdated {
  // Vault type
  noble.dollar.vaults.v1.VaultType vault_type = 1;

  // Previous NAV
  string previous_nav = 2 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];

  // New NAV
  string new_nav = 3 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];

  // NAV change percentage (basis points)
  int32 change_bps = 4;

  // Total shares outstanding
  string total_shares = 5 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];

  // New share price
  string share_price = 6 [
    (cosmos_proto.scalar) = "cosmos.Dec",
    (gogoproto.customtype) = "cosmossdk.io/math.LegacyDec",
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];

  // Authority that updated NAV
  string authority = 7 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // Update reason
  string reason = 8;

  // Block height
  int64 block_height = 9;

  // Timestamp
  google.protobuf.Timestamp timestamp = 10 [
    (gogoproto.nullable) = false,
    (gogoproto.stdtime) = true
  ];
}

// EventFeeCollected is emitted when fees are collected
message EventFeeCollected {
  // Vault type
  noble.dollar.vaults.v1.VaultType vault_type = 1;

  // Fee type (deposit, withdrawal, etc.)
  string fee_type = 2;

  // Amount collected
  string amount_collected = 3 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];

  // Fee rate used (basis points)
  int32 fee_rate_bps = 4;

  // User who triggered the fee
  string payer = 5 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // Block height
  int64 block_height = 6;

  // Timestamp
  google.protobuf.Timestamp timestamp = 7 [
    (gogoproto.nullable) = false,
    (gogoproto.stdtime) = true
  ];
}

// EventYieldPreferenceUpdated is emitted when a user updates their yield preference
message EventYieldPreferenceUpdated {
  // User address
  string user = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // Vault type
  noble.dollar.vaults.v1.VaultType vault_type = 2;

  // Previous yield preference
  bool previous_yield_preference = 3;

  // New yield preference
  bool new_yield_preference = 4;

  // Block height
  int64 block_height = 5;

  // Timestamp
  google.protobuf.Timestamp timestamp = 6 [
    (gogoproto.nullable) = false,
    (gogoproto.stdtime) = true
  ];
}

// EventVaultConfigUpdated is emitted when vault configuration is updated
message EventVaultConfigUpdated {
  // Vault type
  noble.dollar.vaults.v1.VaultType vault_type = 1;

  // Previous config (JSON serialized)
  string previous_config = 2;

  // New config (JSON serialized)
  string new_config = 3;

  // Authority that made the update
  string authority = 4 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // Update reason
  string reason = 5;

  // Block height
  int64 block_height = 6;

  // Timestamp
  google.protobuf.Timestamp timestamp = 7 [
    (gogoproto.nullable) = false,
    (gogoproto.stdtime) = true
  ];
}

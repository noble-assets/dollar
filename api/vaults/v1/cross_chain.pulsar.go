// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package vaultsv1

import (
	_ "cosmossdk.io/api/amino"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	runtime "github.com/cosmos/cosmos-proto/runtime"
	_ "github.com/cosmos/gogoproto/gogoproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	reflect "reflect"
	sync "sync"
)

var (
	md_CrossChainRoute                    protoreflect.MessageDescriptor
	fd_CrossChainRoute_route_id           protoreflect.FieldDescriptor
	fd_CrossChainRoute_source_chain       protoreflect.FieldDescriptor
	fd_CrossChainRoute_destination_chain  protoreflect.FieldDescriptor
	fd_CrossChainRoute_ibc_channel        protoreflect.FieldDescriptor
	fd_CrossChainRoute_active             protoreflect.FieldDescriptor
	fd_CrossChainRoute_max_position_value protoreflect.FieldDescriptor
	fd_CrossChainRoute_risk_params        protoreflect.FieldDescriptor
)

func init() {
	file_noble_dollar_vaults_v1_cross_chain_proto_init()
	md_CrossChainRoute = File_noble_dollar_vaults_v1_cross_chain_proto.Messages().ByName("CrossChainRoute")
	fd_CrossChainRoute_route_id = md_CrossChainRoute.Fields().ByName("route_id")
	fd_CrossChainRoute_source_chain = md_CrossChainRoute.Fields().ByName("source_chain")
	fd_CrossChainRoute_destination_chain = md_CrossChainRoute.Fields().ByName("destination_chain")
	fd_CrossChainRoute_ibc_channel = md_CrossChainRoute.Fields().ByName("ibc_channel")
	fd_CrossChainRoute_active = md_CrossChainRoute.Fields().ByName("active")
	fd_CrossChainRoute_max_position_value = md_CrossChainRoute.Fields().ByName("max_position_value")
	fd_CrossChainRoute_risk_params = md_CrossChainRoute.Fields().ByName("risk_params")
}

var _ protoreflect.Message = (*fastReflection_CrossChainRoute)(nil)

type fastReflection_CrossChainRoute CrossChainRoute

func (x *CrossChainRoute) ProtoReflect() protoreflect.Message {
	return (*fastReflection_CrossChainRoute)(x)
}

func (x *CrossChainRoute) slowProtoReflect() protoreflect.Message {
	mi := &file_noble_dollar_vaults_v1_cross_chain_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_CrossChainRoute_messageType fastReflection_CrossChainRoute_messageType
var _ protoreflect.MessageType = fastReflection_CrossChainRoute_messageType{}

type fastReflection_CrossChainRoute_messageType struct{}

func (x fastReflection_CrossChainRoute_messageType) Zero() protoreflect.Message {
	return (*fastReflection_CrossChainRoute)(nil)
}
func (x fastReflection_CrossChainRoute_messageType) New() protoreflect.Message {
	return new(fastReflection_CrossChainRoute)
}
func (x fastReflection_CrossChainRoute_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_CrossChainRoute
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_CrossChainRoute) Descriptor() protoreflect.MessageDescriptor {
	return md_CrossChainRoute
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_CrossChainRoute) Type() protoreflect.MessageType {
	return _fastReflection_CrossChainRoute_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_CrossChainRoute) New() protoreflect.Message {
	return new(fastReflection_CrossChainRoute)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_CrossChainRoute) Interface() protoreflect.ProtoMessage {
	return (*CrossChainRoute)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_CrossChainRoute) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.RouteId != "" {
		value := protoreflect.ValueOfString(x.RouteId)
		if !f(fd_CrossChainRoute_route_id, value) {
			return
		}
	}
	if x.SourceChain != "" {
		value := protoreflect.ValueOfString(x.SourceChain)
		if !f(fd_CrossChainRoute_source_chain, value) {
			return
		}
	}
	if x.DestinationChain != "" {
		value := protoreflect.ValueOfString(x.DestinationChain)
		if !f(fd_CrossChainRoute_destination_chain, value) {
			return
		}
	}
	if x.IbcChannel != "" {
		value := protoreflect.ValueOfString(x.IbcChannel)
		if !f(fd_CrossChainRoute_ibc_channel, value) {
			return
		}
	}
	if x.Active != false {
		value := protoreflect.ValueOfBool(x.Active)
		if !f(fd_CrossChainRoute_active, value) {
			return
		}
	}
	if x.MaxPositionValue != "" {
		value := protoreflect.ValueOfString(x.MaxPositionValue)
		if !f(fd_CrossChainRoute_max_position_value, value) {
			return
		}
	}
	if x.RiskParams != nil {
		value := protoreflect.ValueOfMessage(x.RiskParams.ProtoReflect())
		if !f(fd_CrossChainRoute_risk_params, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_CrossChainRoute) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "noble.dollar.vaults.v1.CrossChainRoute.route_id":
		return x.RouteId != ""
	case "noble.dollar.vaults.v1.CrossChainRoute.source_chain":
		return x.SourceChain != ""
	case "noble.dollar.vaults.v1.CrossChainRoute.destination_chain":
		return x.DestinationChain != ""
	case "noble.dollar.vaults.v1.CrossChainRoute.ibc_channel":
		return x.IbcChannel != ""
	case "noble.dollar.vaults.v1.CrossChainRoute.active":
		return x.Active != false
	case "noble.dollar.vaults.v1.CrossChainRoute.max_position_value":
		return x.MaxPositionValue != ""
	case "noble.dollar.vaults.v1.CrossChainRoute.risk_params":
		return x.RiskParams != nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.dollar.vaults.v1.CrossChainRoute"))
		}
		panic(fmt.Errorf("message noble.dollar.vaults.v1.CrossChainRoute does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_CrossChainRoute) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "noble.dollar.vaults.v1.CrossChainRoute.route_id":
		x.RouteId = ""
	case "noble.dollar.vaults.v1.CrossChainRoute.source_chain":
		x.SourceChain = ""
	case "noble.dollar.vaults.v1.CrossChainRoute.destination_chain":
		x.DestinationChain = ""
	case "noble.dollar.vaults.v1.CrossChainRoute.ibc_channel":
		x.IbcChannel = ""
	case "noble.dollar.vaults.v1.CrossChainRoute.active":
		x.Active = false
	case "noble.dollar.vaults.v1.CrossChainRoute.max_position_value":
		x.MaxPositionValue = ""
	case "noble.dollar.vaults.v1.CrossChainRoute.risk_params":
		x.RiskParams = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.dollar.vaults.v1.CrossChainRoute"))
		}
		panic(fmt.Errorf("message noble.dollar.vaults.v1.CrossChainRoute does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_CrossChainRoute) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "noble.dollar.vaults.v1.CrossChainRoute.route_id":
		value := x.RouteId
		return protoreflect.ValueOfString(value)
	case "noble.dollar.vaults.v1.CrossChainRoute.source_chain":
		value := x.SourceChain
		return protoreflect.ValueOfString(value)
	case "noble.dollar.vaults.v1.CrossChainRoute.destination_chain":
		value := x.DestinationChain
		return protoreflect.ValueOfString(value)
	case "noble.dollar.vaults.v1.CrossChainRoute.ibc_channel":
		value := x.IbcChannel
		return protoreflect.ValueOfString(value)
	case "noble.dollar.vaults.v1.CrossChainRoute.active":
		value := x.Active
		return protoreflect.ValueOfBool(value)
	case "noble.dollar.vaults.v1.CrossChainRoute.max_position_value":
		value := x.MaxPositionValue
		return protoreflect.ValueOfString(value)
	case "noble.dollar.vaults.v1.CrossChainRoute.risk_params":
		value := x.RiskParams
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.dollar.vaults.v1.CrossChainRoute"))
		}
		panic(fmt.Errorf("message noble.dollar.vaults.v1.CrossChainRoute does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_CrossChainRoute) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "noble.dollar.vaults.v1.CrossChainRoute.route_id":
		x.RouteId = value.Interface().(string)
	case "noble.dollar.vaults.v1.CrossChainRoute.source_chain":
		x.SourceChain = value.Interface().(string)
	case "noble.dollar.vaults.v1.CrossChainRoute.destination_chain":
		x.DestinationChain = value.Interface().(string)
	case "noble.dollar.vaults.v1.CrossChainRoute.ibc_channel":
		x.IbcChannel = value.Interface().(string)
	case "noble.dollar.vaults.v1.CrossChainRoute.active":
		x.Active = value.Bool()
	case "noble.dollar.vaults.v1.CrossChainRoute.max_position_value":
		x.MaxPositionValue = value.Interface().(string)
	case "noble.dollar.vaults.v1.CrossChainRoute.risk_params":
		x.RiskParams = value.Message().Interface().(*CrossChainRiskParams)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.dollar.vaults.v1.CrossChainRoute"))
		}
		panic(fmt.Errorf("message noble.dollar.vaults.v1.CrossChainRoute does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_CrossChainRoute) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "noble.dollar.vaults.v1.CrossChainRoute.risk_params":
		if x.RiskParams == nil {
			x.RiskParams = new(CrossChainRiskParams)
		}
		return protoreflect.ValueOfMessage(x.RiskParams.ProtoReflect())
	case "noble.dollar.vaults.v1.CrossChainRoute.route_id":
		panic(fmt.Errorf("field route_id of message noble.dollar.vaults.v1.CrossChainRoute is not mutable"))
	case "noble.dollar.vaults.v1.CrossChainRoute.source_chain":
		panic(fmt.Errorf("field source_chain of message noble.dollar.vaults.v1.CrossChainRoute is not mutable"))
	case "noble.dollar.vaults.v1.CrossChainRoute.destination_chain":
		panic(fmt.Errorf("field destination_chain of message noble.dollar.vaults.v1.CrossChainRoute is not mutable"))
	case "noble.dollar.vaults.v1.CrossChainRoute.ibc_channel":
		panic(fmt.Errorf("field ibc_channel of message noble.dollar.vaults.v1.CrossChainRoute is not mutable"))
	case "noble.dollar.vaults.v1.CrossChainRoute.active":
		panic(fmt.Errorf("field active of message noble.dollar.vaults.v1.CrossChainRoute is not mutable"))
	case "noble.dollar.vaults.v1.CrossChainRoute.max_position_value":
		panic(fmt.Errorf("field max_position_value of message noble.dollar.vaults.v1.CrossChainRoute is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.dollar.vaults.v1.CrossChainRoute"))
		}
		panic(fmt.Errorf("message noble.dollar.vaults.v1.CrossChainRoute does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_CrossChainRoute) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "noble.dollar.vaults.v1.CrossChainRoute.route_id":
		return protoreflect.ValueOfString("")
	case "noble.dollar.vaults.v1.CrossChainRoute.source_chain":
		return protoreflect.ValueOfString("")
	case "noble.dollar.vaults.v1.CrossChainRoute.destination_chain":
		return protoreflect.ValueOfString("")
	case "noble.dollar.vaults.v1.CrossChainRoute.ibc_channel":
		return protoreflect.ValueOfString("")
	case "noble.dollar.vaults.v1.CrossChainRoute.active":
		return protoreflect.ValueOfBool(false)
	case "noble.dollar.vaults.v1.CrossChainRoute.max_position_value":
		return protoreflect.ValueOfString("")
	case "noble.dollar.vaults.v1.CrossChainRoute.risk_params":
		m := new(CrossChainRiskParams)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.dollar.vaults.v1.CrossChainRoute"))
		}
		panic(fmt.Errorf("message noble.dollar.vaults.v1.CrossChainRoute does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_CrossChainRoute) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in noble.dollar.vaults.v1.CrossChainRoute", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_CrossChainRoute) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_CrossChainRoute) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_CrossChainRoute) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_CrossChainRoute) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*CrossChainRoute)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.RouteId)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.SourceChain)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.DestinationChain)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.IbcChannel)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Active {
			n += 2
		}
		l = len(x.MaxPositionValue)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.RiskParams != nil {
			l = options.Size(x.RiskParams)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*CrossChainRoute)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.RiskParams != nil {
			encoded, err := options.Marshal(x.RiskParams)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x3a
		}
		if len(x.MaxPositionValue) > 0 {
			i -= len(x.MaxPositionValue)
			copy(dAtA[i:], x.MaxPositionValue)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.MaxPositionValue)))
			i--
			dAtA[i] = 0x32
		}
		if x.Active {
			i--
			if x.Active {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x28
		}
		if len(x.IbcChannel) > 0 {
			i -= len(x.IbcChannel)
			copy(dAtA[i:], x.IbcChannel)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.IbcChannel)))
			i--
			dAtA[i] = 0x22
		}
		if len(x.DestinationChain) > 0 {
			i -= len(x.DestinationChain)
			copy(dAtA[i:], x.DestinationChain)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.DestinationChain)))
			i--
			dAtA[i] = 0x1a
		}
		if len(x.SourceChain) > 0 {
			i -= len(x.SourceChain)
			copy(dAtA[i:], x.SourceChain)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.SourceChain)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.RouteId) > 0 {
			i -= len(x.RouteId)
			copy(dAtA[i:], x.RouteId)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.RouteId)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*CrossChainRoute)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: CrossChainRoute: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: CrossChainRoute: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field RouteId", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.RouteId = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field SourceChain", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.SourceChain = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field DestinationChain", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.DestinationChain = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field IbcChannel", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.IbcChannel = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 5:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Active", wireType)
				}
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				x.Active = bool(v != 0)
			case 6:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MaxPositionValue", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.MaxPositionValue = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 7:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field RiskParams", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.RiskParams == nil {
					x.RiskParams = &CrossChainRiskParams{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.RiskParams); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_CrossChainRiskParams                       protoreflect.MessageDescriptor
	fd_CrossChainRiskParams_position_haircut      protoreflect.FieldDescriptor
	fd_CrossChainRiskParams_max_drift_threshold   protoreflect.FieldDescriptor
	fd_CrossChainRiskParams_operation_timeout     protoreflect.FieldDescriptor
	fd_CrossChainRiskParams_max_retries           protoreflect.FieldDescriptor
	fd_CrossChainRiskParams_conservative_discount protoreflect.FieldDescriptor
)

func init() {
	file_noble_dollar_vaults_v1_cross_chain_proto_init()
	md_CrossChainRiskParams = File_noble_dollar_vaults_v1_cross_chain_proto.Messages().ByName("CrossChainRiskParams")
	fd_CrossChainRiskParams_position_haircut = md_CrossChainRiskParams.Fields().ByName("position_haircut")
	fd_CrossChainRiskParams_max_drift_threshold = md_CrossChainRiskParams.Fields().ByName("max_drift_threshold")
	fd_CrossChainRiskParams_operation_timeout = md_CrossChainRiskParams.Fields().ByName("operation_timeout")
	fd_CrossChainRiskParams_max_retries = md_CrossChainRiskParams.Fields().ByName("max_retries")
	fd_CrossChainRiskParams_conservative_discount = md_CrossChainRiskParams.Fields().ByName("conservative_discount")
}

var _ protoreflect.Message = (*fastReflection_CrossChainRiskParams)(nil)

type fastReflection_CrossChainRiskParams CrossChainRiskParams

func (x *CrossChainRiskParams) ProtoReflect() protoreflect.Message {
	return (*fastReflection_CrossChainRiskParams)(x)
}

func (x *CrossChainRiskParams) slowProtoReflect() protoreflect.Message {
	mi := &file_noble_dollar_vaults_v1_cross_chain_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_CrossChainRiskParams_messageType fastReflection_CrossChainRiskParams_messageType
var _ protoreflect.MessageType = fastReflection_CrossChainRiskParams_messageType{}

type fastReflection_CrossChainRiskParams_messageType struct{}

func (x fastReflection_CrossChainRiskParams_messageType) Zero() protoreflect.Message {
	return (*fastReflection_CrossChainRiskParams)(nil)
}
func (x fastReflection_CrossChainRiskParams_messageType) New() protoreflect.Message {
	return new(fastReflection_CrossChainRiskParams)
}
func (x fastReflection_CrossChainRiskParams_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_CrossChainRiskParams
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_CrossChainRiskParams) Descriptor() protoreflect.MessageDescriptor {
	return md_CrossChainRiskParams
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_CrossChainRiskParams) Type() protoreflect.MessageType {
	return _fastReflection_CrossChainRiskParams_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_CrossChainRiskParams) New() protoreflect.Message {
	return new(fastReflection_CrossChainRiskParams)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_CrossChainRiskParams) Interface() protoreflect.ProtoMessage {
	return (*CrossChainRiskParams)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_CrossChainRiskParams) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.PositionHaircut != int32(0) {
		value := protoreflect.ValueOfInt32(x.PositionHaircut)
		if !f(fd_CrossChainRiskParams_position_haircut, value) {
			return
		}
	}
	if x.MaxDriftThreshold != int32(0) {
		value := protoreflect.ValueOfInt32(x.MaxDriftThreshold)
		if !f(fd_CrossChainRiskParams_max_drift_threshold, value) {
			return
		}
	}
	if x.OperationTimeout != int64(0) {
		value := protoreflect.ValueOfInt64(x.OperationTimeout)
		if !f(fd_CrossChainRiskParams_operation_timeout, value) {
			return
		}
	}
	if x.MaxRetries != int32(0) {
		value := protoreflect.ValueOfInt32(x.MaxRetries)
		if !f(fd_CrossChainRiskParams_max_retries, value) {
			return
		}
	}
	if x.ConservativeDiscount != int32(0) {
		value := protoreflect.ValueOfInt32(x.ConservativeDiscount)
		if !f(fd_CrossChainRiskParams_conservative_discount, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_CrossChainRiskParams) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "noble.dollar.vaults.v1.CrossChainRiskParams.position_haircut":
		return x.PositionHaircut != int32(0)
	case "noble.dollar.vaults.v1.CrossChainRiskParams.max_drift_threshold":
		return x.MaxDriftThreshold != int32(0)
	case "noble.dollar.vaults.v1.CrossChainRiskParams.operation_timeout":
		return x.OperationTimeout != int64(0)
	case "noble.dollar.vaults.v1.CrossChainRiskParams.max_retries":
		return x.MaxRetries != int32(0)
	case "noble.dollar.vaults.v1.CrossChainRiskParams.conservative_discount":
		return x.ConservativeDiscount != int32(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.dollar.vaults.v1.CrossChainRiskParams"))
		}
		panic(fmt.Errorf("message noble.dollar.vaults.v1.CrossChainRiskParams does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_CrossChainRiskParams) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "noble.dollar.vaults.v1.CrossChainRiskParams.position_haircut":
		x.PositionHaircut = int32(0)
	case "noble.dollar.vaults.v1.CrossChainRiskParams.max_drift_threshold":
		x.MaxDriftThreshold = int32(0)
	case "noble.dollar.vaults.v1.CrossChainRiskParams.operation_timeout":
		x.OperationTimeout = int64(0)
	case "noble.dollar.vaults.v1.CrossChainRiskParams.max_retries":
		x.MaxRetries = int32(0)
	case "noble.dollar.vaults.v1.CrossChainRiskParams.conservative_discount":
		x.ConservativeDiscount = int32(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.dollar.vaults.v1.CrossChainRiskParams"))
		}
		panic(fmt.Errorf("message noble.dollar.vaults.v1.CrossChainRiskParams does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_CrossChainRiskParams) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "noble.dollar.vaults.v1.CrossChainRiskParams.position_haircut":
		value := x.PositionHaircut
		return protoreflect.ValueOfInt32(value)
	case "noble.dollar.vaults.v1.CrossChainRiskParams.max_drift_threshold":
		value := x.MaxDriftThreshold
		return protoreflect.ValueOfInt32(value)
	case "noble.dollar.vaults.v1.CrossChainRiskParams.operation_timeout":
		value := x.OperationTimeout
		return protoreflect.ValueOfInt64(value)
	case "noble.dollar.vaults.v1.CrossChainRiskParams.max_retries":
		value := x.MaxRetries
		return protoreflect.ValueOfInt32(value)
	case "noble.dollar.vaults.v1.CrossChainRiskParams.conservative_discount":
		value := x.ConservativeDiscount
		return protoreflect.ValueOfInt32(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.dollar.vaults.v1.CrossChainRiskParams"))
		}
		panic(fmt.Errorf("message noble.dollar.vaults.v1.CrossChainRiskParams does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_CrossChainRiskParams) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "noble.dollar.vaults.v1.CrossChainRiskParams.position_haircut":
		x.PositionHaircut = int32(value.Int())
	case "noble.dollar.vaults.v1.CrossChainRiskParams.max_drift_threshold":
		x.MaxDriftThreshold = int32(value.Int())
	case "noble.dollar.vaults.v1.CrossChainRiskParams.operation_timeout":
		x.OperationTimeout = value.Int()
	case "noble.dollar.vaults.v1.CrossChainRiskParams.max_retries":
		x.MaxRetries = int32(value.Int())
	case "noble.dollar.vaults.v1.CrossChainRiskParams.conservative_discount":
		x.ConservativeDiscount = int32(value.Int())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.dollar.vaults.v1.CrossChainRiskParams"))
		}
		panic(fmt.Errorf("message noble.dollar.vaults.v1.CrossChainRiskParams does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_CrossChainRiskParams) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "noble.dollar.vaults.v1.CrossChainRiskParams.position_haircut":
		panic(fmt.Errorf("field position_haircut of message noble.dollar.vaults.v1.CrossChainRiskParams is not mutable"))
	case "noble.dollar.vaults.v1.CrossChainRiskParams.max_drift_threshold":
		panic(fmt.Errorf("field max_drift_threshold of message noble.dollar.vaults.v1.CrossChainRiskParams is not mutable"))
	case "noble.dollar.vaults.v1.CrossChainRiskParams.operation_timeout":
		panic(fmt.Errorf("field operation_timeout of message noble.dollar.vaults.v1.CrossChainRiskParams is not mutable"))
	case "noble.dollar.vaults.v1.CrossChainRiskParams.max_retries":
		panic(fmt.Errorf("field max_retries of message noble.dollar.vaults.v1.CrossChainRiskParams is not mutable"))
	case "noble.dollar.vaults.v1.CrossChainRiskParams.conservative_discount":
		panic(fmt.Errorf("field conservative_discount of message noble.dollar.vaults.v1.CrossChainRiskParams is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.dollar.vaults.v1.CrossChainRiskParams"))
		}
		panic(fmt.Errorf("message noble.dollar.vaults.v1.CrossChainRiskParams does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_CrossChainRiskParams) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "noble.dollar.vaults.v1.CrossChainRiskParams.position_haircut":
		return protoreflect.ValueOfInt32(int32(0))
	case "noble.dollar.vaults.v1.CrossChainRiskParams.max_drift_threshold":
		return protoreflect.ValueOfInt32(int32(0))
	case "noble.dollar.vaults.v1.CrossChainRiskParams.operation_timeout":
		return protoreflect.ValueOfInt64(int64(0))
	case "noble.dollar.vaults.v1.CrossChainRiskParams.max_retries":
		return protoreflect.ValueOfInt32(int32(0))
	case "noble.dollar.vaults.v1.CrossChainRiskParams.conservative_discount":
		return protoreflect.ValueOfInt32(int32(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.dollar.vaults.v1.CrossChainRiskParams"))
		}
		panic(fmt.Errorf("message noble.dollar.vaults.v1.CrossChainRiskParams does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_CrossChainRiskParams) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in noble.dollar.vaults.v1.CrossChainRiskParams", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_CrossChainRiskParams) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_CrossChainRiskParams) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_CrossChainRiskParams) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_CrossChainRiskParams) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*CrossChainRiskParams)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.PositionHaircut != 0 {
			n += 1 + runtime.Sov(uint64(x.PositionHaircut))
		}
		if x.MaxDriftThreshold != 0 {
			n += 1 + runtime.Sov(uint64(x.MaxDriftThreshold))
		}
		if x.OperationTimeout != 0 {
			n += 1 + runtime.Sov(uint64(x.OperationTimeout))
		}
		if x.MaxRetries != 0 {
			n += 1 + runtime.Sov(uint64(x.MaxRetries))
		}
		if x.ConservativeDiscount != 0 {
			n += 1 + runtime.Sov(uint64(x.ConservativeDiscount))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*CrossChainRiskParams)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.ConservativeDiscount != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.ConservativeDiscount))
			i--
			dAtA[i] = 0x28
		}
		if x.MaxRetries != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.MaxRetries))
			i--
			dAtA[i] = 0x20
		}
		if x.OperationTimeout != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.OperationTimeout))
			i--
			dAtA[i] = 0x18
		}
		if x.MaxDriftThreshold != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.MaxDriftThreshold))
			i--
			dAtA[i] = 0x10
		}
		if x.PositionHaircut != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.PositionHaircut))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*CrossChainRiskParams)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: CrossChainRiskParams: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: CrossChainRiskParams: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PositionHaircut", wireType)
				}
				x.PositionHaircut = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.PositionHaircut |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MaxDriftThreshold", wireType)
				}
				x.MaxDriftThreshold = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.MaxDriftThreshold |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 3:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field OperationTimeout", wireType)
				}
				x.OperationTimeout = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.OperationTimeout |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 4:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MaxRetries", wireType)
				}
				x.MaxRetries = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.MaxRetries |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 5:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ConservativeDiscount", wireType)
				}
				x.ConservativeDiscount = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.ConservativeDiscount |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_RemotePosition                    protoreflect.MessageDescriptor
	fd_RemotePosition_route_id           protoreflect.FieldDescriptor
	fd_RemotePosition_remote_address     protoreflect.FieldDescriptor
	fd_RemotePosition_local_address      protoreflect.FieldDescriptor
	fd_RemotePosition_remote_value       protoreflect.FieldDescriptor
	fd_RemotePosition_conservative_value protoreflect.FieldDescriptor
	fd_RemotePosition_last_update        protoreflect.FieldDescriptor
	fd_RemotePosition_current_drift      protoreflect.FieldDescriptor
	fd_RemotePosition_status             protoreflect.FieldDescriptor
	fd_RemotePosition_allocated_shares   protoreflect.FieldDescriptor
)

func init() {
	file_noble_dollar_vaults_v1_cross_chain_proto_init()
	md_RemotePosition = File_noble_dollar_vaults_v1_cross_chain_proto.Messages().ByName("RemotePosition")
	fd_RemotePosition_route_id = md_RemotePosition.Fields().ByName("route_id")
	fd_RemotePosition_remote_address = md_RemotePosition.Fields().ByName("remote_address")
	fd_RemotePosition_local_address = md_RemotePosition.Fields().ByName("local_address")
	fd_RemotePosition_remote_value = md_RemotePosition.Fields().ByName("remote_value")
	fd_RemotePosition_conservative_value = md_RemotePosition.Fields().ByName("conservative_value")
	fd_RemotePosition_last_update = md_RemotePosition.Fields().ByName("last_update")
	fd_RemotePosition_current_drift = md_RemotePosition.Fields().ByName("current_drift")
	fd_RemotePosition_status = md_RemotePosition.Fields().ByName("status")
	fd_RemotePosition_allocated_shares = md_RemotePosition.Fields().ByName("allocated_shares")
}

var _ protoreflect.Message = (*fastReflection_RemotePosition)(nil)

type fastReflection_RemotePosition RemotePosition

func (x *RemotePosition) ProtoReflect() protoreflect.Message {
	return (*fastReflection_RemotePosition)(x)
}

func (x *RemotePosition) slowProtoReflect() protoreflect.Message {
	mi := &file_noble_dollar_vaults_v1_cross_chain_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_RemotePosition_messageType fastReflection_RemotePosition_messageType
var _ protoreflect.MessageType = fastReflection_RemotePosition_messageType{}

type fastReflection_RemotePosition_messageType struct{}

func (x fastReflection_RemotePosition_messageType) Zero() protoreflect.Message {
	return (*fastReflection_RemotePosition)(nil)
}
func (x fastReflection_RemotePosition_messageType) New() protoreflect.Message {
	return new(fastReflection_RemotePosition)
}
func (x fastReflection_RemotePosition_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_RemotePosition
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_RemotePosition) Descriptor() protoreflect.MessageDescriptor {
	return md_RemotePosition
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_RemotePosition) Type() protoreflect.MessageType {
	return _fastReflection_RemotePosition_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_RemotePosition) New() protoreflect.Message {
	return new(fastReflection_RemotePosition)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_RemotePosition) Interface() protoreflect.ProtoMessage {
	return (*RemotePosition)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_RemotePosition) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.RouteId != "" {
		value := protoreflect.ValueOfString(x.RouteId)
		if !f(fd_RemotePosition_route_id, value) {
			return
		}
	}
	if x.RemoteAddress != "" {
		value := protoreflect.ValueOfString(x.RemoteAddress)
		if !f(fd_RemotePosition_remote_address, value) {
			return
		}
	}
	if len(x.LocalAddress) != 0 {
		value := protoreflect.ValueOfBytes(x.LocalAddress)
		if !f(fd_RemotePosition_local_address, value) {
			return
		}
	}
	if x.RemoteValue != "" {
		value := protoreflect.ValueOfString(x.RemoteValue)
		if !f(fd_RemotePosition_remote_value, value) {
			return
		}
	}
	if x.ConservativeValue != "" {
		value := protoreflect.ValueOfString(x.ConservativeValue)
		if !f(fd_RemotePosition_conservative_value, value) {
			return
		}
	}
	if x.LastUpdate != nil {
		value := protoreflect.ValueOfMessage(x.LastUpdate.ProtoReflect())
		if !f(fd_RemotePosition_last_update, value) {
			return
		}
	}
	if x.CurrentDrift != int32(0) {
		value := protoreflect.ValueOfInt32(x.CurrentDrift)
		if !f(fd_RemotePosition_current_drift, value) {
			return
		}
	}
	if x.Status != 0 {
		value := protoreflect.ValueOfEnum((protoreflect.EnumNumber)(x.Status))
		if !f(fd_RemotePosition_status, value) {
			return
		}
	}
	if x.AllocatedShares != "" {
		value := protoreflect.ValueOfString(x.AllocatedShares)
		if !f(fd_RemotePosition_allocated_shares, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_RemotePosition) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "noble.dollar.vaults.v1.RemotePosition.route_id":
		return x.RouteId != ""
	case "noble.dollar.vaults.v1.RemotePosition.remote_address":
		return x.RemoteAddress != ""
	case "noble.dollar.vaults.v1.RemotePosition.local_address":
		return len(x.LocalAddress) != 0
	case "noble.dollar.vaults.v1.RemotePosition.remote_value":
		return x.RemoteValue != ""
	case "noble.dollar.vaults.v1.RemotePosition.conservative_value":
		return x.ConservativeValue != ""
	case "noble.dollar.vaults.v1.RemotePosition.last_update":
		return x.LastUpdate != nil
	case "noble.dollar.vaults.v1.RemotePosition.current_drift":
		return x.CurrentDrift != int32(0)
	case "noble.dollar.vaults.v1.RemotePosition.status":
		return x.Status != 0
	case "noble.dollar.vaults.v1.RemotePosition.allocated_shares":
		return x.AllocatedShares != ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.dollar.vaults.v1.RemotePosition"))
		}
		panic(fmt.Errorf("message noble.dollar.vaults.v1.RemotePosition does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_RemotePosition) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "noble.dollar.vaults.v1.RemotePosition.route_id":
		x.RouteId = ""
	case "noble.dollar.vaults.v1.RemotePosition.remote_address":
		x.RemoteAddress = ""
	case "noble.dollar.vaults.v1.RemotePosition.local_address":
		x.LocalAddress = nil
	case "noble.dollar.vaults.v1.RemotePosition.remote_value":
		x.RemoteValue = ""
	case "noble.dollar.vaults.v1.RemotePosition.conservative_value":
		x.ConservativeValue = ""
	case "noble.dollar.vaults.v1.RemotePosition.last_update":
		x.LastUpdate = nil
	case "noble.dollar.vaults.v1.RemotePosition.current_drift":
		x.CurrentDrift = int32(0)
	case "noble.dollar.vaults.v1.RemotePosition.status":
		x.Status = 0
	case "noble.dollar.vaults.v1.RemotePosition.allocated_shares":
		x.AllocatedShares = ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.dollar.vaults.v1.RemotePosition"))
		}
		panic(fmt.Errorf("message noble.dollar.vaults.v1.RemotePosition does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_RemotePosition) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "noble.dollar.vaults.v1.RemotePosition.route_id":
		value := x.RouteId
		return protoreflect.ValueOfString(value)
	case "noble.dollar.vaults.v1.RemotePosition.remote_address":
		value := x.RemoteAddress
		return protoreflect.ValueOfString(value)
	case "noble.dollar.vaults.v1.RemotePosition.local_address":
		value := x.LocalAddress
		return protoreflect.ValueOfBytes(value)
	case "noble.dollar.vaults.v1.RemotePosition.remote_value":
		value := x.RemoteValue
		return protoreflect.ValueOfString(value)
	case "noble.dollar.vaults.v1.RemotePosition.conservative_value":
		value := x.ConservativeValue
		return protoreflect.ValueOfString(value)
	case "noble.dollar.vaults.v1.RemotePosition.last_update":
		value := x.LastUpdate
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "noble.dollar.vaults.v1.RemotePosition.current_drift":
		value := x.CurrentDrift
		return protoreflect.ValueOfInt32(value)
	case "noble.dollar.vaults.v1.RemotePosition.status":
		value := x.Status
		return protoreflect.ValueOfEnum((protoreflect.EnumNumber)(value))
	case "noble.dollar.vaults.v1.RemotePosition.allocated_shares":
		value := x.AllocatedShares
		return protoreflect.ValueOfString(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.dollar.vaults.v1.RemotePosition"))
		}
		panic(fmt.Errorf("message noble.dollar.vaults.v1.RemotePosition does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_RemotePosition) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "noble.dollar.vaults.v1.RemotePosition.route_id":
		x.RouteId = value.Interface().(string)
	case "noble.dollar.vaults.v1.RemotePosition.remote_address":
		x.RemoteAddress = value.Interface().(string)
	case "noble.dollar.vaults.v1.RemotePosition.local_address":
		x.LocalAddress = value.Bytes()
	case "noble.dollar.vaults.v1.RemotePosition.remote_value":
		x.RemoteValue = value.Interface().(string)
	case "noble.dollar.vaults.v1.RemotePosition.conservative_value":
		x.ConservativeValue = value.Interface().(string)
	case "noble.dollar.vaults.v1.RemotePosition.last_update":
		x.LastUpdate = value.Message().Interface().(*timestamppb.Timestamp)
	case "noble.dollar.vaults.v1.RemotePosition.current_drift":
		x.CurrentDrift = int32(value.Int())
	case "noble.dollar.vaults.v1.RemotePosition.status":
		x.Status = (RemotePositionStatus)(value.Enum())
	case "noble.dollar.vaults.v1.RemotePosition.allocated_shares":
		x.AllocatedShares = value.Interface().(string)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.dollar.vaults.v1.RemotePosition"))
		}
		panic(fmt.Errorf("message noble.dollar.vaults.v1.RemotePosition does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_RemotePosition) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "noble.dollar.vaults.v1.RemotePosition.last_update":
		if x.LastUpdate == nil {
			x.LastUpdate = new(timestamppb.Timestamp)
		}
		return protoreflect.ValueOfMessage(x.LastUpdate.ProtoReflect())
	case "noble.dollar.vaults.v1.RemotePosition.route_id":
		panic(fmt.Errorf("field route_id of message noble.dollar.vaults.v1.RemotePosition is not mutable"))
	case "noble.dollar.vaults.v1.RemotePosition.remote_address":
		panic(fmt.Errorf("field remote_address of message noble.dollar.vaults.v1.RemotePosition is not mutable"))
	case "noble.dollar.vaults.v1.RemotePosition.local_address":
		panic(fmt.Errorf("field local_address of message noble.dollar.vaults.v1.RemotePosition is not mutable"))
	case "noble.dollar.vaults.v1.RemotePosition.remote_value":
		panic(fmt.Errorf("field remote_value of message noble.dollar.vaults.v1.RemotePosition is not mutable"))
	case "noble.dollar.vaults.v1.RemotePosition.conservative_value":
		panic(fmt.Errorf("field conservative_value of message noble.dollar.vaults.v1.RemotePosition is not mutable"))
	case "noble.dollar.vaults.v1.RemotePosition.current_drift":
		panic(fmt.Errorf("field current_drift of message noble.dollar.vaults.v1.RemotePosition is not mutable"))
	case "noble.dollar.vaults.v1.RemotePosition.status":
		panic(fmt.Errorf("field status of message noble.dollar.vaults.v1.RemotePosition is not mutable"))
	case "noble.dollar.vaults.v1.RemotePosition.allocated_shares":
		panic(fmt.Errorf("field allocated_shares of message noble.dollar.vaults.v1.RemotePosition is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.dollar.vaults.v1.RemotePosition"))
		}
		panic(fmt.Errorf("message noble.dollar.vaults.v1.RemotePosition does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_RemotePosition) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "noble.dollar.vaults.v1.RemotePosition.route_id":
		return protoreflect.ValueOfString("")
	case "noble.dollar.vaults.v1.RemotePosition.remote_address":
		return protoreflect.ValueOfString("")
	case "noble.dollar.vaults.v1.RemotePosition.local_address":
		return protoreflect.ValueOfBytes(nil)
	case "noble.dollar.vaults.v1.RemotePosition.remote_value":
		return protoreflect.ValueOfString("")
	case "noble.dollar.vaults.v1.RemotePosition.conservative_value":
		return protoreflect.ValueOfString("")
	case "noble.dollar.vaults.v1.RemotePosition.last_update":
		m := new(timestamppb.Timestamp)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "noble.dollar.vaults.v1.RemotePosition.current_drift":
		return protoreflect.ValueOfInt32(int32(0))
	case "noble.dollar.vaults.v1.RemotePosition.status":
		return protoreflect.ValueOfEnum(0)
	case "noble.dollar.vaults.v1.RemotePosition.allocated_shares":
		return protoreflect.ValueOfString("")
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.dollar.vaults.v1.RemotePosition"))
		}
		panic(fmt.Errorf("message noble.dollar.vaults.v1.RemotePosition does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_RemotePosition) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in noble.dollar.vaults.v1.RemotePosition", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_RemotePosition) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_RemotePosition) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_RemotePosition) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_RemotePosition) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*RemotePosition)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.RouteId)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.RemoteAddress)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.LocalAddress)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.RemoteValue)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.ConservativeValue)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.LastUpdate != nil {
			l = options.Size(x.LastUpdate)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.CurrentDrift != 0 {
			n += 1 + runtime.Sov(uint64(x.CurrentDrift))
		}
		if x.Status != 0 {
			n += 1 + runtime.Sov(uint64(x.Status))
		}
		l = len(x.AllocatedShares)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*RemotePosition)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.AllocatedShares) > 0 {
			i -= len(x.AllocatedShares)
			copy(dAtA[i:], x.AllocatedShares)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.AllocatedShares)))
			i--
			dAtA[i] = 0x4a
		}
		if x.Status != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Status))
			i--
			dAtA[i] = 0x40
		}
		if x.CurrentDrift != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.CurrentDrift))
			i--
			dAtA[i] = 0x38
		}
		if x.LastUpdate != nil {
			encoded, err := options.Marshal(x.LastUpdate)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x32
		}
		if len(x.ConservativeValue) > 0 {
			i -= len(x.ConservativeValue)
			copy(dAtA[i:], x.ConservativeValue)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.ConservativeValue)))
			i--
			dAtA[i] = 0x2a
		}
		if len(x.RemoteValue) > 0 {
			i -= len(x.RemoteValue)
			copy(dAtA[i:], x.RemoteValue)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.RemoteValue)))
			i--
			dAtA[i] = 0x22
		}
		if len(x.LocalAddress) > 0 {
			i -= len(x.LocalAddress)
			copy(dAtA[i:], x.LocalAddress)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.LocalAddress)))
			i--
			dAtA[i] = 0x1a
		}
		if len(x.RemoteAddress) > 0 {
			i -= len(x.RemoteAddress)
			copy(dAtA[i:], x.RemoteAddress)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.RemoteAddress)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.RouteId) > 0 {
			i -= len(x.RouteId)
			copy(dAtA[i:], x.RouteId)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.RouteId)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*RemotePosition)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: RemotePosition: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: RemotePosition: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field RouteId", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.RouteId = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field RemoteAddress", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.RemoteAddress = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field LocalAddress", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.LocalAddress = append(x.LocalAddress[:0], dAtA[iNdEx:postIndex]...)
				if x.LocalAddress == nil {
					x.LocalAddress = []byte{}
				}
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field RemoteValue", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.RemoteValue = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ConservativeValue", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ConservativeValue = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 6:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field LastUpdate", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.LastUpdate == nil {
					x.LastUpdate = &timestamppb.Timestamp{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.LastUpdate); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 7:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field CurrentDrift", wireType)
				}
				x.CurrentDrift = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.CurrentDrift |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 8:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
				}
				x.Status = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Status |= RemotePositionStatus(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 9:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field AllocatedShares", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.AllocatedShares = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_InFlightPosition                     protoreflect.MessageDescriptor
	fd_InFlightPosition_nonce               protoreflect.FieldDescriptor
	fd_InFlightPosition_route_id            protoreflect.FieldDescriptor
	fd_InFlightPosition_user_address        protoreflect.FieldDescriptor
	fd_InFlightPosition_operation_type      protoreflect.FieldDescriptor
	fd_InFlightPosition_amount              protoreflect.FieldDescriptor
	fd_InFlightPosition_shares              protoreflect.FieldDescriptor
	fd_InFlightPosition_initiated_at        protoreflect.FieldDescriptor
	fd_InFlightPosition_expected_completion protoreflect.FieldDescriptor
	fd_InFlightPosition_retry_count         protoreflect.FieldDescriptor
	fd_InFlightPosition_status              protoreflect.FieldDescriptor
	fd_InFlightPosition_error_message       protoreflect.FieldDescriptor
)

func init() {
	file_noble_dollar_vaults_v1_cross_chain_proto_init()
	md_InFlightPosition = File_noble_dollar_vaults_v1_cross_chain_proto.Messages().ByName("InFlightPosition")
	fd_InFlightPosition_nonce = md_InFlightPosition.Fields().ByName("nonce")
	fd_InFlightPosition_route_id = md_InFlightPosition.Fields().ByName("route_id")
	fd_InFlightPosition_user_address = md_InFlightPosition.Fields().ByName("user_address")
	fd_InFlightPosition_operation_type = md_InFlightPosition.Fields().ByName("operation_type")
	fd_InFlightPosition_amount = md_InFlightPosition.Fields().ByName("amount")
	fd_InFlightPosition_shares = md_InFlightPosition.Fields().ByName("shares")
	fd_InFlightPosition_initiated_at = md_InFlightPosition.Fields().ByName("initiated_at")
	fd_InFlightPosition_expected_completion = md_InFlightPosition.Fields().ByName("expected_completion")
	fd_InFlightPosition_retry_count = md_InFlightPosition.Fields().ByName("retry_count")
	fd_InFlightPosition_status = md_InFlightPosition.Fields().ByName("status")
	fd_InFlightPosition_error_message = md_InFlightPosition.Fields().ByName("error_message")
}

var _ protoreflect.Message = (*fastReflection_InFlightPosition)(nil)

type fastReflection_InFlightPosition InFlightPosition

func (x *InFlightPosition) ProtoReflect() protoreflect.Message {
	return (*fastReflection_InFlightPosition)(x)
}

func (x *InFlightPosition) slowProtoReflect() protoreflect.Message {
	mi := &file_noble_dollar_vaults_v1_cross_chain_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_InFlightPosition_messageType fastReflection_InFlightPosition_messageType
var _ protoreflect.MessageType = fastReflection_InFlightPosition_messageType{}

type fastReflection_InFlightPosition_messageType struct{}

func (x fastReflection_InFlightPosition_messageType) Zero() protoreflect.Message {
	return (*fastReflection_InFlightPosition)(nil)
}
func (x fastReflection_InFlightPosition_messageType) New() protoreflect.Message {
	return new(fastReflection_InFlightPosition)
}
func (x fastReflection_InFlightPosition_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_InFlightPosition
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_InFlightPosition) Descriptor() protoreflect.MessageDescriptor {
	return md_InFlightPosition
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_InFlightPosition) Type() protoreflect.MessageType {
	return _fastReflection_InFlightPosition_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_InFlightPosition) New() protoreflect.Message {
	return new(fastReflection_InFlightPosition)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_InFlightPosition) Interface() protoreflect.ProtoMessage {
	return (*InFlightPosition)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_InFlightPosition) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Nonce != uint64(0) {
		value := protoreflect.ValueOfUint64(x.Nonce)
		if !f(fd_InFlightPosition_nonce, value) {
			return
		}
	}
	if x.RouteId != "" {
		value := protoreflect.ValueOfString(x.RouteId)
		if !f(fd_InFlightPosition_route_id, value) {
			return
		}
	}
	if len(x.UserAddress) != 0 {
		value := protoreflect.ValueOfBytes(x.UserAddress)
		if !f(fd_InFlightPosition_user_address, value) {
			return
		}
	}
	if x.OperationType != 0 {
		value := protoreflect.ValueOfEnum((protoreflect.EnumNumber)(x.OperationType))
		if !f(fd_InFlightPosition_operation_type, value) {
			return
		}
	}
	if x.Amount != "" {
		value := protoreflect.ValueOfString(x.Amount)
		if !f(fd_InFlightPosition_amount, value) {
			return
		}
	}
	if x.Shares != "" {
		value := protoreflect.ValueOfString(x.Shares)
		if !f(fd_InFlightPosition_shares, value) {
			return
		}
	}
	if x.InitiatedAt != nil {
		value := protoreflect.ValueOfMessage(x.InitiatedAt.ProtoReflect())
		if !f(fd_InFlightPosition_initiated_at, value) {
			return
		}
	}
	if x.ExpectedCompletion != nil {
		value := protoreflect.ValueOfMessage(x.ExpectedCompletion.ProtoReflect())
		if !f(fd_InFlightPosition_expected_completion, value) {
			return
		}
	}
	if x.RetryCount != int32(0) {
		value := protoreflect.ValueOfInt32(x.RetryCount)
		if !f(fd_InFlightPosition_retry_count, value) {
			return
		}
	}
	if x.Status != 0 {
		value := protoreflect.ValueOfEnum((protoreflect.EnumNumber)(x.Status))
		if !f(fd_InFlightPosition_status, value) {
			return
		}
	}
	if x.ErrorMessage != "" {
		value := protoreflect.ValueOfString(x.ErrorMessage)
		if !f(fd_InFlightPosition_error_message, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_InFlightPosition) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "noble.dollar.vaults.v1.InFlightPosition.nonce":
		return x.Nonce != uint64(0)
	case "noble.dollar.vaults.v1.InFlightPosition.route_id":
		return x.RouteId != ""
	case "noble.dollar.vaults.v1.InFlightPosition.user_address":
		return len(x.UserAddress) != 0
	case "noble.dollar.vaults.v1.InFlightPosition.operation_type":
		return x.OperationType != 0
	case "noble.dollar.vaults.v1.InFlightPosition.amount":
		return x.Amount != ""
	case "noble.dollar.vaults.v1.InFlightPosition.shares":
		return x.Shares != ""
	case "noble.dollar.vaults.v1.InFlightPosition.initiated_at":
		return x.InitiatedAt != nil
	case "noble.dollar.vaults.v1.InFlightPosition.expected_completion":
		return x.ExpectedCompletion != nil
	case "noble.dollar.vaults.v1.InFlightPosition.retry_count":
		return x.RetryCount != int32(0)
	case "noble.dollar.vaults.v1.InFlightPosition.status":
		return x.Status != 0
	case "noble.dollar.vaults.v1.InFlightPosition.error_message":
		return x.ErrorMessage != ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.dollar.vaults.v1.InFlightPosition"))
		}
		panic(fmt.Errorf("message noble.dollar.vaults.v1.InFlightPosition does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_InFlightPosition) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "noble.dollar.vaults.v1.InFlightPosition.nonce":
		x.Nonce = uint64(0)
	case "noble.dollar.vaults.v1.InFlightPosition.route_id":
		x.RouteId = ""
	case "noble.dollar.vaults.v1.InFlightPosition.user_address":
		x.UserAddress = nil
	case "noble.dollar.vaults.v1.InFlightPosition.operation_type":
		x.OperationType = 0
	case "noble.dollar.vaults.v1.InFlightPosition.amount":
		x.Amount = ""
	case "noble.dollar.vaults.v1.InFlightPosition.shares":
		x.Shares = ""
	case "noble.dollar.vaults.v1.InFlightPosition.initiated_at":
		x.InitiatedAt = nil
	case "noble.dollar.vaults.v1.InFlightPosition.expected_completion":
		x.ExpectedCompletion = nil
	case "noble.dollar.vaults.v1.InFlightPosition.retry_count":
		x.RetryCount = int32(0)
	case "noble.dollar.vaults.v1.InFlightPosition.status":
		x.Status = 0
	case "noble.dollar.vaults.v1.InFlightPosition.error_message":
		x.ErrorMessage = ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.dollar.vaults.v1.InFlightPosition"))
		}
		panic(fmt.Errorf("message noble.dollar.vaults.v1.InFlightPosition does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_InFlightPosition) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "noble.dollar.vaults.v1.InFlightPosition.nonce":
		value := x.Nonce
		return protoreflect.ValueOfUint64(value)
	case "noble.dollar.vaults.v1.InFlightPosition.route_id":
		value := x.RouteId
		return protoreflect.ValueOfString(value)
	case "noble.dollar.vaults.v1.InFlightPosition.user_address":
		value := x.UserAddress
		return protoreflect.ValueOfBytes(value)
	case "noble.dollar.vaults.v1.InFlightPosition.operation_type":
		value := x.OperationType
		return protoreflect.ValueOfEnum((protoreflect.EnumNumber)(value))
	case "noble.dollar.vaults.v1.InFlightPosition.amount":
		value := x.Amount
		return protoreflect.ValueOfString(value)
	case "noble.dollar.vaults.v1.InFlightPosition.shares":
		value := x.Shares
		return protoreflect.ValueOfString(value)
	case "noble.dollar.vaults.v1.InFlightPosition.initiated_at":
		value := x.InitiatedAt
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "noble.dollar.vaults.v1.InFlightPosition.expected_completion":
		value := x.ExpectedCompletion
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "noble.dollar.vaults.v1.InFlightPosition.retry_count":
		value := x.RetryCount
		return protoreflect.ValueOfInt32(value)
	case "noble.dollar.vaults.v1.InFlightPosition.status":
		value := x.Status
		return protoreflect.ValueOfEnum((protoreflect.EnumNumber)(value))
	case "noble.dollar.vaults.v1.InFlightPosition.error_message":
		value := x.ErrorMessage
		return protoreflect.ValueOfString(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.dollar.vaults.v1.InFlightPosition"))
		}
		panic(fmt.Errorf("message noble.dollar.vaults.v1.InFlightPosition does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_InFlightPosition) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "noble.dollar.vaults.v1.InFlightPosition.nonce":
		x.Nonce = value.Uint()
	case "noble.dollar.vaults.v1.InFlightPosition.route_id":
		x.RouteId = value.Interface().(string)
	case "noble.dollar.vaults.v1.InFlightPosition.user_address":
		x.UserAddress = value.Bytes()
	case "noble.dollar.vaults.v1.InFlightPosition.operation_type":
		x.OperationType = (InFlightOperationType)(value.Enum())
	case "noble.dollar.vaults.v1.InFlightPosition.amount":
		x.Amount = value.Interface().(string)
	case "noble.dollar.vaults.v1.InFlightPosition.shares":
		x.Shares = value.Interface().(string)
	case "noble.dollar.vaults.v1.InFlightPosition.initiated_at":
		x.InitiatedAt = value.Message().Interface().(*timestamppb.Timestamp)
	case "noble.dollar.vaults.v1.InFlightPosition.expected_completion":
		x.ExpectedCompletion = value.Message().Interface().(*timestamppb.Timestamp)
	case "noble.dollar.vaults.v1.InFlightPosition.retry_count":
		x.RetryCount = int32(value.Int())
	case "noble.dollar.vaults.v1.InFlightPosition.status":
		x.Status = (InFlightStatus)(value.Enum())
	case "noble.dollar.vaults.v1.InFlightPosition.error_message":
		x.ErrorMessage = value.Interface().(string)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.dollar.vaults.v1.InFlightPosition"))
		}
		panic(fmt.Errorf("message noble.dollar.vaults.v1.InFlightPosition does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_InFlightPosition) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "noble.dollar.vaults.v1.InFlightPosition.initiated_at":
		if x.InitiatedAt == nil {
			x.InitiatedAt = new(timestamppb.Timestamp)
		}
		return protoreflect.ValueOfMessage(x.InitiatedAt.ProtoReflect())
	case "noble.dollar.vaults.v1.InFlightPosition.expected_completion":
		if x.ExpectedCompletion == nil {
			x.ExpectedCompletion = new(timestamppb.Timestamp)
		}
		return protoreflect.ValueOfMessage(x.ExpectedCompletion.ProtoReflect())
	case "noble.dollar.vaults.v1.InFlightPosition.nonce":
		panic(fmt.Errorf("field nonce of message noble.dollar.vaults.v1.InFlightPosition is not mutable"))
	case "noble.dollar.vaults.v1.InFlightPosition.route_id":
		panic(fmt.Errorf("field route_id of message noble.dollar.vaults.v1.InFlightPosition is not mutable"))
	case "noble.dollar.vaults.v1.InFlightPosition.user_address":
		panic(fmt.Errorf("field user_address of message noble.dollar.vaults.v1.InFlightPosition is not mutable"))
	case "noble.dollar.vaults.v1.InFlightPosition.operation_type":
		panic(fmt.Errorf("field operation_type of message noble.dollar.vaults.v1.InFlightPosition is not mutable"))
	case "noble.dollar.vaults.v1.InFlightPosition.amount":
		panic(fmt.Errorf("field amount of message noble.dollar.vaults.v1.InFlightPosition is not mutable"))
	case "noble.dollar.vaults.v1.InFlightPosition.shares":
		panic(fmt.Errorf("field shares of message noble.dollar.vaults.v1.InFlightPosition is not mutable"))
	case "noble.dollar.vaults.v1.InFlightPosition.retry_count":
		panic(fmt.Errorf("field retry_count of message noble.dollar.vaults.v1.InFlightPosition is not mutable"))
	case "noble.dollar.vaults.v1.InFlightPosition.status":
		panic(fmt.Errorf("field status of message noble.dollar.vaults.v1.InFlightPosition is not mutable"))
	case "noble.dollar.vaults.v1.InFlightPosition.error_message":
		panic(fmt.Errorf("field error_message of message noble.dollar.vaults.v1.InFlightPosition is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.dollar.vaults.v1.InFlightPosition"))
		}
		panic(fmt.Errorf("message noble.dollar.vaults.v1.InFlightPosition does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_InFlightPosition) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "noble.dollar.vaults.v1.InFlightPosition.nonce":
		return protoreflect.ValueOfUint64(uint64(0))
	case "noble.dollar.vaults.v1.InFlightPosition.route_id":
		return protoreflect.ValueOfString("")
	case "noble.dollar.vaults.v1.InFlightPosition.user_address":
		return protoreflect.ValueOfBytes(nil)
	case "noble.dollar.vaults.v1.InFlightPosition.operation_type":
		return protoreflect.ValueOfEnum(0)
	case "noble.dollar.vaults.v1.InFlightPosition.amount":
		return protoreflect.ValueOfString("")
	case "noble.dollar.vaults.v1.InFlightPosition.shares":
		return protoreflect.ValueOfString("")
	case "noble.dollar.vaults.v1.InFlightPosition.initiated_at":
		m := new(timestamppb.Timestamp)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "noble.dollar.vaults.v1.InFlightPosition.expected_completion":
		m := new(timestamppb.Timestamp)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "noble.dollar.vaults.v1.InFlightPosition.retry_count":
		return protoreflect.ValueOfInt32(int32(0))
	case "noble.dollar.vaults.v1.InFlightPosition.status":
		return protoreflect.ValueOfEnum(0)
	case "noble.dollar.vaults.v1.InFlightPosition.error_message":
		return protoreflect.ValueOfString("")
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.dollar.vaults.v1.InFlightPosition"))
		}
		panic(fmt.Errorf("message noble.dollar.vaults.v1.InFlightPosition does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_InFlightPosition) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in noble.dollar.vaults.v1.InFlightPosition", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_InFlightPosition) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_InFlightPosition) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_InFlightPosition) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_InFlightPosition) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*InFlightPosition)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.Nonce != 0 {
			n += 1 + runtime.Sov(uint64(x.Nonce))
		}
		l = len(x.RouteId)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.UserAddress)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.OperationType != 0 {
			n += 1 + runtime.Sov(uint64(x.OperationType))
		}
		l = len(x.Amount)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Shares)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.InitiatedAt != nil {
			l = options.Size(x.InitiatedAt)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.ExpectedCompletion != nil {
			l = options.Size(x.ExpectedCompletion)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.RetryCount != 0 {
			n += 1 + runtime.Sov(uint64(x.RetryCount))
		}
		if x.Status != 0 {
			n += 1 + runtime.Sov(uint64(x.Status))
		}
		l = len(x.ErrorMessage)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*InFlightPosition)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.ErrorMessage) > 0 {
			i -= len(x.ErrorMessage)
			copy(dAtA[i:], x.ErrorMessage)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.ErrorMessage)))
			i--
			dAtA[i] = 0x5a
		}
		if x.Status != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Status))
			i--
			dAtA[i] = 0x50
		}
		if x.RetryCount != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.RetryCount))
			i--
			dAtA[i] = 0x48
		}
		if x.ExpectedCompletion != nil {
			encoded, err := options.Marshal(x.ExpectedCompletion)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x42
		}
		if x.InitiatedAt != nil {
			encoded, err := options.Marshal(x.InitiatedAt)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x3a
		}
		if len(x.Shares) > 0 {
			i -= len(x.Shares)
			copy(dAtA[i:], x.Shares)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Shares)))
			i--
			dAtA[i] = 0x32
		}
		if len(x.Amount) > 0 {
			i -= len(x.Amount)
			copy(dAtA[i:], x.Amount)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Amount)))
			i--
			dAtA[i] = 0x2a
		}
		if x.OperationType != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.OperationType))
			i--
			dAtA[i] = 0x20
		}
		if len(x.UserAddress) > 0 {
			i -= len(x.UserAddress)
			copy(dAtA[i:], x.UserAddress)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.UserAddress)))
			i--
			dAtA[i] = 0x1a
		}
		if len(x.RouteId) > 0 {
			i -= len(x.RouteId)
			copy(dAtA[i:], x.RouteId)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.RouteId)))
			i--
			dAtA[i] = 0x12
		}
		if x.Nonce != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Nonce))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*InFlightPosition)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: InFlightPosition: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: InFlightPosition: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
				}
				x.Nonce = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Nonce |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field RouteId", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.RouteId = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field UserAddress", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.UserAddress = append(x.UserAddress[:0], dAtA[iNdEx:postIndex]...)
				if x.UserAddress == nil {
					x.UserAddress = []byte{}
				}
				iNdEx = postIndex
			case 4:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field OperationType", wireType)
				}
				x.OperationType = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.OperationType |= InFlightOperationType(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Amount = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 6:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Shares", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Shares = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 7:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field InitiatedAt", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.InitiatedAt == nil {
					x.InitiatedAt = &timestamppb.Timestamp{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.InitiatedAt); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 8:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ExpectedCompletion", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.ExpectedCompletion == nil {
					x.ExpectedCompletion = &timestamppb.Timestamp{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.ExpectedCompletion); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 9:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field RetryCount", wireType)
				}
				x.RetryCount = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.RetryCount |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 10:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
				}
				x.Status = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Status |= InFlightStatus(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 11:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ErrorMessage", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ErrorMessage = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_CrossChainPositionSnapshot                          protoreflect.MessageDescriptor
	fd_CrossChainPositionSnapshot_total_remote_value       protoreflect.FieldDescriptor
	fd_CrossChainPositionSnapshot_total_conservative_value protoreflect.FieldDescriptor
	fd_CrossChainPositionSnapshot_active_positions         protoreflect.FieldDescriptor
	fd_CrossChainPositionSnapshot_drift_exceeded_positions protoreflect.FieldDescriptor
	fd_CrossChainPositionSnapshot_timestamp                protoreflect.FieldDescriptor
	fd_CrossChainPositionSnapshot_total_remote_shares      protoreflect.FieldDescriptor
)

func init() {
	file_noble_dollar_vaults_v1_cross_chain_proto_init()
	md_CrossChainPositionSnapshot = File_noble_dollar_vaults_v1_cross_chain_proto.Messages().ByName("CrossChainPositionSnapshot")
	fd_CrossChainPositionSnapshot_total_remote_value = md_CrossChainPositionSnapshot.Fields().ByName("total_remote_value")
	fd_CrossChainPositionSnapshot_total_conservative_value = md_CrossChainPositionSnapshot.Fields().ByName("total_conservative_value")
	fd_CrossChainPositionSnapshot_active_positions = md_CrossChainPositionSnapshot.Fields().ByName("active_positions")
	fd_CrossChainPositionSnapshot_drift_exceeded_positions = md_CrossChainPositionSnapshot.Fields().ByName("drift_exceeded_positions")
	fd_CrossChainPositionSnapshot_timestamp = md_CrossChainPositionSnapshot.Fields().ByName("timestamp")
	fd_CrossChainPositionSnapshot_total_remote_shares = md_CrossChainPositionSnapshot.Fields().ByName("total_remote_shares")
}

var _ protoreflect.Message = (*fastReflection_CrossChainPositionSnapshot)(nil)

type fastReflection_CrossChainPositionSnapshot CrossChainPositionSnapshot

func (x *CrossChainPositionSnapshot) ProtoReflect() protoreflect.Message {
	return (*fastReflection_CrossChainPositionSnapshot)(x)
}

func (x *CrossChainPositionSnapshot) slowProtoReflect() protoreflect.Message {
	mi := &file_noble_dollar_vaults_v1_cross_chain_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_CrossChainPositionSnapshot_messageType fastReflection_CrossChainPositionSnapshot_messageType
var _ protoreflect.MessageType = fastReflection_CrossChainPositionSnapshot_messageType{}

type fastReflection_CrossChainPositionSnapshot_messageType struct{}

func (x fastReflection_CrossChainPositionSnapshot_messageType) Zero() protoreflect.Message {
	return (*fastReflection_CrossChainPositionSnapshot)(nil)
}
func (x fastReflection_CrossChainPositionSnapshot_messageType) New() protoreflect.Message {
	return new(fastReflection_CrossChainPositionSnapshot)
}
func (x fastReflection_CrossChainPositionSnapshot_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_CrossChainPositionSnapshot
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_CrossChainPositionSnapshot) Descriptor() protoreflect.MessageDescriptor {
	return md_CrossChainPositionSnapshot
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_CrossChainPositionSnapshot) Type() protoreflect.MessageType {
	return _fastReflection_CrossChainPositionSnapshot_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_CrossChainPositionSnapshot) New() protoreflect.Message {
	return new(fastReflection_CrossChainPositionSnapshot)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_CrossChainPositionSnapshot) Interface() protoreflect.ProtoMessage {
	return (*CrossChainPositionSnapshot)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_CrossChainPositionSnapshot) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.TotalRemoteValue != "" {
		value := protoreflect.ValueOfString(x.TotalRemoteValue)
		if !f(fd_CrossChainPositionSnapshot_total_remote_value, value) {
			return
		}
	}
	if x.TotalConservativeValue != "" {
		value := protoreflect.ValueOfString(x.TotalConservativeValue)
		if !f(fd_CrossChainPositionSnapshot_total_conservative_value, value) {
			return
		}
	}
	if x.ActivePositions != int64(0) {
		value := protoreflect.ValueOfInt64(x.ActivePositions)
		if !f(fd_CrossChainPositionSnapshot_active_positions, value) {
			return
		}
	}
	if x.DriftExceededPositions != int64(0) {
		value := protoreflect.ValueOfInt64(x.DriftExceededPositions)
		if !f(fd_CrossChainPositionSnapshot_drift_exceeded_positions, value) {
			return
		}
	}
	if x.Timestamp != nil {
		value := protoreflect.ValueOfMessage(x.Timestamp.ProtoReflect())
		if !f(fd_CrossChainPositionSnapshot_timestamp, value) {
			return
		}
	}
	if x.TotalRemoteShares != "" {
		value := protoreflect.ValueOfString(x.TotalRemoteShares)
		if !f(fd_CrossChainPositionSnapshot_total_remote_shares, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_CrossChainPositionSnapshot) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "noble.dollar.vaults.v1.CrossChainPositionSnapshot.total_remote_value":
		return x.TotalRemoteValue != ""
	case "noble.dollar.vaults.v1.CrossChainPositionSnapshot.total_conservative_value":
		return x.TotalConservativeValue != ""
	case "noble.dollar.vaults.v1.CrossChainPositionSnapshot.active_positions":
		return x.ActivePositions != int64(0)
	case "noble.dollar.vaults.v1.CrossChainPositionSnapshot.drift_exceeded_positions":
		return x.DriftExceededPositions != int64(0)
	case "noble.dollar.vaults.v1.CrossChainPositionSnapshot.timestamp":
		return x.Timestamp != nil
	case "noble.dollar.vaults.v1.CrossChainPositionSnapshot.total_remote_shares":
		return x.TotalRemoteShares != ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.dollar.vaults.v1.CrossChainPositionSnapshot"))
		}
		panic(fmt.Errorf("message noble.dollar.vaults.v1.CrossChainPositionSnapshot does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_CrossChainPositionSnapshot) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "noble.dollar.vaults.v1.CrossChainPositionSnapshot.total_remote_value":
		x.TotalRemoteValue = ""
	case "noble.dollar.vaults.v1.CrossChainPositionSnapshot.total_conservative_value":
		x.TotalConservativeValue = ""
	case "noble.dollar.vaults.v1.CrossChainPositionSnapshot.active_positions":
		x.ActivePositions = int64(0)
	case "noble.dollar.vaults.v1.CrossChainPositionSnapshot.drift_exceeded_positions":
		x.DriftExceededPositions = int64(0)
	case "noble.dollar.vaults.v1.CrossChainPositionSnapshot.timestamp":
		x.Timestamp = nil
	case "noble.dollar.vaults.v1.CrossChainPositionSnapshot.total_remote_shares":
		x.TotalRemoteShares = ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.dollar.vaults.v1.CrossChainPositionSnapshot"))
		}
		panic(fmt.Errorf("message noble.dollar.vaults.v1.CrossChainPositionSnapshot does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_CrossChainPositionSnapshot) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "noble.dollar.vaults.v1.CrossChainPositionSnapshot.total_remote_value":
		value := x.TotalRemoteValue
		return protoreflect.ValueOfString(value)
	case "noble.dollar.vaults.v1.CrossChainPositionSnapshot.total_conservative_value":
		value := x.TotalConservativeValue
		return protoreflect.ValueOfString(value)
	case "noble.dollar.vaults.v1.CrossChainPositionSnapshot.active_positions":
		value := x.ActivePositions
		return protoreflect.ValueOfInt64(value)
	case "noble.dollar.vaults.v1.CrossChainPositionSnapshot.drift_exceeded_positions":
		value := x.DriftExceededPositions
		return protoreflect.ValueOfInt64(value)
	case "noble.dollar.vaults.v1.CrossChainPositionSnapshot.timestamp":
		value := x.Timestamp
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "noble.dollar.vaults.v1.CrossChainPositionSnapshot.total_remote_shares":
		value := x.TotalRemoteShares
		return protoreflect.ValueOfString(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.dollar.vaults.v1.CrossChainPositionSnapshot"))
		}
		panic(fmt.Errorf("message noble.dollar.vaults.v1.CrossChainPositionSnapshot does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_CrossChainPositionSnapshot) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "noble.dollar.vaults.v1.CrossChainPositionSnapshot.total_remote_value":
		x.TotalRemoteValue = value.Interface().(string)
	case "noble.dollar.vaults.v1.CrossChainPositionSnapshot.total_conservative_value":
		x.TotalConservativeValue = value.Interface().(string)
	case "noble.dollar.vaults.v1.CrossChainPositionSnapshot.active_positions":
		x.ActivePositions = value.Int()
	case "noble.dollar.vaults.v1.CrossChainPositionSnapshot.drift_exceeded_positions":
		x.DriftExceededPositions = value.Int()
	case "noble.dollar.vaults.v1.CrossChainPositionSnapshot.timestamp":
		x.Timestamp = value.Message().Interface().(*timestamppb.Timestamp)
	case "noble.dollar.vaults.v1.CrossChainPositionSnapshot.total_remote_shares":
		x.TotalRemoteShares = value.Interface().(string)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.dollar.vaults.v1.CrossChainPositionSnapshot"))
		}
		panic(fmt.Errorf("message noble.dollar.vaults.v1.CrossChainPositionSnapshot does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_CrossChainPositionSnapshot) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "noble.dollar.vaults.v1.CrossChainPositionSnapshot.timestamp":
		if x.Timestamp == nil {
			x.Timestamp = new(timestamppb.Timestamp)
		}
		return protoreflect.ValueOfMessage(x.Timestamp.ProtoReflect())
	case "noble.dollar.vaults.v1.CrossChainPositionSnapshot.total_remote_value":
		panic(fmt.Errorf("field total_remote_value of message noble.dollar.vaults.v1.CrossChainPositionSnapshot is not mutable"))
	case "noble.dollar.vaults.v1.CrossChainPositionSnapshot.total_conservative_value":
		panic(fmt.Errorf("field total_conservative_value of message noble.dollar.vaults.v1.CrossChainPositionSnapshot is not mutable"))
	case "noble.dollar.vaults.v1.CrossChainPositionSnapshot.active_positions":
		panic(fmt.Errorf("field active_positions of message noble.dollar.vaults.v1.CrossChainPositionSnapshot is not mutable"))
	case "noble.dollar.vaults.v1.CrossChainPositionSnapshot.drift_exceeded_positions":
		panic(fmt.Errorf("field drift_exceeded_positions of message noble.dollar.vaults.v1.CrossChainPositionSnapshot is not mutable"))
	case "noble.dollar.vaults.v1.CrossChainPositionSnapshot.total_remote_shares":
		panic(fmt.Errorf("field total_remote_shares of message noble.dollar.vaults.v1.CrossChainPositionSnapshot is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.dollar.vaults.v1.CrossChainPositionSnapshot"))
		}
		panic(fmt.Errorf("message noble.dollar.vaults.v1.CrossChainPositionSnapshot does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_CrossChainPositionSnapshot) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "noble.dollar.vaults.v1.CrossChainPositionSnapshot.total_remote_value":
		return protoreflect.ValueOfString("")
	case "noble.dollar.vaults.v1.CrossChainPositionSnapshot.total_conservative_value":
		return protoreflect.ValueOfString("")
	case "noble.dollar.vaults.v1.CrossChainPositionSnapshot.active_positions":
		return protoreflect.ValueOfInt64(int64(0))
	case "noble.dollar.vaults.v1.CrossChainPositionSnapshot.drift_exceeded_positions":
		return protoreflect.ValueOfInt64(int64(0))
	case "noble.dollar.vaults.v1.CrossChainPositionSnapshot.timestamp":
		m := new(timestamppb.Timestamp)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "noble.dollar.vaults.v1.CrossChainPositionSnapshot.total_remote_shares":
		return protoreflect.ValueOfString("")
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.dollar.vaults.v1.CrossChainPositionSnapshot"))
		}
		panic(fmt.Errorf("message noble.dollar.vaults.v1.CrossChainPositionSnapshot does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_CrossChainPositionSnapshot) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in noble.dollar.vaults.v1.CrossChainPositionSnapshot", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_CrossChainPositionSnapshot) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_CrossChainPositionSnapshot) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_CrossChainPositionSnapshot) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_CrossChainPositionSnapshot) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*CrossChainPositionSnapshot)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.TotalRemoteValue)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.TotalConservativeValue)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.ActivePositions != 0 {
			n += 1 + runtime.Sov(uint64(x.ActivePositions))
		}
		if x.DriftExceededPositions != 0 {
			n += 1 + runtime.Sov(uint64(x.DriftExceededPositions))
		}
		if x.Timestamp != nil {
			l = options.Size(x.Timestamp)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.TotalRemoteShares)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*CrossChainPositionSnapshot)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.TotalRemoteShares) > 0 {
			i -= len(x.TotalRemoteShares)
			copy(dAtA[i:], x.TotalRemoteShares)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.TotalRemoteShares)))
			i--
			dAtA[i] = 0x32
		}
		if x.Timestamp != nil {
			encoded, err := options.Marshal(x.Timestamp)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x2a
		}
		if x.DriftExceededPositions != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.DriftExceededPositions))
			i--
			dAtA[i] = 0x20
		}
		if x.ActivePositions != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.ActivePositions))
			i--
			dAtA[i] = 0x18
		}
		if len(x.TotalConservativeValue) > 0 {
			i -= len(x.TotalConservativeValue)
			copy(dAtA[i:], x.TotalConservativeValue)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.TotalConservativeValue)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.TotalRemoteValue) > 0 {
			i -= len(x.TotalRemoteValue)
			copy(dAtA[i:], x.TotalRemoteValue)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.TotalRemoteValue)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*CrossChainPositionSnapshot)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: CrossChainPositionSnapshot: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: CrossChainPositionSnapshot: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TotalRemoteValue", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.TotalRemoteValue = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TotalConservativeValue", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.TotalConservativeValue = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ActivePositions", wireType)
				}
				x.ActivePositions = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.ActivePositions |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 4:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field DriftExceededPositions", wireType)
				}
				x.DriftExceededPositions = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.DriftExceededPositions |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Timestamp == nil {
					x.Timestamp = &timestamppb.Timestamp{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Timestamp); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 6:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TotalRemoteShares", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.TotalRemoteShares = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_DriftAlert                    protoreflect.MessageDescriptor
	fd_DriftAlert_route_id           protoreflect.FieldDescriptor
	fd_DriftAlert_user_address       protoreflect.FieldDescriptor
	fd_DriftAlert_current_drift      protoreflect.FieldDescriptor
	fd_DriftAlert_threshold_exceeded protoreflect.FieldDescriptor
	fd_DriftAlert_timestamp          protoreflect.FieldDescriptor
	fd_DriftAlert_recommended_action protoreflect.FieldDescriptor
)

func init() {
	file_noble_dollar_vaults_v1_cross_chain_proto_init()
	md_DriftAlert = File_noble_dollar_vaults_v1_cross_chain_proto.Messages().ByName("DriftAlert")
	fd_DriftAlert_route_id = md_DriftAlert.Fields().ByName("route_id")
	fd_DriftAlert_user_address = md_DriftAlert.Fields().ByName("user_address")
	fd_DriftAlert_current_drift = md_DriftAlert.Fields().ByName("current_drift")
	fd_DriftAlert_threshold_exceeded = md_DriftAlert.Fields().ByName("threshold_exceeded")
	fd_DriftAlert_timestamp = md_DriftAlert.Fields().ByName("timestamp")
	fd_DriftAlert_recommended_action = md_DriftAlert.Fields().ByName("recommended_action")
}

var _ protoreflect.Message = (*fastReflection_DriftAlert)(nil)

type fastReflection_DriftAlert DriftAlert

func (x *DriftAlert) ProtoReflect() protoreflect.Message {
	return (*fastReflection_DriftAlert)(x)
}

func (x *DriftAlert) slowProtoReflect() protoreflect.Message {
	mi := &file_noble_dollar_vaults_v1_cross_chain_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_DriftAlert_messageType fastReflection_DriftAlert_messageType
var _ protoreflect.MessageType = fastReflection_DriftAlert_messageType{}

type fastReflection_DriftAlert_messageType struct{}

func (x fastReflection_DriftAlert_messageType) Zero() protoreflect.Message {
	return (*fastReflection_DriftAlert)(nil)
}
func (x fastReflection_DriftAlert_messageType) New() protoreflect.Message {
	return new(fastReflection_DriftAlert)
}
func (x fastReflection_DriftAlert_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_DriftAlert
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_DriftAlert) Descriptor() protoreflect.MessageDescriptor {
	return md_DriftAlert
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_DriftAlert) Type() protoreflect.MessageType {
	return _fastReflection_DriftAlert_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_DriftAlert) New() protoreflect.Message {
	return new(fastReflection_DriftAlert)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_DriftAlert) Interface() protoreflect.ProtoMessage {
	return (*DriftAlert)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_DriftAlert) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.RouteId != "" {
		value := protoreflect.ValueOfString(x.RouteId)
		if !f(fd_DriftAlert_route_id, value) {
			return
		}
	}
	if len(x.UserAddress) != 0 {
		value := protoreflect.ValueOfBytes(x.UserAddress)
		if !f(fd_DriftAlert_user_address, value) {
			return
		}
	}
	if x.CurrentDrift != int32(0) {
		value := protoreflect.ValueOfInt32(x.CurrentDrift)
		if !f(fd_DriftAlert_current_drift, value) {
			return
		}
	}
	if x.ThresholdExceeded != int32(0) {
		value := protoreflect.ValueOfInt32(x.ThresholdExceeded)
		if !f(fd_DriftAlert_threshold_exceeded, value) {
			return
		}
	}
	if x.Timestamp != nil {
		value := protoreflect.ValueOfMessage(x.Timestamp.ProtoReflect())
		if !f(fd_DriftAlert_timestamp, value) {
			return
		}
	}
	if x.RecommendedAction != "" {
		value := protoreflect.ValueOfString(x.RecommendedAction)
		if !f(fd_DriftAlert_recommended_action, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_DriftAlert) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "noble.dollar.vaults.v1.DriftAlert.route_id":
		return x.RouteId != ""
	case "noble.dollar.vaults.v1.DriftAlert.user_address":
		return len(x.UserAddress) != 0
	case "noble.dollar.vaults.v1.DriftAlert.current_drift":
		return x.CurrentDrift != int32(0)
	case "noble.dollar.vaults.v1.DriftAlert.threshold_exceeded":
		return x.ThresholdExceeded != int32(0)
	case "noble.dollar.vaults.v1.DriftAlert.timestamp":
		return x.Timestamp != nil
	case "noble.dollar.vaults.v1.DriftAlert.recommended_action":
		return x.RecommendedAction != ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.dollar.vaults.v1.DriftAlert"))
		}
		panic(fmt.Errorf("message noble.dollar.vaults.v1.DriftAlert does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_DriftAlert) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "noble.dollar.vaults.v1.DriftAlert.route_id":
		x.RouteId = ""
	case "noble.dollar.vaults.v1.DriftAlert.user_address":
		x.UserAddress = nil
	case "noble.dollar.vaults.v1.DriftAlert.current_drift":
		x.CurrentDrift = int32(0)
	case "noble.dollar.vaults.v1.DriftAlert.threshold_exceeded":
		x.ThresholdExceeded = int32(0)
	case "noble.dollar.vaults.v1.DriftAlert.timestamp":
		x.Timestamp = nil
	case "noble.dollar.vaults.v1.DriftAlert.recommended_action":
		x.RecommendedAction = ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.dollar.vaults.v1.DriftAlert"))
		}
		panic(fmt.Errorf("message noble.dollar.vaults.v1.DriftAlert does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_DriftAlert) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "noble.dollar.vaults.v1.DriftAlert.route_id":
		value := x.RouteId
		return protoreflect.ValueOfString(value)
	case "noble.dollar.vaults.v1.DriftAlert.user_address":
		value := x.UserAddress
		return protoreflect.ValueOfBytes(value)
	case "noble.dollar.vaults.v1.DriftAlert.current_drift":
		value := x.CurrentDrift
		return protoreflect.ValueOfInt32(value)
	case "noble.dollar.vaults.v1.DriftAlert.threshold_exceeded":
		value := x.ThresholdExceeded
		return protoreflect.ValueOfInt32(value)
	case "noble.dollar.vaults.v1.DriftAlert.timestamp":
		value := x.Timestamp
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "noble.dollar.vaults.v1.DriftAlert.recommended_action":
		value := x.RecommendedAction
		return protoreflect.ValueOfString(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.dollar.vaults.v1.DriftAlert"))
		}
		panic(fmt.Errorf("message noble.dollar.vaults.v1.DriftAlert does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_DriftAlert) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "noble.dollar.vaults.v1.DriftAlert.route_id":
		x.RouteId = value.Interface().(string)
	case "noble.dollar.vaults.v1.DriftAlert.user_address":
		x.UserAddress = value.Bytes()
	case "noble.dollar.vaults.v1.DriftAlert.current_drift":
		x.CurrentDrift = int32(value.Int())
	case "noble.dollar.vaults.v1.DriftAlert.threshold_exceeded":
		x.ThresholdExceeded = int32(value.Int())
	case "noble.dollar.vaults.v1.DriftAlert.timestamp":
		x.Timestamp = value.Message().Interface().(*timestamppb.Timestamp)
	case "noble.dollar.vaults.v1.DriftAlert.recommended_action":
		x.RecommendedAction = value.Interface().(string)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.dollar.vaults.v1.DriftAlert"))
		}
		panic(fmt.Errorf("message noble.dollar.vaults.v1.DriftAlert does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_DriftAlert) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "noble.dollar.vaults.v1.DriftAlert.timestamp":
		if x.Timestamp == nil {
			x.Timestamp = new(timestamppb.Timestamp)
		}
		return protoreflect.ValueOfMessage(x.Timestamp.ProtoReflect())
	case "noble.dollar.vaults.v1.DriftAlert.route_id":
		panic(fmt.Errorf("field route_id of message noble.dollar.vaults.v1.DriftAlert is not mutable"))
	case "noble.dollar.vaults.v1.DriftAlert.user_address":
		panic(fmt.Errorf("field user_address of message noble.dollar.vaults.v1.DriftAlert is not mutable"))
	case "noble.dollar.vaults.v1.DriftAlert.current_drift":
		panic(fmt.Errorf("field current_drift of message noble.dollar.vaults.v1.DriftAlert is not mutable"))
	case "noble.dollar.vaults.v1.DriftAlert.threshold_exceeded":
		panic(fmt.Errorf("field threshold_exceeded of message noble.dollar.vaults.v1.DriftAlert is not mutable"))
	case "noble.dollar.vaults.v1.DriftAlert.recommended_action":
		panic(fmt.Errorf("field recommended_action of message noble.dollar.vaults.v1.DriftAlert is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.dollar.vaults.v1.DriftAlert"))
		}
		panic(fmt.Errorf("message noble.dollar.vaults.v1.DriftAlert does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_DriftAlert) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "noble.dollar.vaults.v1.DriftAlert.route_id":
		return protoreflect.ValueOfString("")
	case "noble.dollar.vaults.v1.DriftAlert.user_address":
		return protoreflect.ValueOfBytes(nil)
	case "noble.dollar.vaults.v1.DriftAlert.current_drift":
		return protoreflect.ValueOfInt32(int32(0))
	case "noble.dollar.vaults.v1.DriftAlert.threshold_exceeded":
		return protoreflect.ValueOfInt32(int32(0))
	case "noble.dollar.vaults.v1.DriftAlert.timestamp":
		m := new(timestamppb.Timestamp)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "noble.dollar.vaults.v1.DriftAlert.recommended_action":
		return protoreflect.ValueOfString("")
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.dollar.vaults.v1.DriftAlert"))
		}
		panic(fmt.Errorf("message noble.dollar.vaults.v1.DriftAlert does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_DriftAlert) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in noble.dollar.vaults.v1.DriftAlert", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_DriftAlert) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_DriftAlert) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_DriftAlert) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_DriftAlert) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*DriftAlert)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.RouteId)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.UserAddress)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.CurrentDrift != 0 {
			n += 1 + runtime.Sov(uint64(x.CurrentDrift))
		}
		if x.ThresholdExceeded != 0 {
			n += 1 + runtime.Sov(uint64(x.ThresholdExceeded))
		}
		if x.Timestamp != nil {
			l = options.Size(x.Timestamp)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.RecommendedAction)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*DriftAlert)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.RecommendedAction) > 0 {
			i -= len(x.RecommendedAction)
			copy(dAtA[i:], x.RecommendedAction)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.RecommendedAction)))
			i--
			dAtA[i] = 0x32
		}
		if x.Timestamp != nil {
			encoded, err := options.Marshal(x.Timestamp)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x2a
		}
		if x.ThresholdExceeded != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.ThresholdExceeded))
			i--
			dAtA[i] = 0x20
		}
		if x.CurrentDrift != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.CurrentDrift))
			i--
			dAtA[i] = 0x18
		}
		if len(x.UserAddress) > 0 {
			i -= len(x.UserAddress)
			copy(dAtA[i:], x.UserAddress)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.UserAddress)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.RouteId) > 0 {
			i -= len(x.RouteId)
			copy(dAtA[i:], x.RouteId)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.RouteId)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*DriftAlert)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: DriftAlert: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: DriftAlert: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field RouteId", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.RouteId = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field UserAddress", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.UserAddress = append(x.UserAddress[:0], dAtA[iNdEx:postIndex]...)
				if x.UserAddress == nil {
					x.UserAddress = []byte{}
				}
				iNdEx = postIndex
			case 3:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field CurrentDrift", wireType)
				}
				x.CurrentDrift = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.CurrentDrift |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 4:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ThresholdExceeded", wireType)
				}
				x.ThresholdExceeded = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.ThresholdExceeded |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Timestamp == nil {
					x.Timestamp = &timestamppb.Timestamp{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Timestamp); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 6:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field RecommendedAction", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.RecommendedAction = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_CrossChainConfig                                 protoreflect.MessageDescriptor
	fd_CrossChainConfig_global_haircut                  protoreflect.FieldDescriptor
	fd_CrossChainConfig_max_remote_exposure             protoreflect.FieldDescriptor
	fd_CrossChainConfig_default_timeout                 protoreflect.FieldDescriptor
	fd_CrossChainConfig_update_frequency                protoreflect.FieldDescriptor
	fd_CrossChainConfig_emergency_liquidation_threshold protoreflect.FieldDescriptor
	fd_CrossChainConfig_enabled                         protoreflect.FieldDescriptor
)

func init() {
	file_noble_dollar_vaults_v1_cross_chain_proto_init()
	md_CrossChainConfig = File_noble_dollar_vaults_v1_cross_chain_proto.Messages().ByName("CrossChainConfig")
	fd_CrossChainConfig_global_haircut = md_CrossChainConfig.Fields().ByName("global_haircut")
	fd_CrossChainConfig_max_remote_exposure = md_CrossChainConfig.Fields().ByName("max_remote_exposure")
	fd_CrossChainConfig_default_timeout = md_CrossChainConfig.Fields().ByName("default_timeout")
	fd_CrossChainConfig_update_frequency = md_CrossChainConfig.Fields().ByName("update_frequency")
	fd_CrossChainConfig_emergency_liquidation_threshold = md_CrossChainConfig.Fields().ByName("emergency_liquidation_threshold")
	fd_CrossChainConfig_enabled = md_CrossChainConfig.Fields().ByName("enabled")
}

var _ protoreflect.Message = (*fastReflection_CrossChainConfig)(nil)

type fastReflection_CrossChainConfig CrossChainConfig

func (x *CrossChainConfig) ProtoReflect() protoreflect.Message {
	return (*fastReflection_CrossChainConfig)(x)
}

func (x *CrossChainConfig) slowProtoReflect() protoreflect.Message {
	mi := &file_noble_dollar_vaults_v1_cross_chain_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_CrossChainConfig_messageType fastReflection_CrossChainConfig_messageType
var _ protoreflect.MessageType = fastReflection_CrossChainConfig_messageType{}

type fastReflection_CrossChainConfig_messageType struct{}

func (x fastReflection_CrossChainConfig_messageType) Zero() protoreflect.Message {
	return (*fastReflection_CrossChainConfig)(nil)
}
func (x fastReflection_CrossChainConfig_messageType) New() protoreflect.Message {
	return new(fastReflection_CrossChainConfig)
}
func (x fastReflection_CrossChainConfig_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_CrossChainConfig
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_CrossChainConfig) Descriptor() protoreflect.MessageDescriptor {
	return md_CrossChainConfig
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_CrossChainConfig) Type() protoreflect.MessageType {
	return _fastReflection_CrossChainConfig_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_CrossChainConfig) New() protoreflect.Message {
	return new(fastReflection_CrossChainConfig)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_CrossChainConfig) Interface() protoreflect.ProtoMessage {
	return (*CrossChainConfig)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_CrossChainConfig) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.GlobalHaircut != int32(0) {
		value := protoreflect.ValueOfInt32(x.GlobalHaircut)
		if !f(fd_CrossChainConfig_global_haircut, value) {
			return
		}
	}
	if x.MaxRemoteExposure != int32(0) {
		value := protoreflect.ValueOfInt32(x.MaxRemoteExposure)
		if !f(fd_CrossChainConfig_max_remote_exposure, value) {
			return
		}
	}
	if x.DefaultTimeout != int64(0) {
		value := protoreflect.ValueOfInt64(x.DefaultTimeout)
		if !f(fd_CrossChainConfig_default_timeout, value) {
			return
		}
	}
	if x.UpdateFrequency != int64(0) {
		value := protoreflect.ValueOfInt64(x.UpdateFrequency)
		if !f(fd_CrossChainConfig_update_frequency, value) {
			return
		}
	}
	if x.EmergencyLiquidationThreshold != int32(0) {
		value := protoreflect.ValueOfInt32(x.EmergencyLiquidationThreshold)
		if !f(fd_CrossChainConfig_emergency_liquidation_threshold, value) {
			return
		}
	}
	if x.Enabled != false {
		value := protoreflect.ValueOfBool(x.Enabled)
		if !f(fd_CrossChainConfig_enabled, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_CrossChainConfig) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "noble.dollar.vaults.v1.CrossChainConfig.global_haircut":
		return x.GlobalHaircut != int32(0)
	case "noble.dollar.vaults.v1.CrossChainConfig.max_remote_exposure":
		return x.MaxRemoteExposure != int32(0)
	case "noble.dollar.vaults.v1.CrossChainConfig.default_timeout":
		return x.DefaultTimeout != int64(0)
	case "noble.dollar.vaults.v1.CrossChainConfig.update_frequency":
		return x.UpdateFrequency != int64(0)
	case "noble.dollar.vaults.v1.CrossChainConfig.emergency_liquidation_threshold":
		return x.EmergencyLiquidationThreshold != int32(0)
	case "noble.dollar.vaults.v1.CrossChainConfig.enabled":
		return x.Enabled != false
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.dollar.vaults.v1.CrossChainConfig"))
		}
		panic(fmt.Errorf("message noble.dollar.vaults.v1.CrossChainConfig does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_CrossChainConfig) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "noble.dollar.vaults.v1.CrossChainConfig.global_haircut":
		x.GlobalHaircut = int32(0)
	case "noble.dollar.vaults.v1.CrossChainConfig.max_remote_exposure":
		x.MaxRemoteExposure = int32(0)
	case "noble.dollar.vaults.v1.CrossChainConfig.default_timeout":
		x.DefaultTimeout = int64(0)
	case "noble.dollar.vaults.v1.CrossChainConfig.update_frequency":
		x.UpdateFrequency = int64(0)
	case "noble.dollar.vaults.v1.CrossChainConfig.emergency_liquidation_threshold":
		x.EmergencyLiquidationThreshold = int32(0)
	case "noble.dollar.vaults.v1.CrossChainConfig.enabled":
		x.Enabled = false
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.dollar.vaults.v1.CrossChainConfig"))
		}
		panic(fmt.Errorf("message noble.dollar.vaults.v1.CrossChainConfig does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_CrossChainConfig) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "noble.dollar.vaults.v1.CrossChainConfig.global_haircut":
		value := x.GlobalHaircut
		return protoreflect.ValueOfInt32(value)
	case "noble.dollar.vaults.v1.CrossChainConfig.max_remote_exposure":
		value := x.MaxRemoteExposure
		return protoreflect.ValueOfInt32(value)
	case "noble.dollar.vaults.v1.CrossChainConfig.default_timeout":
		value := x.DefaultTimeout
		return protoreflect.ValueOfInt64(value)
	case "noble.dollar.vaults.v1.CrossChainConfig.update_frequency":
		value := x.UpdateFrequency
		return protoreflect.ValueOfInt64(value)
	case "noble.dollar.vaults.v1.CrossChainConfig.emergency_liquidation_threshold":
		value := x.EmergencyLiquidationThreshold
		return protoreflect.ValueOfInt32(value)
	case "noble.dollar.vaults.v1.CrossChainConfig.enabled":
		value := x.Enabled
		return protoreflect.ValueOfBool(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.dollar.vaults.v1.CrossChainConfig"))
		}
		panic(fmt.Errorf("message noble.dollar.vaults.v1.CrossChainConfig does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_CrossChainConfig) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "noble.dollar.vaults.v1.CrossChainConfig.global_haircut":
		x.GlobalHaircut = int32(value.Int())
	case "noble.dollar.vaults.v1.CrossChainConfig.max_remote_exposure":
		x.MaxRemoteExposure = int32(value.Int())
	case "noble.dollar.vaults.v1.CrossChainConfig.default_timeout":
		x.DefaultTimeout = value.Int()
	case "noble.dollar.vaults.v1.CrossChainConfig.update_frequency":
		x.UpdateFrequency = value.Int()
	case "noble.dollar.vaults.v1.CrossChainConfig.emergency_liquidation_threshold":
		x.EmergencyLiquidationThreshold = int32(value.Int())
	case "noble.dollar.vaults.v1.CrossChainConfig.enabled":
		x.Enabled = value.Bool()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.dollar.vaults.v1.CrossChainConfig"))
		}
		panic(fmt.Errorf("message noble.dollar.vaults.v1.CrossChainConfig does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_CrossChainConfig) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "noble.dollar.vaults.v1.CrossChainConfig.global_haircut":
		panic(fmt.Errorf("field global_haircut of message noble.dollar.vaults.v1.CrossChainConfig is not mutable"))
	case "noble.dollar.vaults.v1.CrossChainConfig.max_remote_exposure":
		panic(fmt.Errorf("field max_remote_exposure of message noble.dollar.vaults.v1.CrossChainConfig is not mutable"))
	case "noble.dollar.vaults.v1.CrossChainConfig.default_timeout":
		panic(fmt.Errorf("field default_timeout of message noble.dollar.vaults.v1.CrossChainConfig is not mutable"))
	case "noble.dollar.vaults.v1.CrossChainConfig.update_frequency":
		panic(fmt.Errorf("field update_frequency of message noble.dollar.vaults.v1.CrossChainConfig is not mutable"))
	case "noble.dollar.vaults.v1.CrossChainConfig.emergency_liquidation_threshold":
		panic(fmt.Errorf("field emergency_liquidation_threshold of message noble.dollar.vaults.v1.CrossChainConfig is not mutable"))
	case "noble.dollar.vaults.v1.CrossChainConfig.enabled":
		panic(fmt.Errorf("field enabled of message noble.dollar.vaults.v1.CrossChainConfig is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.dollar.vaults.v1.CrossChainConfig"))
		}
		panic(fmt.Errorf("message noble.dollar.vaults.v1.CrossChainConfig does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_CrossChainConfig) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "noble.dollar.vaults.v1.CrossChainConfig.global_haircut":
		return protoreflect.ValueOfInt32(int32(0))
	case "noble.dollar.vaults.v1.CrossChainConfig.max_remote_exposure":
		return protoreflect.ValueOfInt32(int32(0))
	case "noble.dollar.vaults.v1.CrossChainConfig.default_timeout":
		return protoreflect.ValueOfInt64(int64(0))
	case "noble.dollar.vaults.v1.CrossChainConfig.update_frequency":
		return protoreflect.ValueOfInt64(int64(0))
	case "noble.dollar.vaults.v1.CrossChainConfig.emergency_liquidation_threshold":
		return protoreflect.ValueOfInt32(int32(0))
	case "noble.dollar.vaults.v1.CrossChainConfig.enabled":
		return protoreflect.ValueOfBool(false)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.dollar.vaults.v1.CrossChainConfig"))
		}
		panic(fmt.Errorf("message noble.dollar.vaults.v1.CrossChainConfig does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_CrossChainConfig) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in noble.dollar.vaults.v1.CrossChainConfig", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_CrossChainConfig) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_CrossChainConfig) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_CrossChainConfig) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_CrossChainConfig) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*CrossChainConfig)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.GlobalHaircut != 0 {
			n += 1 + runtime.Sov(uint64(x.GlobalHaircut))
		}
		if x.MaxRemoteExposure != 0 {
			n += 1 + runtime.Sov(uint64(x.MaxRemoteExposure))
		}
		if x.DefaultTimeout != 0 {
			n += 1 + runtime.Sov(uint64(x.DefaultTimeout))
		}
		if x.UpdateFrequency != 0 {
			n += 1 + runtime.Sov(uint64(x.UpdateFrequency))
		}
		if x.EmergencyLiquidationThreshold != 0 {
			n += 1 + runtime.Sov(uint64(x.EmergencyLiquidationThreshold))
		}
		if x.Enabled {
			n += 2
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*CrossChainConfig)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.Enabled {
			i--
			if x.Enabled {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x30
		}
		if x.EmergencyLiquidationThreshold != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.EmergencyLiquidationThreshold))
			i--
			dAtA[i] = 0x28
		}
		if x.UpdateFrequency != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.UpdateFrequency))
			i--
			dAtA[i] = 0x20
		}
		if x.DefaultTimeout != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.DefaultTimeout))
			i--
			dAtA[i] = 0x18
		}
		if x.MaxRemoteExposure != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.MaxRemoteExposure))
			i--
			dAtA[i] = 0x10
		}
		if x.GlobalHaircut != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.GlobalHaircut))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*CrossChainConfig)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: CrossChainConfig: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: CrossChainConfig: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field GlobalHaircut", wireType)
				}
				x.GlobalHaircut = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.GlobalHaircut |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MaxRemoteExposure", wireType)
				}
				x.MaxRemoteExposure = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.MaxRemoteExposure |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 3:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field DefaultTimeout", wireType)
				}
				x.DefaultTimeout = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.DefaultTimeout |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 4:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field UpdateFrequency", wireType)
				}
				x.UpdateFrequency = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.UpdateFrequency |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 5:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field EmergencyLiquidationThreshold", wireType)
				}
				x.EmergencyLiquidationThreshold = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.EmergencyLiquidationThreshold |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 6:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
				}
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				x.Enabled = bool(v != 0)
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: noble/dollar/vaults/v1/cross_chain.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// RemotePositionStatus represents the status of a remote position
type RemotePositionStatus int32

const (
	// Position is active and being tracked
	RemotePositionStatus_REMOTE_POSITION_ACTIVE RemotePositionStatus = 0
	// Position update is pending
	RemotePositionStatus_REMOTE_POSITION_PENDING_UPDATE RemotePositionStatus = 1
	// Position has exceeded drift limits
	RemotePositionStatus_REMOTE_POSITION_DRIFT_EXCEEDED RemotePositionStatus = 2
	// Position is being liquidated
	RemotePositionStatus_REMOTE_POSITION_LIQUIDATING RemotePositionStatus = 3
	// Position has been closed
	RemotePositionStatus_REMOTE_POSITION_CLOSED RemotePositionStatus = 4
	// Position is in error state
	RemotePositionStatus_REMOTE_POSITION_ERROR RemotePositionStatus = 5
)

// Enum value maps for RemotePositionStatus.
var (
	RemotePositionStatus_name = map[int32]string{
		0: "REMOTE_POSITION_ACTIVE",
		1: "REMOTE_POSITION_PENDING_UPDATE",
		2: "REMOTE_POSITION_DRIFT_EXCEEDED",
		3: "REMOTE_POSITION_LIQUIDATING",
		4: "REMOTE_POSITION_CLOSED",
		5: "REMOTE_POSITION_ERROR",
	}
	RemotePositionStatus_value = map[string]int32{
		"REMOTE_POSITION_ACTIVE":         0,
		"REMOTE_POSITION_PENDING_UPDATE": 1,
		"REMOTE_POSITION_DRIFT_EXCEEDED": 2,
		"REMOTE_POSITION_LIQUIDATING":    3,
		"REMOTE_POSITION_CLOSED":         4,
		"REMOTE_POSITION_ERROR":          5,
	}
)

func (x RemotePositionStatus) Enum() *RemotePositionStatus {
	p := new(RemotePositionStatus)
	*p = x
	return p
}

func (x RemotePositionStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RemotePositionStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_noble_dollar_vaults_v1_cross_chain_proto_enumTypes[0].Descriptor()
}

func (RemotePositionStatus) Type() protoreflect.EnumType {
	return &file_noble_dollar_vaults_v1_cross_chain_proto_enumTypes[0]
}

func (x RemotePositionStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RemotePositionStatus.Descriptor instead.
func (RemotePositionStatus) EnumDescriptor() ([]byte, []int) {
	return file_noble_dollar_vaults_v1_cross_chain_proto_rawDescGZIP(), []int{0}
}

// InFlightOperationType defines the type of cross-chain operation
type InFlightOperationType int32

const (
	// Position deposit to remote chain
	InFlightOperationType_OPERATION_REMOTE_DEPOSIT InFlightOperationType = 0
	// Position withdrawal from remote chain
	InFlightOperationType_OPERATION_REMOTE_WITHDRAW InFlightOperationType = 1
	// Position rebalancing
	InFlightOperationType_OPERATION_REBALANCE InFlightOperationType = 2
	// Position liquidation
	InFlightOperationType_OPERATION_LIQUIDATE InFlightOperationType = 3
)

// Enum value maps for InFlightOperationType.
var (
	InFlightOperationType_name = map[int32]string{
		0: "OPERATION_REMOTE_DEPOSIT",
		1: "OPERATION_REMOTE_WITHDRAW",
		2: "OPERATION_REBALANCE",
		3: "OPERATION_LIQUIDATE",
	}
	InFlightOperationType_value = map[string]int32{
		"OPERATION_REMOTE_DEPOSIT":  0,
		"OPERATION_REMOTE_WITHDRAW": 1,
		"OPERATION_REBALANCE":       2,
		"OPERATION_LIQUIDATE":       3,
	}
)

func (x InFlightOperationType) Enum() *InFlightOperationType {
	p := new(InFlightOperationType)
	*p = x
	return p
}

func (x InFlightOperationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InFlightOperationType) Descriptor() protoreflect.EnumDescriptor {
	return file_noble_dollar_vaults_v1_cross_chain_proto_enumTypes[1].Descriptor()
}

func (InFlightOperationType) Type() protoreflect.EnumType {
	return &file_noble_dollar_vaults_v1_cross_chain_proto_enumTypes[1]
}

func (x InFlightOperationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InFlightOperationType.Descriptor instead.
func (InFlightOperationType) EnumDescriptor() ([]byte, []int) {
	return file_noble_dollar_vaults_v1_cross_chain_proto_rawDescGZIP(), []int{1}
}

// InFlightStatus represents the status of an in-flight operation
type InFlightStatus int32

const (
	// Operation is pending
	InFlightStatus_INFLIGHT_PENDING InFlightStatus = 0
	// Operation is being processed
	InFlightStatus_INFLIGHT_PROCESSING InFlightStatus = 1
	// Operation completed successfully
	InFlightStatus_INFLIGHT_COMPLETED InFlightStatus = 2
	// Operation failed
	InFlightStatus_INFLIGHT_FAILED InFlightStatus = 3
	// Operation timed out
	InFlightStatus_INFLIGHT_TIMEOUT InFlightStatus = 4
	// Operation was cancelled
	InFlightStatus_INFLIGHT_CANCELLED InFlightStatus = 5
)

// Enum value maps for InFlightStatus.
var (
	InFlightStatus_name = map[int32]string{
		0: "INFLIGHT_PENDING",
		1: "INFLIGHT_PROCESSING",
		2: "INFLIGHT_COMPLETED",
		3: "INFLIGHT_FAILED",
		4: "INFLIGHT_TIMEOUT",
		5: "INFLIGHT_CANCELLED",
	}
	InFlightStatus_value = map[string]int32{
		"INFLIGHT_PENDING":    0,
		"INFLIGHT_PROCESSING": 1,
		"INFLIGHT_COMPLETED":  2,
		"INFLIGHT_FAILED":     3,
		"INFLIGHT_TIMEOUT":    4,
		"INFLIGHT_CANCELLED":  5,
	}
)

func (x InFlightStatus) Enum() *InFlightStatus {
	p := new(InFlightStatus)
	*p = x
	return p
}

func (x InFlightStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InFlightStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_noble_dollar_vaults_v1_cross_chain_proto_enumTypes[2].Descriptor()
}

func (InFlightStatus) Type() protoreflect.EnumType {
	return &file_noble_dollar_vaults_v1_cross_chain_proto_enumTypes[2]
}

func (x InFlightStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InFlightStatus.Descriptor instead.
func (InFlightStatus) EnumDescriptor() ([]byte, []int) {
	return file_noble_dollar_vaults_v1_cross_chain_proto_rawDescGZIP(), []int{2}
}

// CrossChainRoute defines a route for cross-chain operations
type CrossChainRoute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier for the route
	RouteId string `protobuf:"bytes,1,opt,name=route_id,json=routeId,proto3" json:"route_id,omitempty"`
	// Source chain identifier
	SourceChain string `protobuf:"bytes,2,opt,name=source_chain,json=sourceChain,proto3" json:"source_chain,omitempty"`
	// Destination chain identifier
	DestinationChain string `protobuf:"bytes,3,opt,name=destination_chain,json=destinationChain,proto3" json:"destination_chain,omitempty"`
	// IBC channel for communication
	IbcChannel string `protobuf:"bytes,4,opt,name=ibc_channel,json=ibcChannel,proto3" json:"ibc_channel,omitempty"`
	// Whether this route is active
	Active bool `protobuf:"varint,5,opt,name=active,proto3" json:"active,omitempty"`
	// Maximum position value allowed for this route
	MaxPositionValue string `protobuf:"bytes,6,opt,name=max_position_value,json=maxPositionValue,proto3" json:"max_position_value,omitempty"`
	// Risk parameters for this route
	RiskParams *CrossChainRiskParams `protobuf:"bytes,7,opt,name=risk_params,json=riskParams,proto3" json:"risk_params,omitempty"`
}

func (x *CrossChainRoute) Reset() {
	*x = CrossChainRoute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_noble_dollar_vaults_v1_cross_chain_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrossChainRoute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrossChainRoute) ProtoMessage() {}

// Deprecated: Use CrossChainRoute.ProtoReflect.Descriptor instead.
func (*CrossChainRoute) Descriptor() ([]byte, []int) {
	return file_noble_dollar_vaults_v1_cross_chain_proto_rawDescGZIP(), []int{0}
}

func (x *CrossChainRoute) GetRouteId() string {
	if x != nil {
		return x.RouteId
	}
	return ""
}

func (x *CrossChainRoute) GetSourceChain() string {
	if x != nil {
		return x.SourceChain
	}
	return ""
}

func (x *CrossChainRoute) GetDestinationChain() string {
	if x != nil {
		return x.DestinationChain
	}
	return ""
}

func (x *CrossChainRoute) GetIbcChannel() string {
	if x != nil {
		return x.IbcChannel
	}
	return ""
}

func (x *CrossChainRoute) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

func (x *CrossChainRoute) GetMaxPositionValue() string {
	if x != nil {
		return x.MaxPositionValue
	}
	return ""
}

func (x *CrossChainRoute) GetRiskParams() *CrossChainRiskParams {
	if x != nil {
		return x.RiskParams
	}
	return nil
}

// CrossChainRiskParams defines risk management parameters for cross-chain operations
type CrossChainRiskParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Haircut percentage applied to remote positions (basis points)
	PositionHaircut int32 `protobuf:"varint,1,opt,name=position_haircut,json=positionHaircut,proto3" json:"position_haircut,omitempty"`
	// Maximum drift allowed before position revaluation (basis points)
	MaxDriftThreshold int32 `protobuf:"varint,2,opt,name=max_drift_threshold,json=maxDriftThreshold,proto3" json:"max_drift_threshold,omitempty"`
	// Timeout for cross-chain operations (seconds)
	OperationTimeout int64 `protobuf:"varint,3,opt,name=operation_timeout,json=operationTimeout,proto3" json:"operation_timeout,omitempty"`
	// Maximum number of retries for failed operations
	MaxRetries int32 `protobuf:"varint,4,opt,name=max_retries,json=maxRetries,proto3" json:"max_retries,omitempty"`
	// Conservative valuation discount (basis points)
	ConservativeDiscount int32 `protobuf:"varint,5,opt,name=conservative_discount,json=conservativeDiscount,proto3" json:"conservative_discount,omitempty"`
}

func (x *CrossChainRiskParams) Reset() {
	*x = CrossChainRiskParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_noble_dollar_vaults_v1_cross_chain_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrossChainRiskParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrossChainRiskParams) ProtoMessage() {}

// Deprecated: Use CrossChainRiskParams.ProtoReflect.Descriptor instead.
func (*CrossChainRiskParams) Descriptor() ([]byte, []int) {
	return file_noble_dollar_vaults_v1_cross_chain_proto_rawDescGZIP(), []int{1}
}

func (x *CrossChainRiskParams) GetPositionHaircut() int32 {
	if x != nil {
		return x.PositionHaircut
	}
	return 0
}

func (x *CrossChainRiskParams) GetMaxDriftThreshold() int32 {
	if x != nil {
		return x.MaxDriftThreshold
	}
	return 0
}

func (x *CrossChainRiskParams) GetOperationTimeout() int64 {
	if x != nil {
		return x.OperationTimeout
	}
	return 0
}

func (x *CrossChainRiskParams) GetMaxRetries() int32 {
	if x != nil {
		return x.MaxRetries
	}
	return 0
}

func (x *CrossChainRiskParams) GetConservativeDiscount() int32 {
	if x != nil {
		return x.ConservativeDiscount
	}
	return 0
}

// RemotePosition represents a position on another chain
type RemotePosition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Route used for this position
	RouteId string `protobuf:"bytes,1,opt,name=route_id,json=routeId,proto3" json:"route_id,omitempty"`
	// User address on the remote chain
	RemoteAddress string `protobuf:"bytes,2,opt,name=remote_address,json=remoteAddress,proto3" json:"remote_address,omitempty"`
	// Local user address (Noble chain)
	LocalAddress []byte `protobuf:"bytes,3,opt,name=local_address,json=localAddress,proto3" json:"local_address,omitempty"`
	// Position value on remote chain
	RemoteValue string `protobuf:"bytes,4,opt,name=remote_value,json=remoteValue,proto3" json:"remote_value,omitempty"`
	// Conservative valuation (with haircut applied)
	ConservativeValue string `protobuf:"bytes,5,opt,name=conservative_value,json=conservativeValue,proto3" json:"conservative_value,omitempty"`
	// Last update timestamp
	LastUpdate *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=last_update,json=lastUpdate,proto3" json:"last_update,omitempty"`
	// Current drift from expected value (basis points)
	CurrentDrift int32 `protobuf:"varint,7,opt,name=current_drift,json=currentDrift,proto3" json:"current_drift,omitempty"`
	// Position status
	Status RemotePositionStatus `protobuf:"varint,8,opt,name=status,proto3,enum=noble.dollar.vaults.v1.RemotePositionStatus" json:"status,omitempty"`
	// Shares allocated for this remote position
	AllocatedShares string `protobuf:"bytes,9,opt,name=allocated_shares,json=allocatedShares,proto3" json:"allocated_shares,omitempty"`
}

func (x *RemotePosition) Reset() {
	*x = RemotePosition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_noble_dollar_vaults_v1_cross_chain_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemotePosition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemotePosition) ProtoMessage() {}

// Deprecated: Use RemotePosition.ProtoReflect.Descriptor instead.
func (*RemotePosition) Descriptor() ([]byte, []int) {
	return file_noble_dollar_vaults_v1_cross_chain_proto_rawDescGZIP(), []int{2}
}

func (x *RemotePosition) GetRouteId() string {
	if x != nil {
		return x.RouteId
	}
	return ""
}

func (x *RemotePosition) GetRemoteAddress() string {
	if x != nil {
		return x.RemoteAddress
	}
	return ""
}

func (x *RemotePosition) GetLocalAddress() []byte {
	if x != nil {
		return x.LocalAddress
	}
	return nil
}

func (x *RemotePosition) GetRemoteValue() string {
	if x != nil {
		return x.RemoteValue
	}
	return ""
}

func (x *RemotePosition) GetConservativeValue() string {
	if x != nil {
		return x.ConservativeValue
	}
	return ""
}

func (x *RemotePosition) GetLastUpdate() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdate
	}
	return nil
}

func (x *RemotePosition) GetCurrentDrift() int32 {
	if x != nil {
		return x.CurrentDrift
	}
	return 0
}

func (x *RemotePosition) GetStatus() RemotePositionStatus {
	if x != nil {
		return x.Status
	}
	return RemotePositionStatus_REMOTE_POSITION_ACTIVE
}

func (x *RemotePosition) GetAllocatedShares() string {
	if x != nil {
		return x.AllocatedShares
	}
	return ""
}

// InFlightPosition represents a position operation in progress
type InFlightPosition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique nonce for this operation
	Nonce uint64 `protobuf:"varint,1,opt,name=nonce,proto3" json:"nonce,omitempty"`
	// Route being used
	RouteId string `protobuf:"bytes,2,opt,name=route_id,json=routeId,proto3" json:"route_id,omitempty"`
	// Local user address
	UserAddress []byte `protobuf:"bytes,3,opt,name=user_address,json=userAddress,proto3" json:"user_address,omitempty"`
	// Operation type
	OperationType InFlightOperationType `protobuf:"varint,4,opt,name=operation_type,json=operationType,proto3,enum=noble.dollar.vaults.v1.InFlightOperationType" json:"operation_type,omitempty"`
	// Amount involved in the operation
	Amount string `protobuf:"bytes,5,opt,name=amount,proto3" json:"amount,omitempty"`
	// Shares involved (for withdrawals)
	Shares string `protobuf:"bytes,6,opt,name=shares,proto3" json:"shares,omitempty"`
	// Operation initiated timestamp
	InitiatedAt *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=initiated_at,json=initiatedAt,proto3" json:"initiated_at,omitempty"`
	// Expected completion timestamp
	ExpectedCompletion *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=expected_completion,json=expectedCompletion,proto3" json:"expected_completion,omitempty"`
	// Current retry count
	RetryCount int32 `protobuf:"varint,9,opt,name=retry_count,json=retryCount,proto3" json:"retry_count,omitempty"`
	// Operation status
	Status InFlightStatus `protobuf:"varint,10,opt,name=status,proto3,enum=noble.dollar.vaults.v1.InFlightStatus" json:"status,omitempty"`
	// Error message if operation failed
	ErrorMessage string `protobuf:"bytes,11,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
}

func (x *InFlightPosition) Reset() {
	*x = InFlightPosition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_noble_dollar_vaults_v1_cross_chain_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InFlightPosition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InFlightPosition) ProtoMessage() {}

// Deprecated: Use InFlightPosition.ProtoReflect.Descriptor instead.
func (*InFlightPosition) Descriptor() ([]byte, []int) {
	return file_noble_dollar_vaults_v1_cross_chain_proto_rawDescGZIP(), []int{3}
}

func (x *InFlightPosition) GetNonce() uint64 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

func (x *InFlightPosition) GetRouteId() string {
	if x != nil {
		return x.RouteId
	}
	return ""
}

func (x *InFlightPosition) GetUserAddress() []byte {
	if x != nil {
		return x.UserAddress
	}
	return nil
}

func (x *InFlightPosition) GetOperationType() InFlightOperationType {
	if x != nil {
		return x.OperationType
	}
	return InFlightOperationType_OPERATION_REMOTE_DEPOSIT
}

func (x *InFlightPosition) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *InFlightPosition) GetShares() string {
	if x != nil {
		return x.Shares
	}
	return ""
}

func (x *InFlightPosition) GetInitiatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.InitiatedAt
	}
	return nil
}

func (x *InFlightPosition) GetExpectedCompletion() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpectedCompletion
	}
	return nil
}

func (x *InFlightPosition) GetRetryCount() int32 {
	if x != nil {
		return x.RetryCount
	}
	return 0
}

func (x *InFlightPosition) GetStatus() InFlightStatus {
	if x != nil {
		return x.Status
	}
	return InFlightStatus_INFLIGHT_PENDING
}

func (x *InFlightPosition) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

// CrossChainPositionSnapshot provides a snapshot of all cross-chain positions
type CrossChainPositionSnapshot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Total remote value (sum of all remote positions)
	TotalRemoteValue string `protobuf:"bytes,1,opt,name=total_remote_value,json=totalRemoteValue,proto3" json:"total_remote_value,omitempty"`
	// Total conservative value (with haircuts applied)
	TotalConservativeValue string `protobuf:"bytes,2,opt,name=total_conservative_value,json=totalConservativeValue,proto3" json:"total_conservative_value,omitempty"`
	// Number of active remote positions
	ActivePositions int64 `protobuf:"varint,3,opt,name=active_positions,json=activePositions,proto3" json:"active_positions,omitempty"`
	// Number of positions with drift issues
	DriftExceededPositions int64 `protobuf:"varint,4,opt,name=drift_exceeded_positions,json=driftExceededPositions,proto3" json:"drift_exceeded_positions,omitempty"`
	// Snapshot timestamp
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Total shares allocated to remote positions
	TotalRemoteShares string `protobuf:"bytes,6,opt,name=total_remote_shares,json=totalRemoteShares,proto3" json:"total_remote_shares,omitempty"`
}

func (x *CrossChainPositionSnapshot) Reset() {
	*x = CrossChainPositionSnapshot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_noble_dollar_vaults_v1_cross_chain_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrossChainPositionSnapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrossChainPositionSnapshot) ProtoMessage() {}

// Deprecated: Use CrossChainPositionSnapshot.ProtoReflect.Descriptor instead.
func (*CrossChainPositionSnapshot) Descriptor() ([]byte, []int) {
	return file_noble_dollar_vaults_v1_cross_chain_proto_rawDescGZIP(), []int{4}
}

func (x *CrossChainPositionSnapshot) GetTotalRemoteValue() string {
	if x != nil {
		return x.TotalRemoteValue
	}
	return ""
}

func (x *CrossChainPositionSnapshot) GetTotalConservativeValue() string {
	if x != nil {
		return x.TotalConservativeValue
	}
	return ""
}

func (x *CrossChainPositionSnapshot) GetActivePositions() int64 {
	if x != nil {
		return x.ActivePositions
	}
	return 0
}

func (x *CrossChainPositionSnapshot) GetDriftExceededPositions() int64 {
	if x != nil {
		return x.DriftExceededPositions
	}
	return 0
}

func (x *CrossChainPositionSnapshot) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *CrossChainPositionSnapshot) GetTotalRemoteShares() string {
	if x != nil {
		return x.TotalRemoteShares
	}
	return ""
}

// DriftAlert represents an alert when a position exceeds drift limits
type DriftAlert struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Position route ID
	RouteId string `protobuf:"bytes,1,opt,name=route_id,json=routeId,proto3" json:"route_id,omitempty"`
	// User address
	UserAddress []byte `protobuf:"bytes,2,opt,name=user_address,json=userAddress,proto3" json:"user_address,omitempty"`
	// Current drift percentage (basis points)
	CurrentDrift int32 `protobuf:"varint,3,opt,name=current_drift,json=currentDrift,proto3" json:"current_drift,omitempty"`
	// Threshold that was exceeded (basis points)
	ThresholdExceeded int32 `protobuf:"varint,4,opt,name=threshold_exceeded,json=thresholdExceeded,proto3" json:"threshold_exceeded,omitempty"`
	// Alert timestamp
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Recommended action
	RecommendedAction string `protobuf:"bytes,6,opt,name=recommended_action,json=recommendedAction,proto3" json:"recommended_action,omitempty"`
}

func (x *DriftAlert) Reset() {
	*x = DriftAlert{}
	if protoimpl.UnsafeEnabled {
		mi := &file_noble_dollar_vaults_v1_cross_chain_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DriftAlert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DriftAlert) ProtoMessage() {}

// Deprecated: Use DriftAlert.ProtoReflect.Descriptor instead.
func (*DriftAlert) Descriptor() ([]byte, []int) {
	return file_noble_dollar_vaults_v1_cross_chain_proto_rawDescGZIP(), []int{5}
}

func (x *DriftAlert) GetRouteId() string {
	if x != nil {
		return x.RouteId
	}
	return ""
}

func (x *DriftAlert) GetUserAddress() []byte {
	if x != nil {
		return x.UserAddress
	}
	return nil
}

func (x *DriftAlert) GetCurrentDrift() int32 {
	if x != nil {
		return x.CurrentDrift
	}
	return 0
}

func (x *DriftAlert) GetThresholdExceeded() int32 {
	if x != nil {
		return x.ThresholdExceeded
	}
	return 0
}

func (x *DriftAlert) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *DriftAlert) GetRecommendedAction() string {
	if x != nil {
		return x.RecommendedAction
	}
	return ""
}

// CrossChainConfig defines global configuration for cross-chain operations
type CrossChainConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Global position haircut (basis points)
	GlobalHaircut int32 `protobuf:"varint,1,opt,name=global_haircut,json=globalHaircut,proto3" json:"global_haircut,omitempty"`
	// Maximum total remote position value as percentage of vault (basis points)
	MaxRemoteExposure int32 `protobuf:"varint,2,opt,name=max_remote_exposure,json=maxRemoteExposure,proto3" json:"max_remote_exposure,omitempty"`
	// Default operation timeout (seconds)
	DefaultTimeout int64 `protobuf:"varint,3,opt,name=default_timeout,json=defaultTimeout,proto3" json:"default_timeout,omitempty"`
	// Position update frequency (seconds)
	UpdateFrequency int64 `protobuf:"varint,4,opt,name=update_frequency,json=updateFrequency,proto3" json:"update_frequency,omitempty"`
	// Emergency liquidation threshold (basis points)
	EmergencyLiquidationThreshold int32 `protobuf:"varint,5,opt,name=emergency_liquidation_threshold,json=emergencyLiquidationThreshold,proto3" json:"emergency_liquidation_threshold,omitempty"`
	// Whether cross-chain operations are enabled
	Enabled bool `protobuf:"varint,6,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (x *CrossChainConfig) Reset() {
	*x = CrossChainConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_noble_dollar_vaults_v1_cross_chain_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrossChainConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrossChainConfig) ProtoMessage() {}

// Deprecated: Use CrossChainConfig.ProtoReflect.Descriptor instead.
func (*CrossChainConfig) Descriptor() ([]byte, []int) {
	return file_noble_dollar_vaults_v1_cross_chain_proto_rawDescGZIP(), []int{6}
}

func (x *CrossChainConfig) GetGlobalHaircut() int32 {
	if x != nil {
		return x.GlobalHaircut
	}
	return 0
}

func (x *CrossChainConfig) GetMaxRemoteExposure() int32 {
	if x != nil {
		return x.MaxRemoteExposure
	}
	return 0
}

func (x *CrossChainConfig) GetDefaultTimeout() int64 {
	if x != nil {
		return x.DefaultTimeout
	}
	return 0
}

func (x *CrossChainConfig) GetUpdateFrequency() int64 {
	if x != nil {
		return x.UpdateFrequency
	}
	return 0
}

func (x *CrossChainConfig) GetEmergencyLiquidationThreshold() int32 {
	if x != nil {
		return x.EmergencyLiquidationThreshold
	}
	return 0
}

func (x *CrossChainConfig) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

var File_noble_dollar_vaults_v1_cross_chain_proto protoreflect.FileDescriptor

var file_noble_dollar_vaults_v1_cross_chain_proto_rawDesc = []byte{
	0x0a, 0x28, 0x6e, 0x6f, 0x62, 0x6c, 0x65, 0x2f, 0x64, 0x6f, 0x6c, 0x6c, 0x61, 0x72, 0x2f, 0x76,
	0x61, 0x75, 0x6c, 0x74, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x5f, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x16, 0x6e, 0x6f, 0x62, 0x6c,
	0x65, 0x2e, 0x64, 0x6f, 0x6c, 0x6c, 0x61, 0x72, 0x2e, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x2e,
	0x76, 0x31, 0x1a, 0x11, 0x61, 0x6d, 0x69, 0x6e, 0x6f, 0x2f, 0x61, 0x6d, 0x69, 0x6e, 0x6f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x5f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x14, 0x67, 0x6f, 0x67, 0x6f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x67, 0x6f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe4, 0x02, 0x0a, 0x0f, 0x43, 0x72, 0x6f, 0x73,
	0x73, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x2b, 0x0a, 0x11, 0x64, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x62, 0x63, 0x5f, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x62, 0x63,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12,
	0x5e, 0x0a, 0x12, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x30, 0xc8, 0xde, 0x1f,
	0x00, 0xda, 0xde, 0x1f, 0x15, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69,
	0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x49, 0x6e, 0x74, 0xd2, 0xb4, 0x2d, 0x0a, 0x63, 0x6f,
	0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0xa8, 0xe7, 0xb0, 0x2a, 0x01, 0x52, 0x10, 0x6d,
	0x61, 0x78, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x4d, 0x0a, 0x0b, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6e, 0x6f, 0x62, 0x6c, 0x65, 0x2e, 0x64, 0x6f, 0x6c,
	0x6c, 0x61, 0x72, 0x2e, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72,
	0x6f, 0x73, 0x73, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x52, 0x69, 0x73, 0x6b, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x52, 0x0a, 0x72, 0x69, 0x73, 0x6b, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0xf4,
	0x01, 0x0a, 0x14, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x52, 0x69, 0x73,
	0x6b, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x68, 0x61, 0x69, 0x72, 0x63, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x69, 0x72, 0x63,
	0x75, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x6d, 0x61, 0x78, 0x5f, 0x64, 0x72, 0x69, 0x66, 0x74, 0x5f,
	0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x11, 0x6d, 0x61, 0x78, 0x44, 0x72, 0x69, 0x66, 0x74, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12,
	0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73,
	0x12, 0x33, 0x0a, 0x15, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x14, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x76, 0x65, 0x44, 0x69, 0x73,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xbc, 0x04, 0x0a, 0x0e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0c, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x53, 0x0a, 0x0c, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x30, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x15, 0x63,
	0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68,
	0x2e, 0x49, 0x6e, 0x74, 0xd2, 0xb4, 0x2d, 0x0a, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x49,
	0x6e, 0x74, 0xa8, 0xe7, 0xb0, 0x2a, 0x01, 0x52, 0x0b, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x5f, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x30, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x15, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73,
	0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x49, 0x6e, 0x74, 0xd2,
	0xb4, 0x2d, 0x0a, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0xa8, 0xe7, 0xb0,
	0x2a, 0x01, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x45, 0x0a, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x08, 0xc8, 0xde, 0x1f, 0x00, 0x90, 0xdf, 0x1f, 0x01,
	0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x72, 0x69, 0x66, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x44, 0x72, 0x69, 0x66,
	0x74, 0x12, 0x44, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2c, 0x2e, 0x6e, 0x6f, 0x62, 0x6c, 0x65, 0x2e, 0x64, 0x6f, 0x6c, 0x6c, 0x61, 0x72,
	0x2e, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x5b, 0x0a, 0x10, 0x61, 0x6c, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x30, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x15, 0x63, 0x6f, 0x73, 0x6d, 0x6f,
	0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x49, 0x6e, 0x74,
	0xd2, 0xb4, 0x2d, 0x0a, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0xa8, 0xe7,
	0xb0, 0x2a, 0x01, 0x52, 0x0f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x73, 0x22, 0xf6, 0x04, 0x0a, 0x10, 0x49, 0x6e, 0x46, 0x6c, 0x69, 0x67, 0x68,
	0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e,
	0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x54, 0x0a,
	0x0e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x6e, 0x6f, 0x62, 0x6c, 0x65, 0x2e, 0x64, 0x6f,
	0x6c, 0x6c, 0x61, 0x72, 0x2e, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49,
	0x6e, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x48, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x30, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x15, 0x63, 0x6f, 0x73,
	0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x49,
	0x6e, 0x74, 0xd2, 0xb4, 0x2d, 0x0a, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x49, 0x6e, 0x74,
	0xa8, 0xe7, 0xb0, 0x2a, 0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x48, 0x0a,
	0x06, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x30, 0xc8,
	0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x15, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b,
	0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x49, 0x6e, 0x74, 0xd2, 0xb4, 0x2d, 0x0a,
	0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0xa8, 0xe7, 0xb0, 0x2a, 0x01, 0x52,
	0x06, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x12, 0x47, 0x0a, 0x0c, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x08, 0xc8, 0xde, 0x1f, 0x00, 0x90,
	0xdf, 0x1f, 0x01, 0x52, 0x0b, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x55, 0x0a, 0x13, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x08, 0xc8, 0xde, 0x1f, 0x00, 0x90,
	0xdf, 0x1f, 0x01, 0x52, 0x12, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x74, 0x72, 0x79,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x72, 0x65,
	0x74, 0x72, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3e, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x6e, 0x6f, 0x62, 0x6c, 0x65,
	0x2e, 0x64, 0x6f, 0x6c, 0x6c, 0x61, 0x72, 0x2e, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x49, 0x6e, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xf3, 0x03,
	0x0a, 0x1a, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x5e, 0x0a, 0x12,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x30, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde,
	0x1f, 0x15, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d,
	0x61, 0x74, 0x68, 0x2e, 0x49, 0x6e, 0x74, 0xd2, 0xb4, 0x2d, 0x0a, 0x63, 0x6f, 0x73, 0x6d, 0x6f,
	0x73, 0x2e, 0x49, 0x6e, 0x74, 0xa8, 0xe7, 0xb0, 0x2a, 0x01, 0x52, 0x10, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x6a, 0x0a, 0x18,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x30,
	0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x15, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64,
	0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x49, 0x6e, 0x74, 0xd2, 0xb4, 0x2d,
	0x0a, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0xa8, 0xe7, 0xb0, 0x2a, 0x01,
	0x52, 0x16, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x38, 0x0a, 0x18, 0x64, 0x72, 0x69, 0x66, 0x74, 0x5f, 0x65, 0x78, 0x63,
	0x65, 0x65, 0x64, 0x65, 0x64, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x64, 0x72, 0x69, 0x66, 0x74, 0x45, 0x78, 0x63, 0x65,
	0x65, 0x64, 0x65, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x42, 0x0a,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x08, 0xc8, 0xde,
	0x1f, 0x00, 0x90, 0xdf, 0x1f, 0x01, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x60, 0x0a, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x30,
	0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x15, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64,
	0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x49, 0x6e, 0x74, 0xd2, 0xb4, 0x2d,
	0x0a, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0xa8, 0xe7, 0xb0, 0x2a, 0x01,
	0x52, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x73, 0x22, 0x91, 0x02, 0x0a, 0x0a, 0x44, 0x72, 0x69, 0x66, 0x74, 0x41, 0x6c, 0x65,
	0x72, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x49, 0x64, 0x12, 0x21, 0x0a,
	0x0c, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x72, 0x69, 0x66,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x44, 0x72, 0x69, 0x66, 0x74, 0x12, 0x2d, 0x0a, 0x12, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x5f, 0x65, 0x78, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x11, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x45, 0x78, 0x63, 0x65,
	0x65, 0x64, 0x65, 0x64, 0x12, 0x42, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x42, 0x08, 0xc8, 0xde, 0x1f, 0x00, 0x90, 0xdf, 0x1f, 0x01, 0x52, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x2d, 0x0a, 0x12, 0x72, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65,
	0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x9f, 0x02, 0x0a, 0x10, 0x43, 0x72, 0x6f, 0x73,
	0x73, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x25, 0x0a, 0x0e,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x68, 0x61, 0x69, 0x72, 0x63, 0x75, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x48, 0x61, 0x69, 0x72,
	0x63, 0x75, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x11, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x45, 0x78, 0x70, 0x6f, 0x73,
	0x75, 0x72, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x29, 0x0a, 0x10,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x46, 0x0a, 0x1f, 0x65, 0x6d, 0x65, 0x72, 0x67,
	0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x1d, 0x65, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x4c, 0x69, 0x71, 0x75, 0x69,
	0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x2a, 0xd8, 0x01, 0x0a, 0x14, 0x52, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x1a, 0x0a, 0x16, 0x52, 0x45, 0x4d, 0x4f, 0x54, 0x45, 0x5f, 0x50, 0x4f, 0x53,
	0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x00, 0x12, 0x22,
	0x0a, 0x1e, 0x52, 0x45, 0x4d, 0x4f, 0x54, 0x45, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45,
	0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x52, 0x45, 0x4d, 0x4f, 0x54, 0x45, 0x5f, 0x50, 0x4f, 0x53,
	0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x52, 0x49, 0x46, 0x54, 0x5f, 0x45, 0x58, 0x43, 0x45,
	0x45, 0x44, 0x45, 0x44, 0x10, 0x02, 0x12, 0x1f, 0x0a, 0x1b, 0x52, 0x45, 0x4d, 0x4f, 0x54, 0x45,
	0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x49, 0x51, 0x55, 0x49, 0x44,
	0x41, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16, 0x52, 0x45, 0x4d, 0x4f, 0x54,
	0x45, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45,
	0x44, 0x10, 0x04, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x45, 0x4d, 0x4f, 0x54, 0x45, 0x5f, 0x50, 0x4f,
	0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x05, 0x1a, 0x04,
	0x88, 0xa3, 0x1e, 0x00, 0x2a, 0x8c, 0x01, 0x0a, 0x15, 0x49, 0x6e, 0x46, 0x6c, 0x69, 0x67, 0x68,
	0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c,
	0x0a, 0x18, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x4d, 0x4f,
	0x54, 0x45, 0x5f, 0x44, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19,
	0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x54, 0x45,
	0x5f, 0x57, 0x49, 0x54, 0x48, 0x44, 0x52, 0x41, 0x57, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x4f,
	0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x42, 0x41, 0x4c, 0x41, 0x4e,
	0x43, 0x45, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x4c, 0x49, 0x51, 0x55, 0x49, 0x44, 0x41, 0x54, 0x45, 0x10, 0x03, 0x1a, 0x04, 0x88,
	0xa3, 0x1e, 0x00, 0x2a, 0xa0, 0x01, 0x0a, 0x0e, 0x49, 0x6e, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x10, 0x49, 0x4e, 0x46, 0x4c, 0x49, 0x47,
	0x48, 0x54, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13,
	0x49, 0x4e, 0x46, 0x4c, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53,
	0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x49, 0x4e, 0x46, 0x4c, 0x49, 0x47, 0x48,
	0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x13, 0x0a,
	0x0f, 0x49, 0x4e, 0x46, 0x4c, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44,
	0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x49, 0x4e, 0x46, 0x4c, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x54,
	0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x10, 0x04, 0x12, 0x16, 0x0a, 0x12, 0x49, 0x4e, 0x46, 0x4c,
	0x49, 0x47, 0x48, 0x54, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x05,
	0x1a, 0x04, 0x88, 0xa3, 0x1e, 0x00, 0x42, 0xe1, 0x01, 0x0a, 0x1a, 0x63, 0x6f, 0x6d, 0x2e, 0x6e,
	0x6f, 0x62, 0x6c, 0x65, 0x2e, 0x64, 0x6f, 0x6c, 0x6c, 0x61, 0x72, 0x2e, 0x76, 0x61, 0x75, 0x6c,
	0x74, 0x73, 0x2e, 0x76, 0x31, 0x42, 0x0f, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x43, 0x68, 0x61, 0x69,
	0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x37, 0x64, 0x6f, 0x6c, 0x6c, 0x61, 0x72,
	0x2e, 0x6e, 0x6f, 0x62, 0x6c, 0x65, 0x2e, 0x78, 0x79, 0x7a, 0x2f, 0x76, 0x32, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x6e, 0x6f, 0x62, 0x6c, 0x65, 0x2f, 0x64, 0x6f, 0x6c, 0x6c, 0x61, 0x72, 0x2f, 0x76,
	0x61, 0x75, 0x6c, 0x74, 0x73, 0x2f, 0x76, 0x31, 0x3b, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x76,
	0x31, 0xa2, 0x02, 0x03, 0x4e, 0x44, 0x56, 0xaa, 0x02, 0x16, 0x4e, 0x6f, 0x62, 0x6c, 0x65, 0x2e,
	0x44, 0x6f, 0x6c, 0x6c, 0x61, 0x72, 0x2e, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x2e, 0x56, 0x31,
	0xca, 0x02, 0x16, 0x4e, 0x6f, 0x62, 0x6c, 0x65, 0x5c, 0x44, 0x6f, 0x6c, 0x6c, 0x61, 0x72, 0x5c,
	0x56, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x22, 0x4e, 0x6f, 0x62, 0x6c,
	0x65, 0x5c, 0x44, 0x6f, 0x6c, 0x6c, 0x61, 0x72, 0x5c, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x5c,
	0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02,
	0x19, 0x4e, 0x6f, 0x62, 0x6c, 0x65, 0x3a, 0x3a, 0x44, 0x6f, 0x6c, 0x6c, 0x61, 0x72, 0x3a, 0x3a,
	0x56, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_noble_dollar_vaults_v1_cross_chain_proto_rawDescOnce sync.Once
	file_noble_dollar_vaults_v1_cross_chain_proto_rawDescData = file_noble_dollar_vaults_v1_cross_chain_proto_rawDesc
)

func file_noble_dollar_vaults_v1_cross_chain_proto_rawDescGZIP() []byte {
	file_noble_dollar_vaults_v1_cross_chain_proto_rawDescOnce.Do(func() {
		file_noble_dollar_vaults_v1_cross_chain_proto_rawDescData = protoimpl.X.CompressGZIP(file_noble_dollar_vaults_v1_cross_chain_proto_rawDescData)
	})
	return file_noble_dollar_vaults_v1_cross_chain_proto_rawDescData
}

var file_noble_dollar_vaults_v1_cross_chain_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_noble_dollar_vaults_v1_cross_chain_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_noble_dollar_vaults_v1_cross_chain_proto_goTypes = []interface{}{
	(RemotePositionStatus)(0),          // 0: noble.dollar.vaults.v1.RemotePositionStatus
	(InFlightOperationType)(0),         // 1: noble.dollar.vaults.v1.InFlightOperationType
	(InFlightStatus)(0),                // 2: noble.dollar.vaults.v1.InFlightStatus
	(*CrossChainRoute)(nil),            // 3: noble.dollar.vaults.v1.CrossChainRoute
	(*CrossChainRiskParams)(nil),       // 4: noble.dollar.vaults.v1.CrossChainRiskParams
	(*RemotePosition)(nil),             // 5: noble.dollar.vaults.v1.RemotePosition
	(*InFlightPosition)(nil),           // 6: noble.dollar.vaults.v1.InFlightPosition
	(*CrossChainPositionSnapshot)(nil), // 7: noble.dollar.vaults.v1.CrossChainPositionSnapshot
	(*DriftAlert)(nil),                 // 8: noble.dollar.vaults.v1.DriftAlert
	(*CrossChainConfig)(nil),           // 9: noble.dollar.vaults.v1.CrossChainConfig
	(*timestamppb.Timestamp)(nil),      // 10: google.protobuf.Timestamp
}
var file_noble_dollar_vaults_v1_cross_chain_proto_depIdxs = []int32{
	4,  // 0: noble.dollar.vaults.v1.CrossChainRoute.risk_params:type_name -> noble.dollar.vaults.v1.CrossChainRiskParams
	10, // 1: noble.dollar.vaults.v1.RemotePosition.last_update:type_name -> google.protobuf.Timestamp
	0,  // 2: noble.dollar.vaults.v1.RemotePosition.status:type_name -> noble.dollar.vaults.v1.RemotePositionStatus
	1,  // 3: noble.dollar.vaults.v1.InFlightPosition.operation_type:type_name -> noble.dollar.vaults.v1.InFlightOperationType
	10, // 4: noble.dollar.vaults.v1.InFlightPosition.initiated_at:type_name -> google.protobuf.Timestamp
	10, // 5: noble.dollar.vaults.v1.InFlightPosition.expected_completion:type_name -> google.protobuf.Timestamp
	2,  // 6: noble.dollar.vaults.v1.InFlightPosition.status:type_name -> noble.dollar.vaults.v1.InFlightStatus
	10, // 7: noble.dollar.vaults.v1.CrossChainPositionSnapshot.timestamp:type_name -> google.protobuf.Timestamp
	10, // 8: noble.dollar.vaults.v1.DriftAlert.timestamp:type_name -> google.protobuf.Timestamp
	9,  // [9:9] is the sub-list for method output_type
	9,  // [9:9] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_noble_dollar_vaults_v1_cross_chain_proto_init() }
func file_noble_dollar_vaults_v1_cross_chain_proto_init() {
	if File_noble_dollar_vaults_v1_cross_chain_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_noble_dollar_vaults_v1_cross_chain_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrossChainRoute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_noble_dollar_vaults_v1_cross_chain_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrossChainRiskParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_noble_dollar_vaults_v1_cross_chain_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemotePosition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_noble_dollar_vaults_v1_cross_chain_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InFlightPosition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_noble_dollar_vaults_v1_cross_chain_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrossChainPositionSnapshot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_noble_dollar_vaults_v1_cross_chain_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DriftAlert); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_noble_dollar_vaults_v1_cross_chain_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrossChainConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_noble_dollar_vaults_v1_cross_chain_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_noble_dollar_vaults_v1_cross_chain_proto_goTypes,
		DependencyIndexes: file_noble_dollar_vaults_v1_cross_chain_proto_depIdxs,
		EnumInfos:         file_noble_dollar_vaults_v1_cross_chain_proto_enumTypes,
		MessageInfos:      file_noble_dollar_vaults_v1_cross_chain_proto_msgTypes,
	}.Build()
	File_noble_dollar_vaults_v1_cross_chain_proto = out.File
	file_noble_dollar_vaults_v1_cross_chain_proto_rawDesc = nil
	file_noble_dollar_vaults_v1_cross_chain_proto_goTypes = nil
	file_noble_dollar_vaults_v1_cross_chain_proto_depIdxs = nil
}

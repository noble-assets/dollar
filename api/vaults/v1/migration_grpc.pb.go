// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: noble/dollar/vaults/v1/migration.proto

package vaultsv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MigrationMsg_MigratePosition_FullMethodName         = "/noble.dollar.vaults.v1.MigrationMsg/MigratePosition"
	MigrationMsg_EmergencyWithdrawLegacy_FullMethodName = "/noble.dollar.vaults.v1.MigrationMsg/EmergencyWithdrawLegacy"
	MigrationMsg_UpdateMigrationState_FullMethodName    = "/noble.dollar.vaults.v1.MigrationMsg/UpdateMigrationState"
)

// MigrationMsgClient is the client API for MigrationMsg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Migration message service
type MigrationMsgClient interface {
	// Migrate user position from legacy vault to new share-based vault
	MigratePosition(ctx context.Context, in *MsgMigratePosition, opts ...grpc.CallOption) (*MsgMigratePositionResponse, error)
	// Emergency withdrawal from legacy vault (when migration is cancelled/failed)
	EmergencyWithdrawLegacy(ctx context.Context, in *MsgEmergencyWithdrawLegacy, opts ...grpc.CallOption) (*MsgEmergencyWithdrawLegacyResponse, error)
	// Update migration state (authority only)
	UpdateMigrationState(ctx context.Context, in *MsgUpdateMigrationState, opts ...grpc.CallOption) (*MsgUpdateMigrationStateResponse, error)
}

type migrationMsgClient struct {
	cc grpc.ClientConnInterface
}

func NewMigrationMsgClient(cc grpc.ClientConnInterface) MigrationMsgClient {
	return &migrationMsgClient{cc}
}

func (c *migrationMsgClient) MigratePosition(ctx context.Context, in *MsgMigratePosition, opts ...grpc.CallOption) (*MsgMigratePositionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MsgMigratePositionResponse)
	err := c.cc.Invoke(ctx, MigrationMsg_MigratePosition_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *migrationMsgClient) EmergencyWithdrawLegacy(ctx context.Context, in *MsgEmergencyWithdrawLegacy, opts ...grpc.CallOption) (*MsgEmergencyWithdrawLegacyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MsgEmergencyWithdrawLegacyResponse)
	err := c.cc.Invoke(ctx, MigrationMsg_EmergencyWithdrawLegacy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *migrationMsgClient) UpdateMigrationState(ctx context.Context, in *MsgUpdateMigrationState, opts ...grpc.CallOption) (*MsgUpdateMigrationStateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MsgUpdateMigrationStateResponse)
	err := c.cc.Invoke(ctx, MigrationMsg_UpdateMigrationState_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MigrationMsgServer is the server API for MigrationMsg service.
// All implementations must embed UnimplementedMigrationMsgServer
// for forward compatibility.
//
// Migration message service
type MigrationMsgServer interface {
	// Migrate user position from legacy vault to new share-based vault
	MigratePosition(context.Context, *MsgMigratePosition) (*MsgMigratePositionResponse, error)
	// Emergency withdrawal from legacy vault (when migration is cancelled/failed)
	EmergencyWithdrawLegacy(context.Context, *MsgEmergencyWithdrawLegacy) (*MsgEmergencyWithdrawLegacyResponse, error)
	// Update migration state (authority only)
	UpdateMigrationState(context.Context, *MsgUpdateMigrationState) (*MsgUpdateMigrationStateResponse, error)
	mustEmbedUnimplementedMigrationMsgServer()
}

// UnimplementedMigrationMsgServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMigrationMsgServer struct{}

func (UnimplementedMigrationMsgServer) MigratePosition(context.Context, *MsgMigratePosition) (*MsgMigratePositionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MigratePosition not implemented")
}
func (UnimplementedMigrationMsgServer) EmergencyWithdrawLegacy(context.Context, *MsgEmergencyWithdrawLegacy) (*MsgEmergencyWithdrawLegacyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EmergencyWithdrawLegacy not implemented")
}
func (UnimplementedMigrationMsgServer) UpdateMigrationState(context.Context, *MsgUpdateMigrationState) (*MsgUpdateMigrationStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMigrationState not implemented")
}
func (UnimplementedMigrationMsgServer) mustEmbedUnimplementedMigrationMsgServer() {}
func (UnimplementedMigrationMsgServer) testEmbeddedByValue()                      {}

// UnsafeMigrationMsgServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MigrationMsgServer will
// result in compilation errors.
type UnsafeMigrationMsgServer interface {
	mustEmbedUnimplementedMigrationMsgServer()
}

func RegisterMigrationMsgServer(s grpc.ServiceRegistrar, srv MigrationMsgServer) {
	// If the following call pancis, it indicates UnimplementedMigrationMsgServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MigrationMsg_ServiceDesc, srv)
}

func _MigrationMsg_MigratePosition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgMigratePosition)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MigrationMsgServer).MigratePosition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MigrationMsg_MigratePosition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MigrationMsgServer).MigratePosition(ctx, req.(*MsgMigratePosition))
	}
	return interceptor(ctx, in, info, handler)
}

func _MigrationMsg_EmergencyWithdrawLegacy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgEmergencyWithdrawLegacy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MigrationMsgServer).EmergencyWithdrawLegacy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MigrationMsg_EmergencyWithdrawLegacy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MigrationMsgServer).EmergencyWithdrawLegacy(ctx, req.(*MsgEmergencyWithdrawLegacy))
	}
	return interceptor(ctx, in, info, handler)
}

func _MigrationMsg_UpdateMigrationState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateMigrationState)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MigrationMsgServer).UpdateMigrationState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MigrationMsg_UpdateMigrationState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MigrationMsgServer).UpdateMigrationState(ctx, req.(*MsgUpdateMigrationState))
	}
	return interceptor(ctx, in, info, handler)
}

// MigrationMsg_ServiceDesc is the grpc.ServiceDesc for MigrationMsg service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MigrationMsg_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "noble.dollar.vaults.v1.MigrationMsg",
	HandlerType: (*MigrationMsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MigratePosition",
			Handler:    _MigrationMsg_MigratePosition_Handler,
		},
		{
			MethodName: "EmergencyWithdrawLegacy",
			Handler:    _MigrationMsg_EmergencyWithdrawLegacy_Handler,
		},
		{
			MethodName: "UpdateMigrationState",
			Handler:    _MigrationMsg_UpdateMigrationState_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "noble/dollar/vaults/v1/migration.proto",
}

const (
	MigrationQuery_MigrationStatus_FullMethodName     = "/noble.dollar.vaults.v1.MigrationQuery/MigrationStatus"
	MigrationQuery_UserMigrationStatus_FullMethodName = "/noble.dollar.vaults.v1.MigrationQuery/UserMigrationStatus"
	MigrationQuery_MigrationPreview_FullMethodName    = "/noble.dollar.vaults.v1.MigrationQuery/MigrationPreview"
)

// MigrationQueryClient is the client API for MigrationQuery service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Migration query service
type MigrationQueryClient interface {
	// Get current migration status
	MigrationStatus(ctx context.Context, in *QueryMigrationStatusRequest, opts ...grpc.CallOption) (*QueryMigrationStatusResponse, error)
	// Get user's migration status
	UserMigrationStatus(ctx context.Context, in *QueryUserMigrationStatusRequest, opts ...grpc.CallOption) (*QueryUserMigrationStatusResponse, error)
	// Preview migration outcome for a user
	MigrationPreview(ctx context.Context, in *QueryMigrationPreviewRequest, opts ...grpc.CallOption) (*QueryMigrationPreviewResponse, error)
}

type migrationQueryClient struct {
	cc grpc.ClientConnInterface
}

func NewMigrationQueryClient(cc grpc.ClientConnInterface) MigrationQueryClient {
	return &migrationQueryClient{cc}
}

func (c *migrationQueryClient) MigrationStatus(ctx context.Context, in *QueryMigrationStatusRequest, opts ...grpc.CallOption) (*QueryMigrationStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryMigrationStatusResponse)
	err := c.cc.Invoke(ctx, MigrationQuery_MigrationStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *migrationQueryClient) UserMigrationStatus(ctx context.Context, in *QueryUserMigrationStatusRequest, opts ...grpc.CallOption) (*QueryUserMigrationStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryUserMigrationStatusResponse)
	err := c.cc.Invoke(ctx, MigrationQuery_UserMigrationStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *migrationQueryClient) MigrationPreview(ctx context.Context, in *QueryMigrationPreviewRequest, opts ...grpc.CallOption) (*QueryMigrationPreviewResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryMigrationPreviewResponse)
	err := c.cc.Invoke(ctx, MigrationQuery_MigrationPreview_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MigrationQueryServer is the server API for MigrationQuery service.
// All implementations must embed UnimplementedMigrationQueryServer
// for forward compatibility.
//
// Migration query service
type MigrationQueryServer interface {
	// Get current migration status
	MigrationStatus(context.Context, *QueryMigrationStatusRequest) (*QueryMigrationStatusResponse, error)
	// Get user's migration status
	UserMigrationStatus(context.Context, *QueryUserMigrationStatusRequest) (*QueryUserMigrationStatusResponse, error)
	// Preview migration outcome for a user
	MigrationPreview(context.Context, *QueryMigrationPreviewRequest) (*QueryMigrationPreviewResponse, error)
	mustEmbedUnimplementedMigrationQueryServer()
}

// UnimplementedMigrationQueryServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMigrationQueryServer struct{}

func (UnimplementedMigrationQueryServer) MigrationStatus(context.Context, *QueryMigrationStatusRequest) (*QueryMigrationStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MigrationStatus not implemented")
}
func (UnimplementedMigrationQueryServer) UserMigrationStatus(context.Context, *QueryUserMigrationStatusRequest) (*QueryUserMigrationStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserMigrationStatus not implemented")
}
func (UnimplementedMigrationQueryServer) MigrationPreview(context.Context, *QueryMigrationPreviewRequest) (*QueryMigrationPreviewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MigrationPreview not implemented")
}
func (UnimplementedMigrationQueryServer) mustEmbedUnimplementedMigrationQueryServer() {}
func (UnimplementedMigrationQueryServer) testEmbeddedByValue()                        {}

// UnsafeMigrationQueryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MigrationQueryServer will
// result in compilation errors.
type UnsafeMigrationQueryServer interface {
	mustEmbedUnimplementedMigrationQueryServer()
}

func RegisterMigrationQueryServer(s grpc.ServiceRegistrar, srv MigrationQueryServer) {
	// If the following call pancis, it indicates UnimplementedMigrationQueryServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MigrationQuery_ServiceDesc, srv)
}

func _MigrationQuery_MigrationStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMigrationStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MigrationQueryServer).MigrationStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MigrationQuery_MigrationStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MigrationQueryServer).MigrationStatus(ctx, req.(*QueryMigrationStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MigrationQuery_UserMigrationStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryUserMigrationStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MigrationQueryServer).UserMigrationStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MigrationQuery_UserMigrationStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MigrationQueryServer).UserMigrationStatus(ctx, req.(*QueryUserMigrationStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MigrationQuery_MigrationPreview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMigrationPreviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MigrationQueryServer).MigrationPreview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MigrationQuery_MigrationPreview_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MigrationQueryServer).MigrationPreview(ctx, req.(*QueryMigrationPreviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MigrationQuery_ServiceDesc is the grpc.ServiceDesc for MigrationQuery service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MigrationQuery_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "noble.dollar.vaults.v1.MigrationQuery",
	HandlerType: (*MigrationQueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MigrationStatus",
			Handler:    _MigrationQuery_MigrationStatus_Handler,
		},
		{
			MethodName: "UserMigrationStatus",
			Handler:    _MigrationQuery_UserMigrationStatus_Handler,
		},
		{
			MethodName: "MigrationPreview",
			Handler:    _MigrationQuery_MigrationPreview_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "noble/dollar/vaults/v1/migration.proto",
}

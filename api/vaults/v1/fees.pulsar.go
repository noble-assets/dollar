// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package vaultsv1

import (
	_ "cosmossdk.io/api/amino"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	runtime "github.com/cosmos/cosmos-proto/runtime"
	_ "github.com/cosmos/gogoproto/gogoproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	reflect "reflect"
	sync "sync"
)

var (
	md_FeeConfig                      protoreflect.MessageDescriptor
	fd_FeeConfig_management_fee_rate  protoreflect.FieldDescriptor
	fd_FeeConfig_performance_fee_rate protoreflect.FieldDescriptor
	fd_FeeConfig_deposit_fee_rate     protoreflect.FieldDescriptor
	fd_FeeConfig_withdrawal_fee_rate  protoreflect.FieldDescriptor
	fd_FeeConfig_cross_chain_fee_rate protoreflect.FieldDescriptor
	fd_FeeConfig_emergency_fee_rate   protoreflect.FieldDescriptor
	fd_FeeConfig_collection_method    protoreflect.FieldDescriptor
	fd_FeeConfig_fee_recipient        protoreflect.FieldDescriptor
	fd_FeeConfig_fees_enabled         protoreflect.FieldDescriptor
	fd_FeeConfig_high_water_mark      protoreflect.FieldDescriptor
)

func init() {
	file_noble_dollar_vaults_v1_fees_proto_init()
	md_FeeConfig = File_noble_dollar_vaults_v1_fees_proto.Messages().ByName("FeeConfig")
	fd_FeeConfig_management_fee_rate = md_FeeConfig.Fields().ByName("management_fee_rate")
	fd_FeeConfig_performance_fee_rate = md_FeeConfig.Fields().ByName("performance_fee_rate")
	fd_FeeConfig_deposit_fee_rate = md_FeeConfig.Fields().ByName("deposit_fee_rate")
	fd_FeeConfig_withdrawal_fee_rate = md_FeeConfig.Fields().ByName("withdrawal_fee_rate")
	fd_FeeConfig_cross_chain_fee_rate = md_FeeConfig.Fields().ByName("cross_chain_fee_rate")
	fd_FeeConfig_emergency_fee_rate = md_FeeConfig.Fields().ByName("emergency_fee_rate")
	fd_FeeConfig_collection_method = md_FeeConfig.Fields().ByName("collection_method")
	fd_FeeConfig_fee_recipient = md_FeeConfig.Fields().ByName("fee_recipient")
	fd_FeeConfig_fees_enabled = md_FeeConfig.Fields().ByName("fees_enabled")
	fd_FeeConfig_high_water_mark = md_FeeConfig.Fields().ByName("high_water_mark")
}

var _ protoreflect.Message = (*fastReflection_FeeConfig)(nil)

type fastReflection_FeeConfig FeeConfig

func (x *FeeConfig) ProtoReflect() protoreflect.Message {
	return (*fastReflection_FeeConfig)(x)
}

func (x *FeeConfig) slowProtoReflect() protoreflect.Message {
	mi := &file_noble_dollar_vaults_v1_fees_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_FeeConfig_messageType fastReflection_FeeConfig_messageType
var _ protoreflect.MessageType = fastReflection_FeeConfig_messageType{}

type fastReflection_FeeConfig_messageType struct{}

func (x fastReflection_FeeConfig_messageType) Zero() protoreflect.Message {
	return (*fastReflection_FeeConfig)(nil)
}
func (x fastReflection_FeeConfig_messageType) New() protoreflect.Message {
	return new(fastReflection_FeeConfig)
}
func (x fastReflection_FeeConfig_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_FeeConfig
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_FeeConfig) Descriptor() protoreflect.MessageDescriptor {
	return md_FeeConfig
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_FeeConfig) Type() protoreflect.MessageType {
	return _fastReflection_FeeConfig_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_FeeConfig) New() protoreflect.Message {
	return new(fastReflection_FeeConfig)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_FeeConfig) Interface() protoreflect.ProtoMessage {
	return (*FeeConfig)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_FeeConfig) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.ManagementFeeRate != int32(0) {
		value := protoreflect.ValueOfInt32(x.ManagementFeeRate)
		if !f(fd_FeeConfig_management_fee_rate, value) {
			return
		}
	}
	if x.PerformanceFeeRate != int32(0) {
		value := protoreflect.ValueOfInt32(x.PerformanceFeeRate)
		if !f(fd_FeeConfig_performance_fee_rate, value) {
			return
		}
	}
	if x.DepositFeeRate != int32(0) {
		value := protoreflect.ValueOfInt32(x.DepositFeeRate)
		if !f(fd_FeeConfig_deposit_fee_rate, value) {
			return
		}
	}
	if x.WithdrawalFeeRate != int32(0) {
		value := protoreflect.ValueOfInt32(x.WithdrawalFeeRate)
		if !f(fd_FeeConfig_withdrawal_fee_rate, value) {
			return
		}
	}
	if x.CrossChainFeeRate != int32(0) {
		value := protoreflect.ValueOfInt32(x.CrossChainFeeRate)
		if !f(fd_FeeConfig_cross_chain_fee_rate, value) {
			return
		}
	}
	if x.EmergencyFeeRate != int32(0) {
		value := protoreflect.ValueOfInt32(x.EmergencyFeeRate)
		if !f(fd_FeeConfig_emergency_fee_rate, value) {
			return
		}
	}
	if x.CollectionMethod != 0 {
		value := protoreflect.ValueOfEnum((protoreflect.EnumNumber)(x.CollectionMethod))
		if !f(fd_FeeConfig_collection_method, value) {
			return
		}
	}
	if x.FeeRecipient != "" {
		value := protoreflect.ValueOfString(x.FeeRecipient)
		if !f(fd_FeeConfig_fee_recipient, value) {
			return
		}
	}
	if x.FeesEnabled != false {
		value := protoreflect.ValueOfBool(x.FeesEnabled)
		if !f(fd_FeeConfig_fees_enabled, value) {
			return
		}
	}
	if x.HighWaterMark != "" {
		value := protoreflect.ValueOfString(x.HighWaterMark)
		if !f(fd_FeeConfig_high_water_mark, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_FeeConfig) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "noble.dollar.vaults.v1.FeeConfig.management_fee_rate":
		return x.ManagementFeeRate != int32(0)
	case "noble.dollar.vaults.v1.FeeConfig.performance_fee_rate":
		return x.PerformanceFeeRate != int32(0)
	case "noble.dollar.vaults.v1.FeeConfig.deposit_fee_rate":
		return x.DepositFeeRate != int32(0)
	case "noble.dollar.vaults.v1.FeeConfig.withdrawal_fee_rate":
		return x.WithdrawalFeeRate != int32(0)
	case "noble.dollar.vaults.v1.FeeConfig.cross_chain_fee_rate":
		return x.CrossChainFeeRate != int32(0)
	case "noble.dollar.vaults.v1.FeeConfig.emergency_fee_rate":
		return x.EmergencyFeeRate != int32(0)
	case "noble.dollar.vaults.v1.FeeConfig.collection_method":
		return x.CollectionMethod != 0
	case "noble.dollar.vaults.v1.FeeConfig.fee_recipient":
		return x.FeeRecipient != ""
	case "noble.dollar.vaults.v1.FeeConfig.fees_enabled":
		return x.FeesEnabled != false
	case "noble.dollar.vaults.v1.FeeConfig.high_water_mark":
		return x.HighWaterMark != ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.dollar.vaults.v1.FeeConfig"))
		}
		panic(fmt.Errorf("message noble.dollar.vaults.v1.FeeConfig does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_FeeConfig) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "noble.dollar.vaults.v1.FeeConfig.management_fee_rate":
		x.ManagementFeeRate = int32(0)
	case "noble.dollar.vaults.v1.FeeConfig.performance_fee_rate":
		x.PerformanceFeeRate = int32(0)
	case "noble.dollar.vaults.v1.FeeConfig.deposit_fee_rate":
		x.DepositFeeRate = int32(0)
	case "noble.dollar.vaults.v1.FeeConfig.withdrawal_fee_rate":
		x.WithdrawalFeeRate = int32(0)
	case "noble.dollar.vaults.v1.FeeConfig.cross_chain_fee_rate":
		x.CrossChainFeeRate = int32(0)
	case "noble.dollar.vaults.v1.FeeConfig.emergency_fee_rate":
		x.EmergencyFeeRate = int32(0)
	case "noble.dollar.vaults.v1.FeeConfig.collection_method":
		x.CollectionMethod = 0
	case "noble.dollar.vaults.v1.FeeConfig.fee_recipient":
		x.FeeRecipient = ""
	case "noble.dollar.vaults.v1.FeeConfig.fees_enabled":
		x.FeesEnabled = false
	case "noble.dollar.vaults.v1.FeeConfig.high_water_mark":
		x.HighWaterMark = ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.dollar.vaults.v1.FeeConfig"))
		}
		panic(fmt.Errorf("message noble.dollar.vaults.v1.FeeConfig does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_FeeConfig) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "noble.dollar.vaults.v1.FeeConfig.management_fee_rate":
		value := x.ManagementFeeRate
		return protoreflect.ValueOfInt32(value)
	case "noble.dollar.vaults.v1.FeeConfig.performance_fee_rate":
		value := x.PerformanceFeeRate
		return protoreflect.ValueOfInt32(value)
	case "noble.dollar.vaults.v1.FeeConfig.deposit_fee_rate":
		value := x.DepositFeeRate
		return protoreflect.ValueOfInt32(value)
	case "noble.dollar.vaults.v1.FeeConfig.withdrawal_fee_rate":
		value := x.WithdrawalFeeRate
		return protoreflect.ValueOfInt32(value)
	case "noble.dollar.vaults.v1.FeeConfig.cross_chain_fee_rate":
		value := x.CrossChainFeeRate
		return protoreflect.ValueOfInt32(value)
	case "noble.dollar.vaults.v1.FeeConfig.emergency_fee_rate":
		value := x.EmergencyFeeRate
		return protoreflect.ValueOfInt32(value)
	case "noble.dollar.vaults.v1.FeeConfig.collection_method":
		value := x.CollectionMethod
		return protoreflect.ValueOfEnum((protoreflect.EnumNumber)(value))
	case "noble.dollar.vaults.v1.FeeConfig.fee_recipient":
		value := x.FeeRecipient
		return protoreflect.ValueOfString(value)
	case "noble.dollar.vaults.v1.FeeConfig.fees_enabled":
		value := x.FeesEnabled
		return protoreflect.ValueOfBool(value)
	case "noble.dollar.vaults.v1.FeeConfig.high_water_mark":
		value := x.HighWaterMark
		return protoreflect.ValueOfString(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.dollar.vaults.v1.FeeConfig"))
		}
		panic(fmt.Errorf("message noble.dollar.vaults.v1.FeeConfig does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_FeeConfig) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "noble.dollar.vaults.v1.FeeConfig.management_fee_rate":
		x.ManagementFeeRate = int32(value.Int())
	case "noble.dollar.vaults.v1.FeeConfig.performance_fee_rate":
		x.PerformanceFeeRate = int32(value.Int())
	case "noble.dollar.vaults.v1.FeeConfig.deposit_fee_rate":
		x.DepositFeeRate = int32(value.Int())
	case "noble.dollar.vaults.v1.FeeConfig.withdrawal_fee_rate":
		x.WithdrawalFeeRate = int32(value.Int())
	case "noble.dollar.vaults.v1.FeeConfig.cross_chain_fee_rate":
		x.CrossChainFeeRate = int32(value.Int())
	case "noble.dollar.vaults.v1.FeeConfig.emergency_fee_rate":
		x.EmergencyFeeRate = int32(value.Int())
	case "noble.dollar.vaults.v1.FeeConfig.collection_method":
		x.CollectionMethod = (FeeCollectionMethod)(value.Enum())
	case "noble.dollar.vaults.v1.FeeConfig.fee_recipient":
		x.FeeRecipient = value.Interface().(string)
	case "noble.dollar.vaults.v1.FeeConfig.fees_enabled":
		x.FeesEnabled = value.Bool()
	case "noble.dollar.vaults.v1.FeeConfig.high_water_mark":
		x.HighWaterMark = value.Interface().(string)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.dollar.vaults.v1.FeeConfig"))
		}
		panic(fmt.Errorf("message noble.dollar.vaults.v1.FeeConfig does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_FeeConfig) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "noble.dollar.vaults.v1.FeeConfig.management_fee_rate":
		panic(fmt.Errorf("field management_fee_rate of message noble.dollar.vaults.v1.FeeConfig is not mutable"))
	case "noble.dollar.vaults.v1.FeeConfig.performance_fee_rate":
		panic(fmt.Errorf("field performance_fee_rate of message noble.dollar.vaults.v1.FeeConfig is not mutable"))
	case "noble.dollar.vaults.v1.FeeConfig.deposit_fee_rate":
		panic(fmt.Errorf("field deposit_fee_rate of message noble.dollar.vaults.v1.FeeConfig is not mutable"))
	case "noble.dollar.vaults.v1.FeeConfig.withdrawal_fee_rate":
		panic(fmt.Errorf("field withdrawal_fee_rate of message noble.dollar.vaults.v1.FeeConfig is not mutable"))
	case "noble.dollar.vaults.v1.FeeConfig.cross_chain_fee_rate":
		panic(fmt.Errorf("field cross_chain_fee_rate of message noble.dollar.vaults.v1.FeeConfig is not mutable"))
	case "noble.dollar.vaults.v1.FeeConfig.emergency_fee_rate":
		panic(fmt.Errorf("field emergency_fee_rate of message noble.dollar.vaults.v1.FeeConfig is not mutable"))
	case "noble.dollar.vaults.v1.FeeConfig.collection_method":
		panic(fmt.Errorf("field collection_method of message noble.dollar.vaults.v1.FeeConfig is not mutable"))
	case "noble.dollar.vaults.v1.FeeConfig.fee_recipient":
		panic(fmt.Errorf("field fee_recipient of message noble.dollar.vaults.v1.FeeConfig is not mutable"))
	case "noble.dollar.vaults.v1.FeeConfig.fees_enabled":
		panic(fmt.Errorf("field fees_enabled of message noble.dollar.vaults.v1.FeeConfig is not mutable"))
	case "noble.dollar.vaults.v1.FeeConfig.high_water_mark":
		panic(fmt.Errorf("field high_water_mark of message noble.dollar.vaults.v1.FeeConfig is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.dollar.vaults.v1.FeeConfig"))
		}
		panic(fmt.Errorf("message noble.dollar.vaults.v1.FeeConfig does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_FeeConfig) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "noble.dollar.vaults.v1.FeeConfig.management_fee_rate":
		return protoreflect.ValueOfInt32(int32(0))
	case "noble.dollar.vaults.v1.FeeConfig.performance_fee_rate":
		return protoreflect.ValueOfInt32(int32(0))
	case "noble.dollar.vaults.v1.FeeConfig.deposit_fee_rate":
		return protoreflect.ValueOfInt32(int32(0))
	case "noble.dollar.vaults.v1.FeeConfig.withdrawal_fee_rate":
		return protoreflect.ValueOfInt32(int32(0))
	case "noble.dollar.vaults.v1.FeeConfig.cross_chain_fee_rate":
		return protoreflect.ValueOfInt32(int32(0))
	case "noble.dollar.vaults.v1.FeeConfig.emergency_fee_rate":
		return protoreflect.ValueOfInt32(int32(0))
	case "noble.dollar.vaults.v1.FeeConfig.collection_method":
		return protoreflect.ValueOfEnum(0)
	case "noble.dollar.vaults.v1.FeeConfig.fee_recipient":
		return protoreflect.ValueOfString("")
	case "noble.dollar.vaults.v1.FeeConfig.fees_enabled":
		return protoreflect.ValueOfBool(false)
	case "noble.dollar.vaults.v1.FeeConfig.high_water_mark":
		return protoreflect.ValueOfString("")
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.dollar.vaults.v1.FeeConfig"))
		}
		panic(fmt.Errorf("message noble.dollar.vaults.v1.FeeConfig does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_FeeConfig) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in noble.dollar.vaults.v1.FeeConfig", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_FeeConfig) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_FeeConfig) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_FeeConfig) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_FeeConfig) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*FeeConfig)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.ManagementFeeRate != 0 {
			n += 1 + runtime.Sov(uint64(x.ManagementFeeRate))
		}
		if x.PerformanceFeeRate != 0 {
			n += 1 + runtime.Sov(uint64(x.PerformanceFeeRate))
		}
		if x.DepositFeeRate != 0 {
			n += 1 + runtime.Sov(uint64(x.DepositFeeRate))
		}
		if x.WithdrawalFeeRate != 0 {
			n += 1 + runtime.Sov(uint64(x.WithdrawalFeeRate))
		}
		if x.CrossChainFeeRate != 0 {
			n += 1 + runtime.Sov(uint64(x.CrossChainFeeRate))
		}
		if x.EmergencyFeeRate != 0 {
			n += 1 + runtime.Sov(uint64(x.EmergencyFeeRate))
		}
		if x.CollectionMethod != 0 {
			n += 1 + runtime.Sov(uint64(x.CollectionMethod))
		}
		l = len(x.FeeRecipient)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.FeesEnabled {
			n += 2
		}
		l = len(x.HighWaterMark)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*FeeConfig)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.HighWaterMark) > 0 {
			i -= len(x.HighWaterMark)
			copy(dAtA[i:], x.HighWaterMark)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.HighWaterMark)))
			i--
			dAtA[i] = 0x52
		}
		if x.FeesEnabled {
			i--
			if x.FeesEnabled {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x48
		}
		if len(x.FeeRecipient) > 0 {
			i -= len(x.FeeRecipient)
			copy(dAtA[i:], x.FeeRecipient)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.FeeRecipient)))
			i--
			dAtA[i] = 0x42
		}
		if x.CollectionMethod != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.CollectionMethod))
			i--
			dAtA[i] = 0x38
		}
		if x.EmergencyFeeRate != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.EmergencyFeeRate))
			i--
			dAtA[i] = 0x30
		}
		if x.CrossChainFeeRate != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.CrossChainFeeRate))
			i--
			dAtA[i] = 0x28
		}
		if x.WithdrawalFeeRate != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.WithdrawalFeeRate))
			i--
			dAtA[i] = 0x20
		}
		if x.DepositFeeRate != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.DepositFeeRate))
			i--
			dAtA[i] = 0x18
		}
		if x.PerformanceFeeRate != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.PerformanceFeeRate))
			i--
			dAtA[i] = 0x10
		}
		if x.ManagementFeeRate != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.ManagementFeeRate))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*FeeConfig)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: FeeConfig: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: FeeConfig: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ManagementFeeRate", wireType)
				}
				x.ManagementFeeRate = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.ManagementFeeRate |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PerformanceFeeRate", wireType)
				}
				x.PerformanceFeeRate = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.PerformanceFeeRate |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 3:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field DepositFeeRate", wireType)
				}
				x.DepositFeeRate = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.DepositFeeRate |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 4:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field WithdrawalFeeRate", wireType)
				}
				x.WithdrawalFeeRate = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.WithdrawalFeeRate |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 5:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field CrossChainFeeRate", wireType)
				}
				x.CrossChainFeeRate = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.CrossChainFeeRate |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 6:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field EmergencyFeeRate", wireType)
				}
				x.EmergencyFeeRate = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.EmergencyFeeRate |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 7:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field CollectionMethod", wireType)
				}
				x.CollectionMethod = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.CollectionMethod |= FeeCollectionMethod(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 8:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field FeeRecipient", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.FeeRecipient = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 9:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field FeesEnabled", wireType)
				}
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				x.FeesEnabled = bool(v != 0)
			case 10:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field HighWaterMark", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.HighWaterMark = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_ShareDilutionParams                      protoreflect.MessageDescriptor
	fd_ShareDilutionParams_target_dilution_rate protoreflect.FieldDescriptor
	fd_ShareDilutionParams_min_dilution_amount  protoreflect.FieldDescriptor
	fd_ShareDilutionParams_max_dilution_amount  protoreflect.FieldDescriptor
	fd_ShareDilutionParams_dilution_frequency   protoreflect.FieldDescriptor
	fd_ShareDilutionParams_last_dilution        protoreflect.FieldDescriptor
)

func init() {
	file_noble_dollar_vaults_v1_fees_proto_init()
	md_ShareDilutionParams = File_noble_dollar_vaults_v1_fees_proto.Messages().ByName("ShareDilutionParams")
	fd_ShareDilutionParams_target_dilution_rate = md_ShareDilutionParams.Fields().ByName("target_dilution_rate")
	fd_ShareDilutionParams_min_dilution_amount = md_ShareDilutionParams.Fields().ByName("min_dilution_amount")
	fd_ShareDilutionParams_max_dilution_amount = md_ShareDilutionParams.Fields().ByName("max_dilution_amount")
	fd_ShareDilutionParams_dilution_frequency = md_ShareDilutionParams.Fields().ByName("dilution_frequency")
	fd_ShareDilutionParams_last_dilution = md_ShareDilutionParams.Fields().ByName("last_dilution")
}

var _ protoreflect.Message = (*fastReflection_ShareDilutionParams)(nil)

type fastReflection_ShareDilutionParams ShareDilutionParams

func (x *ShareDilutionParams) ProtoReflect() protoreflect.Message {
	return (*fastReflection_ShareDilutionParams)(x)
}

func (x *ShareDilutionParams) slowProtoReflect() protoreflect.Message {
	mi := &file_noble_dollar_vaults_v1_fees_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_ShareDilutionParams_messageType fastReflection_ShareDilutionParams_messageType
var _ protoreflect.MessageType = fastReflection_ShareDilutionParams_messageType{}

type fastReflection_ShareDilutionParams_messageType struct{}

func (x fastReflection_ShareDilutionParams_messageType) Zero() protoreflect.Message {
	return (*fastReflection_ShareDilutionParams)(nil)
}
func (x fastReflection_ShareDilutionParams_messageType) New() protoreflect.Message {
	return new(fastReflection_ShareDilutionParams)
}
func (x fastReflection_ShareDilutionParams_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_ShareDilutionParams
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_ShareDilutionParams) Descriptor() protoreflect.MessageDescriptor {
	return md_ShareDilutionParams
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_ShareDilutionParams) Type() protoreflect.MessageType {
	return _fastReflection_ShareDilutionParams_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_ShareDilutionParams) New() protoreflect.Message {
	return new(fastReflection_ShareDilutionParams)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_ShareDilutionParams) Interface() protoreflect.ProtoMessage {
	return (*ShareDilutionParams)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_ShareDilutionParams) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.TargetDilutionRate != int32(0) {
		value := protoreflect.ValueOfInt32(x.TargetDilutionRate)
		if !f(fd_ShareDilutionParams_target_dilution_rate, value) {
			return
		}
	}
	if x.MinDilutionAmount != "" {
		value := protoreflect.ValueOfString(x.MinDilutionAmount)
		if !f(fd_ShareDilutionParams_min_dilution_amount, value) {
			return
		}
	}
	if x.MaxDilutionAmount != "" {
		value := protoreflect.ValueOfString(x.MaxDilutionAmount)
		if !f(fd_ShareDilutionParams_max_dilution_amount, value) {
			return
		}
	}
	if x.DilutionFrequency != int64(0) {
		value := protoreflect.ValueOfInt64(x.DilutionFrequency)
		if !f(fd_ShareDilutionParams_dilution_frequency, value) {
			return
		}
	}
	if x.LastDilution != nil {
		value := protoreflect.ValueOfMessage(x.LastDilution.ProtoReflect())
		if !f(fd_ShareDilutionParams_last_dilution, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_ShareDilutionParams) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "noble.dollar.vaults.v1.ShareDilutionParams.target_dilution_rate":
		return x.TargetDilutionRate != int32(0)
	case "noble.dollar.vaults.v1.ShareDilutionParams.min_dilution_amount":
		return x.MinDilutionAmount != ""
	case "noble.dollar.vaults.v1.ShareDilutionParams.max_dilution_amount":
		return x.MaxDilutionAmount != ""
	case "noble.dollar.vaults.v1.ShareDilutionParams.dilution_frequency":
		return x.DilutionFrequency != int64(0)
	case "noble.dollar.vaults.v1.ShareDilutionParams.last_dilution":
		return x.LastDilution != nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.dollar.vaults.v1.ShareDilutionParams"))
		}
		panic(fmt.Errorf("message noble.dollar.vaults.v1.ShareDilutionParams does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ShareDilutionParams) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "noble.dollar.vaults.v1.ShareDilutionParams.target_dilution_rate":
		x.TargetDilutionRate = int32(0)
	case "noble.dollar.vaults.v1.ShareDilutionParams.min_dilution_amount":
		x.MinDilutionAmount = ""
	case "noble.dollar.vaults.v1.ShareDilutionParams.max_dilution_amount":
		x.MaxDilutionAmount = ""
	case "noble.dollar.vaults.v1.ShareDilutionParams.dilution_frequency":
		x.DilutionFrequency = int64(0)
	case "noble.dollar.vaults.v1.ShareDilutionParams.last_dilution":
		x.LastDilution = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.dollar.vaults.v1.ShareDilutionParams"))
		}
		panic(fmt.Errorf("message noble.dollar.vaults.v1.ShareDilutionParams does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_ShareDilutionParams) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "noble.dollar.vaults.v1.ShareDilutionParams.target_dilution_rate":
		value := x.TargetDilutionRate
		return protoreflect.ValueOfInt32(value)
	case "noble.dollar.vaults.v1.ShareDilutionParams.min_dilution_amount":
		value := x.MinDilutionAmount
		return protoreflect.ValueOfString(value)
	case "noble.dollar.vaults.v1.ShareDilutionParams.max_dilution_amount":
		value := x.MaxDilutionAmount
		return protoreflect.ValueOfString(value)
	case "noble.dollar.vaults.v1.ShareDilutionParams.dilution_frequency":
		value := x.DilutionFrequency
		return protoreflect.ValueOfInt64(value)
	case "noble.dollar.vaults.v1.ShareDilutionParams.last_dilution":
		value := x.LastDilution
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.dollar.vaults.v1.ShareDilutionParams"))
		}
		panic(fmt.Errorf("message noble.dollar.vaults.v1.ShareDilutionParams does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ShareDilutionParams) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "noble.dollar.vaults.v1.ShareDilutionParams.target_dilution_rate":
		x.TargetDilutionRate = int32(value.Int())
	case "noble.dollar.vaults.v1.ShareDilutionParams.min_dilution_amount":
		x.MinDilutionAmount = value.Interface().(string)
	case "noble.dollar.vaults.v1.ShareDilutionParams.max_dilution_amount":
		x.MaxDilutionAmount = value.Interface().(string)
	case "noble.dollar.vaults.v1.ShareDilutionParams.dilution_frequency":
		x.DilutionFrequency = value.Int()
	case "noble.dollar.vaults.v1.ShareDilutionParams.last_dilution":
		x.LastDilution = value.Message().Interface().(*timestamppb.Timestamp)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.dollar.vaults.v1.ShareDilutionParams"))
		}
		panic(fmt.Errorf("message noble.dollar.vaults.v1.ShareDilutionParams does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ShareDilutionParams) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "noble.dollar.vaults.v1.ShareDilutionParams.last_dilution":
		if x.LastDilution == nil {
			x.LastDilution = new(timestamppb.Timestamp)
		}
		return protoreflect.ValueOfMessage(x.LastDilution.ProtoReflect())
	case "noble.dollar.vaults.v1.ShareDilutionParams.target_dilution_rate":
		panic(fmt.Errorf("field target_dilution_rate of message noble.dollar.vaults.v1.ShareDilutionParams is not mutable"))
	case "noble.dollar.vaults.v1.ShareDilutionParams.min_dilution_amount":
		panic(fmt.Errorf("field min_dilution_amount of message noble.dollar.vaults.v1.ShareDilutionParams is not mutable"))
	case "noble.dollar.vaults.v1.ShareDilutionParams.max_dilution_amount":
		panic(fmt.Errorf("field max_dilution_amount of message noble.dollar.vaults.v1.ShareDilutionParams is not mutable"))
	case "noble.dollar.vaults.v1.ShareDilutionParams.dilution_frequency":
		panic(fmt.Errorf("field dilution_frequency of message noble.dollar.vaults.v1.ShareDilutionParams is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.dollar.vaults.v1.ShareDilutionParams"))
		}
		panic(fmt.Errorf("message noble.dollar.vaults.v1.ShareDilutionParams does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_ShareDilutionParams) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "noble.dollar.vaults.v1.ShareDilutionParams.target_dilution_rate":
		return protoreflect.ValueOfInt32(int32(0))
	case "noble.dollar.vaults.v1.ShareDilutionParams.min_dilution_amount":
		return protoreflect.ValueOfString("")
	case "noble.dollar.vaults.v1.ShareDilutionParams.max_dilution_amount":
		return protoreflect.ValueOfString("")
	case "noble.dollar.vaults.v1.ShareDilutionParams.dilution_frequency":
		return protoreflect.ValueOfInt64(int64(0))
	case "noble.dollar.vaults.v1.ShareDilutionParams.last_dilution":
		m := new(timestamppb.Timestamp)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.dollar.vaults.v1.ShareDilutionParams"))
		}
		panic(fmt.Errorf("message noble.dollar.vaults.v1.ShareDilutionParams does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_ShareDilutionParams) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in noble.dollar.vaults.v1.ShareDilutionParams", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_ShareDilutionParams) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ShareDilutionParams) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_ShareDilutionParams) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_ShareDilutionParams) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*ShareDilutionParams)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.TargetDilutionRate != 0 {
			n += 1 + runtime.Sov(uint64(x.TargetDilutionRate))
		}
		l = len(x.MinDilutionAmount)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.MaxDilutionAmount)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.DilutionFrequency != 0 {
			n += 1 + runtime.Sov(uint64(x.DilutionFrequency))
		}
		if x.LastDilution != nil {
			l = options.Size(x.LastDilution)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*ShareDilutionParams)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.LastDilution != nil {
			encoded, err := options.Marshal(x.LastDilution)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x2a
		}
		if x.DilutionFrequency != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.DilutionFrequency))
			i--
			dAtA[i] = 0x20
		}
		if len(x.MaxDilutionAmount) > 0 {
			i -= len(x.MaxDilutionAmount)
			copy(dAtA[i:], x.MaxDilutionAmount)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.MaxDilutionAmount)))
			i--
			dAtA[i] = 0x1a
		}
		if len(x.MinDilutionAmount) > 0 {
			i -= len(x.MinDilutionAmount)
			copy(dAtA[i:], x.MinDilutionAmount)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.MinDilutionAmount)))
			i--
			dAtA[i] = 0x12
		}
		if x.TargetDilutionRate != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.TargetDilutionRate))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*ShareDilutionParams)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: ShareDilutionParams: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: ShareDilutionParams: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TargetDilutionRate", wireType)
				}
				x.TargetDilutionRate = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.TargetDilutionRate |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MinDilutionAmount", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.MinDilutionAmount = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MaxDilutionAmount", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.MaxDilutionAmount = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 4:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field DilutionFrequency", wireType)
				}
				x.DilutionFrequency = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.DilutionFrequency |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field LastDilution", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.LastDilution == nil {
					x.LastDilution = &timestamppb.Timestamp{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.LastDilution); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_FeeAccrual                  protoreflect.MessageDescriptor
	fd_FeeAccrual_fee_type         protoreflect.FieldDescriptor
	fd_FeeAccrual_accrued_amount   protoreflect.FieldDescriptor
	fd_FeeAccrual_shares_to_dilute protoreflect.FieldDescriptor
	fd_FeeAccrual_period_start     protoreflect.FieldDescriptor
	fd_FeeAccrual_period_end       protoreflect.FieldDescriptor
	fd_FeeAccrual_collected        protoreflect.FieldDescriptor
)

func init() {
	file_noble_dollar_vaults_v1_fees_proto_init()
	md_FeeAccrual = File_noble_dollar_vaults_v1_fees_proto.Messages().ByName("FeeAccrual")
	fd_FeeAccrual_fee_type = md_FeeAccrual.Fields().ByName("fee_type")
	fd_FeeAccrual_accrued_amount = md_FeeAccrual.Fields().ByName("accrued_amount")
	fd_FeeAccrual_shares_to_dilute = md_FeeAccrual.Fields().ByName("shares_to_dilute")
	fd_FeeAccrual_period_start = md_FeeAccrual.Fields().ByName("period_start")
	fd_FeeAccrual_period_end = md_FeeAccrual.Fields().ByName("period_end")
	fd_FeeAccrual_collected = md_FeeAccrual.Fields().ByName("collected")
}

var _ protoreflect.Message = (*fastReflection_FeeAccrual)(nil)

type fastReflection_FeeAccrual FeeAccrual

func (x *FeeAccrual) ProtoReflect() protoreflect.Message {
	return (*fastReflection_FeeAccrual)(x)
}

func (x *FeeAccrual) slowProtoReflect() protoreflect.Message {
	mi := &file_noble_dollar_vaults_v1_fees_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_FeeAccrual_messageType fastReflection_FeeAccrual_messageType
var _ protoreflect.MessageType = fastReflection_FeeAccrual_messageType{}

type fastReflection_FeeAccrual_messageType struct{}

func (x fastReflection_FeeAccrual_messageType) Zero() protoreflect.Message {
	return (*fastReflection_FeeAccrual)(nil)
}
func (x fastReflection_FeeAccrual_messageType) New() protoreflect.Message {
	return new(fastReflection_FeeAccrual)
}
func (x fastReflection_FeeAccrual_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_FeeAccrual
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_FeeAccrual) Descriptor() protoreflect.MessageDescriptor {
	return md_FeeAccrual
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_FeeAccrual) Type() protoreflect.MessageType {
	return _fastReflection_FeeAccrual_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_FeeAccrual) New() protoreflect.Message {
	return new(fastReflection_FeeAccrual)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_FeeAccrual) Interface() protoreflect.ProtoMessage {
	return (*FeeAccrual)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_FeeAccrual) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.FeeType != 0 {
		value := protoreflect.ValueOfEnum((protoreflect.EnumNumber)(x.FeeType))
		if !f(fd_FeeAccrual_fee_type, value) {
			return
		}
	}
	if x.AccruedAmount != "" {
		value := protoreflect.ValueOfString(x.AccruedAmount)
		if !f(fd_FeeAccrual_accrued_amount, value) {
			return
		}
	}
	if x.SharesToDilute != "" {
		value := protoreflect.ValueOfString(x.SharesToDilute)
		if !f(fd_FeeAccrual_shares_to_dilute, value) {
			return
		}
	}
	if x.PeriodStart != nil {
		value := protoreflect.ValueOfMessage(x.PeriodStart.ProtoReflect())
		if !f(fd_FeeAccrual_period_start, value) {
			return
		}
	}
	if x.PeriodEnd != nil {
		value := protoreflect.ValueOfMessage(x.PeriodEnd.ProtoReflect())
		if !f(fd_FeeAccrual_period_end, value) {
			return
		}
	}
	if x.Collected != false {
		value := protoreflect.ValueOfBool(x.Collected)
		if !f(fd_FeeAccrual_collected, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_FeeAccrual) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "noble.dollar.vaults.v1.FeeAccrual.fee_type":
		return x.FeeType != 0
	case "noble.dollar.vaults.v1.FeeAccrual.accrued_amount":
		return x.AccruedAmount != ""
	case "noble.dollar.vaults.v1.FeeAccrual.shares_to_dilute":
		return x.SharesToDilute != ""
	case "noble.dollar.vaults.v1.FeeAccrual.period_start":
		return x.PeriodStart != nil
	case "noble.dollar.vaults.v1.FeeAccrual.period_end":
		return x.PeriodEnd != nil
	case "noble.dollar.vaults.v1.FeeAccrual.collected":
		return x.Collected != false
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.dollar.vaults.v1.FeeAccrual"))
		}
		panic(fmt.Errorf("message noble.dollar.vaults.v1.FeeAccrual does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_FeeAccrual) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "noble.dollar.vaults.v1.FeeAccrual.fee_type":
		x.FeeType = 0
	case "noble.dollar.vaults.v1.FeeAccrual.accrued_amount":
		x.AccruedAmount = ""
	case "noble.dollar.vaults.v1.FeeAccrual.shares_to_dilute":
		x.SharesToDilute = ""
	case "noble.dollar.vaults.v1.FeeAccrual.period_start":
		x.PeriodStart = nil
	case "noble.dollar.vaults.v1.FeeAccrual.period_end":
		x.PeriodEnd = nil
	case "noble.dollar.vaults.v1.FeeAccrual.collected":
		x.Collected = false
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.dollar.vaults.v1.FeeAccrual"))
		}
		panic(fmt.Errorf("message noble.dollar.vaults.v1.FeeAccrual does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_FeeAccrual) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "noble.dollar.vaults.v1.FeeAccrual.fee_type":
		value := x.FeeType
		return protoreflect.ValueOfEnum((protoreflect.EnumNumber)(value))
	case "noble.dollar.vaults.v1.FeeAccrual.accrued_amount":
		value := x.AccruedAmount
		return protoreflect.ValueOfString(value)
	case "noble.dollar.vaults.v1.FeeAccrual.shares_to_dilute":
		value := x.SharesToDilute
		return protoreflect.ValueOfString(value)
	case "noble.dollar.vaults.v1.FeeAccrual.period_start":
		value := x.PeriodStart
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "noble.dollar.vaults.v1.FeeAccrual.period_end":
		value := x.PeriodEnd
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "noble.dollar.vaults.v1.FeeAccrual.collected":
		value := x.Collected
		return protoreflect.ValueOfBool(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.dollar.vaults.v1.FeeAccrual"))
		}
		panic(fmt.Errorf("message noble.dollar.vaults.v1.FeeAccrual does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_FeeAccrual) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "noble.dollar.vaults.v1.FeeAccrual.fee_type":
		x.FeeType = (FeeType)(value.Enum())
	case "noble.dollar.vaults.v1.FeeAccrual.accrued_amount":
		x.AccruedAmount = value.Interface().(string)
	case "noble.dollar.vaults.v1.FeeAccrual.shares_to_dilute":
		x.SharesToDilute = value.Interface().(string)
	case "noble.dollar.vaults.v1.FeeAccrual.period_start":
		x.PeriodStart = value.Message().Interface().(*timestamppb.Timestamp)
	case "noble.dollar.vaults.v1.FeeAccrual.period_end":
		x.PeriodEnd = value.Message().Interface().(*timestamppb.Timestamp)
	case "noble.dollar.vaults.v1.FeeAccrual.collected":
		x.Collected = value.Bool()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.dollar.vaults.v1.FeeAccrual"))
		}
		panic(fmt.Errorf("message noble.dollar.vaults.v1.FeeAccrual does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_FeeAccrual) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "noble.dollar.vaults.v1.FeeAccrual.period_start":
		if x.PeriodStart == nil {
			x.PeriodStart = new(timestamppb.Timestamp)
		}
		return protoreflect.ValueOfMessage(x.PeriodStart.ProtoReflect())
	case "noble.dollar.vaults.v1.FeeAccrual.period_end":
		if x.PeriodEnd == nil {
			x.PeriodEnd = new(timestamppb.Timestamp)
		}
		return protoreflect.ValueOfMessage(x.PeriodEnd.ProtoReflect())
	case "noble.dollar.vaults.v1.FeeAccrual.fee_type":
		panic(fmt.Errorf("field fee_type of message noble.dollar.vaults.v1.FeeAccrual is not mutable"))
	case "noble.dollar.vaults.v1.FeeAccrual.accrued_amount":
		panic(fmt.Errorf("field accrued_amount of message noble.dollar.vaults.v1.FeeAccrual is not mutable"))
	case "noble.dollar.vaults.v1.FeeAccrual.shares_to_dilute":
		panic(fmt.Errorf("field shares_to_dilute of message noble.dollar.vaults.v1.FeeAccrual is not mutable"))
	case "noble.dollar.vaults.v1.FeeAccrual.collected":
		panic(fmt.Errorf("field collected of message noble.dollar.vaults.v1.FeeAccrual is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.dollar.vaults.v1.FeeAccrual"))
		}
		panic(fmt.Errorf("message noble.dollar.vaults.v1.FeeAccrual does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_FeeAccrual) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "noble.dollar.vaults.v1.FeeAccrual.fee_type":
		return protoreflect.ValueOfEnum(0)
	case "noble.dollar.vaults.v1.FeeAccrual.accrued_amount":
		return protoreflect.ValueOfString("")
	case "noble.dollar.vaults.v1.FeeAccrual.shares_to_dilute":
		return protoreflect.ValueOfString("")
	case "noble.dollar.vaults.v1.FeeAccrual.period_start":
		m := new(timestamppb.Timestamp)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "noble.dollar.vaults.v1.FeeAccrual.period_end":
		m := new(timestamppb.Timestamp)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "noble.dollar.vaults.v1.FeeAccrual.collected":
		return protoreflect.ValueOfBool(false)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.dollar.vaults.v1.FeeAccrual"))
		}
		panic(fmt.Errorf("message noble.dollar.vaults.v1.FeeAccrual does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_FeeAccrual) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in noble.dollar.vaults.v1.FeeAccrual", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_FeeAccrual) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_FeeAccrual) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_FeeAccrual) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_FeeAccrual) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*FeeAccrual)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.FeeType != 0 {
			n += 1 + runtime.Sov(uint64(x.FeeType))
		}
		l = len(x.AccruedAmount)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.SharesToDilute)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.PeriodStart != nil {
			l = options.Size(x.PeriodStart)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.PeriodEnd != nil {
			l = options.Size(x.PeriodEnd)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Collected {
			n += 2
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*FeeAccrual)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.Collected {
			i--
			if x.Collected {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x30
		}
		if x.PeriodEnd != nil {
			encoded, err := options.Marshal(x.PeriodEnd)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x2a
		}
		if x.PeriodStart != nil {
			encoded, err := options.Marshal(x.PeriodStart)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x22
		}
		if len(x.SharesToDilute) > 0 {
			i -= len(x.SharesToDilute)
			copy(dAtA[i:], x.SharesToDilute)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.SharesToDilute)))
			i--
			dAtA[i] = 0x1a
		}
		if len(x.AccruedAmount) > 0 {
			i -= len(x.AccruedAmount)
			copy(dAtA[i:], x.AccruedAmount)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.AccruedAmount)))
			i--
			dAtA[i] = 0x12
		}
		if x.FeeType != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.FeeType))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*FeeAccrual)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: FeeAccrual: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: FeeAccrual: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field FeeType", wireType)
				}
				x.FeeType = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.FeeType |= FeeType(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field AccruedAmount", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.AccruedAmount = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field SharesToDilute", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.SharesToDilute = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PeriodStart", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.PeriodStart == nil {
					x.PeriodStart = &timestamppb.Timestamp{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.PeriodStart); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PeriodEnd", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.PeriodEnd == nil {
					x.PeriodEnd = &timestamppb.Timestamp{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.PeriodEnd); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 6:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Collected", wireType)
				}
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				x.Collected = bool(v != 0)
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var _ protoreflect.List = (*_FeeCollection_5_list)(nil)

type _FeeCollection_5_list struct {
	list *[]*FeeTypeBreakdown
}

func (x *_FeeCollection_5_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_FeeCollection_5_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_FeeCollection_5_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*FeeTypeBreakdown)
	(*x.list)[i] = concreteValue
}

func (x *_FeeCollection_5_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*FeeTypeBreakdown)
	*x.list = append(*x.list, concreteValue)
}

func (x *_FeeCollection_5_list) AppendMutable() protoreflect.Value {
	v := new(FeeTypeBreakdown)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_FeeCollection_5_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_FeeCollection_5_list) NewElement() protoreflect.Value {
	v := new(FeeTypeBreakdown)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_FeeCollection_5_list) IsValid() bool {
	return x.list != nil
}

var (
	md_FeeCollection                protoreflect.MessageDescriptor
	fd_FeeCollection_timestamp      protoreflect.FieldDescriptor
	fd_FeeCollection_total_amount   protoreflect.FieldDescriptor
	fd_FeeCollection_shares_diluted protoreflect.FieldDescriptor
	fd_FeeCollection_method         protoreflect.FieldDescriptor
	fd_FeeCollection_breakdown      protoreflect.FieldDescriptor
	fd_FeeCollection_block_height   protoreflect.FieldDescriptor
)

func init() {
	file_noble_dollar_vaults_v1_fees_proto_init()
	md_FeeCollection = File_noble_dollar_vaults_v1_fees_proto.Messages().ByName("FeeCollection")
	fd_FeeCollection_timestamp = md_FeeCollection.Fields().ByName("timestamp")
	fd_FeeCollection_total_amount = md_FeeCollection.Fields().ByName("total_amount")
	fd_FeeCollection_shares_diluted = md_FeeCollection.Fields().ByName("shares_diluted")
	fd_FeeCollection_method = md_FeeCollection.Fields().ByName("method")
	fd_FeeCollection_breakdown = md_FeeCollection.Fields().ByName("breakdown")
	fd_FeeCollection_block_height = md_FeeCollection.Fields().ByName("block_height")
}

var _ protoreflect.Message = (*fastReflection_FeeCollection)(nil)

type fastReflection_FeeCollection FeeCollection

func (x *FeeCollection) ProtoReflect() protoreflect.Message {
	return (*fastReflection_FeeCollection)(x)
}

func (x *FeeCollection) slowProtoReflect() protoreflect.Message {
	mi := &file_noble_dollar_vaults_v1_fees_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_FeeCollection_messageType fastReflection_FeeCollection_messageType
var _ protoreflect.MessageType = fastReflection_FeeCollection_messageType{}

type fastReflection_FeeCollection_messageType struct{}

func (x fastReflection_FeeCollection_messageType) Zero() protoreflect.Message {
	return (*fastReflection_FeeCollection)(nil)
}
func (x fastReflection_FeeCollection_messageType) New() protoreflect.Message {
	return new(fastReflection_FeeCollection)
}
func (x fastReflection_FeeCollection_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_FeeCollection
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_FeeCollection) Descriptor() protoreflect.MessageDescriptor {
	return md_FeeCollection
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_FeeCollection) Type() protoreflect.MessageType {
	return _fastReflection_FeeCollection_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_FeeCollection) New() protoreflect.Message {
	return new(fastReflection_FeeCollection)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_FeeCollection) Interface() protoreflect.ProtoMessage {
	return (*FeeCollection)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_FeeCollection) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Timestamp != nil {
		value := protoreflect.ValueOfMessage(x.Timestamp.ProtoReflect())
		if !f(fd_FeeCollection_timestamp, value) {
			return
		}
	}
	if x.TotalAmount != "" {
		value := protoreflect.ValueOfString(x.TotalAmount)
		if !f(fd_FeeCollection_total_amount, value) {
			return
		}
	}
	if x.SharesDiluted != "" {
		value := protoreflect.ValueOfString(x.SharesDiluted)
		if !f(fd_FeeCollection_shares_diluted, value) {
			return
		}
	}
	if x.Method != 0 {
		value := protoreflect.ValueOfEnum((protoreflect.EnumNumber)(x.Method))
		if !f(fd_FeeCollection_method, value) {
			return
		}
	}
	if len(x.Breakdown) != 0 {
		value := protoreflect.ValueOfList(&_FeeCollection_5_list{list: &x.Breakdown})
		if !f(fd_FeeCollection_breakdown, value) {
			return
		}
	}
	if x.BlockHeight != int64(0) {
		value := protoreflect.ValueOfInt64(x.BlockHeight)
		if !f(fd_FeeCollection_block_height, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_FeeCollection) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "noble.dollar.vaults.v1.FeeCollection.timestamp":
		return x.Timestamp != nil
	case "noble.dollar.vaults.v1.FeeCollection.total_amount":
		return x.TotalAmount != ""
	case "noble.dollar.vaults.v1.FeeCollection.shares_diluted":
		return x.SharesDiluted != ""
	case "noble.dollar.vaults.v1.FeeCollection.method":
		return x.Method != 0
	case "noble.dollar.vaults.v1.FeeCollection.breakdown":
		return len(x.Breakdown) != 0
	case "noble.dollar.vaults.v1.FeeCollection.block_height":
		return x.BlockHeight != int64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.dollar.vaults.v1.FeeCollection"))
		}
		panic(fmt.Errorf("message noble.dollar.vaults.v1.FeeCollection does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_FeeCollection) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "noble.dollar.vaults.v1.FeeCollection.timestamp":
		x.Timestamp = nil
	case "noble.dollar.vaults.v1.FeeCollection.total_amount":
		x.TotalAmount = ""
	case "noble.dollar.vaults.v1.FeeCollection.shares_diluted":
		x.SharesDiluted = ""
	case "noble.dollar.vaults.v1.FeeCollection.method":
		x.Method = 0
	case "noble.dollar.vaults.v1.FeeCollection.breakdown":
		x.Breakdown = nil
	case "noble.dollar.vaults.v1.FeeCollection.block_height":
		x.BlockHeight = int64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.dollar.vaults.v1.FeeCollection"))
		}
		panic(fmt.Errorf("message noble.dollar.vaults.v1.FeeCollection does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_FeeCollection) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "noble.dollar.vaults.v1.FeeCollection.timestamp":
		value := x.Timestamp
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "noble.dollar.vaults.v1.FeeCollection.total_amount":
		value := x.TotalAmount
		return protoreflect.ValueOfString(value)
	case "noble.dollar.vaults.v1.FeeCollection.shares_diluted":
		value := x.SharesDiluted
		return protoreflect.ValueOfString(value)
	case "noble.dollar.vaults.v1.FeeCollection.method":
		value := x.Method
		return protoreflect.ValueOfEnum((protoreflect.EnumNumber)(value))
	case "noble.dollar.vaults.v1.FeeCollection.breakdown":
		if len(x.Breakdown) == 0 {
			return protoreflect.ValueOfList(&_FeeCollection_5_list{})
		}
		listValue := &_FeeCollection_5_list{list: &x.Breakdown}
		return protoreflect.ValueOfList(listValue)
	case "noble.dollar.vaults.v1.FeeCollection.block_height":
		value := x.BlockHeight
		return protoreflect.ValueOfInt64(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.dollar.vaults.v1.FeeCollection"))
		}
		panic(fmt.Errorf("message noble.dollar.vaults.v1.FeeCollection does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_FeeCollection) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "noble.dollar.vaults.v1.FeeCollection.timestamp":
		x.Timestamp = value.Message().Interface().(*timestamppb.Timestamp)
	case "noble.dollar.vaults.v1.FeeCollection.total_amount":
		x.TotalAmount = value.Interface().(string)
	case "noble.dollar.vaults.v1.FeeCollection.shares_diluted":
		x.SharesDiluted = value.Interface().(string)
	case "noble.dollar.vaults.v1.FeeCollection.method":
		x.Method = (FeeCollectionMethod)(value.Enum())
	case "noble.dollar.vaults.v1.FeeCollection.breakdown":
		lv := value.List()
		clv := lv.(*_FeeCollection_5_list)
		x.Breakdown = *clv.list
	case "noble.dollar.vaults.v1.FeeCollection.block_height":
		x.BlockHeight = value.Int()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.dollar.vaults.v1.FeeCollection"))
		}
		panic(fmt.Errorf("message noble.dollar.vaults.v1.FeeCollection does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_FeeCollection) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "noble.dollar.vaults.v1.FeeCollection.timestamp":
		if x.Timestamp == nil {
			x.Timestamp = new(timestamppb.Timestamp)
		}
		return protoreflect.ValueOfMessage(x.Timestamp.ProtoReflect())
	case "noble.dollar.vaults.v1.FeeCollection.breakdown":
		if x.Breakdown == nil {
			x.Breakdown = []*FeeTypeBreakdown{}
		}
		value := &_FeeCollection_5_list{list: &x.Breakdown}
		return protoreflect.ValueOfList(value)
	case "noble.dollar.vaults.v1.FeeCollection.total_amount":
		panic(fmt.Errorf("field total_amount of message noble.dollar.vaults.v1.FeeCollection is not mutable"))
	case "noble.dollar.vaults.v1.FeeCollection.shares_diluted":
		panic(fmt.Errorf("field shares_diluted of message noble.dollar.vaults.v1.FeeCollection is not mutable"))
	case "noble.dollar.vaults.v1.FeeCollection.method":
		panic(fmt.Errorf("field method of message noble.dollar.vaults.v1.FeeCollection is not mutable"))
	case "noble.dollar.vaults.v1.FeeCollection.block_height":
		panic(fmt.Errorf("field block_height of message noble.dollar.vaults.v1.FeeCollection is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.dollar.vaults.v1.FeeCollection"))
		}
		panic(fmt.Errorf("message noble.dollar.vaults.v1.FeeCollection does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_FeeCollection) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "noble.dollar.vaults.v1.FeeCollection.timestamp":
		m := new(timestamppb.Timestamp)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "noble.dollar.vaults.v1.FeeCollection.total_amount":
		return protoreflect.ValueOfString("")
	case "noble.dollar.vaults.v1.FeeCollection.shares_diluted":
		return protoreflect.ValueOfString("")
	case "noble.dollar.vaults.v1.FeeCollection.method":
		return protoreflect.ValueOfEnum(0)
	case "noble.dollar.vaults.v1.FeeCollection.breakdown":
		list := []*FeeTypeBreakdown{}
		return protoreflect.ValueOfList(&_FeeCollection_5_list{list: &list})
	case "noble.dollar.vaults.v1.FeeCollection.block_height":
		return protoreflect.ValueOfInt64(int64(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.dollar.vaults.v1.FeeCollection"))
		}
		panic(fmt.Errorf("message noble.dollar.vaults.v1.FeeCollection does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_FeeCollection) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in noble.dollar.vaults.v1.FeeCollection", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_FeeCollection) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_FeeCollection) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_FeeCollection) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_FeeCollection) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*FeeCollection)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.Timestamp != nil {
			l = options.Size(x.Timestamp)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.TotalAmount)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.SharesDiluted)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Method != 0 {
			n += 1 + runtime.Sov(uint64(x.Method))
		}
		if len(x.Breakdown) > 0 {
			for _, e := range x.Breakdown {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.BlockHeight != 0 {
			n += 1 + runtime.Sov(uint64(x.BlockHeight))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*FeeCollection)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.BlockHeight != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.BlockHeight))
			i--
			dAtA[i] = 0x30
		}
		if len(x.Breakdown) > 0 {
			for iNdEx := len(x.Breakdown) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.Breakdown[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x2a
			}
		}
		if x.Method != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Method))
			i--
			dAtA[i] = 0x20
		}
		if len(x.SharesDiluted) > 0 {
			i -= len(x.SharesDiluted)
			copy(dAtA[i:], x.SharesDiluted)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.SharesDiluted)))
			i--
			dAtA[i] = 0x1a
		}
		if len(x.TotalAmount) > 0 {
			i -= len(x.TotalAmount)
			copy(dAtA[i:], x.TotalAmount)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.TotalAmount)))
			i--
			dAtA[i] = 0x12
		}
		if x.Timestamp != nil {
			encoded, err := options.Marshal(x.Timestamp)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*FeeCollection)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: FeeCollection: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: FeeCollection: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Timestamp == nil {
					x.Timestamp = &timestamppb.Timestamp{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Timestamp); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TotalAmount", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.TotalAmount = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field SharesDiluted", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.SharesDiluted = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 4:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Method", wireType)
				}
				x.Method = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Method |= FeeCollectionMethod(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Breakdown", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Breakdown = append(x.Breakdown, &FeeTypeBreakdown{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Breakdown[len(x.Breakdown)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 6:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
				}
				x.BlockHeight = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.BlockHeight |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_FeeTypeBreakdown                protoreflect.MessageDescriptor
	fd_FeeTypeBreakdown_fee_type       protoreflect.FieldDescriptor
	fd_FeeTypeBreakdown_amount         protoreflect.FieldDescriptor
	fd_FeeTypeBreakdown_shares_diluted protoreflect.FieldDescriptor
	fd_FeeTypeBreakdown_rate_applied   protoreflect.FieldDescriptor
)

func init() {
	file_noble_dollar_vaults_v1_fees_proto_init()
	md_FeeTypeBreakdown = File_noble_dollar_vaults_v1_fees_proto.Messages().ByName("FeeTypeBreakdown")
	fd_FeeTypeBreakdown_fee_type = md_FeeTypeBreakdown.Fields().ByName("fee_type")
	fd_FeeTypeBreakdown_amount = md_FeeTypeBreakdown.Fields().ByName("amount")
	fd_FeeTypeBreakdown_shares_diluted = md_FeeTypeBreakdown.Fields().ByName("shares_diluted")
	fd_FeeTypeBreakdown_rate_applied = md_FeeTypeBreakdown.Fields().ByName("rate_applied")
}

var _ protoreflect.Message = (*fastReflection_FeeTypeBreakdown)(nil)

type fastReflection_FeeTypeBreakdown FeeTypeBreakdown

func (x *FeeTypeBreakdown) ProtoReflect() protoreflect.Message {
	return (*fastReflection_FeeTypeBreakdown)(x)
}

func (x *FeeTypeBreakdown) slowProtoReflect() protoreflect.Message {
	mi := &file_noble_dollar_vaults_v1_fees_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_FeeTypeBreakdown_messageType fastReflection_FeeTypeBreakdown_messageType
var _ protoreflect.MessageType = fastReflection_FeeTypeBreakdown_messageType{}

type fastReflection_FeeTypeBreakdown_messageType struct{}

func (x fastReflection_FeeTypeBreakdown_messageType) Zero() protoreflect.Message {
	return (*fastReflection_FeeTypeBreakdown)(nil)
}
func (x fastReflection_FeeTypeBreakdown_messageType) New() protoreflect.Message {
	return new(fastReflection_FeeTypeBreakdown)
}
func (x fastReflection_FeeTypeBreakdown_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_FeeTypeBreakdown
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_FeeTypeBreakdown) Descriptor() protoreflect.MessageDescriptor {
	return md_FeeTypeBreakdown
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_FeeTypeBreakdown) Type() protoreflect.MessageType {
	return _fastReflection_FeeTypeBreakdown_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_FeeTypeBreakdown) New() protoreflect.Message {
	return new(fastReflection_FeeTypeBreakdown)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_FeeTypeBreakdown) Interface() protoreflect.ProtoMessage {
	return (*FeeTypeBreakdown)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_FeeTypeBreakdown) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.FeeType != 0 {
		value := protoreflect.ValueOfEnum((protoreflect.EnumNumber)(x.FeeType))
		if !f(fd_FeeTypeBreakdown_fee_type, value) {
			return
		}
	}
	if x.Amount != "" {
		value := protoreflect.ValueOfString(x.Amount)
		if !f(fd_FeeTypeBreakdown_amount, value) {
			return
		}
	}
	if x.SharesDiluted != "" {
		value := protoreflect.ValueOfString(x.SharesDiluted)
		if !f(fd_FeeTypeBreakdown_shares_diluted, value) {
			return
		}
	}
	if x.RateApplied != int32(0) {
		value := protoreflect.ValueOfInt32(x.RateApplied)
		if !f(fd_FeeTypeBreakdown_rate_applied, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_FeeTypeBreakdown) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "noble.dollar.vaults.v1.FeeTypeBreakdown.fee_type":
		return x.FeeType != 0
	case "noble.dollar.vaults.v1.FeeTypeBreakdown.amount":
		return x.Amount != ""
	case "noble.dollar.vaults.v1.FeeTypeBreakdown.shares_diluted":
		return x.SharesDiluted != ""
	case "noble.dollar.vaults.v1.FeeTypeBreakdown.rate_applied":
		return x.RateApplied != int32(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.dollar.vaults.v1.FeeTypeBreakdown"))
		}
		panic(fmt.Errorf("message noble.dollar.vaults.v1.FeeTypeBreakdown does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_FeeTypeBreakdown) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "noble.dollar.vaults.v1.FeeTypeBreakdown.fee_type":
		x.FeeType = 0
	case "noble.dollar.vaults.v1.FeeTypeBreakdown.amount":
		x.Amount = ""
	case "noble.dollar.vaults.v1.FeeTypeBreakdown.shares_diluted":
		x.SharesDiluted = ""
	case "noble.dollar.vaults.v1.FeeTypeBreakdown.rate_applied":
		x.RateApplied = int32(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.dollar.vaults.v1.FeeTypeBreakdown"))
		}
		panic(fmt.Errorf("message noble.dollar.vaults.v1.FeeTypeBreakdown does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_FeeTypeBreakdown) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "noble.dollar.vaults.v1.FeeTypeBreakdown.fee_type":
		value := x.FeeType
		return protoreflect.ValueOfEnum((protoreflect.EnumNumber)(value))
	case "noble.dollar.vaults.v1.FeeTypeBreakdown.amount":
		value := x.Amount
		return protoreflect.ValueOfString(value)
	case "noble.dollar.vaults.v1.FeeTypeBreakdown.shares_diluted":
		value := x.SharesDiluted
		return protoreflect.ValueOfString(value)
	case "noble.dollar.vaults.v1.FeeTypeBreakdown.rate_applied":
		value := x.RateApplied
		return protoreflect.ValueOfInt32(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.dollar.vaults.v1.FeeTypeBreakdown"))
		}
		panic(fmt.Errorf("message noble.dollar.vaults.v1.FeeTypeBreakdown does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_FeeTypeBreakdown) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "noble.dollar.vaults.v1.FeeTypeBreakdown.fee_type":
		x.FeeType = (FeeType)(value.Enum())
	case "noble.dollar.vaults.v1.FeeTypeBreakdown.amount":
		x.Amount = value.Interface().(string)
	case "noble.dollar.vaults.v1.FeeTypeBreakdown.shares_diluted":
		x.SharesDiluted = value.Interface().(string)
	case "noble.dollar.vaults.v1.FeeTypeBreakdown.rate_applied":
		x.RateApplied = int32(value.Int())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.dollar.vaults.v1.FeeTypeBreakdown"))
		}
		panic(fmt.Errorf("message noble.dollar.vaults.v1.FeeTypeBreakdown does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_FeeTypeBreakdown) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "noble.dollar.vaults.v1.FeeTypeBreakdown.fee_type":
		panic(fmt.Errorf("field fee_type of message noble.dollar.vaults.v1.FeeTypeBreakdown is not mutable"))
	case "noble.dollar.vaults.v1.FeeTypeBreakdown.amount":
		panic(fmt.Errorf("field amount of message noble.dollar.vaults.v1.FeeTypeBreakdown is not mutable"))
	case "noble.dollar.vaults.v1.FeeTypeBreakdown.shares_diluted":
		panic(fmt.Errorf("field shares_diluted of message noble.dollar.vaults.v1.FeeTypeBreakdown is not mutable"))
	case "noble.dollar.vaults.v1.FeeTypeBreakdown.rate_applied":
		panic(fmt.Errorf("field rate_applied of message noble.dollar.vaults.v1.FeeTypeBreakdown is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.dollar.vaults.v1.FeeTypeBreakdown"))
		}
		panic(fmt.Errorf("message noble.dollar.vaults.v1.FeeTypeBreakdown does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_FeeTypeBreakdown) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "noble.dollar.vaults.v1.FeeTypeBreakdown.fee_type":
		return protoreflect.ValueOfEnum(0)
	case "noble.dollar.vaults.v1.FeeTypeBreakdown.amount":
		return protoreflect.ValueOfString("")
	case "noble.dollar.vaults.v1.FeeTypeBreakdown.shares_diluted":
		return protoreflect.ValueOfString("")
	case "noble.dollar.vaults.v1.FeeTypeBreakdown.rate_applied":
		return protoreflect.ValueOfInt32(int32(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.dollar.vaults.v1.FeeTypeBreakdown"))
		}
		panic(fmt.Errorf("message noble.dollar.vaults.v1.FeeTypeBreakdown does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_FeeTypeBreakdown) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in noble.dollar.vaults.v1.FeeTypeBreakdown", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_FeeTypeBreakdown) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_FeeTypeBreakdown) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_FeeTypeBreakdown) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_FeeTypeBreakdown) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*FeeTypeBreakdown)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.FeeType != 0 {
			n += 1 + runtime.Sov(uint64(x.FeeType))
		}
		l = len(x.Amount)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.SharesDiluted)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.RateApplied != 0 {
			n += 1 + runtime.Sov(uint64(x.RateApplied))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*FeeTypeBreakdown)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.RateApplied != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.RateApplied))
			i--
			dAtA[i] = 0x20
		}
		if len(x.SharesDiluted) > 0 {
			i -= len(x.SharesDiluted)
			copy(dAtA[i:], x.SharesDiluted)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.SharesDiluted)))
			i--
			dAtA[i] = 0x1a
		}
		if len(x.Amount) > 0 {
			i -= len(x.Amount)
			copy(dAtA[i:], x.Amount)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Amount)))
			i--
			dAtA[i] = 0x12
		}
		if x.FeeType != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.FeeType))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*FeeTypeBreakdown)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: FeeTypeBreakdown: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: FeeTypeBreakdown: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field FeeType", wireType)
				}
				x.FeeType = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.FeeType |= FeeType(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Amount = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field SharesDiluted", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.SharesDiluted = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 4:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field RateApplied", wireType)
				}
				x.RateApplied = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.RateApplied |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_FeeStats                      protoreflect.MessageDescriptor
	fd_FeeStats_total_fees_collected protoreflect.FieldDescriptor
	fd_FeeStats_total_shares_diluted protoreflect.FieldDescriptor
	fd_FeeStats_current_annual_rate  protoreflect.FieldDescriptor
	fd_FeeStats_last_collection      protoreflect.FieldDescriptor
	fd_FeeStats_avg_daily_collection protoreflect.FieldDescriptor
	fd_FeeStats_collection_frequency protoreflect.FieldDescriptor
)

func init() {
	file_noble_dollar_vaults_v1_fees_proto_init()
	md_FeeStats = File_noble_dollar_vaults_v1_fees_proto.Messages().ByName("FeeStats")
	fd_FeeStats_total_fees_collected = md_FeeStats.Fields().ByName("total_fees_collected")
	fd_FeeStats_total_shares_diluted = md_FeeStats.Fields().ByName("total_shares_diluted")
	fd_FeeStats_current_annual_rate = md_FeeStats.Fields().ByName("current_annual_rate")
	fd_FeeStats_last_collection = md_FeeStats.Fields().ByName("last_collection")
	fd_FeeStats_avg_daily_collection = md_FeeStats.Fields().ByName("avg_daily_collection")
	fd_FeeStats_collection_frequency = md_FeeStats.Fields().ByName("collection_frequency")
}

var _ protoreflect.Message = (*fastReflection_FeeStats)(nil)

type fastReflection_FeeStats FeeStats

func (x *FeeStats) ProtoReflect() protoreflect.Message {
	return (*fastReflection_FeeStats)(x)
}

func (x *FeeStats) slowProtoReflect() protoreflect.Message {
	mi := &file_noble_dollar_vaults_v1_fees_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_FeeStats_messageType fastReflection_FeeStats_messageType
var _ protoreflect.MessageType = fastReflection_FeeStats_messageType{}

type fastReflection_FeeStats_messageType struct{}

func (x fastReflection_FeeStats_messageType) Zero() protoreflect.Message {
	return (*fastReflection_FeeStats)(nil)
}
func (x fastReflection_FeeStats_messageType) New() protoreflect.Message {
	return new(fastReflection_FeeStats)
}
func (x fastReflection_FeeStats_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_FeeStats
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_FeeStats) Descriptor() protoreflect.MessageDescriptor {
	return md_FeeStats
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_FeeStats) Type() protoreflect.MessageType {
	return _fastReflection_FeeStats_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_FeeStats) New() protoreflect.Message {
	return new(fastReflection_FeeStats)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_FeeStats) Interface() protoreflect.ProtoMessage {
	return (*FeeStats)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_FeeStats) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.TotalFeesCollected != "" {
		value := protoreflect.ValueOfString(x.TotalFeesCollected)
		if !f(fd_FeeStats_total_fees_collected, value) {
			return
		}
	}
	if x.TotalSharesDiluted != "" {
		value := protoreflect.ValueOfString(x.TotalSharesDiluted)
		if !f(fd_FeeStats_total_shares_diluted, value) {
			return
		}
	}
	if x.CurrentAnnualRate != int32(0) {
		value := protoreflect.ValueOfInt32(x.CurrentAnnualRate)
		if !f(fd_FeeStats_current_annual_rate, value) {
			return
		}
	}
	if x.LastCollection != nil {
		value := protoreflect.ValueOfMessage(x.LastCollection.ProtoReflect())
		if !f(fd_FeeStats_last_collection, value) {
			return
		}
	}
	if x.AvgDailyCollection != "" {
		value := protoreflect.ValueOfString(x.AvgDailyCollection)
		if !f(fd_FeeStats_avg_daily_collection, value) {
			return
		}
	}
	if x.CollectionFrequency != int64(0) {
		value := protoreflect.ValueOfInt64(x.CollectionFrequency)
		if !f(fd_FeeStats_collection_frequency, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_FeeStats) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "noble.dollar.vaults.v1.FeeStats.total_fees_collected":
		return x.TotalFeesCollected != ""
	case "noble.dollar.vaults.v1.FeeStats.total_shares_diluted":
		return x.TotalSharesDiluted != ""
	case "noble.dollar.vaults.v1.FeeStats.current_annual_rate":
		return x.CurrentAnnualRate != int32(0)
	case "noble.dollar.vaults.v1.FeeStats.last_collection":
		return x.LastCollection != nil
	case "noble.dollar.vaults.v1.FeeStats.avg_daily_collection":
		return x.AvgDailyCollection != ""
	case "noble.dollar.vaults.v1.FeeStats.collection_frequency":
		return x.CollectionFrequency != int64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.dollar.vaults.v1.FeeStats"))
		}
		panic(fmt.Errorf("message noble.dollar.vaults.v1.FeeStats does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_FeeStats) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "noble.dollar.vaults.v1.FeeStats.total_fees_collected":
		x.TotalFeesCollected = ""
	case "noble.dollar.vaults.v1.FeeStats.total_shares_diluted":
		x.TotalSharesDiluted = ""
	case "noble.dollar.vaults.v1.FeeStats.current_annual_rate":
		x.CurrentAnnualRate = int32(0)
	case "noble.dollar.vaults.v1.FeeStats.last_collection":
		x.LastCollection = nil
	case "noble.dollar.vaults.v1.FeeStats.avg_daily_collection":
		x.AvgDailyCollection = ""
	case "noble.dollar.vaults.v1.FeeStats.collection_frequency":
		x.CollectionFrequency = int64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.dollar.vaults.v1.FeeStats"))
		}
		panic(fmt.Errorf("message noble.dollar.vaults.v1.FeeStats does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_FeeStats) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "noble.dollar.vaults.v1.FeeStats.total_fees_collected":
		value := x.TotalFeesCollected
		return protoreflect.ValueOfString(value)
	case "noble.dollar.vaults.v1.FeeStats.total_shares_diluted":
		value := x.TotalSharesDiluted
		return protoreflect.ValueOfString(value)
	case "noble.dollar.vaults.v1.FeeStats.current_annual_rate":
		value := x.CurrentAnnualRate
		return protoreflect.ValueOfInt32(value)
	case "noble.dollar.vaults.v1.FeeStats.last_collection":
		value := x.LastCollection
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "noble.dollar.vaults.v1.FeeStats.avg_daily_collection":
		value := x.AvgDailyCollection
		return protoreflect.ValueOfString(value)
	case "noble.dollar.vaults.v1.FeeStats.collection_frequency":
		value := x.CollectionFrequency
		return protoreflect.ValueOfInt64(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.dollar.vaults.v1.FeeStats"))
		}
		panic(fmt.Errorf("message noble.dollar.vaults.v1.FeeStats does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_FeeStats) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "noble.dollar.vaults.v1.FeeStats.total_fees_collected":
		x.TotalFeesCollected = value.Interface().(string)
	case "noble.dollar.vaults.v1.FeeStats.total_shares_diluted":
		x.TotalSharesDiluted = value.Interface().(string)
	case "noble.dollar.vaults.v1.FeeStats.current_annual_rate":
		x.CurrentAnnualRate = int32(value.Int())
	case "noble.dollar.vaults.v1.FeeStats.last_collection":
		x.LastCollection = value.Message().Interface().(*timestamppb.Timestamp)
	case "noble.dollar.vaults.v1.FeeStats.avg_daily_collection":
		x.AvgDailyCollection = value.Interface().(string)
	case "noble.dollar.vaults.v1.FeeStats.collection_frequency":
		x.CollectionFrequency = value.Int()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.dollar.vaults.v1.FeeStats"))
		}
		panic(fmt.Errorf("message noble.dollar.vaults.v1.FeeStats does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_FeeStats) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "noble.dollar.vaults.v1.FeeStats.last_collection":
		if x.LastCollection == nil {
			x.LastCollection = new(timestamppb.Timestamp)
		}
		return protoreflect.ValueOfMessage(x.LastCollection.ProtoReflect())
	case "noble.dollar.vaults.v1.FeeStats.total_fees_collected":
		panic(fmt.Errorf("field total_fees_collected of message noble.dollar.vaults.v1.FeeStats is not mutable"))
	case "noble.dollar.vaults.v1.FeeStats.total_shares_diluted":
		panic(fmt.Errorf("field total_shares_diluted of message noble.dollar.vaults.v1.FeeStats is not mutable"))
	case "noble.dollar.vaults.v1.FeeStats.current_annual_rate":
		panic(fmt.Errorf("field current_annual_rate of message noble.dollar.vaults.v1.FeeStats is not mutable"))
	case "noble.dollar.vaults.v1.FeeStats.avg_daily_collection":
		panic(fmt.Errorf("field avg_daily_collection of message noble.dollar.vaults.v1.FeeStats is not mutable"))
	case "noble.dollar.vaults.v1.FeeStats.collection_frequency":
		panic(fmt.Errorf("field collection_frequency of message noble.dollar.vaults.v1.FeeStats is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.dollar.vaults.v1.FeeStats"))
		}
		panic(fmt.Errorf("message noble.dollar.vaults.v1.FeeStats does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_FeeStats) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "noble.dollar.vaults.v1.FeeStats.total_fees_collected":
		return protoreflect.ValueOfString("")
	case "noble.dollar.vaults.v1.FeeStats.total_shares_diluted":
		return protoreflect.ValueOfString("")
	case "noble.dollar.vaults.v1.FeeStats.current_annual_rate":
		return protoreflect.ValueOfInt32(int32(0))
	case "noble.dollar.vaults.v1.FeeStats.last_collection":
		m := new(timestamppb.Timestamp)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "noble.dollar.vaults.v1.FeeStats.avg_daily_collection":
		return protoreflect.ValueOfString("")
	case "noble.dollar.vaults.v1.FeeStats.collection_frequency":
		return protoreflect.ValueOfInt64(int64(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.dollar.vaults.v1.FeeStats"))
		}
		panic(fmt.Errorf("message noble.dollar.vaults.v1.FeeStats does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_FeeStats) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in noble.dollar.vaults.v1.FeeStats", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_FeeStats) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_FeeStats) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_FeeStats) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_FeeStats) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*FeeStats)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.TotalFeesCollected)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.TotalSharesDiluted)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.CurrentAnnualRate != 0 {
			n += 1 + runtime.Sov(uint64(x.CurrentAnnualRate))
		}
		if x.LastCollection != nil {
			l = options.Size(x.LastCollection)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.AvgDailyCollection)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.CollectionFrequency != 0 {
			n += 1 + runtime.Sov(uint64(x.CollectionFrequency))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*FeeStats)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.CollectionFrequency != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.CollectionFrequency))
			i--
			dAtA[i] = 0x30
		}
		if len(x.AvgDailyCollection) > 0 {
			i -= len(x.AvgDailyCollection)
			copy(dAtA[i:], x.AvgDailyCollection)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.AvgDailyCollection)))
			i--
			dAtA[i] = 0x2a
		}
		if x.LastCollection != nil {
			encoded, err := options.Marshal(x.LastCollection)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x22
		}
		if x.CurrentAnnualRate != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.CurrentAnnualRate))
			i--
			dAtA[i] = 0x18
		}
		if len(x.TotalSharesDiluted) > 0 {
			i -= len(x.TotalSharesDiluted)
			copy(dAtA[i:], x.TotalSharesDiluted)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.TotalSharesDiluted)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.TotalFeesCollected) > 0 {
			i -= len(x.TotalFeesCollected)
			copy(dAtA[i:], x.TotalFeesCollected)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.TotalFeesCollected)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*FeeStats)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: FeeStats: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: FeeStats: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TotalFeesCollected", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.TotalFeesCollected = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TotalSharesDiluted", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.TotalSharesDiluted = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field CurrentAnnualRate", wireType)
				}
				x.CurrentAnnualRate = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.CurrentAnnualRate |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field LastCollection", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.LastCollection == nil {
					x.LastCollection = &timestamppb.Timestamp{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.LastCollection); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field AvgDailyCollection", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.AvgDailyCollection = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 6:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field CollectionFrequency", wireType)
				}
				x.CollectionFrequency = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.CollectionFrequency |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_PerformanceFeeState                          protoreflect.MessageDescriptor
	fd_PerformanceFeeState_high_water_mark          protoreflect.FieldDescriptor
	fd_PerformanceFeeState_last_calculation         protoreflect.FieldDescriptor
	fd_PerformanceFeeState_period_start             protoreflect.FieldDescriptor
	fd_PerformanceFeeState_accrued_performance_fees protoreflect.FieldDescriptor
	fd_PerformanceFeeState_active                   protoreflect.FieldDescriptor
)

func init() {
	file_noble_dollar_vaults_v1_fees_proto_init()
	md_PerformanceFeeState = File_noble_dollar_vaults_v1_fees_proto.Messages().ByName("PerformanceFeeState")
	fd_PerformanceFeeState_high_water_mark = md_PerformanceFeeState.Fields().ByName("high_water_mark")
	fd_PerformanceFeeState_last_calculation = md_PerformanceFeeState.Fields().ByName("last_calculation")
	fd_PerformanceFeeState_period_start = md_PerformanceFeeState.Fields().ByName("period_start")
	fd_PerformanceFeeState_accrued_performance_fees = md_PerformanceFeeState.Fields().ByName("accrued_performance_fees")
	fd_PerformanceFeeState_active = md_PerformanceFeeState.Fields().ByName("active")
}

var _ protoreflect.Message = (*fastReflection_PerformanceFeeState)(nil)

type fastReflection_PerformanceFeeState PerformanceFeeState

func (x *PerformanceFeeState) ProtoReflect() protoreflect.Message {
	return (*fastReflection_PerformanceFeeState)(x)
}

func (x *PerformanceFeeState) slowProtoReflect() protoreflect.Message {
	mi := &file_noble_dollar_vaults_v1_fees_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_PerformanceFeeState_messageType fastReflection_PerformanceFeeState_messageType
var _ protoreflect.MessageType = fastReflection_PerformanceFeeState_messageType{}

type fastReflection_PerformanceFeeState_messageType struct{}

func (x fastReflection_PerformanceFeeState_messageType) Zero() protoreflect.Message {
	return (*fastReflection_PerformanceFeeState)(nil)
}
func (x fastReflection_PerformanceFeeState_messageType) New() protoreflect.Message {
	return new(fastReflection_PerformanceFeeState)
}
func (x fastReflection_PerformanceFeeState_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_PerformanceFeeState
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_PerformanceFeeState) Descriptor() protoreflect.MessageDescriptor {
	return md_PerformanceFeeState
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_PerformanceFeeState) Type() protoreflect.MessageType {
	return _fastReflection_PerformanceFeeState_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_PerformanceFeeState) New() protoreflect.Message {
	return new(fastReflection_PerformanceFeeState)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_PerformanceFeeState) Interface() protoreflect.ProtoMessage {
	return (*PerformanceFeeState)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_PerformanceFeeState) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.HighWaterMark != "" {
		value := protoreflect.ValueOfString(x.HighWaterMark)
		if !f(fd_PerformanceFeeState_high_water_mark, value) {
			return
		}
	}
	if x.LastCalculation != nil {
		value := protoreflect.ValueOfMessage(x.LastCalculation.ProtoReflect())
		if !f(fd_PerformanceFeeState_last_calculation, value) {
			return
		}
	}
	if x.PeriodStart != nil {
		value := protoreflect.ValueOfMessage(x.PeriodStart.ProtoReflect())
		if !f(fd_PerformanceFeeState_period_start, value) {
			return
		}
	}
	if x.AccruedPerformanceFees != "" {
		value := protoreflect.ValueOfString(x.AccruedPerformanceFees)
		if !f(fd_PerformanceFeeState_accrued_performance_fees, value) {
			return
		}
	}
	if x.Active != false {
		value := protoreflect.ValueOfBool(x.Active)
		if !f(fd_PerformanceFeeState_active, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_PerformanceFeeState) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "noble.dollar.vaults.v1.PerformanceFeeState.high_water_mark":
		return x.HighWaterMark != ""
	case "noble.dollar.vaults.v1.PerformanceFeeState.last_calculation":
		return x.LastCalculation != nil
	case "noble.dollar.vaults.v1.PerformanceFeeState.period_start":
		return x.PeriodStart != nil
	case "noble.dollar.vaults.v1.PerformanceFeeState.accrued_performance_fees":
		return x.AccruedPerformanceFees != ""
	case "noble.dollar.vaults.v1.PerformanceFeeState.active":
		return x.Active != false
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.dollar.vaults.v1.PerformanceFeeState"))
		}
		panic(fmt.Errorf("message noble.dollar.vaults.v1.PerformanceFeeState does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_PerformanceFeeState) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "noble.dollar.vaults.v1.PerformanceFeeState.high_water_mark":
		x.HighWaterMark = ""
	case "noble.dollar.vaults.v1.PerformanceFeeState.last_calculation":
		x.LastCalculation = nil
	case "noble.dollar.vaults.v1.PerformanceFeeState.period_start":
		x.PeriodStart = nil
	case "noble.dollar.vaults.v1.PerformanceFeeState.accrued_performance_fees":
		x.AccruedPerformanceFees = ""
	case "noble.dollar.vaults.v1.PerformanceFeeState.active":
		x.Active = false
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.dollar.vaults.v1.PerformanceFeeState"))
		}
		panic(fmt.Errorf("message noble.dollar.vaults.v1.PerformanceFeeState does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_PerformanceFeeState) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "noble.dollar.vaults.v1.PerformanceFeeState.high_water_mark":
		value := x.HighWaterMark
		return protoreflect.ValueOfString(value)
	case "noble.dollar.vaults.v1.PerformanceFeeState.last_calculation":
		value := x.LastCalculation
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "noble.dollar.vaults.v1.PerformanceFeeState.period_start":
		value := x.PeriodStart
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "noble.dollar.vaults.v1.PerformanceFeeState.accrued_performance_fees":
		value := x.AccruedPerformanceFees
		return protoreflect.ValueOfString(value)
	case "noble.dollar.vaults.v1.PerformanceFeeState.active":
		value := x.Active
		return protoreflect.ValueOfBool(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.dollar.vaults.v1.PerformanceFeeState"))
		}
		panic(fmt.Errorf("message noble.dollar.vaults.v1.PerformanceFeeState does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_PerformanceFeeState) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "noble.dollar.vaults.v1.PerformanceFeeState.high_water_mark":
		x.HighWaterMark = value.Interface().(string)
	case "noble.dollar.vaults.v1.PerformanceFeeState.last_calculation":
		x.LastCalculation = value.Message().Interface().(*timestamppb.Timestamp)
	case "noble.dollar.vaults.v1.PerformanceFeeState.period_start":
		x.PeriodStart = value.Message().Interface().(*timestamppb.Timestamp)
	case "noble.dollar.vaults.v1.PerformanceFeeState.accrued_performance_fees":
		x.AccruedPerformanceFees = value.Interface().(string)
	case "noble.dollar.vaults.v1.PerformanceFeeState.active":
		x.Active = value.Bool()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.dollar.vaults.v1.PerformanceFeeState"))
		}
		panic(fmt.Errorf("message noble.dollar.vaults.v1.PerformanceFeeState does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_PerformanceFeeState) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "noble.dollar.vaults.v1.PerformanceFeeState.last_calculation":
		if x.LastCalculation == nil {
			x.LastCalculation = new(timestamppb.Timestamp)
		}
		return protoreflect.ValueOfMessage(x.LastCalculation.ProtoReflect())
	case "noble.dollar.vaults.v1.PerformanceFeeState.period_start":
		if x.PeriodStart == nil {
			x.PeriodStart = new(timestamppb.Timestamp)
		}
		return protoreflect.ValueOfMessage(x.PeriodStart.ProtoReflect())
	case "noble.dollar.vaults.v1.PerformanceFeeState.high_water_mark":
		panic(fmt.Errorf("field high_water_mark of message noble.dollar.vaults.v1.PerformanceFeeState is not mutable"))
	case "noble.dollar.vaults.v1.PerformanceFeeState.accrued_performance_fees":
		panic(fmt.Errorf("field accrued_performance_fees of message noble.dollar.vaults.v1.PerformanceFeeState is not mutable"))
	case "noble.dollar.vaults.v1.PerformanceFeeState.active":
		panic(fmt.Errorf("field active of message noble.dollar.vaults.v1.PerformanceFeeState is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.dollar.vaults.v1.PerformanceFeeState"))
		}
		panic(fmt.Errorf("message noble.dollar.vaults.v1.PerformanceFeeState does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_PerformanceFeeState) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "noble.dollar.vaults.v1.PerformanceFeeState.high_water_mark":
		return protoreflect.ValueOfString("")
	case "noble.dollar.vaults.v1.PerformanceFeeState.last_calculation":
		m := new(timestamppb.Timestamp)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "noble.dollar.vaults.v1.PerformanceFeeState.period_start":
		m := new(timestamppb.Timestamp)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "noble.dollar.vaults.v1.PerformanceFeeState.accrued_performance_fees":
		return protoreflect.ValueOfString("")
	case "noble.dollar.vaults.v1.PerformanceFeeState.active":
		return protoreflect.ValueOfBool(false)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.dollar.vaults.v1.PerformanceFeeState"))
		}
		panic(fmt.Errorf("message noble.dollar.vaults.v1.PerformanceFeeState does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_PerformanceFeeState) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in noble.dollar.vaults.v1.PerformanceFeeState", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_PerformanceFeeState) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_PerformanceFeeState) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_PerformanceFeeState) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_PerformanceFeeState) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*PerformanceFeeState)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.HighWaterMark)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.LastCalculation != nil {
			l = options.Size(x.LastCalculation)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.PeriodStart != nil {
			l = options.Size(x.PeriodStart)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.AccruedPerformanceFees)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Active {
			n += 2
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*PerformanceFeeState)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.Active {
			i--
			if x.Active {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x28
		}
		if len(x.AccruedPerformanceFees) > 0 {
			i -= len(x.AccruedPerformanceFees)
			copy(dAtA[i:], x.AccruedPerformanceFees)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.AccruedPerformanceFees)))
			i--
			dAtA[i] = 0x22
		}
		if x.PeriodStart != nil {
			encoded, err := options.Marshal(x.PeriodStart)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x1a
		}
		if x.LastCalculation != nil {
			encoded, err := options.Marshal(x.LastCalculation)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.HighWaterMark) > 0 {
			i -= len(x.HighWaterMark)
			copy(dAtA[i:], x.HighWaterMark)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.HighWaterMark)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*PerformanceFeeState)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: PerformanceFeeState: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: PerformanceFeeState: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field HighWaterMark", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.HighWaterMark = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field LastCalculation", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.LastCalculation == nil {
					x.LastCalculation = &timestamppb.Timestamp{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.LastCalculation); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PeriodStart", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.PeriodStart == nil {
					x.PeriodStart = &timestamppb.Timestamp{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.PeriodStart); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field AccruedPerformanceFees", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.AccruedPerformanceFees = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 5:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Active", wireType)
				}
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				x.Active = bool(v != 0)
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var _ protoreflect.List = (*_FeeExemption_2_list)(nil)

type _FeeExemption_2_list struct {
	list *[]FeeType
}

func (x *_FeeExemption_2_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_FeeExemption_2_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfEnum((protoreflect.EnumNumber)((*x.list)[i]))
}

func (x *_FeeExemption_2_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Enum()
	concreteValue := (FeeType)(valueUnwrapped)
	(*x.list)[i] = concreteValue
}

func (x *_FeeExemption_2_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Enum()
	concreteValue := (FeeType)(valueUnwrapped)
	*x.list = append(*x.list, concreteValue)
}

func (x *_FeeExemption_2_list) AppendMutable() protoreflect.Value {
	panic(fmt.Errorf("AppendMutable can not be called on message FeeExemption at list field ExemptedTypes as it is not of Message kind"))
}

func (x *_FeeExemption_2_list) Truncate(n int) {
	*x.list = (*x.list)[:n]
}

func (x *_FeeExemption_2_list) NewElement() protoreflect.Value {
	v := 0
	return protoreflect.ValueOfEnum((protoreflect.EnumNumber)(v))
}

func (x *_FeeExemption_2_list) IsValid() bool {
	return x.list != nil
}

var (
	md_FeeExemption                protoreflect.MessageDescriptor
	fd_FeeExemption_address        protoreflect.FieldDescriptor
	fd_FeeExemption_exempted_types protoreflect.FieldDescriptor
	fd_FeeExemption_expiry         protoreflect.FieldDescriptor
	fd_FeeExemption_reason         protoreflect.FieldDescriptor
	fd_FeeExemption_active         protoreflect.FieldDescriptor
)

func init() {
	file_noble_dollar_vaults_v1_fees_proto_init()
	md_FeeExemption = File_noble_dollar_vaults_v1_fees_proto.Messages().ByName("FeeExemption")
	fd_FeeExemption_address = md_FeeExemption.Fields().ByName("address")
	fd_FeeExemption_exempted_types = md_FeeExemption.Fields().ByName("exempted_types")
	fd_FeeExemption_expiry = md_FeeExemption.Fields().ByName("expiry")
	fd_FeeExemption_reason = md_FeeExemption.Fields().ByName("reason")
	fd_FeeExemption_active = md_FeeExemption.Fields().ByName("active")
}

var _ protoreflect.Message = (*fastReflection_FeeExemption)(nil)

type fastReflection_FeeExemption FeeExemption

func (x *FeeExemption) ProtoReflect() protoreflect.Message {
	return (*fastReflection_FeeExemption)(x)
}

func (x *FeeExemption) slowProtoReflect() protoreflect.Message {
	mi := &file_noble_dollar_vaults_v1_fees_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_FeeExemption_messageType fastReflection_FeeExemption_messageType
var _ protoreflect.MessageType = fastReflection_FeeExemption_messageType{}

type fastReflection_FeeExemption_messageType struct{}

func (x fastReflection_FeeExemption_messageType) Zero() protoreflect.Message {
	return (*fastReflection_FeeExemption)(nil)
}
func (x fastReflection_FeeExemption_messageType) New() protoreflect.Message {
	return new(fastReflection_FeeExemption)
}
func (x fastReflection_FeeExemption_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_FeeExemption
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_FeeExemption) Descriptor() protoreflect.MessageDescriptor {
	return md_FeeExemption
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_FeeExemption) Type() protoreflect.MessageType {
	return _fastReflection_FeeExemption_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_FeeExemption) New() protoreflect.Message {
	return new(fastReflection_FeeExemption)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_FeeExemption) Interface() protoreflect.ProtoMessage {
	return (*FeeExemption)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_FeeExemption) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if len(x.Address) != 0 {
		value := protoreflect.ValueOfBytes(x.Address)
		if !f(fd_FeeExemption_address, value) {
			return
		}
	}
	if len(x.ExemptedTypes) != 0 {
		value := protoreflect.ValueOfList(&_FeeExemption_2_list{list: &x.ExemptedTypes})
		if !f(fd_FeeExemption_exempted_types, value) {
			return
		}
	}
	if x.Expiry != nil {
		value := protoreflect.ValueOfMessage(x.Expiry.ProtoReflect())
		if !f(fd_FeeExemption_expiry, value) {
			return
		}
	}
	if x.Reason != "" {
		value := protoreflect.ValueOfString(x.Reason)
		if !f(fd_FeeExemption_reason, value) {
			return
		}
	}
	if x.Active != false {
		value := protoreflect.ValueOfBool(x.Active)
		if !f(fd_FeeExemption_active, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_FeeExemption) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "noble.dollar.vaults.v1.FeeExemption.address":
		return len(x.Address) != 0
	case "noble.dollar.vaults.v1.FeeExemption.exempted_types":
		return len(x.ExemptedTypes) != 0
	case "noble.dollar.vaults.v1.FeeExemption.expiry":
		return x.Expiry != nil
	case "noble.dollar.vaults.v1.FeeExemption.reason":
		return x.Reason != ""
	case "noble.dollar.vaults.v1.FeeExemption.active":
		return x.Active != false
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.dollar.vaults.v1.FeeExemption"))
		}
		panic(fmt.Errorf("message noble.dollar.vaults.v1.FeeExemption does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_FeeExemption) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "noble.dollar.vaults.v1.FeeExemption.address":
		x.Address = nil
	case "noble.dollar.vaults.v1.FeeExemption.exempted_types":
		x.ExemptedTypes = nil
	case "noble.dollar.vaults.v1.FeeExemption.expiry":
		x.Expiry = nil
	case "noble.dollar.vaults.v1.FeeExemption.reason":
		x.Reason = ""
	case "noble.dollar.vaults.v1.FeeExemption.active":
		x.Active = false
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.dollar.vaults.v1.FeeExemption"))
		}
		panic(fmt.Errorf("message noble.dollar.vaults.v1.FeeExemption does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_FeeExemption) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "noble.dollar.vaults.v1.FeeExemption.address":
		value := x.Address
		return protoreflect.ValueOfBytes(value)
	case "noble.dollar.vaults.v1.FeeExemption.exempted_types":
		if len(x.ExemptedTypes) == 0 {
			return protoreflect.ValueOfList(&_FeeExemption_2_list{})
		}
		listValue := &_FeeExemption_2_list{list: &x.ExemptedTypes}
		return protoreflect.ValueOfList(listValue)
	case "noble.dollar.vaults.v1.FeeExemption.expiry":
		value := x.Expiry
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "noble.dollar.vaults.v1.FeeExemption.reason":
		value := x.Reason
		return protoreflect.ValueOfString(value)
	case "noble.dollar.vaults.v1.FeeExemption.active":
		value := x.Active
		return protoreflect.ValueOfBool(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.dollar.vaults.v1.FeeExemption"))
		}
		panic(fmt.Errorf("message noble.dollar.vaults.v1.FeeExemption does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_FeeExemption) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "noble.dollar.vaults.v1.FeeExemption.address":
		x.Address = value.Bytes()
	case "noble.dollar.vaults.v1.FeeExemption.exempted_types":
		lv := value.List()
		clv := lv.(*_FeeExemption_2_list)
		x.ExemptedTypes = *clv.list
	case "noble.dollar.vaults.v1.FeeExemption.expiry":
		x.Expiry = value.Message().Interface().(*timestamppb.Timestamp)
	case "noble.dollar.vaults.v1.FeeExemption.reason":
		x.Reason = value.Interface().(string)
	case "noble.dollar.vaults.v1.FeeExemption.active":
		x.Active = value.Bool()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.dollar.vaults.v1.FeeExemption"))
		}
		panic(fmt.Errorf("message noble.dollar.vaults.v1.FeeExemption does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_FeeExemption) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "noble.dollar.vaults.v1.FeeExemption.exempted_types":
		if x.ExemptedTypes == nil {
			x.ExemptedTypes = []FeeType{}
		}
		value := &_FeeExemption_2_list{list: &x.ExemptedTypes}
		return protoreflect.ValueOfList(value)
	case "noble.dollar.vaults.v1.FeeExemption.expiry":
		if x.Expiry == nil {
			x.Expiry = new(timestamppb.Timestamp)
		}
		return protoreflect.ValueOfMessage(x.Expiry.ProtoReflect())
	case "noble.dollar.vaults.v1.FeeExemption.address":
		panic(fmt.Errorf("field address of message noble.dollar.vaults.v1.FeeExemption is not mutable"))
	case "noble.dollar.vaults.v1.FeeExemption.reason":
		panic(fmt.Errorf("field reason of message noble.dollar.vaults.v1.FeeExemption is not mutable"))
	case "noble.dollar.vaults.v1.FeeExemption.active":
		panic(fmt.Errorf("field active of message noble.dollar.vaults.v1.FeeExemption is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.dollar.vaults.v1.FeeExemption"))
		}
		panic(fmt.Errorf("message noble.dollar.vaults.v1.FeeExemption does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_FeeExemption) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "noble.dollar.vaults.v1.FeeExemption.address":
		return protoreflect.ValueOfBytes(nil)
	case "noble.dollar.vaults.v1.FeeExemption.exempted_types":
		list := []FeeType{}
		return protoreflect.ValueOfList(&_FeeExemption_2_list{list: &list})
	case "noble.dollar.vaults.v1.FeeExemption.expiry":
		m := new(timestamppb.Timestamp)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "noble.dollar.vaults.v1.FeeExemption.reason":
		return protoreflect.ValueOfString("")
	case "noble.dollar.vaults.v1.FeeExemption.active":
		return protoreflect.ValueOfBool(false)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.dollar.vaults.v1.FeeExemption"))
		}
		panic(fmt.Errorf("message noble.dollar.vaults.v1.FeeExemption does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_FeeExemption) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in noble.dollar.vaults.v1.FeeExemption", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_FeeExemption) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_FeeExemption) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_FeeExemption) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_FeeExemption) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*FeeExemption)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.Address)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if len(x.ExemptedTypes) > 0 {
			l = 0
			for _, e := range x.ExemptedTypes {
				l += runtime.Sov(uint64(e))
			}
			n += 1 + runtime.Sov(uint64(l)) + l
		}
		if x.Expiry != nil {
			l = options.Size(x.Expiry)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Reason)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Active {
			n += 2
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*FeeExemption)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.Active {
			i--
			if x.Active {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x28
		}
		if len(x.Reason) > 0 {
			i -= len(x.Reason)
			copy(dAtA[i:], x.Reason)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Reason)))
			i--
			dAtA[i] = 0x22
		}
		if x.Expiry != nil {
			encoded, err := options.Marshal(x.Expiry)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x1a
		}
		if len(x.ExemptedTypes) > 0 {
			var pksize2 int
			for _, num := range x.ExemptedTypes {
				pksize2 += runtime.Sov(uint64(num))
			}
			i -= pksize2
			j1 := i
			for _, num1 := range x.ExemptedTypes {
				num := uint64(num1)
				for num >= 1<<7 {
					dAtA[j1] = uint8(uint64(num)&0x7f | 0x80)
					num >>= 7
					j1++
				}
				dAtA[j1] = uint8(num)
				j1++
			}
			i = runtime.EncodeVarint(dAtA, i, uint64(pksize2))
			i--
			dAtA[i] = 0x12
		}
		if len(x.Address) > 0 {
			i -= len(x.Address)
			copy(dAtA[i:], x.Address)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Address)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*FeeExemption)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: FeeExemption: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: FeeExemption: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Address = append(x.Address[:0], dAtA[iNdEx:postIndex]...)
				if x.Address == nil {
					x.Address = []byte{}
				}
				iNdEx = postIndex
			case 2:
				if wireType == 0 {
					var v FeeType
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
						}
						if iNdEx >= l {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= FeeType(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					x.ExemptedTypes = append(x.ExemptedTypes, v)
				} else if wireType == 2 {
					var packedLen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
						}
						if iNdEx >= l {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						packedLen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if packedLen < 0 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
					}
					postIndex := iNdEx + packedLen
					if postIndex < 0 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
					}
					if postIndex > l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					var elementCount int
					if elementCount != 0 && len(x.ExemptedTypes) == 0 {
						x.ExemptedTypes = make([]FeeType, 0, elementCount)
					}
					for iNdEx < postIndex {
						var v FeeType
						for shift := uint(0); ; shift += 7 {
							if shift >= 64 {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
							}
							if iNdEx >= l {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
							}
							b := dAtA[iNdEx]
							iNdEx++
							v |= FeeType(b&0x7F) << shift
							if b < 0x80 {
								break
							}
						}
						x.ExemptedTypes = append(x.ExemptedTypes, v)
					}
				} else {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ExemptedTypes", wireType)
				}
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Expiry", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Expiry == nil {
					x.Expiry = &timestamppb.Timestamp{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Expiry); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Reason = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 5:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Active", wireType)
				}
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				x.Active = bool(v != 0)
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_FeeSchedule                protoreflect.MessageDescriptor
	fd_FeeSchedule_effective_date protoreflect.FieldDescriptor
	fd_FeeSchedule_fee_config     protoreflect.FieldDescriptor
	fd_FeeSchedule_active         protoreflect.FieldDescriptor
	fd_FeeSchedule_description    protoreflect.FieldDescriptor
)

func init() {
	file_noble_dollar_vaults_v1_fees_proto_init()
	md_FeeSchedule = File_noble_dollar_vaults_v1_fees_proto.Messages().ByName("FeeSchedule")
	fd_FeeSchedule_effective_date = md_FeeSchedule.Fields().ByName("effective_date")
	fd_FeeSchedule_fee_config = md_FeeSchedule.Fields().ByName("fee_config")
	fd_FeeSchedule_active = md_FeeSchedule.Fields().ByName("active")
	fd_FeeSchedule_description = md_FeeSchedule.Fields().ByName("description")
}

var _ protoreflect.Message = (*fastReflection_FeeSchedule)(nil)

type fastReflection_FeeSchedule FeeSchedule

func (x *FeeSchedule) ProtoReflect() protoreflect.Message {
	return (*fastReflection_FeeSchedule)(x)
}

func (x *FeeSchedule) slowProtoReflect() protoreflect.Message {
	mi := &file_noble_dollar_vaults_v1_fees_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_FeeSchedule_messageType fastReflection_FeeSchedule_messageType
var _ protoreflect.MessageType = fastReflection_FeeSchedule_messageType{}

type fastReflection_FeeSchedule_messageType struct{}

func (x fastReflection_FeeSchedule_messageType) Zero() protoreflect.Message {
	return (*fastReflection_FeeSchedule)(nil)
}
func (x fastReflection_FeeSchedule_messageType) New() protoreflect.Message {
	return new(fastReflection_FeeSchedule)
}
func (x fastReflection_FeeSchedule_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_FeeSchedule
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_FeeSchedule) Descriptor() protoreflect.MessageDescriptor {
	return md_FeeSchedule
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_FeeSchedule) Type() protoreflect.MessageType {
	return _fastReflection_FeeSchedule_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_FeeSchedule) New() protoreflect.Message {
	return new(fastReflection_FeeSchedule)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_FeeSchedule) Interface() protoreflect.ProtoMessage {
	return (*FeeSchedule)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_FeeSchedule) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.EffectiveDate != nil {
		value := protoreflect.ValueOfMessage(x.EffectiveDate.ProtoReflect())
		if !f(fd_FeeSchedule_effective_date, value) {
			return
		}
	}
	if x.FeeConfig != nil {
		value := protoreflect.ValueOfMessage(x.FeeConfig.ProtoReflect())
		if !f(fd_FeeSchedule_fee_config, value) {
			return
		}
	}
	if x.Active != false {
		value := protoreflect.ValueOfBool(x.Active)
		if !f(fd_FeeSchedule_active, value) {
			return
		}
	}
	if x.Description != "" {
		value := protoreflect.ValueOfString(x.Description)
		if !f(fd_FeeSchedule_description, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_FeeSchedule) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "noble.dollar.vaults.v1.FeeSchedule.effective_date":
		return x.EffectiveDate != nil
	case "noble.dollar.vaults.v1.FeeSchedule.fee_config":
		return x.FeeConfig != nil
	case "noble.dollar.vaults.v1.FeeSchedule.active":
		return x.Active != false
	case "noble.dollar.vaults.v1.FeeSchedule.description":
		return x.Description != ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.dollar.vaults.v1.FeeSchedule"))
		}
		panic(fmt.Errorf("message noble.dollar.vaults.v1.FeeSchedule does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_FeeSchedule) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "noble.dollar.vaults.v1.FeeSchedule.effective_date":
		x.EffectiveDate = nil
	case "noble.dollar.vaults.v1.FeeSchedule.fee_config":
		x.FeeConfig = nil
	case "noble.dollar.vaults.v1.FeeSchedule.active":
		x.Active = false
	case "noble.dollar.vaults.v1.FeeSchedule.description":
		x.Description = ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.dollar.vaults.v1.FeeSchedule"))
		}
		panic(fmt.Errorf("message noble.dollar.vaults.v1.FeeSchedule does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_FeeSchedule) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "noble.dollar.vaults.v1.FeeSchedule.effective_date":
		value := x.EffectiveDate
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "noble.dollar.vaults.v1.FeeSchedule.fee_config":
		value := x.FeeConfig
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "noble.dollar.vaults.v1.FeeSchedule.active":
		value := x.Active
		return protoreflect.ValueOfBool(value)
	case "noble.dollar.vaults.v1.FeeSchedule.description":
		value := x.Description
		return protoreflect.ValueOfString(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.dollar.vaults.v1.FeeSchedule"))
		}
		panic(fmt.Errorf("message noble.dollar.vaults.v1.FeeSchedule does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_FeeSchedule) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "noble.dollar.vaults.v1.FeeSchedule.effective_date":
		x.EffectiveDate = value.Message().Interface().(*timestamppb.Timestamp)
	case "noble.dollar.vaults.v1.FeeSchedule.fee_config":
		x.FeeConfig = value.Message().Interface().(*FeeConfig)
	case "noble.dollar.vaults.v1.FeeSchedule.active":
		x.Active = value.Bool()
	case "noble.dollar.vaults.v1.FeeSchedule.description":
		x.Description = value.Interface().(string)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.dollar.vaults.v1.FeeSchedule"))
		}
		panic(fmt.Errorf("message noble.dollar.vaults.v1.FeeSchedule does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_FeeSchedule) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "noble.dollar.vaults.v1.FeeSchedule.effective_date":
		if x.EffectiveDate == nil {
			x.EffectiveDate = new(timestamppb.Timestamp)
		}
		return protoreflect.ValueOfMessage(x.EffectiveDate.ProtoReflect())
	case "noble.dollar.vaults.v1.FeeSchedule.fee_config":
		if x.FeeConfig == nil {
			x.FeeConfig = new(FeeConfig)
		}
		return protoreflect.ValueOfMessage(x.FeeConfig.ProtoReflect())
	case "noble.dollar.vaults.v1.FeeSchedule.active":
		panic(fmt.Errorf("field active of message noble.dollar.vaults.v1.FeeSchedule is not mutable"))
	case "noble.dollar.vaults.v1.FeeSchedule.description":
		panic(fmt.Errorf("field description of message noble.dollar.vaults.v1.FeeSchedule is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.dollar.vaults.v1.FeeSchedule"))
		}
		panic(fmt.Errorf("message noble.dollar.vaults.v1.FeeSchedule does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_FeeSchedule) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "noble.dollar.vaults.v1.FeeSchedule.effective_date":
		m := new(timestamppb.Timestamp)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "noble.dollar.vaults.v1.FeeSchedule.fee_config":
		m := new(FeeConfig)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "noble.dollar.vaults.v1.FeeSchedule.active":
		return protoreflect.ValueOfBool(false)
	case "noble.dollar.vaults.v1.FeeSchedule.description":
		return protoreflect.ValueOfString("")
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.dollar.vaults.v1.FeeSchedule"))
		}
		panic(fmt.Errorf("message noble.dollar.vaults.v1.FeeSchedule does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_FeeSchedule) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in noble.dollar.vaults.v1.FeeSchedule", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_FeeSchedule) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_FeeSchedule) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_FeeSchedule) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_FeeSchedule) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*FeeSchedule)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.EffectiveDate != nil {
			l = options.Size(x.EffectiveDate)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.FeeConfig != nil {
			l = options.Size(x.FeeConfig)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Active {
			n += 2
		}
		l = len(x.Description)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*FeeSchedule)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.Description) > 0 {
			i -= len(x.Description)
			copy(dAtA[i:], x.Description)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Description)))
			i--
			dAtA[i] = 0x22
		}
		if x.Active {
			i--
			if x.Active {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x18
		}
		if x.FeeConfig != nil {
			encoded, err := options.Marshal(x.FeeConfig)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x12
		}
		if x.EffectiveDate != nil {
			encoded, err := options.Marshal(x.EffectiveDate)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*FeeSchedule)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: FeeSchedule: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: FeeSchedule: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field EffectiveDate", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.EffectiveDate == nil {
					x.EffectiveDate = &timestamppb.Timestamp{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.EffectiveDate); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field FeeConfig", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.FeeConfig == nil {
					x.FeeConfig = &FeeConfig{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.FeeConfig); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 3:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Active", wireType)
				}
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				x.Active = bool(v != 0)
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Description = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: noble/dollar/vaults/v1/fees.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// FeeType defines the different types of fees that can be collected
type FeeType int32

const (
	// Management fee charged periodically
	FeeType_FEE_TYPE_MANAGEMENT FeeType = 0
	// Performance fee on positive returns
	FeeType_FEE_TYPE_PERFORMANCE FeeType = 1
	// Deposit fee charged on entry
	FeeType_FEE_TYPE_DEPOSIT FeeType = 2
	// Withdrawal fee charged on exit
	FeeType_FEE_TYPE_WITHDRAWAL FeeType = 3
	// Cross-chain operation fee
	FeeType_FEE_TYPE_CROSS_CHAIN FeeType = 4
	// Emergency operation fee
	FeeType_FEE_TYPE_EMERGENCY FeeType = 5
)

// Enum value maps for FeeType.
var (
	FeeType_name = map[int32]string{
		0: "FEE_TYPE_MANAGEMENT",
		1: "FEE_TYPE_PERFORMANCE",
		2: "FEE_TYPE_DEPOSIT",
		3: "FEE_TYPE_WITHDRAWAL",
		4: "FEE_TYPE_CROSS_CHAIN",
		5: "FEE_TYPE_EMERGENCY",
	}
	FeeType_value = map[string]int32{
		"FEE_TYPE_MANAGEMENT":  0,
		"FEE_TYPE_PERFORMANCE": 1,
		"FEE_TYPE_DEPOSIT":     2,
		"FEE_TYPE_WITHDRAWAL":  3,
		"FEE_TYPE_CROSS_CHAIN": 4,
		"FEE_TYPE_EMERGENCY":   5,
	}
)

func (x FeeType) Enum() *FeeType {
	p := new(FeeType)
	*p = x
	return p
}

func (x FeeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FeeType) Descriptor() protoreflect.EnumDescriptor {
	return file_noble_dollar_vaults_v1_fees_proto_enumTypes[0].Descriptor()
}

func (FeeType) Type() protoreflect.EnumType {
	return &file_noble_dollar_vaults_v1_fees_proto_enumTypes[0]
}

func (x FeeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FeeType.Descriptor instead.
func (FeeType) EnumDescriptor() ([]byte, []int) {
	return file_noble_dollar_vaults_v1_fees_proto_rawDescGZIP(), []int{0}
}

// FeeCollectionMethod defines how fees are collected
type FeeCollectionMethod int32

const (
	// Fees collected through share dilution
	FeeCollectionMethod_COLLECTION_SHARE_DILUTION FeeCollectionMethod = 0
	// Fees collected in tokens directly
	FeeCollectionMethod_COLLECTION_TOKEN_DIRECT FeeCollectionMethod = 1
	// Fees collected through NAV adjustment
	FeeCollectionMethod_COLLECTION_NAV_ADJUSTMENT FeeCollectionMethod = 2
)

// Enum value maps for FeeCollectionMethod.
var (
	FeeCollectionMethod_name = map[int32]string{
		0: "COLLECTION_SHARE_DILUTION",
		1: "COLLECTION_TOKEN_DIRECT",
		2: "COLLECTION_NAV_ADJUSTMENT",
	}
	FeeCollectionMethod_value = map[string]int32{
		"COLLECTION_SHARE_DILUTION": 0,
		"COLLECTION_TOKEN_DIRECT":   1,
		"COLLECTION_NAV_ADJUSTMENT": 2,
	}
)

func (x FeeCollectionMethod) Enum() *FeeCollectionMethod {
	p := new(FeeCollectionMethod)
	*p = x
	return p
}

func (x FeeCollectionMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FeeCollectionMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_noble_dollar_vaults_v1_fees_proto_enumTypes[1].Descriptor()
}

func (FeeCollectionMethod) Type() protoreflect.EnumType {
	return &file_noble_dollar_vaults_v1_fees_proto_enumTypes[1]
}

func (x FeeCollectionMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FeeCollectionMethod.Descriptor instead.
func (FeeCollectionMethod) EnumDescriptor() ([]byte, []int) {
	return file_noble_dollar_vaults_v1_fees_proto_rawDescGZIP(), []int{1}
}

// FeeConfig defines the configuration for various fees
type FeeConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Management fee rate (annual basis points)
	ManagementFeeRate int32 `protobuf:"varint,1,opt,name=management_fee_rate,json=managementFeeRate,proto3" json:"management_fee_rate,omitempty"`
	// Performance fee rate (basis points)
	PerformanceFeeRate int32 `protobuf:"varint,2,opt,name=performance_fee_rate,json=performanceFeeRate,proto3" json:"performance_fee_rate,omitempty"`
	// Deposit fee rate (basis points)
	DepositFeeRate int32 `protobuf:"varint,3,opt,name=deposit_fee_rate,json=depositFeeRate,proto3" json:"deposit_fee_rate,omitempty"`
	// Withdrawal fee rate (basis points)
	WithdrawalFeeRate int32 `protobuf:"varint,4,opt,name=withdrawal_fee_rate,json=withdrawalFeeRate,proto3" json:"withdrawal_fee_rate,omitempty"`
	// Cross-chain operation fee rate (basis points)
	CrossChainFeeRate int32 `protobuf:"varint,5,opt,name=cross_chain_fee_rate,json=crossChainFeeRate,proto3" json:"cross_chain_fee_rate,omitempty"`
	// Emergency operation fee rate (basis points)
	EmergencyFeeRate int32 `protobuf:"varint,6,opt,name=emergency_fee_rate,json=emergencyFeeRate,proto3" json:"emergency_fee_rate,omitempty"`
	// Fee collection method
	CollectionMethod FeeCollectionMethod `protobuf:"varint,7,opt,name=collection_method,json=collectionMethod,proto3,enum=noble.dollar.vaults.v1.FeeCollectionMethod" json:"collection_method,omitempty"`
	// Fee recipient address
	FeeRecipient string `protobuf:"bytes,8,opt,name=fee_recipient,json=feeRecipient,proto3" json:"fee_recipient,omitempty"`
	// Whether fees are enabled
	FeesEnabled bool `protobuf:"varint,9,opt,name=fees_enabled,json=feesEnabled,proto3" json:"fees_enabled,omitempty"`
	// High water mark for performance fees
	HighWaterMark string `protobuf:"bytes,10,opt,name=high_water_mark,json=highWaterMark,proto3" json:"high_water_mark,omitempty"`
}

func (x *FeeConfig) Reset() {
	*x = FeeConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_noble_dollar_vaults_v1_fees_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeeConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeeConfig) ProtoMessage() {}

// Deprecated: Use FeeConfig.ProtoReflect.Descriptor instead.
func (*FeeConfig) Descriptor() ([]byte, []int) {
	return file_noble_dollar_vaults_v1_fees_proto_rawDescGZIP(), []int{0}
}

func (x *FeeConfig) GetManagementFeeRate() int32 {
	if x != nil {
		return x.ManagementFeeRate
	}
	return 0
}

func (x *FeeConfig) GetPerformanceFeeRate() int32 {
	if x != nil {
		return x.PerformanceFeeRate
	}
	return 0
}

func (x *FeeConfig) GetDepositFeeRate() int32 {
	if x != nil {
		return x.DepositFeeRate
	}
	return 0
}

func (x *FeeConfig) GetWithdrawalFeeRate() int32 {
	if x != nil {
		return x.WithdrawalFeeRate
	}
	return 0
}

func (x *FeeConfig) GetCrossChainFeeRate() int32 {
	if x != nil {
		return x.CrossChainFeeRate
	}
	return 0
}

func (x *FeeConfig) GetEmergencyFeeRate() int32 {
	if x != nil {
		return x.EmergencyFeeRate
	}
	return 0
}

func (x *FeeConfig) GetCollectionMethod() FeeCollectionMethod {
	if x != nil {
		return x.CollectionMethod
	}
	return FeeCollectionMethod_COLLECTION_SHARE_DILUTION
}

func (x *FeeConfig) GetFeeRecipient() string {
	if x != nil {
		return x.FeeRecipient
	}
	return ""
}

func (x *FeeConfig) GetFeesEnabled() bool {
	if x != nil {
		return x.FeesEnabled
	}
	return false
}

func (x *FeeConfig) GetHighWaterMark() string {
	if x != nil {
		return x.HighWaterMark
	}
	return ""
}

// ShareDilutionParams defines parameters for fee collection through share dilution
type ShareDilutionParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Target dilution rate (basis points per year)
	TargetDilutionRate int32 `protobuf:"varint,1,opt,name=target_dilution_rate,json=targetDilutionRate,proto3" json:"target_dilution_rate,omitempty"`
	// Minimum dilution amount per period
	MinDilutionAmount string `protobuf:"bytes,2,opt,name=min_dilution_amount,json=minDilutionAmount,proto3" json:"min_dilution_amount,omitempty"`
	// Maximum dilution amount per period
	MaxDilutionAmount string `protobuf:"bytes,3,opt,name=max_dilution_amount,json=maxDilutionAmount,proto3" json:"max_dilution_amount,omitempty"`
	// Dilution frequency (seconds)
	DilutionFrequency int64 `protobuf:"varint,4,opt,name=dilution_frequency,json=dilutionFrequency,proto3" json:"dilution_frequency,omitempty"`
	// Last dilution timestamp
	LastDilution *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=last_dilution,json=lastDilution,proto3" json:"last_dilution,omitempty"`
}

func (x *ShareDilutionParams) Reset() {
	*x = ShareDilutionParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_noble_dollar_vaults_v1_fees_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShareDilutionParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShareDilutionParams) ProtoMessage() {}

// Deprecated: Use ShareDilutionParams.ProtoReflect.Descriptor instead.
func (*ShareDilutionParams) Descriptor() ([]byte, []int) {
	return file_noble_dollar_vaults_v1_fees_proto_rawDescGZIP(), []int{1}
}

func (x *ShareDilutionParams) GetTargetDilutionRate() int32 {
	if x != nil {
		return x.TargetDilutionRate
	}
	return 0
}

func (x *ShareDilutionParams) GetMinDilutionAmount() string {
	if x != nil {
		return x.MinDilutionAmount
	}
	return ""
}

func (x *ShareDilutionParams) GetMaxDilutionAmount() string {
	if x != nil {
		return x.MaxDilutionAmount
	}
	return ""
}

func (x *ShareDilutionParams) GetDilutionFrequency() int64 {
	if x != nil {
		return x.DilutionFrequency
	}
	return 0
}

func (x *ShareDilutionParams) GetLastDilution() *timestamppb.Timestamp {
	if x != nil {
		return x.LastDilution
	}
	return nil
}

// FeeAccrual represents accrued fees for a specific period
type FeeAccrual struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Fee type
	FeeType FeeType `protobuf:"varint,1,opt,name=fee_type,json=feeType,proto3,enum=noble.dollar.vaults.v1.FeeType" json:"fee_type,omitempty"`
	// Accrued amount
	AccruedAmount string `protobuf:"bytes,2,opt,name=accrued_amount,json=accruedAmount,proto3" json:"accrued_amount,omitempty"`
	// Shares to be diluted for this fee
	SharesToDilute string `protobuf:"bytes,3,opt,name=shares_to_dilute,json=sharesToDilute,proto3" json:"shares_to_dilute,omitempty"`
	// Accrual period start
	PeriodStart *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=period_start,json=periodStart,proto3" json:"period_start,omitempty"`
	// Accrual period end
	PeriodEnd *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=period_end,json=periodEnd,proto3" json:"period_end,omitempty"`
	// Whether this accrual has been collected
	Collected bool `protobuf:"varint,6,opt,name=collected,proto3" json:"collected,omitempty"`
}

func (x *FeeAccrual) Reset() {
	*x = FeeAccrual{}
	if protoimpl.UnsafeEnabled {
		mi := &file_noble_dollar_vaults_v1_fees_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeeAccrual) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeeAccrual) ProtoMessage() {}

// Deprecated: Use FeeAccrual.ProtoReflect.Descriptor instead.
func (*FeeAccrual) Descriptor() ([]byte, []int) {
	return file_noble_dollar_vaults_v1_fees_proto_rawDescGZIP(), []int{2}
}

func (x *FeeAccrual) GetFeeType() FeeType {
	if x != nil {
		return x.FeeType
	}
	return FeeType_FEE_TYPE_MANAGEMENT
}

func (x *FeeAccrual) GetAccruedAmount() string {
	if x != nil {
		return x.AccruedAmount
	}
	return ""
}

func (x *FeeAccrual) GetSharesToDilute() string {
	if x != nil {
		return x.SharesToDilute
	}
	return ""
}

func (x *FeeAccrual) GetPeriodStart() *timestamppb.Timestamp {
	if x != nil {
		return x.PeriodStart
	}
	return nil
}

func (x *FeeAccrual) GetPeriodEnd() *timestamppb.Timestamp {
	if x != nil {
		return x.PeriodEnd
	}
	return nil
}

func (x *FeeAccrual) GetCollected() bool {
	if x != nil {
		return x.Collected
	}
	return false
}

// FeeCollection represents a completed fee collection event
type FeeCollection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Collection timestamp
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Total fee amount collected
	TotalAmount string `protobuf:"bytes,2,opt,name=total_amount,json=totalAmount,proto3" json:"total_amount,omitempty"`
	// Shares diluted for collection
	SharesDiluted string `protobuf:"bytes,3,opt,name=shares_diluted,json=sharesDiluted,proto3" json:"shares_diluted,omitempty"`
	// Collection method used
	Method FeeCollectionMethod `protobuf:"varint,4,opt,name=method,proto3,enum=noble.dollar.vaults.v1.FeeCollectionMethod" json:"method,omitempty"`
	// Breakdown by fee type
	Breakdown []*FeeTypeBreakdown `protobuf:"bytes,5,rep,name=breakdown,proto3" json:"breakdown,omitempty"`
	// Block height when collected
	BlockHeight int64 `protobuf:"varint,6,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
}

func (x *FeeCollection) Reset() {
	*x = FeeCollection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_noble_dollar_vaults_v1_fees_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeeCollection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeeCollection) ProtoMessage() {}

// Deprecated: Use FeeCollection.ProtoReflect.Descriptor instead.
func (*FeeCollection) Descriptor() ([]byte, []int) {
	return file_noble_dollar_vaults_v1_fees_proto_rawDescGZIP(), []int{3}
}

func (x *FeeCollection) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *FeeCollection) GetTotalAmount() string {
	if x != nil {
		return x.TotalAmount
	}
	return ""
}

func (x *FeeCollection) GetSharesDiluted() string {
	if x != nil {
		return x.SharesDiluted
	}
	return ""
}

func (x *FeeCollection) GetMethod() FeeCollectionMethod {
	if x != nil {
		return x.Method
	}
	return FeeCollectionMethod_COLLECTION_SHARE_DILUTION
}

func (x *FeeCollection) GetBreakdown() []*FeeTypeBreakdown {
	if x != nil {
		return x.Breakdown
	}
	return nil
}

func (x *FeeCollection) GetBlockHeight() int64 {
	if x != nil {
		return x.BlockHeight
	}
	return 0
}

// FeeTypeBreakdown provides details for each fee type in a collection
type FeeTypeBreakdown struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Fee type
	FeeType FeeType `protobuf:"varint,1,opt,name=fee_type,json=feeType,proto3,enum=noble.dollar.vaults.v1.FeeType" json:"fee_type,omitempty"`
	// Amount for this fee type
	Amount string `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
	// Shares diluted for this fee type
	SharesDiluted string `protobuf:"bytes,3,opt,name=shares_diluted,json=sharesDiluted,proto3" json:"shares_diluted,omitempty"`
	// Fee rate applied (basis points)
	RateApplied int32 `protobuf:"varint,4,opt,name=rate_applied,json=rateApplied,proto3" json:"rate_applied,omitempty"`
}

func (x *FeeTypeBreakdown) Reset() {
	*x = FeeTypeBreakdown{}
	if protoimpl.UnsafeEnabled {
		mi := &file_noble_dollar_vaults_v1_fees_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeeTypeBreakdown) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeeTypeBreakdown) ProtoMessage() {}

// Deprecated: Use FeeTypeBreakdown.ProtoReflect.Descriptor instead.
func (*FeeTypeBreakdown) Descriptor() ([]byte, []int) {
	return file_noble_dollar_vaults_v1_fees_proto_rawDescGZIP(), []int{4}
}

func (x *FeeTypeBreakdown) GetFeeType() FeeType {
	if x != nil {
		return x.FeeType
	}
	return FeeType_FEE_TYPE_MANAGEMENT
}

func (x *FeeTypeBreakdown) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *FeeTypeBreakdown) GetSharesDiluted() string {
	if x != nil {
		return x.SharesDiluted
	}
	return ""
}

func (x *FeeTypeBreakdown) GetRateApplied() int32 {
	if x != nil {
		return x.RateApplied
	}
	return 0
}

// FeeStats provides statistics about fee collection
type FeeStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Total fees collected (all time)
	TotalFeesCollected string `protobuf:"bytes,1,opt,name=total_fees_collected,json=totalFeesCollected,proto3" json:"total_fees_collected,omitempty"`
	// Total shares diluted for fees
	TotalSharesDiluted string `protobuf:"bytes,2,opt,name=total_shares_diluted,json=totalSharesDiluted,proto3" json:"total_shares_diluted,omitempty"`
	// Current annualized fee rate (basis points)
	CurrentAnnualRate int32 `protobuf:"varint,3,opt,name=current_annual_rate,json=currentAnnualRate,proto3" json:"current_annual_rate,omitempty"`
	// Last fee collection timestamp
	LastCollection *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=last_collection,json=lastCollection,proto3" json:"last_collection,omitempty"`
	// Average daily fee collection
	AvgDailyCollection string `protobuf:"bytes,5,opt,name=avg_daily_collection,json=avgDailyCollection,proto3" json:"avg_daily_collection,omitempty"`
	// Fee collection frequency (seconds)
	CollectionFrequency int64 `protobuf:"varint,6,opt,name=collection_frequency,json=collectionFrequency,proto3" json:"collection_frequency,omitempty"`
}

func (x *FeeStats) Reset() {
	*x = FeeStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_noble_dollar_vaults_v1_fees_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeeStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeeStats) ProtoMessage() {}

// Deprecated: Use FeeStats.ProtoReflect.Descriptor instead.
func (*FeeStats) Descriptor() ([]byte, []int) {
	return file_noble_dollar_vaults_v1_fees_proto_rawDescGZIP(), []int{5}
}

func (x *FeeStats) GetTotalFeesCollected() string {
	if x != nil {
		return x.TotalFeesCollected
	}
	return ""
}

func (x *FeeStats) GetTotalSharesDiluted() string {
	if x != nil {
		return x.TotalSharesDiluted
	}
	return ""
}

func (x *FeeStats) GetCurrentAnnualRate() int32 {
	if x != nil {
		return x.CurrentAnnualRate
	}
	return 0
}

func (x *FeeStats) GetLastCollection() *timestamppb.Timestamp {
	if x != nil {
		return x.LastCollection
	}
	return nil
}

func (x *FeeStats) GetAvgDailyCollection() string {
	if x != nil {
		return x.AvgDailyCollection
	}
	return ""
}

func (x *FeeStats) GetCollectionFrequency() int64 {
	if x != nil {
		return x.CollectionFrequency
	}
	return 0
}

// PerformanceFeeState tracks performance fee calculations
type PerformanceFeeState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Current high water mark (share price)
	HighWaterMark string `protobuf:"bytes,1,opt,name=high_water_mark,json=highWaterMark,proto3" json:"high_water_mark,omitempty"`
	// Last performance fee calculation
	LastCalculation *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=last_calculation,json=lastCalculation,proto3" json:"last_calculation,omitempty"`
	// Current period start (for performance measurement)
	PeriodStart *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=period_start,json=periodStart,proto3" json:"period_start,omitempty"`
	// Accrued performance fees (not yet collected)
	AccruedPerformanceFees string `protobuf:"bytes,4,opt,name=accrued_performance_fees,json=accruedPerformanceFees,proto3" json:"accrued_performance_fees,omitempty"`
	// Whether performance fees are currently active
	Active bool `protobuf:"varint,5,opt,name=active,proto3" json:"active,omitempty"`
}

func (x *PerformanceFeeState) Reset() {
	*x = PerformanceFeeState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_noble_dollar_vaults_v1_fees_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PerformanceFeeState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PerformanceFeeState) ProtoMessage() {}

// Deprecated: Use PerformanceFeeState.ProtoReflect.Descriptor instead.
func (*PerformanceFeeState) Descriptor() ([]byte, []int) {
	return file_noble_dollar_vaults_v1_fees_proto_rawDescGZIP(), []int{6}
}

func (x *PerformanceFeeState) GetHighWaterMark() string {
	if x != nil {
		return x.HighWaterMark
	}
	return ""
}

func (x *PerformanceFeeState) GetLastCalculation() *timestamppb.Timestamp {
	if x != nil {
		return x.LastCalculation
	}
	return nil
}

func (x *PerformanceFeeState) GetPeriodStart() *timestamppb.Timestamp {
	if x != nil {
		return x.PeriodStart
	}
	return nil
}

func (x *PerformanceFeeState) GetAccruedPerformanceFees() string {
	if x != nil {
		return x.AccruedPerformanceFees
	}
	return ""
}

func (x *PerformanceFeeState) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

// FeeExemption represents an exemption from certain fees for specific addresses
type FeeExemption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Exempt address
	Address []byte `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// Exempted fee types
	ExemptedTypes []FeeType `protobuf:"varint,2,rep,packed,name=exempted_types,json=exemptedTypes,proto3,enum=noble.dollar.vaults.v1.FeeType" json:"exempted_types,omitempty"`
	// Exemption expiry (if applicable)
	Expiry *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=expiry,proto3" json:"expiry,omitempty"`
	// Exemption reason
	Reason string `protobuf:"bytes,4,opt,name=reason,proto3" json:"reason,omitempty"`
	// Whether exemption is active
	Active bool `protobuf:"varint,5,opt,name=active,proto3" json:"active,omitempty"`
}

func (x *FeeExemption) Reset() {
	*x = FeeExemption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_noble_dollar_vaults_v1_fees_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeeExemption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeeExemption) ProtoMessage() {}

// Deprecated: Use FeeExemption.ProtoReflect.Descriptor instead.
func (*FeeExemption) Descriptor() ([]byte, []int) {
	return file_noble_dollar_vaults_v1_fees_proto_rawDescGZIP(), []int{7}
}

func (x *FeeExemption) GetAddress() []byte {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *FeeExemption) GetExemptedTypes() []FeeType {
	if x != nil {
		return x.ExemptedTypes
	}
	return nil
}

func (x *FeeExemption) GetExpiry() *timestamppb.Timestamp {
	if x != nil {
		return x.Expiry
	}
	return nil
}

func (x *FeeExemption) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *FeeExemption) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

// FeeSchedule defines time-based fee rate changes
type FeeSchedule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Effective date for the fee rates
	EffectiveDate *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=effective_date,json=effectiveDate,proto3" json:"effective_date,omitempty"`
	// Fee configuration for this schedule
	FeeConfig *FeeConfig `protobuf:"bytes,2,opt,name=fee_config,json=feeConfig,proto3" json:"fee_config,omitempty"`
	// Whether this schedule is active
	Active bool `protobuf:"varint,3,opt,name=active,proto3" json:"active,omitempty"`
	// Description of the schedule change
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *FeeSchedule) Reset() {
	*x = FeeSchedule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_noble_dollar_vaults_v1_fees_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeeSchedule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeeSchedule) ProtoMessage() {}

// Deprecated: Use FeeSchedule.ProtoReflect.Descriptor instead.
func (*FeeSchedule) Descriptor() ([]byte, []int) {
	return file_noble_dollar_vaults_v1_fees_proto_rawDescGZIP(), []int{8}
}

func (x *FeeSchedule) GetEffectiveDate() *timestamppb.Timestamp {
	if x != nil {
		return x.EffectiveDate
	}
	return nil
}

func (x *FeeSchedule) GetFeeConfig() *FeeConfig {
	if x != nil {
		return x.FeeConfig
	}
	return nil
}

func (x *FeeSchedule) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

func (x *FeeSchedule) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

var File_noble_dollar_vaults_v1_fees_proto protoreflect.FileDescriptor

var file_noble_dollar_vaults_v1_fees_proto_rawDesc = []byte{
	0x0a, 0x21, 0x6e, 0x6f, 0x62, 0x6c, 0x65, 0x2f, 0x64, 0x6f, 0x6c, 0x6c, 0x61, 0x72, 0x2f, 0x76,
	0x61, 0x75, 0x6c, 0x74, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x66, 0x65, 0x65, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x16, 0x6e, 0x6f, 0x62, 0x6c, 0x65, 0x2e, 0x64, 0x6f, 0x6c, 0x6c, 0x61,
	0x72, 0x2e, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x1a, 0x11, 0x61, 0x6d, 0x69,
	0x6e, 0x6f, 0x2f, 0x61, 0x6d, 0x69, 0x6e, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19,
	0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x73,
	0x6d, 0x6f, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x67, 0x6f, 0x67, 0x6f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xc2, 0x04, 0x0a, 0x09, 0x46, 0x65, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2e,
	0x0a, 0x13, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x65, 0x65,
	0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x65, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x30,
	0x0a, 0x14, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x66, 0x65,
	0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x70, 0x65,
	0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x46, 0x65, 0x65, 0x52, 0x61, 0x74, 0x65,
	0x12, 0x28, 0x0a, 0x10, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x66, 0x65, 0x65, 0x5f,
	0x72, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x64, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x46, 0x65, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x77, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x72, 0x61, 0x74,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61,
	0x77, 0x61, 0x6c, 0x46, 0x65, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x2f, 0x0a, 0x14, 0x63, 0x72,
	0x6f, 0x73, 0x73, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x72, 0x61,
	0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x43,
	0x68, 0x61, 0x69, 0x6e, 0x46, 0x65, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x65,
	0x6d, 0x65, 0x72, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x72, 0x61, 0x74,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x65, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x6e,
	0x63, 0x79, 0x46, 0x65, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x58, 0x0a, 0x11, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x6e, 0x6f, 0x62, 0x6c, 0x65, 0x2e, 0x64, 0x6f, 0x6c,
	0x6c, 0x61, 0x72, 0x2e, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65,
	0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x52, 0x10, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x12, 0x3d, 0x0a, 0x0d, 0x66, 0x65, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x69, 0x70,
	0x69, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0xd2, 0xb4, 0x2d, 0x14,
	0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x0c, 0x66, 0x65, 0x65, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65,
	0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x65, 0x65, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x66, 0x65, 0x65, 0x73, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x5e, 0x0a, 0x0f, 0x68, 0x69, 0x67, 0x68, 0x5f, 0x77, 0x61,
	0x74, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x36,
	0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x1b, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64,
	0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79,
	0x44, 0x65, 0x63, 0xd2, 0xb4, 0x2d, 0x0a, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x44, 0x65,
	0x63, 0xa8, 0xe7, 0xb0, 0x2a, 0x01, 0x52, 0x0d, 0x68, 0x69, 0x67, 0x68, 0x57, 0x61, 0x74, 0x65,
	0x72, 0x4d, 0x61, 0x72, 0x6b, 0x22, 0x85, 0x03, 0x0a, 0x13, 0x53, 0x68, 0x61, 0x72, 0x65, 0x44,
	0x69, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x30, 0x0a,
	0x14, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x64, 0x69, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x44, 0x69, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x12,
	0x60, 0x0a, 0x13, 0x6d, 0x69, 0x6e, 0x5f, 0x64, 0x69, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x30, 0xc8, 0xde,
	0x1f, 0x00, 0xda, 0xde, 0x1f, 0x15, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e,
	0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x49, 0x6e, 0x74, 0xd2, 0xb4, 0x2d, 0x0a, 0x63,
	0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0xa8, 0xe7, 0xb0, 0x2a, 0x01, 0x52, 0x11,
	0x6d, 0x69, 0x6e, 0x44, 0x69, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x60, 0x0a, 0x13, 0x6d, 0x61, 0x78, 0x5f, 0x64, 0x69, 0x6c, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x30,
	0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x15, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64,
	0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x49, 0x6e, 0x74, 0xd2, 0xb4, 0x2d,
	0x0a, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0xa8, 0xe7, 0xb0, 0x2a, 0x01,
	0x52, 0x11, 0x6d, 0x61, 0x78, 0x44, 0x69, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x12, 0x64, 0x69, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x11, 0x64, 0x69, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x79, 0x12, 0x49, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x64, 0x69, 0x6c, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x08, 0xc8, 0xde, 0x1f, 0x00, 0x90, 0xdf, 0x1f, 0x01, 0x52,
	0x0c, 0x6c, 0x61, 0x73, 0x74, 0x44, 0x69, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xa9, 0x03,
	0x0a, 0x0a, 0x46, 0x65, 0x65, 0x41, 0x63, 0x63, 0x72, 0x75, 0x61, 0x6c, 0x12, 0x3a, 0x0a, 0x08,
	0x66, 0x65, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f,
	0x2e, 0x6e, 0x6f, 0x62, 0x6c, 0x65, 0x2e, 0x64, 0x6f, 0x6c, 0x6c, 0x61, 0x72, 0x2e, 0x76, 0x61,
	0x75, 0x6c, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x07, 0x66, 0x65, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x57, 0x0a, 0x0e, 0x61, 0x63, 0x63, 0x72,
	0x75, 0x65, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x30, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x15, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73,
	0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x49, 0x6e, 0x74, 0xd2,
	0xb4, 0x2d, 0x0a, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0xa8, 0xe7, 0xb0,
	0x2a, 0x01, 0x52, 0x0d, 0x61, 0x63, 0x63, 0x72, 0x75, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x5a, 0x0a, 0x10, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x64,
	0x69, 0x6c, 0x75, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x30, 0xc8, 0xde, 0x1f,
	0x00, 0xda, 0xde, 0x1f, 0x15, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69,
	0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x49, 0x6e, 0x74, 0xd2, 0xb4, 0x2d, 0x0a, 0x63, 0x6f,
	0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0xa8, 0xe7, 0xb0, 0x2a, 0x01, 0x52, 0x0e, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x73, 0x54, 0x6f, 0x44, 0x69, 0x6c, 0x75, 0x74, 0x65, 0x12, 0x47, 0x0a,
	0x0c, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42,
	0x08, 0xc8, 0xde, 0x1f, 0x00, 0x90, 0xdf, 0x1f, 0x01, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x43, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x5f, 0x65, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x08, 0xc8, 0xde, 0x1f, 0x00, 0x90, 0xdf, 0x1f, 0x01,
	0x52, 0x09, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x45, 0x6e, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x22, 0xb1, 0x03, 0x0a, 0x0d, 0x46, 0x65,
	0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x08, 0xc8, 0xde, 0x1f, 0x00,
	0x90, 0xdf, 0x1f, 0x01, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x53, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x30, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x15, 0x63,
	0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68,
	0x2e, 0x49, 0x6e, 0x74, 0xd2, 0xb4, 0x2d, 0x0a, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x49,
	0x6e, 0x74, 0xa8, 0xe7, 0xb0, 0x2a, 0x01, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x57, 0x0a, 0x0e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x5f, 0x64,
	0x69, 0x6c, 0x75, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x30, 0xc8, 0xde,
	0x1f, 0x00, 0xda, 0xde, 0x1f, 0x15, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e,
	0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x49, 0x6e, 0x74, 0xd2, 0xb4, 0x2d, 0x0a, 0x63,
	0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0xa8, 0xe7, 0xb0, 0x2a, 0x01, 0x52, 0x0d,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x44, 0x69, 0x6c, 0x75, 0x74, 0x65, 0x64, 0x12, 0x43, 0x0a,
	0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e,
	0x6e, 0x6f, 0x62, 0x6c, 0x65, 0x2e, 0x64, 0x6f, 0x6c, 0x6c, 0x61, 0x72, 0x2e, 0x76, 0x61, 0x75,
	0x6c, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x12, 0x46, 0x0a, 0x09, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6e, 0x6f, 0x62, 0x6c, 0x65, 0x2e, 0x64, 0x6f,
	0x6c, 0x6c, 0x61, 0x72, 0x2e, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46,
	0x65, 0x65, 0x54, 0x79, 0x70, 0x65, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x52,
	0x09, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0x94, 0x02,
	0x0a, 0x10, 0x46, 0x65, 0x65, 0x54, 0x79, 0x70, 0x65, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x64, 0x6f,
	0x77, 0x6e, 0x12, 0x3a, 0x0a, 0x08, 0x66, 0x65, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x6e, 0x6f, 0x62, 0x6c, 0x65, 0x2e, 0x64, 0x6f, 0x6c,
	0x6c, 0x61, 0x72, 0x2e, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x66, 0x65, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x48,
	0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x30,
	0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x15, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64,
	0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x49, 0x6e, 0x74, 0xd2, 0xb4, 0x2d,
	0x0a, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0xa8, 0xe7, 0xb0, 0x2a, 0x01,
	0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x57, 0x0a, 0x0e, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x73, 0x5f, 0x64, 0x69, 0x6c, 0x75, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x30, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x15, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73,
	0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x49, 0x6e, 0x74, 0xd2,
	0xb4, 0x2d, 0x0a, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0xa8, 0xe7, 0xb0,
	0x2a, 0x01, 0x52, 0x0d, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x44, 0x69, 0x6c, 0x75, 0x74, 0x65,
	0x64, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x72, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70,
	0x6c, 0x69, 0x65, 0x64, 0x22, 0xe8, 0x03, 0x0a, 0x08, 0x46, 0x65, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x12, 0x62, 0x0a, 0x14, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x66, 0x65, 0x65, 0x73, 0x5f,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x30, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x15, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73,
	0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x49, 0x6e, 0x74, 0xd2, 0xb4,
	0x2d, 0x0a, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0xa8, 0xe7, 0xb0, 0x2a,
	0x01, 0x52, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x46, 0x65, 0x65, 0x73, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x62, 0x0a, 0x14, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x73, 0x5f, 0x64, 0x69, 0x6c, 0x75, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x30, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x15, 0x63, 0x6f, 0x73,
	0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x49,
	0x6e, 0x74, 0xd2, 0xb4, 0x2d, 0x0a, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x49, 0x6e, 0x74,
	0xa8, 0xe7, 0xb0, 0x2a, 0x01, 0x52, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x73, 0x44, 0x69, 0x6c, 0x75, 0x74, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x6e, 0x6e, 0x75, 0x61, 0x6c, 0x5f, 0x72, 0x61, 0x74, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x41,
	0x6e, 0x6e, 0x75, 0x61, 0x6c, 0x52, 0x61, 0x74, 0x65, 0x12, 0x4d, 0x0a, 0x0f, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x08,
	0xc8, 0xde, 0x1f, 0x00, 0x90, 0xdf, 0x1f, 0x01, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x62, 0x0a, 0x14, 0x61, 0x76, 0x67, 0x5f,
	0x64, 0x61, 0x69, 0x6c, 0x79, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x30, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x15,
	0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74,
	0x68, 0x2e, 0x49, 0x6e, 0x74, 0xd2, 0xb4, 0x2d, 0x0a, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e,
	0x49, 0x6e, 0x74, 0xa8, 0xe7, 0xb0, 0x2a, 0x01, 0x52, 0x12, 0x61, 0x76, 0x67, 0x44, 0x61, 0x69,
	0x6c, 0x79, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x14,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x22,
	0x93, 0x03, 0x0a, 0x13, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x46,
	0x65, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x5e, 0x0a, 0x0f, 0x68, 0x69, 0x67, 0x68, 0x5f,
	0x77, 0x61, 0x74, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x36, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x1b, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73,
	0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x4c, 0x65, 0x67, 0x61,
	0x63, 0x79, 0x44, 0x65, 0x63, 0xd2, 0xb4, 0x2d, 0x0a, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e,
	0x44, 0x65, 0x63, 0xa8, 0xe7, 0xb0, 0x2a, 0x01, 0x52, 0x0d, 0x68, 0x69, 0x67, 0x68, 0x57, 0x61,
	0x74, 0x65, 0x72, 0x4d, 0x61, 0x72, 0x6b, 0x12, 0x4f, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x08, 0xc8,
	0xde, 0x1f, 0x00, 0x90, 0xdf, 0x1f, 0x01, 0x52, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x61, 0x6c,
	0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x0c, 0x70, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x08, 0xc8, 0xde, 0x1f, 0x00,
	0x90, 0xdf, 0x1f, 0x01, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x12, 0x6a, 0x0a, 0x18, 0x61, 0x63, 0x63, 0x72, 0x75, 0x65, 0x64, 0x5f, 0x70, 0x65, 0x72,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x66, 0x65, 0x65, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x30, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x15, 0x63, 0x6f, 0x73,
	0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x49,
	0x6e, 0x74, 0xd2, 0xb4, 0x2d, 0x0a, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x49, 0x6e, 0x74,
	0xa8, 0xe7, 0xb0, 0x2a, 0x01, 0x52, 0x16, 0x61, 0x63, 0x63, 0x72, 0x75, 0x65, 0x64, 0x50, 0x65,
	0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x46, 0x65, 0x65, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x22, 0xde, 0x01, 0x0a, 0x0c, 0x46, 0x65, 0x65, 0x45, 0x78, 0x65,
	0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x46, 0x0a, 0x0e, 0x65, 0x78, 0x65, 0x6d, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x6e, 0x6f, 0x62, 0x6c, 0x65,
	0x2e, 0x64, 0x6f, 0x6c, 0x6c, 0x61, 0x72, 0x2e, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x46, 0x65, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x65, 0x78, 0x65, 0x6d, 0x70,
	0x74, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x3c, 0x0a, 0x06, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x42, 0x08, 0xc8, 0xde, 0x1f, 0x01, 0x90, 0xdf, 0x1f, 0x01, 0x52, 0x06,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x16,
	0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x22, 0xd6, 0x01, 0x0a, 0x0b, 0x46, 0x65, 0x65, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x4b, 0x0a, 0x0e, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x08, 0xc8, 0xde, 0x1f, 0x00,
	0x90, 0xdf, 0x1f, 0x01, 0x52, 0x0d, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x40, 0x0a, 0x0a, 0x66, 0x65, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6e, 0x6f, 0x62, 0x6c, 0x65, 0x2e,
	0x64, 0x6f, 0x6c, 0x6c, 0x61, 0x72, 0x2e, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x46, 0x65, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x09, 0x66, 0x65, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2a,
	0xa3, 0x01, 0x0a, 0x07, 0x46, 0x65, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x46,
	0x45, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x4d, 0x45,
	0x4e, 0x54, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x46, 0x45, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x50, 0x45, 0x52, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x01, 0x12, 0x14,
	0x0a, 0x10, 0x46, 0x45, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x45, 0x50, 0x4f, 0x53,
	0x49, 0x54, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x46, 0x45, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x57, 0x49, 0x54, 0x48, 0x44, 0x52, 0x41, 0x57, 0x41, 0x4c, 0x10, 0x03, 0x12, 0x18, 0x0a,
	0x14, 0x46, 0x45, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x52, 0x4f, 0x53, 0x53, 0x5f,
	0x43, 0x48, 0x41, 0x49, 0x4e, 0x10, 0x04, 0x12, 0x16, 0x0a, 0x12, 0x46, 0x45, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x45, 0x4d, 0x45, 0x52, 0x47, 0x45, 0x4e, 0x43, 0x59, 0x10, 0x05, 0x1a,
	0x04, 0x88, 0xa3, 0x1e, 0x00, 0x2a, 0x76, 0x0a, 0x13, 0x46, 0x65, 0x65, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x1d, 0x0a, 0x19,
	0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x48, 0x41, 0x52, 0x45,
	0x5f, 0x44, 0x49, 0x4c, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x43,
	0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x5f,
	0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x43, 0x4f, 0x4c, 0x4c,
	0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x41, 0x56, 0x5f, 0x41, 0x44, 0x4a, 0x55, 0x53,
	0x54, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x02, 0x1a, 0x04, 0x88, 0xa3, 0x1e, 0x00, 0x42, 0xdb, 0x01,
	0x0a, 0x1a, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x6f, 0x62, 0x6c, 0x65, 0x2e, 0x64, 0x6f, 0x6c, 0x6c,
	0x61, 0x72, 0x2e, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x42, 0x09, 0x46, 0x65,
	0x65, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x37, 0x64, 0x6f, 0x6c, 0x6c, 0x61,
	0x72, 0x2e, 0x6e, 0x6f, 0x62, 0x6c, 0x65, 0x2e, 0x78, 0x79, 0x7a, 0x2f, 0x76, 0x32, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x6e, 0x6f, 0x62, 0x6c, 0x65, 0x2f, 0x64, 0x6f, 0x6c, 0x6c, 0x61, 0x72, 0x2f,
	0x76, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x2f, 0x76, 0x31, 0x3b, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x73,
	0x76, 0x31, 0xa2, 0x02, 0x03, 0x4e, 0x44, 0x56, 0xaa, 0x02, 0x16, 0x4e, 0x6f, 0x62, 0x6c, 0x65,
	0x2e, 0x44, 0x6f, 0x6c, 0x6c, 0x61, 0x72, 0x2e, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x2e, 0x56,
	0x31, 0xca, 0x02, 0x16, 0x4e, 0x6f, 0x62, 0x6c, 0x65, 0x5c, 0x44, 0x6f, 0x6c, 0x6c, 0x61, 0x72,
	0x5c, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x22, 0x4e, 0x6f, 0x62,
	0x6c, 0x65, 0x5c, 0x44, 0x6f, 0x6c, 0x6c, 0x61, 0x72, 0x5c, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x73,
	0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea,
	0x02, 0x19, 0x4e, 0x6f, 0x62, 0x6c, 0x65, 0x3a, 0x3a, 0x44, 0x6f, 0x6c, 0x6c, 0x61, 0x72, 0x3a,
	0x3a, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_noble_dollar_vaults_v1_fees_proto_rawDescOnce sync.Once
	file_noble_dollar_vaults_v1_fees_proto_rawDescData = file_noble_dollar_vaults_v1_fees_proto_rawDesc
)

func file_noble_dollar_vaults_v1_fees_proto_rawDescGZIP() []byte {
	file_noble_dollar_vaults_v1_fees_proto_rawDescOnce.Do(func() {
		file_noble_dollar_vaults_v1_fees_proto_rawDescData = protoimpl.X.CompressGZIP(file_noble_dollar_vaults_v1_fees_proto_rawDescData)
	})
	return file_noble_dollar_vaults_v1_fees_proto_rawDescData
}

var file_noble_dollar_vaults_v1_fees_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_noble_dollar_vaults_v1_fees_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_noble_dollar_vaults_v1_fees_proto_goTypes = []interface{}{
	(FeeType)(0),                  // 0: noble.dollar.vaults.v1.FeeType
	(FeeCollectionMethod)(0),      // 1: noble.dollar.vaults.v1.FeeCollectionMethod
	(*FeeConfig)(nil),             // 2: noble.dollar.vaults.v1.FeeConfig
	(*ShareDilutionParams)(nil),   // 3: noble.dollar.vaults.v1.ShareDilutionParams
	(*FeeAccrual)(nil),            // 4: noble.dollar.vaults.v1.FeeAccrual
	(*FeeCollection)(nil),         // 5: noble.dollar.vaults.v1.FeeCollection
	(*FeeTypeBreakdown)(nil),      // 6: noble.dollar.vaults.v1.FeeTypeBreakdown
	(*FeeStats)(nil),              // 7: noble.dollar.vaults.v1.FeeStats
	(*PerformanceFeeState)(nil),   // 8: noble.dollar.vaults.v1.PerformanceFeeState
	(*FeeExemption)(nil),          // 9: noble.dollar.vaults.v1.FeeExemption
	(*FeeSchedule)(nil),           // 10: noble.dollar.vaults.v1.FeeSchedule
	(*timestamppb.Timestamp)(nil), // 11: google.protobuf.Timestamp
}
var file_noble_dollar_vaults_v1_fees_proto_depIdxs = []int32{
	1,  // 0: noble.dollar.vaults.v1.FeeConfig.collection_method:type_name -> noble.dollar.vaults.v1.FeeCollectionMethod
	11, // 1: noble.dollar.vaults.v1.ShareDilutionParams.last_dilution:type_name -> google.protobuf.Timestamp
	0,  // 2: noble.dollar.vaults.v1.FeeAccrual.fee_type:type_name -> noble.dollar.vaults.v1.FeeType
	11, // 3: noble.dollar.vaults.v1.FeeAccrual.period_start:type_name -> google.protobuf.Timestamp
	11, // 4: noble.dollar.vaults.v1.FeeAccrual.period_end:type_name -> google.protobuf.Timestamp
	11, // 5: noble.dollar.vaults.v1.FeeCollection.timestamp:type_name -> google.protobuf.Timestamp
	1,  // 6: noble.dollar.vaults.v1.FeeCollection.method:type_name -> noble.dollar.vaults.v1.FeeCollectionMethod
	6,  // 7: noble.dollar.vaults.v1.FeeCollection.breakdown:type_name -> noble.dollar.vaults.v1.FeeTypeBreakdown
	0,  // 8: noble.dollar.vaults.v1.FeeTypeBreakdown.fee_type:type_name -> noble.dollar.vaults.v1.FeeType
	11, // 9: noble.dollar.vaults.v1.FeeStats.last_collection:type_name -> google.protobuf.Timestamp
	11, // 10: noble.dollar.vaults.v1.PerformanceFeeState.last_calculation:type_name -> google.protobuf.Timestamp
	11, // 11: noble.dollar.vaults.v1.PerformanceFeeState.period_start:type_name -> google.protobuf.Timestamp
	0,  // 12: noble.dollar.vaults.v1.FeeExemption.exempted_types:type_name -> noble.dollar.vaults.v1.FeeType
	11, // 13: noble.dollar.vaults.v1.FeeExemption.expiry:type_name -> google.protobuf.Timestamp
	11, // 14: noble.dollar.vaults.v1.FeeSchedule.effective_date:type_name -> google.protobuf.Timestamp
	2,  // 15: noble.dollar.vaults.v1.FeeSchedule.fee_config:type_name -> noble.dollar.vaults.v1.FeeConfig
	16, // [16:16] is the sub-list for method output_type
	16, // [16:16] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_noble_dollar_vaults_v1_fees_proto_init() }
func file_noble_dollar_vaults_v1_fees_proto_init() {
	if File_noble_dollar_vaults_v1_fees_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_noble_dollar_vaults_v1_fees_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeeConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_noble_dollar_vaults_v1_fees_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShareDilutionParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_noble_dollar_vaults_v1_fees_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeeAccrual); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_noble_dollar_vaults_v1_fees_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeeCollection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_noble_dollar_vaults_v1_fees_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeeTypeBreakdown); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_noble_dollar_vaults_v1_fees_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeeStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_noble_dollar_vaults_v1_fees_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PerformanceFeeState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_noble_dollar_vaults_v1_fees_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeeExemption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_noble_dollar_vaults_v1_fees_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeeSchedule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_noble_dollar_vaults_v1_fees_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_noble_dollar_vaults_v1_fees_proto_goTypes,
		DependencyIndexes: file_noble_dollar_vaults_v1_fees_proto_depIdxs,
		EnumInfos:         file_noble_dollar_vaults_v1_fees_proto_enumTypes,
		MessageInfos:      file_noble_dollar_vaults_v1_fees_proto_msgTypes,
	}.Build()
	File_noble_dollar_vaults_v1_fees_proto = out.File
	file_noble_dollar_vaults_v1_fees_proto_rawDesc = nil
	file_noble_dollar_vaults_v1_fees_proto_goTypes = nil
	file_noble_dollar_vaults_v1_fees_proto_depIdxs = nil
}

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: noble/dollar/vaults/v1/vaults_v2.proto

package vaultsv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	VaultV2Msg_Deposit_FullMethodName            = "/noble.dollar.vaults.v1.VaultV2Msg/Deposit"
	VaultV2Msg_Withdraw_FullMethodName           = "/noble.dollar.vaults.v1.VaultV2Msg/Withdraw"
	VaultV2Msg_RequestExit_FullMethodName        = "/noble.dollar.vaults.v1.VaultV2Msg/RequestExit"
	VaultV2Msg_CancelExit_FullMethodName         = "/noble.dollar.vaults.v1.VaultV2Msg/CancelExit"
	VaultV2Msg_SetYieldPreference_FullMethodName = "/noble.dollar.vaults.v1.VaultV2Msg/SetYieldPreference"
	VaultV2Msg_ProcessExitQueue_FullMethodName   = "/noble.dollar.vaults.v1.VaultV2Msg/ProcessExitQueue"
	VaultV2Msg_UpdateNAV_FullMethodName          = "/noble.dollar.vaults.v1.VaultV2Msg/UpdateNAV"
)

// VaultV2MsgClient is the client API for VaultV2Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// V2 Vault message service for share-based accounting
type VaultV2MsgClient interface {
	// Deposit tokens to receive shares
	Deposit(ctx context.Context, in *MsgDeposit, opts ...grpc.CallOption) (*MsgDepositResponse, error)
	// Withdraw tokens by burning shares
	Withdraw(ctx context.Context, in *MsgWithdraw, opts ...grpc.CallOption) (*MsgWithdrawResponse, error)
	// Request exit to join withdrawal queue
	RequestExit(ctx context.Context, in *MsgRequestExit, opts ...grpc.CallOption) (*MsgRequestExitResponse, error)
	// Cancel exit request
	CancelExit(ctx context.Context, in *MsgCancelExit, opts ...grpc.CallOption) (*MsgCancelExitResponse, error)
	// Set yield preference
	SetYieldPreference(ctx context.Context, in *MsgSetYieldPreference, opts ...grpc.CallOption) (*MsgSetYieldPreferenceResponse, error)
	// Process exit queue (authority only)
	ProcessExitQueue(ctx context.Context, in *MsgProcessExitQueue, opts ...grpc.CallOption) (*MsgProcessExitQueueResponse, error)
	// Update vault NAV (authority only)
	UpdateNAV(ctx context.Context, in *MsgUpdateNAV, opts ...grpc.CallOption) (*MsgUpdateNAVResponse, error)
}

type vaultV2MsgClient struct {
	cc grpc.ClientConnInterface
}

func NewVaultV2MsgClient(cc grpc.ClientConnInterface) VaultV2MsgClient {
	return &vaultV2MsgClient{cc}
}

func (c *vaultV2MsgClient) Deposit(ctx context.Context, in *MsgDeposit, opts ...grpc.CallOption) (*MsgDepositResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MsgDepositResponse)
	err := c.cc.Invoke(ctx, VaultV2Msg_Deposit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vaultV2MsgClient) Withdraw(ctx context.Context, in *MsgWithdraw, opts ...grpc.CallOption) (*MsgWithdrawResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MsgWithdrawResponse)
	err := c.cc.Invoke(ctx, VaultV2Msg_Withdraw_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vaultV2MsgClient) RequestExit(ctx context.Context, in *MsgRequestExit, opts ...grpc.CallOption) (*MsgRequestExitResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MsgRequestExitResponse)
	err := c.cc.Invoke(ctx, VaultV2Msg_RequestExit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vaultV2MsgClient) CancelExit(ctx context.Context, in *MsgCancelExit, opts ...grpc.CallOption) (*MsgCancelExitResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MsgCancelExitResponse)
	err := c.cc.Invoke(ctx, VaultV2Msg_CancelExit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vaultV2MsgClient) SetYieldPreference(ctx context.Context, in *MsgSetYieldPreference, opts ...grpc.CallOption) (*MsgSetYieldPreferenceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MsgSetYieldPreferenceResponse)
	err := c.cc.Invoke(ctx, VaultV2Msg_SetYieldPreference_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vaultV2MsgClient) ProcessExitQueue(ctx context.Context, in *MsgProcessExitQueue, opts ...grpc.CallOption) (*MsgProcessExitQueueResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MsgProcessExitQueueResponse)
	err := c.cc.Invoke(ctx, VaultV2Msg_ProcessExitQueue_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vaultV2MsgClient) UpdateNAV(ctx context.Context, in *MsgUpdateNAV, opts ...grpc.CallOption) (*MsgUpdateNAVResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MsgUpdateNAVResponse)
	err := c.cc.Invoke(ctx, VaultV2Msg_UpdateNAV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VaultV2MsgServer is the server API for VaultV2Msg service.
// All implementations must embed UnimplementedVaultV2MsgServer
// for forward compatibility.
//
// V2 Vault message service for share-based accounting
type VaultV2MsgServer interface {
	// Deposit tokens to receive shares
	Deposit(context.Context, *MsgDeposit) (*MsgDepositResponse, error)
	// Withdraw tokens by burning shares
	Withdraw(context.Context, *MsgWithdraw) (*MsgWithdrawResponse, error)
	// Request exit to join withdrawal queue
	RequestExit(context.Context, *MsgRequestExit) (*MsgRequestExitResponse, error)
	// Cancel exit request
	CancelExit(context.Context, *MsgCancelExit) (*MsgCancelExitResponse, error)
	// Set yield preference
	SetYieldPreference(context.Context, *MsgSetYieldPreference) (*MsgSetYieldPreferenceResponse, error)
	// Process exit queue (authority only)
	ProcessExitQueue(context.Context, *MsgProcessExitQueue) (*MsgProcessExitQueueResponse, error)
	// Update vault NAV (authority only)
	UpdateNAV(context.Context, *MsgUpdateNAV) (*MsgUpdateNAVResponse, error)
	mustEmbedUnimplementedVaultV2MsgServer()
}

// UnimplementedVaultV2MsgServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedVaultV2MsgServer struct{}

func (UnimplementedVaultV2MsgServer) Deposit(context.Context, *MsgDeposit) (*MsgDepositResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Deposit not implemented")
}
func (UnimplementedVaultV2MsgServer) Withdraw(context.Context, *MsgWithdraw) (*MsgWithdrawResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Withdraw not implemented")
}
func (UnimplementedVaultV2MsgServer) RequestExit(context.Context, *MsgRequestExit) (*MsgRequestExitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestExit not implemented")
}
func (UnimplementedVaultV2MsgServer) CancelExit(context.Context, *MsgCancelExit) (*MsgCancelExitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelExit not implemented")
}
func (UnimplementedVaultV2MsgServer) SetYieldPreference(context.Context, *MsgSetYieldPreference) (*MsgSetYieldPreferenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetYieldPreference not implemented")
}
func (UnimplementedVaultV2MsgServer) ProcessExitQueue(context.Context, *MsgProcessExitQueue) (*MsgProcessExitQueueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessExitQueue not implemented")
}
func (UnimplementedVaultV2MsgServer) UpdateNAV(context.Context, *MsgUpdateNAV) (*MsgUpdateNAVResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNAV not implemented")
}
func (UnimplementedVaultV2MsgServer) mustEmbedUnimplementedVaultV2MsgServer() {}
func (UnimplementedVaultV2MsgServer) testEmbeddedByValue()                    {}

// UnsafeVaultV2MsgServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VaultV2MsgServer will
// result in compilation errors.
type UnsafeVaultV2MsgServer interface {
	mustEmbedUnimplementedVaultV2MsgServer()
}

func RegisterVaultV2MsgServer(s grpc.ServiceRegistrar, srv VaultV2MsgServer) {
	// If the following call pancis, it indicates UnimplementedVaultV2MsgServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&VaultV2Msg_ServiceDesc, srv)
}

func _VaultV2Msg_Deposit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDeposit)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VaultV2MsgServer).Deposit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VaultV2Msg_Deposit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VaultV2MsgServer).Deposit(ctx, req.(*MsgDeposit))
	}
	return interceptor(ctx, in, info, handler)
}

func _VaultV2Msg_Withdraw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgWithdraw)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VaultV2MsgServer).Withdraw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VaultV2Msg_Withdraw_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VaultV2MsgServer).Withdraw(ctx, req.(*MsgWithdraw))
	}
	return interceptor(ctx, in, info, handler)
}

func _VaultV2Msg_RequestExit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRequestExit)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VaultV2MsgServer).RequestExit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VaultV2Msg_RequestExit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VaultV2MsgServer).RequestExit(ctx, req.(*MsgRequestExit))
	}
	return interceptor(ctx, in, info, handler)
}

func _VaultV2Msg_CancelExit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCancelExit)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VaultV2MsgServer).CancelExit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VaultV2Msg_CancelExit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VaultV2MsgServer).CancelExit(ctx, req.(*MsgCancelExit))
	}
	return interceptor(ctx, in, info, handler)
}

func _VaultV2Msg_SetYieldPreference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSetYieldPreference)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VaultV2MsgServer).SetYieldPreference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VaultV2Msg_SetYieldPreference_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VaultV2MsgServer).SetYieldPreference(ctx, req.(*MsgSetYieldPreference))
	}
	return interceptor(ctx, in, info, handler)
}

func _VaultV2Msg_ProcessExitQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgProcessExitQueue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VaultV2MsgServer).ProcessExitQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VaultV2Msg_ProcessExitQueue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VaultV2MsgServer).ProcessExitQueue(ctx, req.(*MsgProcessExitQueue))
	}
	return interceptor(ctx, in, info, handler)
}

func _VaultV2Msg_UpdateNAV_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateNAV)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VaultV2MsgServer).UpdateNAV(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VaultV2Msg_UpdateNAV_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VaultV2MsgServer).UpdateNAV(ctx, req.(*MsgUpdateNAV))
	}
	return interceptor(ctx, in, info, handler)
}

// VaultV2Msg_ServiceDesc is the grpc.ServiceDesc for VaultV2Msg service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VaultV2Msg_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "noble.dollar.vaults.v1.VaultV2Msg",
	HandlerType: (*VaultV2MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Deposit",
			Handler:    _VaultV2Msg_Deposit_Handler,
		},
		{
			MethodName: "Withdraw",
			Handler:    _VaultV2Msg_Withdraw_Handler,
		},
		{
			MethodName: "RequestExit",
			Handler:    _VaultV2Msg_RequestExit_Handler,
		},
		{
			MethodName: "CancelExit",
			Handler:    _VaultV2Msg_CancelExit_Handler,
		},
		{
			MethodName: "SetYieldPreference",
			Handler:    _VaultV2Msg_SetYieldPreference_Handler,
		},
		{
			MethodName: "ProcessExitQueue",
			Handler:    _VaultV2Msg_ProcessExitQueue_Handler,
		},
		{
			MethodName: "UpdateNAV",
			Handler:    _VaultV2Msg_UpdateNAV_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "noble/dollar/vaults/v1/vaults_v2.proto",
}

const (
	VaultV2Query_VaultState_FullMethodName        = "/noble.dollar.vaults.v1.VaultV2Query/VaultState"
	VaultV2Query_UserPosition_FullMethodName      = "/noble.dollar.vaults.v1.VaultV2Query/UserPosition"
	VaultV2Query_SharePrice_FullMethodName        = "/noble.dollar.vaults.v1.VaultV2Query/SharePrice"
	VaultV2Query_PricingInfo_FullMethodName       = "/noble.dollar.vaults.v1.VaultV2Query/PricingInfo"
	VaultV2Query_ExitQueue_FullMethodName         = "/noble.dollar.vaults.v1.VaultV2Query/ExitQueue"
	VaultV2Query_DepositPreview_FullMethodName    = "/noble.dollar.vaults.v1.VaultV2Query/DepositPreview"
	VaultV2Query_WithdrawalPreview_FullMethodName = "/noble.dollar.vaults.v1.VaultV2Query/WithdrawalPreview"
)

// VaultV2QueryClient is the client API for VaultV2Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// V2 Query service for share-based vault
type VaultV2QueryClient interface {
	// Get vault state
	VaultState(ctx context.Context, in *QueryVaultStateRequest, opts ...grpc.CallOption) (*QueryVaultStateResponse, error)
	// Get user position
	UserPosition(ctx context.Context, in *QueryUserPositionRequest, opts ...grpc.CallOption) (*QueryUserPositionResponse, error)
	// Get current share price
	SharePrice(ctx context.Context, in *QuerySharePriceRequest, opts ...grpc.CallOption) (*QuerySharePriceResponse, error)
	// Get deposit/withdrawal pricing
	PricingInfo(ctx context.Context, in *QueryPricingInfoRequest, opts ...grpc.CallOption) (*QueryPricingInfoResponse, error)
	// Get exit queue status
	ExitQueue(ctx context.Context, in *QueryExitQueueRequest, opts ...grpc.CallOption) (*QueryExitQueueResponse, error)
	// Preview deposit outcome
	DepositPreview(ctx context.Context, in *QueryDepositPreviewRequest, opts ...grpc.CallOption) (*QueryDepositPreviewResponse, error)
	// Preview withdrawal outcome
	WithdrawalPreview(ctx context.Context, in *QueryWithdrawalPreviewRequest, opts ...grpc.CallOption) (*QueryWithdrawalPreviewResponse, error)
}

type vaultV2QueryClient struct {
	cc grpc.ClientConnInterface
}

func NewVaultV2QueryClient(cc grpc.ClientConnInterface) VaultV2QueryClient {
	return &vaultV2QueryClient{cc}
}

func (c *vaultV2QueryClient) VaultState(ctx context.Context, in *QueryVaultStateRequest, opts ...grpc.CallOption) (*QueryVaultStateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryVaultStateResponse)
	err := c.cc.Invoke(ctx, VaultV2Query_VaultState_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vaultV2QueryClient) UserPosition(ctx context.Context, in *QueryUserPositionRequest, opts ...grpc.CallOption) (*QueryUserPositionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryUserPositionResponse)
	err := c.cc.Invoke(ctx, VaultV2Query_UserPosition_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vaultV2QueryClient) SharePrice(ctx context.Context, in *QuerySharePriceRequest, opts ...grpc.CallOption) (*QuerySharePriceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QuerySharePriceResponse)
	err := c.cc.Invoke(ctx, VaultV2Query_SharePrice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vaultV2QueryClient) PricingInfo(ctx context.Context, in *QueryPricingInfoRequest, opts ...grpc.CallOption) (*QueryPricingInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryPricingInfoResponse)
	err := c.cc.Invoke(ctx, VaultV2Query_PricingInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vaultV2QueryClient) ExitQueue(ctx context.Context, in *QueryExitQueueRequest, opts ...grpc.CallOption) (*QueryExitQueueResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryExitQueueResponse)
	err := c.cc.Invoke(ctx, VaultV2Query_ExitQueue_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vaultV2QueryClient) DepositPreview(ctx context.Context, in *QueryDepositPreviewRequest, opts ...grpc.CallOption) (*QueryDepositPreviewResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryDepositPreviewResponse)
	err := c.cc.Invoke(ctx, VaultV2Query_DepositPreview_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vaultV2QueryClient) WithdrawalPreview(ctx context.Context, in *QueryWithdrawalPreviewRequest, opts ...grpc.CallOption) (*QueryWithdrawalPreviewResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryWithdrawalPreviewResponse)
	err := c.cc.Invoke(ctx, VaultV2Query_WithdrawalPreview_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VaultV2QueryServer is the server API for VaultV2Query service.
// All implementations must embed UnimplementedVaultV2QueryServer
// for forward compatibility.
//
// V2 Query service for share-based vault
type VaultV2QueryServer interface {
	// Get vault state
	VaultState(context.Context, *QueryVaultStateRequest) (*QueryVaultStateResponse, error)
	// Get user position
	UserPosition(context.Context, *QueryUserPositionRequest) (*QueryUserPositionResponse, error)
	// Get current share price
	SharePrice(context.Context, *QuerySharePriceRequest) (*QuerySharePriceResponse, error)
	// Get deposit/withdrawal pricing
	PricingInfo(context.Context, *QueryPricingInfoRequest) (*QueryPricingInfoResponse, error)
	// Get exit queue status
	ExitQueue(context.Context, *QueryExitQueueRequest) (*QueryExitQueueResponse, error)
	// Preview deposit outcome
	DepositPreview(context.Context, *QueryDepositPreviewRequest) (*QueryDepositPreviewResponse, error)
	// Preview withdrawal outcome
	WithdrawalPreview(context.Context, *QueryWithdrawalPreviewRequest) (*QueryWithdrawalPreviewResponse, error)
	mustEmbedUnimplementedVaultV2QueryServer()
}

// UnimplementedVaultV2QueryServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedVaultV2QueryServer struct{}

func (UnimplementedVaultV2QueryServer) VaultState(context.Context, *QueryVaultStateRequest) (*QueryVaultStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VaultState not implemented")
}
func (UnimplementedVaultV2QueryServer) UserPosition(context.Context, *QueryUserPositionRequest) (*QueryUserPositionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserPosition not implemented")
}
func (UnimplementedVaultV2QueryServer) SharePrice(context.Context, *QuerySharePriceRequest) (*QuerySharePriceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SharePrice not implemented")
}
func (UnimplementedVaultV2QueryServer) PricingInfo(context.Context, *QueryPricingInfoRequest) (*QueryPricingInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PricingInfo not implemented")
}
func (UnimplementedVaultV2QueryServer) ExitQueue(context.Context, *QueryExitQueueRequest) (*QueryExitQueueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExitQueue not implemented")
}
func (UnimplementedVaultV2QueryServer) DepositPreview(context.Context, *QueryDepositPreviewRequest) (*QueryDepositPreviewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DepositPreview not implemented")
}
func (UnimplementedVaultV2QueryServer) WithdrawalPreview(context.Context, *QueryWithdrawalPreviewRequest) (*QueryWithdrawalPreviewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WithdrawalPreview not implemented")
}
func (UnimplementedVaultV2QueryServer) mustEmbedUnimplementedVaultV2QueryServer() {}
func (UnimplementedVaultV2QueryServer) testEmbeddedByValue()                      {}

// UnsafeVaultV2QueryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VaultV2QueryServer will
// result in compilation errors.
type UnsafeVaultV2QueryServer interface {
	mustEmbedUnimplementedVaultV2QueryServer()
}

func RegisterVaultV2QueryServer(s grpc.ServiceRegistrar, srv VaultV2QueryServer) {
	// If the following call pancis, it indicates UnimplementedVaultV2QueryServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&VaultV2Query_ServiceDesc, srv)
}

func _VaultV2Query_VaultState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryVaultStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VaultV2QueryServer).VaultState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VaultV2Query_VaultState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VaultV2QueryServer).VaultState(ctx, req.(*QueryVaultStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VaultV2Query_UserPosition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryUserPositionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VaultV2QueryServer).UserPosition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VaultV2Query_UserPosition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VaultV2QueryServer).UserPosition(ctx, req.(*QueryUserPositionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VaultV2Query_SharePrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySharePriceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VaultV2QueryServer).SharePrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VaultV2Query_SharePrice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VaultV2QueryServer).SharePrice(ctx, req.(*QuerySharePriceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VaultV2Query_PricingInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPricingInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VaultV2QueryServer).PricingInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VaultV2Query_PricingInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VaultV2QueryServer).PricingInfo(ctx, req.(*QueryPricingInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VaultV2Query_ExitQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryExitQueueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VaultV2QueryServer).ExitQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VaultV2Query_ExitQueue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VaultV2QueryServer).ExitQueue(ctx, req.(*QueryExitQueueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VaultV2Query_DepositPreview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDepositPreviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VaultV2QueryServer).DepositPreview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VaultV2Query_DepositPreview_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VaultV2QueryServer).DepositPreview(ctx, req.(*QueryDepositPreviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VaultV2Query_WithdrawalPreview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryWithdrawalPreviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VaultV2QueryServer).WithdrawalPreview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VaultV2Query_WithdrawalPreview_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VaultV2QueryServer).WithdrawalPreview(ctx, req.(*QueryWithdrawalPreviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// VaultV2Query_ServiceDesc is the grpc.ServiceDesc for VaultV2Query service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VaultV2Query_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "noble.dollar.vaults.v1.VaultV2Query",
	HandlerType: (*VaultV2QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "VaultState",
			Handler:    _VaultV2Query_VaultState_Handler,
		},
		{
			MethodName: "UserPosition",
			Handler:    _VaultV2Query_UserPosition_Handler,
		},
		{
			MethodName: "SharePrice",
			Handler:    _VaultV2Query_SharePrice_Handler,
		},
		{
			MethodName: "PricingInfo",
			Handler:    _VaultV2Query_PricingInfo_Handler,
		},
		{
			MethodName: "ExitQueue",
			Handler:    _VaultV2Query_ExitQueue_Handler,
		},
		{
			MethodName: "DepositPreview",
			Handler:    _VaultV2Query_DepositPreview_Handler,
		},
		{
			MethodName: "WithdrawalPreview",
			Handler:    _VaultV2Query_WithdrawalPreview_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "noble/dollar/vaults/v1/vaults_v2.proto",
}

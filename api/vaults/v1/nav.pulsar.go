// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package vaultsv1

import (
	_ "cosmossdk.io/api/amino"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	runtime "github.com/cosmos/cosmos-proto/runtime"
	_ "github.com/cosmos/gogoproto/gogoproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	reflect "reflect"
	sync "sync"
)

var (
	md_NAVBand             protoreflect.MessageDescriptor
	fd_NAVBand_lower_bound protoreflect.FieldDescriptor
	fd_NAVBand_upper_bound protoreflect.FieldDescriptor
	fd_NAVBand_fee_rate    protoreflect.FieldDescriptor
)

func init() {
	file_noble_dollar_vaults_v1_nav_proto_init()
	md_NAVBand = File_noble_dollar_vaults_v1_nav_proto.Messages().ByName("NAVBand")
	fd_NAVBand_lower_bound = md_NAVBand.Fields().ByName("lower_bound")
	fd_NAVBand_upper_bound = md_NAVBand.Fields().ByName("upper_bound")
	fd_NAVBand_fee_rate = md_NAVBand.Fields().ByName("fee_rate")
}

var _ protoreflect.Message = (*fastReflection_NAVBand)(nil)

type fastReflection_NAVBand NAVBand

func (x *NAVBand) ProtoReflect() protoreflect.Message {
	return (*fastReflection_NAVBand)(x)
}

func (x *NAVBand) slowProtoReflect() protoreflect.Message {
	mi := &file_noble_dollar_vaults_v1_nav_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_NAVBand_messageType fastReflection_NAVBand_messageType
var _ protoreflect.MessageType = fastReflection_NAVBand_messageType{}

type fastReflection_NAVBand_messageType struct{}

func (x fastReflection_NAVBand_messageType) Zero() protoreflect.Message {
	return (*fastReflection_NAVBand)(nil)
}
func (x fastReflection_NAVBand_messageType) New() protoreflect.Message {
	return new(fastReflection_NAVBand)
}
func (x fastReflection_NAVBand_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_NAVBand
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_NAVBand) Descriptor() protoreflect.MessageDescriptor {
	return md_NAVBand
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_NAVBand) Type() protoreflect.MessageType {
	return _fastReflection_NAVBand_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_NAVBand) New() protoreflect.Message {
	return new(fastReflection_NAVBand)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_NAVBand) Interface() protoreflect.ProtoMessage {
	return (*NAVBand)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_NAVBand) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.LowerBound != int32(0) {
		value := protoreflect.ValueOfInt32(x.LowerBound)
		if !f(fd_NAVBand_lower_bound, value) {
			return
		}
	}
	if x.UpperBound != int32(0) {
		value := protoreflect.ValueOfInt32(x.UpperBound)
		if !f(fd_NAVBand_upper_bound, value) {
			return
		}
	}
	if x.FeeRate != int32(0) {
		value := protoreflect.ValueOfInt32(x.FeeRate)
		if !f(fd_NAVBand_fee_rate, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_NAVBand) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "noble.dollar.vaults.v1.NAVBand.lower_bound":
		return x.LowerBound != int32(0)
	case "noble.dollar.vaults.v1.NAVBand.upper_bound":
		return x.UpperBound != int32(0)
	case "noble.dollar.vaults.v1.NAVBand.fee_rate":
		return x.FeeRate != int32(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.dollar.vaults.v1.NAVBand"))
		}
		panic(fmt.Errorf("message noble.dollar.vaults.v1.NAVBand does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_NAVBand) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "noble.dollar.vaults.v1.NAVBand.lower_bound":
		x.LowerBound = int32(0)
	case "noble.dollar.vaults.v1.NAVBand.upper_bound":
		x.UpperBound = int32(0)
	case "noble.dollar.vaults.v1.NAVBand.fee_rate":
		x.FeeRate = int32(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.dollar.vaults.v1.NAVBand"))
		}
		panic(fmt.Errorf("message noble.dollar.vaults.v1.NAVBand does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_NAVBand) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "noble.dollar.vaults.v1.NAVBand.lower_bound":
		value := x.LowerBound
		return protoreflect.ValueOfInt32(value)
	case "noble.dollar.vaults.v1.NAVBand.upper_bound":
		value := x.UpperBound
		return protoreflect.ValueOfInt32(value)
	case "noble.dollar.vaults.v1.NAVBand.fee_rate":
		value := x.FeeRate
		return protoreflect.ValueOfInt32(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.dollar.vaults.v1.NAVBand"))
		}
		panic(fmt.Errorf("message noble.dollar.vaults.v1.NAVBand does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_NAVBand) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "noble.dollar.vaults.v1.NAVBand.lower_bound":
		x.LowerBound = int32(value.Int())
	case "noble.dollar.vaults.v1.NAVBand.upper_bound":
		x.UpperBound = int32(value.Int())
	case "noble.dollar.vaults.v1.NAVBand.fee_rate":
		x.FeeRate = int32(value.Int())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.dollar.vaults.v1.NAVBand"))
		}
		panic(fmt.Errorf("message noble.dollar.vaults.v1.NAVBand does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_NAVBand) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "noble.dollar.vaults.v1.NAVBand.lower_bound":
		panic(fmt.Errorf("field lower_bound of message noble.dollar.vaults.v1.NAVBand is not mutable"))
	case "noble.dollar.vaults.v1.NAVBand.upper_bound":
		panic(fmt.Errorf("field upper_bound of message noble.dollar.vaults.v1.NAVBand is not mutable"))
	case "noble.dollar.vaults.v1.NAVBand.fee_rate":
		panic(fmt.Errorf("field fee_rate of message noble.dollar.vaults.v1.NAVBand is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.dollar.vaults.v1.NAVBand"))
		}
		panic(fmt.Errorf("message noble.dollar.vaults.v1.NAVBand does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_NAVBand) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "noble.dollar.vaults.v1.NAVBand.lower_bound":
		return protoreflect.ValueOfInt32(int32(0))
	case "noble.dollar.vaults.v1.NAVBand.upper_bound":
		return protoreflect.ValueOfInt32(int32(0))
	case "noble.dollar.vaults.v1.NAVBand.fee_rate":
		return protoreflect.ValueOfInt32(int32(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.dollar.vaults.v1.NAVBand"))
		}
		panic(fmt.Errorf("message noble.dollar.vaults.v1.NAVBand does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_NAVBand) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in noble.dollar.vaults.v1.NAVBand", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_NAVBand) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_NAVBand) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_NAVBand) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_NAVBand) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*NAVBand)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.LowerBound != 0 {
			n += 1 + runtime.Sov(uint64(x.LowerBound))
		}
		if x.UpperBound != 0 {
			n += 1 + runtime.Sov(uint64(x.UpperBound))
		}
		if x.FeeRate != 0 {
			n += 1 + runtime.Sov(uint64(x.FeeRate))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*NAVBand)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.FeeRate != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.FeeRate))
			i--
			dAtA[i] = 0x18
		}
		if x.UpperBound != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.UpperBound))
			i--
			dAtA[i] = 0x10
		}
		if x.LowerBound != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.LowerBound))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*NAVBand)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: NAVBand: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: NAVBand: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field LowerBound", wireType)
				}
				x.LowerBound = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.LowerBound |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field UpperBound", wireType)
				}
				x.UpperBound = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.UpperBound |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 3:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field FeeRate", wireType)
				}
				x.FeeRate = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.FeeRate |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var _ protoreflect.List = (*_NAVConfig_1_list)(nil)

type _NAVConfig_1_list struct {
	list *[]*NAVBand
}

func (x *_NAVConfig_1_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_NAVConfig_1_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_NAVConfig_1_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*NAVBand)
	(*x.list)[i] = concreteValue
}

func (x *_NAVConfig_1_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*NAVBand)
	*x.list = append(*x.list, concreteValue)
}

func (x *_NAVConfig_1_list) AppendMutable() protoreflect.Value {
	v := new(NAVBand)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_NAVConfig_1_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_NAVConfig_1_list) NewElement() protoreflect.Value {
	v := new(NAVBand)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_NAVConfig_1_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_NAVConfig_2_list)(nil)

type _NAVConfig_2_list struct {
	list *[]*NAVBand
}

func (x *_NAVConfig_2_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_NAVConfig_2_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_NAVConfig_2_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*NAVBand)
	(*x.list)[i] = concreteValue
}

func (x *_NAVConfig_2_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*NAVBand)
	*x.list = append(*x.list, concreteValue)
}

func (x *_NAVConfig_2_list) AppendMutable() protoreflect.Value {
	v := new(NAVBand)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_NAVConfig_2_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_NAVConfig_2_list) NewElement() protoreflect.Value {
	v := new(NAVBand)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_NAVConfig_2_list) IsValid() bool {
	return x.list != nil
}

var (
	md_NAVConfig                           protoreflect.MessageDescriptor
	fd_NAVConfig_deposit_bands             protoreflect.FieldDescriptor
	fd_NAVConfig_withdrawal_bands          protoreflect.FieldDescriptor
	fd_NAVConfig_min_nav_update_interval   protoreflect.FieldDescriptor
	fd_NAVConfig_max_nav_deviation         protoreflect.FieldDescriptor
	fd_NAVConfig_circuit_breaker_threshold protoreflect.FieldDescriptor
)

func init() {
	file_noble_dollar_vaults_v1_nav_proto_init()
	md_NAVConfig = File_noble_dollar_vaults_v1_nav_proto.Messages().ByName("NAVConfig")
	fd_NAVConfig_deposit_bands = md_NAVConfig.Fields().ByName("deposit_bands")
	fd_NAVConfig_withdrawal_bands = md_NAVConfig.Fields().ByName("withdrawal_bands")
	fd_NAVConfig_min_nav_update_interval = md_NAVConfig.Fields().ByName("min_nav_update_interval")
	fd_NAVConfig_max_nav_deviation = md_NAVConfig.Fields().ByName("max_nav_deviation")
	fd_NAVConfig_circuit_breaker_threshold = md_NAVConfig.Fields().ByName("circuit_breaker_threshold")
}

var _ protoreflect.Message = (*fastReflection_NAVConfig)(nil)

type fastReflection_NAVConfig NAVConfig

func (x *NAVConfig) ProtoReflect() protoreflect.Message {
	return (*fastReflection_NAVConfig)(x)
}

func (x *NAVConfig) slowProtoReflect() protoreflect.Message {
	mi := &file_noble_dollar_vaults_v1_nav_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_NAVConfig_messageType fastReflection_NAVConfig_messageType
var _ protoreflect.MessageType = fastReflection_NAVConfig_messageType{}

type fastReflection_NAVConfig_messageType struct{}

func (x fastReflection_NAVConfig_messageType) Zero() protoreflect.Message {
	return (*fastReflection_NAVConfig)(nil)
}
func (x fastReflection_NAVConfig_messageType) New() protoreflect.Message {
	return new(fastReflection_NAVConfig)
}
func (x fastReflection_NAVConfig_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_NAVConfig
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_NAVConfig) Descriptor() protoreflect.MessageDescriptor {
	return md_NAVConfig
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_NAVConfig) Type() protoreflect.MessageType {
	return _fastReflection_NAVConfig_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_NAVConfig) New() protoreflect.Message {
	return new(fastReflection_NAVConfig)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_NAVConfig) Interface() protoreflect.ProtoMessage {
	return (*NAVConfig)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_NAVConfig) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if len(x.DepositBands) != 0 {
		value := protoreflect.ValueOfList(&_NAVConfig_1_list{list: &x.DepositBands})
		if !f(fd_NAVConfig_deposit_bands, value) {
			return
		}
	}
	if len(x.WithdrawalBands) != 0 {
		value := protoreflect.ValueOfList(&_NAVConfig_2_list{list: &x.WithdrawalBands})
		if !f(fd_NAVConfig_withdrawal_bands, value) {
			return
		}
	}
	if x.MinNavUpdateInterval != int64(0) {
		value := protoreflect.ValueOfInt64(x.MinNavUpdateInterval)
		if !f(fd_NAVConfig_min_nav_update_interval, value) {
			return
		}
	}
	if x.MaxNavDeviation != int32(0) {
		value := protoreflect.ValueOfInt32(x.MaxNavDeviation)
		if !f(fd_NAVConfig_max_nav_deviation, value) {
			return
		}
	}
	if x.CircuitBreakerThreshold != int32(0) {
		value := protoreflect.ValueOfInt32(x.CircuitBreakerThreshold)
		if !f(fd_NAVConfig_circuit_breaker_threshold, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_NAVConfig) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "noble.dollar.vaults.v1.NAVConfig.deposit_bands":
		return len(x.DepositBands) != 0
	case "noble.dollar.vaults.v1.NAVConfig.withdrawal_bands":
		return len(x.WithdrawalBands) != 0
	case "noble.dollar.vaults.v1.NAVConfig.min_nav_update_interval":
		return x.MinNavUpdateInterval != int64(0)
	case "noble.dollar.vaults.v1.NAVConfig.max_nav_deviation":
		return x.MaxNavDeviation != int32(0)
	case "noble.dollar.vaults.v1.NAVConfig.circuit_breaker_threshold":
		return x.CircuitBreakerThreshold != int32(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.dollar.vaults.v1.NAVConfig"))
		}
		panic(fmt.Errorf("message noble.dollar.vaults.v1.NAVConfig does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_NAVConfig) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "noble.dollar.vaults.v1.NAVConfig.deposit_bands":
		x.DepositBands = nil
	case "noble.dollar.vaults.v1.NAVConfig.withdrawal_bands":
		x.WithdrawalBands = nil
	case "noble.dollar.vaults.v1.NAVConfig.min_nav_update_interval":
		x.MinNavUpdateInterval = int64(0)
	case "noble.dollar.vaults.v1.NAVConfig.max_nav_deviation":
		x.MaxNavDeviation = int32(0)
	case "noble.dollar.vaults.v1.NAVConfig.circuit_breaker_threshold":
		x.CircuitBreakerThreshold = int32(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.dollar.vaults.v1.NAVConfig"))
		}
		panic(fmt.Errorf("message noble.dollar.vaults.v1.NAVConfig does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_NAVConfig) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "noble.dollar.vaults.v1.NAVConfig.deposit_bands":
		if len(x.DepositBands) == 0 {
			return protoreflect.ValueOfList(&_NAVConfig_1_list{})
		}
		listValue := &_NAVConfig_1_list{list: &x.DepositBands}
		return protoreflect.ValueOfList(listValue)
	case "noble.dollar.vaults.v1.NAVConfig.withdrawal_bands":
		if len(x.WithdrawalBands) == 0 {
			return protoreflect.ValueOfList(&_NAVConfig_2_list{})
		}
		listValue := &_NAVConfig_2_list{list: &x.WithdrawalBands}
		return protoreflect.ValueOfList(listValue)
	case "noble.dollar.vaults.v1.NAVConfig.min_nav_update_interval":
		value := x.MinNavUpdateInterval
		return protoreflect.ValueOfInt64(value)
	case "noble.dollar.vaults.v1.NAVConfig.max_nav_deviation":
		value := x.MaxNavDeviation
		return protoreflect.ValueOfInt32(value)
	case "noble.dollar.vaults.v1.NAVConfig.circuit_breaker_threshold":
		value := x.CircuitBreakerThreshold
		return protoreflect.ValueOfInt32(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.dollar.vaults.v1.NAVConfig"))
		}
		panic(fmt.Errorf("message noble.dollar.vaults.v1.NAVConfig does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_NAVConfig) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "noble.dollar.vaults.v1.NAVConfig.deposit_bands":
		lv := value.List()
		clv := lv.(*_NAVConfig_1_list)
		x.DepositBands = *clv.list
	case "noble.dollar.vaults.v1.NAVConfig.withdrawal_bands":
		lv := value.List()
		clv := lv.(*_NAVConfig_2_list)
		x.WithdrawalBands = *clv.list
	case "noble.dollar.vaults.v1.NAVConfig.min_nav_update_interval":
		x.MinNavUpdateInterval = value.Int()
	case "noble.dollar.vaults.v1.NAVConfig.max_nav_deviation":
		x.MaxNavDeviation = int32(value.Int())
	case "noble.dollar.vaults.v1.NAVConfig.circuit_breaker_threshold":
		x.CircuitBreakerThreshold = int32(value.Int())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.dollar.vaults.v1.NAVConfig"))
		}
		panic(fmt.Errorf("message noble.dollar.vaults.v1.NAVConfig does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_NAVConfig) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "noble.dollar.vaults.v1.NAVConfig.deposit_bands":
		if x.DepositBands == nil {
			x.DepositBands = []*NAVBand{}
		}
		value := &_NAVConfig_1_list{list: &x.DepositBands}
		return protoreflect.ValueOfList(value)
	case "noble.dollar.vaults.v1.NAVConfig.withdrawal_bands":
		if x.WithdrawalBands == nil {
			x.WithdrawalBands = []*NAVBand{}
		}
		value := &_NAVConfig_2_list{list: &x.WithdrawalBands}
		return protoreflect.ValueOfList(value)
	case "noble.dollar.vaults.v1.NAVConfig.min_nav_update_interval":
		panic(fmt.Errorf("field min_nav_update_interval of message noble.dollar.vaults.v1.NAVConfig is not mutable"))
	case "noble.dollar.vaults.v1.NAVConfig.max_nav_deviation":
		panic(fmt.Errorf("field max_nav_deviation of message noble.dollar.vaults.v1.NAVConfig is not mutable"))
	case "noble.dollar.vaults.v1.NAVConfig.circuit_breaker_threshold":
		panic(fmt.Errorf("field circuit_breaker_threshold of message noble.dollar.vaults.v1.NAVConfig is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.dollar.vaults.v1.NAVConfig"))
		}
		panic(fmt.Errorf("message noble.dollar.vaults.v1.NAVConfig does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_NAVConfig) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "noble.dollar.vaults.v1.NAVConfig.deposit_bands":
		list := []*NAVBand{}
		return protoreflect.ValueOfList(&_NAVConfig_1_list{list: &list})
	case "noble.dollar.vaults.v1.NAVConfig.withdrawal_bands":
		list := []*NAVBand{}
		return protoreflect.ValueOfList(&_NAVConfig_2_list{list: &list})
	case "noble.dollar.vaults.v1.NAVConfig.min_nav_update_interval":
		return protoreflect.ValueOfInt64(int64(0))
	case "noble.dollar.vaults.v1.NAVConfig.max_nav_deviation":
		return protoreflect.ValueOfInt32(int32(0))
	case "noble.dollar.vaults.v1.NAVConfig.circuit_breaker_threshold":
		return protoreflect.ValueOfInt32(int32(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.dollar.vaults.v1.NAVConfig"))
		}
		panic(fmt.Errorf("message noble.dollar.vaults.v1.NAVConfig does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_NAVConfig) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in noble.dollar.vaults.v1.NAVConfig", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_NAVConfig) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_NAVConfig) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_NAVConfig) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_NAVConfig) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*NAVConfig)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if len(x.DepositBands) > 0 {
			for _, e := range x.DepositBands {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if len(x.WithdrawalBands) > 0 {
			for _, e := range x.WithdrawalBands {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.MinNavUpdateInterval != 0 {
			n += 1 + runtime.Sov(uint64(x.MinNavUpdateInterval))
		}
		if x.MaxNavDeviation != 0 {
			n += 1 + runtime.Sov(uint64(x.MaxNavDeviation))
		}
		if x.CircuitBreakerThreshold != 0 {
			n += 1 + runtime.Sov(uint64(x.CircuitBreakerThreshold))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*NAVConfig)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.CircuitBreakerThreshold != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.CircuitBreakerThreshold))
			i--
			dAtA[i] = 0x28
		}
		if x.MaxNavDeviation != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.MaxNavDeviation))
			i--
			dAtA[i] = 0x20
		}
		if x.MinNavUpdateInterval != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.MinNavUpdateInterval))
			i--
			dAtA[i] = 0x18
		}
		if len(x.WithdrawalBands) > 0 {
			for iNdEx := len(x.WithdrawalBands) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.WithdrawalBands[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x12
			}
		}
		if len(x.DepositBands) > 0 {
			for iNdEx := len(x.DepositBands) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.DepositBands[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0xa
			}
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*NAVConfig)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: NAVConfig: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: NAVConfig: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field DepositBands", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.DepositBands = append(x.DepositBands, &NAVBand{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.DepositBands[len(x.DepositBands)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field WithdrawalBands", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.WithdrawalBands = append(x.WithdrawalBands, &NAVBand{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.WithdrawalBands[len(x.WithdrawalBands)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 3:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MinNavUpdateInterval", wireType)
				}
				x.MinNavUpdateInterval = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.MinNavUpdateInterval |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 4:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MaxNavDeviation", wireType)
				}
				x.MaxNavDeviation = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.MaxNavDeviation |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 5:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field CircuitBreakerThreshold", wireType)
				}
				x.CircuitBreakerThreshold = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.CircuitBreakerThreshold |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_VaultState                        protoreflect.MessageDescriptor
	fd_VaultState_total_shares           protoreflect.FieldDescriptor
	fd_VaultState_nav_point              protoreflect.FieldDescriptor
	fd_VaultState_last_nav_update        protoreflect.FieldDescriptor
	fd_VaultState_total_principal        protoreflect.FieldDescriptor
	fd_VaultState_accumulated_yield      protoreflect.FieldDescriptor
	fd_VaultState_circuit_breaker_active protoreflect.FieldDescriptor
	fd_VaultState_deposits_paused        protoreflect.FieldDescriptor
	fd_VaultState_withdrawals_paused     protoreflect.FieldDescriptor
)

func init() {
	file_noble_dollar_vaults_v1_nav_proto_init()
	md_VaultState = File_noble_dollar_vaults_v1_nav_proto.Messages().ByName("VaultState")
	fd_VaultState_total_shares = md_VaultState.Fields().ByName("total_shares")
	fd_VaultState_nav_point = md_VaultState.Fields().ByName("nav_point")
	fd_VaultState_last_nav_update = md_VaultState.Fields().ByName("last_nav_update")
	fd_VaultState_total_principal = md_VaultState.Fields().ByName("total_principal")
	fd_VaultState_accumulated_yield = md_VaultState.Fields().ByName("accumulated_yield")
	fd_VaultState_circuit_breaker_active = md_VaultState.Fields().ByName("circuit_breaker_active")
	fd_VaultState_deposits_paused = md_VaultState.Fields().ByName("deposits_paused")
	fd_VaultState_withdrawals_paused = md_VaultState.Fields().ByName("withdrawals_paused")
}

var _ protoreflect.Message = (*fastReflection_VaultState)(nil)

type fastReflection_VaultState VaultState

func (x *VaultState) ProtoReflect() protoreflect.Message {
	return (*fastReflection_VaultState)(x)
}

func (x *VaultState) slowProtoReflect() protoreflect.Message {
	mi := &file_noble_dollar_vaults_v1_nav_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_VaultState_messageType fastReflection_VaultState_messageType
var _ protoreflect.MessageType = fastReflection_VaultState_messageType{}

type fastReflection_VaultState_messageType struct{}

func (x fastReflection_VaultState_messageType) Zero() protoreflect.Message {
	return (*fastReflection_VaultState)(nil)
}
func (x fastReflection_VaultState_messageType) New() protoreflect.Message {
	return new(fastReflection_VaultState)
}
func (x fastReflection_VaultState_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_VaultState
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_VaultState) Descriptor() protoreflect.MessageDescriptor {
	return md_VaultState
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_VaultState) Type() protoreflect.MessageType {
	return _fastReflection_VaultState_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_VaultState) New() protoreflect.Message {
	return new(fastReflection_VaultState)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_VaultState) Interface() protoreflect.ProtoMessage {
	return (*VaultState)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_VaultState) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.TotalShares != "" {
		value := protoreflect.ValueOfString(x.TotalShares)
		if !f(fd_VaultState_total_shares, value) {
			return
		}
	}
	if x.NavPoint != "" {
		value := protoreflect.ValueOfString(x.NavPoint)
		if !f(fd_VaultState_nav_point, value) {
			return
		}
	}
	if x.LastNavUpdate != nil {
		value := protoreflect.ValueOfMessage(x.LastNavUpdate.ProtoReflect())
		if !f(fd_VaultState_last_nav_update, value) {
			return
		}
	}
	if x.TotalPrincipal != "" {
		value := protoreflect.ValueOfString(x.TotalPrincipal)
		if !f(fd_VaultState_total_principal, value) {
			return
		}
	}
	if x.AccumulatedYield != "" {
		value := protoreflect.ValueOfString(x.AccumulatedYield)
		if !f(fd_VaultState_accumulated_yield, value) {
			return
		}
	}
	if x.CircuitBreakerActive != false {
		value := protoreflect.ValueOfBool(x.CircuitBreakerActive)
		if !f(fd_VaultState_circuit_breaker_active, value) {
			return
		}
	}
	if x.DepositsPaused != false {
		value := protoreflect.ValueOfBool(x.DepositsPaused)
		if !f(fd_VaultState_deposits_paused, value) {
			return
		}
	}
	if x.WithdrawalsPaused != false {
		value := protoreflect.ValueOfBool(x.WithdrawalsPaused)
		if !f(fd_VaultState_withdrawals_paused, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_VaultState) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "noble.dollar.vaults.v1.VaultState.total_shares":
		return x.TotalShares != ""
	case "noble.dollar.vaults.v1.VaultState.nav_point":
		return x.NavPoint != ""
	case "noble.dollar.vaults.v1.VaultState.last_nav_update":
		return x.LastNavUpdate != nil
	case "noble.dollar.vaults.v1.VaultState.total_principal":
		return x.TotalPrincipal != ""
	case "noble.dollar.vaults.v1.VaultState.accumulated_yield":
		return x.AccumulatedYield != ""
	case "noble.dollar.vaults.v1.VaultState.circuit_breaker_active":
		return x.CircuitBreakerActive != false
	case "noble.dollar.vaults.v1.VaultState.deposits_paused":
		return x.DepositsPaused != false
	case "noble.dollar.vaults.v1.VaultState.withdrawals_paused":
		return x.WithdrawalsPaused != false
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.dollar.vaults.v1.VaultState"))
		}
		panic(fmt.Errorf("message noble.dollar.vaults.v1.VaultState does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_VaultState) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "noble.dollar.vaults.v1.VaultState.total_shares":
		x.TotalShares = ""
	case "noble.dollar.vaults.v1.VaultState.nav_point":
		x.NavPoint = ""
	case "noble.dollar.vaults.v1.VaultState.last_nav_update":
		x.LastNavUpdate = nil
	case "noble.dollar.vaults.v1.VaultState.total_principal":
		x.TotalPrincipal = ""
	case "noble.dollar.vaults.v1.VaultState.accumulated_yield":
		x.AccumulatedYield = ""
	case "noble.dollar.vaults.v1.VaultState.circuit_breaker_active":
		x.CircuitBreakerActive = false
	case "noble.dollar.vaults.v1.VaultState.deposits_paused":
		x.DepositsPaused = false
	case "noble.dollar.vaults.v1.VaultState.withdrawals_paused":
		x.WithdrawalsPaused = false
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.dollar.vaults.v1.VaultState"))
		}
		panic(fmt.Errorf("message noble.dollar.vaults.v1.VaultState does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_VaultState) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "noble.dollar.vaults.v1.VaultState.total_shares":
		value := x.TotalShares
		return protoreflect.ValueOfString(value)
	case "noble.dollar.vaults.v1.VaultState.nav_point":
		value := x.NavPoint
		return protoreflect.ValueOfString(value)
	case "noble.dollar.vaults.v1.VaultState.last_nav_update":
		value := x.LastNavUpdate
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "noble.dollar.vaults.v1.VaultState.total_principal":
		value := x.TotalPrincipal
		return protoreflect.ValueOfString(value)
	case "noble.dollar.vaults.v1.VaultState.accumulated_yield":
		value := x.AccumulatedYield
		return protoreflect.ValueOfString(value)
	case "noble.dollar.vaults.v1.VaultState.circuit_breaker_active":
		value := x.CircuitBreakerActive
		return protoreflect.ValueOfBool(value)
	case "noble.dollar.vaults.v1.VaultState.deposits_paused":
		value := x.DepositsPaused
		return protoreflect.ValueOfBool(value)
	case "noble.dollar.vaults.v1.VaultState.withdrawals_paused":
		value := x.WithdrawalsPaused
		return protoreflect.ValueOfBool(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.dollar.vaults.v1.VaultState"))
		}
		panic(fmt.Errorf("message noble.dollar.vaults.v1.VaultState does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_VaultState) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "noble.dollar.vaults.v1.VaultState.total_shares":
		x.TotalShares = value.Interface().(string)
	case "noble.dollar.vaults.v1.VaultState.nav_point":
		x.NavPoint = value.Interface().(string)
	case "noble.dollar.vaults.v1.VaultState.last_nav_update":
		x.LastNavUpdate = value.Message().Interface().(*timestamppb.Timestamp)
	case "noble.dollar.vaults.v1.VaultState.total_principal":
		x.TotalPrincipal = value.Interface().(string)
	case "noble.dollar.vaults.v1.VaultState.accumulated_yield":
		x.AccumulatedYield = value.Interface().(string)
	case "noble.dollar.vaults.v1.VaultState.circuit_breaker_active":
		x.CircuitBreakerActive = value.Bool()
	case "noble.dollar.vaults.v1.VaultState.deposits_paused":
		x.DepositsPaused = value.Bool()
	case "noble.dollar.vaults.v1.VaultState.withdrawals_paused":
		x.WithdrawalsPaused = value.Bool()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.dollar.vaults.v1.VaultState"))
		}
		panic(fmt.Errorf("message noble.dollar.vaults.v1.VaultState does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_VaultState) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "noble.dollar.vaults.v1.VaultState.last_nav_update":
		if x.LastNavUpdate == nil {
			x.LastNavUpdate = new(timestamppb.Timestamp)
		}
		return protoreflect.ValueOfMessage(x.LastNavUpdate.ProtoReflect())
	case "noble.dollar.vaults.v1.VaultState.total_shares":
		panic(fmt.Errorf("field total_shares of message noble.dollar.vaults.v1.VaultState is not mutable"))
	case "noble.dollar.vaults.v1.VaultState.nav_point":
		panic(fmt.Errorf("field nav_point of message noble.dollar.vaults.v1.VaultState is not mutable"))
	case "noble.dollar.vaults.v1.VaultState.total_principal":
		panic(fmt.Errorf("field total_principal of message noble.dollar.vaults.v1.VaultState is not mutable"))
	case "noble.dollar.vaults.v1.VaultState.accumulated_yield":
		panic(fmt.Errorf("field accumulated_yield of message noble.dollar.vaults.v1.VaultState is not mutable"))
	case "noble.dollar.vaults.v1.VaultState.circuit_breaker_active":
		panic(fmt.Errorf("field circuit_breaker_active of message noble.dollar.vaults.v1.VaultState is not mutable"))
	case "noble.dollar.vaults.v1.VaultState.deposits_paused":
		panic(fmt.Errorf("field deposits_paused of message noble.dollar.vaults.v1.VaultState is not mutable"))
	case "noble.dollar.vaults.v1.VaultState.withdrawals_paused":
		panic(fmt.Errorf("field withdrawals_paused of message noble.dollar.vaults.v1.VaultState is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.dollar.vaults.v1.VaultState"))
		}
		panic(fmt.Errorf("message noble.dollar.vaults.v1.VaultState does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_VaultState) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "noble.dollar.vaults.v1.VaultState.total_shares":
		return protoreflect.ValueOfString("")
	case "noble.dollar.vaults.v1.VaultState.nav_point":
		return protoreflect.ValueOfString("")
	case "noble.dollar.vaults.v1.VaultState.last_nav_update":
		m := new(timestamppb.Timestamp)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "noble.dollar.vaults.v1.VaultState.total_principal":
		return protoreflect.ValueOfString("")
	case "noble.dollar.vaults.v1.VaultState.accumulated_yield":
		return protoreflect.ValueOfString("")
	case "noble.dollar.vaults.v1.VaultState.circuit_breaker_active":
		return protoreflect.ValueOfBool(false)
	case "noble.dollar.vaults.v1.VaultState.deposits_paused":
		return protoreflect.ValueOfBool(false)
	case "noble.dollar.vaults.v1.VaultState.withdrawals_paused":
		return protoreflect.ValueOfBool(false)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.dollar.vaults.v1.VaultState"))
		}
		panic(fmt.Errorf("message noble.dollar.vaults.v1.VaultState does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_VaultState) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in noble.dollar.vaults.v1.VaultState", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_VaultState) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_VaultState) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_VaultState) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_VaultState) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*VaultState)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.TotalShares)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.NavPoint)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.LastNavUpdate != nil {
			l = options.Size(x.LastNavUpdate)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.TotalPrincipal)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.AccumulatedYield)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.CircuitBreakerActive {
			n += 2
		}
		if x.DepositsPaused {
			n += 2
		}
		if x.WithdrawalsPaused {
			n += 2
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*VaultState)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.WithdrawalsPaused {
			i--
			if x.WithdrawalsPaused {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x40
		}
		if x.DepositsPaused {
			i--
			if x.DepositsPaused {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x38
		}
		if x.CircuitBreakerActive {
			i--
			if x.CircuitBreakerActive {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x30
		}
		if len(x.AccumulatedYield) > 0 {
			i -= len(x.AccumulatedYield)
			copy(dAtA[i:], x.AccumulatedYield)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.AccumulatedYield)))
			i--
			dAtA[i] = 0x2a
		}
		if len(x.TotalPrincipal) > 0 {
			i -= len(x.TotalPrincipal)
			copy(dAtA[i:], x.TotalPrincipal)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.TotalPrincipal)))
			i--
			dAtA[i] = 0x22
		}
		if x.LastNavUpdate != nil {
			encoded, err := options.Marshal(x.LastNavUpdate)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x1a
		}
		if len(x.NavPoint) > 0 {
			i -= len(x.NavPoint)
			copy(dAtA[i:], x.NavPoint)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.NavPoint)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.TotalShares) > 0 {
			i -= len(x.TotalShares)
			copy(dAtA[i:], x.TotalShares)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.TotalShares)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*VaultState)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: VaultState: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: VaultState: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TotalShares", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.TotalShares = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field NavPoint", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.NavPoint = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field LastNavUpdate", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.LastNavUpdate == nil {
					x.LastNavUpdate = &timestamppb.Timestamp{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.LastNavUpdate); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TotalPrincipal", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.TotalPrincipal = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field AccumulatedYield", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.AccumulatedYield = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 6:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field CircuitBreakerActive", wireType)
				}
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				x.CircuitBreakerActive = bool(v != 0)
			case 7:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field DepositsPaused", wireType)
				}
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				x.DepositsPaused = bool(v != 0)
			case 8:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field WithdrawalsPaused", wireType)
				}
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				x.WithdrawalsPaused = bool(v != 0)
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_NAVUpdate              protoreflect.MessageDescriptor
	fd_NAVUpdate_previous_nav protoreflect.FieldDescriptor
	fd_NAVUpdate_new_nav      protoreflect.FieldDescriptor
	fd_NAVUpdate_timestamp    protoreflect.FieldDescriptor
	fd_NAVUpdate_block_height protoreflect.FieldDescriptor
	fd_NAVUpdate_reason       protoreflect.FieldDescriptor
)

func init() {
	file_noble_dollar_vaults_v1_nav_proto_init()
	md_NAVUpdate = File_noble_dollar_vaults_v1_nav_proto.Messages().ByName("NAVUpdate")
	fd_NAVUpdate_previous_nav = md_NAVUpdate.Fields().ByName("previous_nav")
	fd_NAVUpdate_new_nav = md_NAVUpdate.Fields().ByName("new_nav")
	fd_NAVUpdate_timestamp = md_NAVUpdate.Fields().ByName("timestamp")
	fd_NAVUpdate_block_height = md_NAVUpdate.Fields().ByName("block_height")
	fd_NAVUpdate_reason = md_NAVUpdate.Fields().ByName("reason")
}

var _ protoreflect.Message = (*fastReflection_NAVUpdate)(nil)

type fastReflection_NAVUpdate NAVUpdate

func (x *NAVUpdate) ProtoReflect() protoreflect.Message {
	return (*fastReflection_NAVUpdate)(x)
}

func (x *NAVUpdate) slowProtoReflect() protoreflect.Message {
	mi := &file_noble_dollar_vaults_v1_nav_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_NAVUpdate_messageType fastReflection_NAVUpdate_messageType
var _ protoreflect.MessageType = fastReflection_NAVUpdate_messageType{}

type fastReflection_NAVUpdate_messageType struct{}

func (x fastReflection_NAVUpdate_messageType) Zero() protoreflect.Message {
	return (*fastReflection_NAVUpdate)(nil)
}
func (x fastReflection_NAVUpdate_messageType) New() protoreflect.Message {
	return new(fastReflection_NAVUpdate)
}
func (x fastReflection_NAVUpdate_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_NAVUpdate
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_NAVUpdate) Descriptor() protoreflect.MessageDescriptor {
	return md_NAVUpdate
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_NAVUpdate) Type() protoreflect.MessageType {
	return _fastReflection_NAVUpdate_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_NAVUpdate) New() protoreflect.Message {
	return new(fastReflection_NAVUpdate)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_NAVUpdate) Interface() protoreflect.ProtoMessage {
	return (*NAVUpdate)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_NAVUpdate) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.PreviousNav != "" {
		value := protoreflect.ValueOfString(x.PreviousNav)
		if !f(fd_NAVUpdate_previous_nav, value) {
			return
		}
	}
	if x.NewNav != "" {
		value := protoreflect.ValueOfString(x.NewNav)
		if !f(fd_NAVUpdate_new_nav, value) {
			return
		}
	}
	if x.Timestamp != nil {
		value := protoreflect.ValueOfMessage(x.Timestamp.ProtoReflect())
		if !f(fd_NAVUpdate_timestamp, value) {
			return
		}
	}
	if x.BlockHeight != int64(0) {
		value := protoreflect.ValueOfInt64(x.BlockHeight)
		if !f(fd_NAVUpdate_block_height, value) {
			return
		}
	}
	if x.Reason != "" {
		value := protoreflect.ValueOfString(x.Reason)
		if !f(fd_NAVUpdate_reason, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_NAVUpdate) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "noble.dollar.vaults.v1.NAVUpdate.previous_nav":
		return x.PreviousNav != ""
	case "noble.dollar.vaults.v1.NAVUpdate.new_nav":
		return x.NewNav != ""
	case "noble.dollar.vaults.v1.NAVUpdate.timestamp":
		return x.Timestamp != nil
	case "noble.dollar.vaults.v1.NAVUpdate.block_height":
		return x.BlockHeight != int64(0)
	case "noble.dollar.vaults.v1.NAVUpdate.reason":
		return x.Reason != ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.dollar.vaults.v1.NAVUpdate"))
		}
		panic(fmt.Errorf("message noble.dollar.vaults.v1.NAVUpdate does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_NAVUpdate) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "noble.dollar.vaults.v1.NAVUpdate.previous_nav":
		x.PreviousNav = ""
	case "noble.dollar.vaults.v1.NAVUpdate.new_nav":
		x.NewNav = ""
	case "noble.dollar.vaults.v1.NAVUpdate.timestamp":
		x.Timestamp = nil
	case "noble.dollar.vaults.v1.NAVUpdate.block_height":
		x.BlockHeight = int64(0)
	case "noble.dollar.vaults.v1.NAVUpdate.reason":
		x.Reason = ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.dollar.vaults.v1.NAVUpdate"))
		}
		panic(fmt.Errorf("message noble.dollar.vaults.v1.NAVUpdate does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_NAVUpdate) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "noble.dollar.vaults.v1.NAVUpdate.previous_nav":
		value := x.PreviousNav
		return protoreflect.ValueOfString(value)
	case "noble.dollar.vaults.v1.NAVUpdate.new_nav":
		value := x.NewNav
		return protoreflect.ValueOfString(value)
	case "noble.dollar.vaults.v1.NAVUpdate.timestamp":
		value := x.Timestamp
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "noble.dollar.vaults.v1.NAVUpdate.block_height":
		value := x.BlockHeight
		return protoreflect.ValueOfInt64(value)
	case "noble.dollar.vaults.v1.NAVUpdate.reason":
		value := x.Reason
		return protoreflect.ValueOfString(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.dollar.vaults.v1.NAVUpdate"))
		}
		panic(fmt.Errorf("message noble.dollar.vaults.v1.NAVUpdate does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_NAVUpdate) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "noble.dollar.vaults.v1.NAVUpdate.previous_nav":
		x.PreviousNav = value.Interface().(string)
	case "noble.dollar.vaults.v1.NAVUpdate.new_nav":
		x.NewNav = value.Interface().(string)
	case "noble.dollar.vaults.v1.NAVUpdate.timestamp":
		x.Timestamp = value.Message().Interface().(*timestamppb.Timestamp)
	case "noble.dollar.vaults.v1.NAVUpdate.block_height":
		x.BlockHeight = value.Int()
	case "noble.dollar.vaults.v1.NAVUpdate.reason":
		x.Reason = value.Interface().(string)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.dollar.vaults.v1.NAVUpdate"))
		}
		panic(fmt.Errorf("message noble.dollar.vaults.v1.NAVUpdate does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_NAVUpdate) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "noble.dollar.vaults.v1.NAVUpdate.timestamp":
		if x.Timestamp == nil {
			x.Timestamp = new(timestamppb.Timestamp)
		}
		return protoreflect.ValueOfMessage(x.Timestamp.ProtoReflect())
	case "noble.dollar.vaults.v1.NAVUpdate.previous_nav":
		panic(fmt.Errorf("field previous_nav of message noble.dollar.vaults.v1.NAVUpdate is not mutable"))
	case "noble.dollar.vaults.v1.NAVUpdate.new_nav":
		panic(fmt.Errorf("field new_nav of message noble.dollar.vaults.v1.NAVUpdate is not mutable"))
	case "noble.dollar.vaults.v1.NAVUpdate.block_height":
		panic(fmt.Errorf("field block_height of message noble.dollar.vaults.v1.NAVUpdate is not mutable"))
	case "noble.dollar.vaults.v1.NAVUpdate.reason":
		panic(fmt.Errorf("field reason of message noble.dollar.vaults.v1.NAVUpdate is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.dollar.vaults.v1.NAVUpdate"))
		}
		panic(fmt.Errorf("message noble.dollar.vaults.v1.NAVUpdate does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_NAVUpdate) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "noble.dollar.vaults.v1.NAVUpdate.previous_nav":
		return protoreflect.ValueOfString("")
	case "noble.dollar.vaults.v1.NAVUpdate.new_nav":
		return protoreflect.ValueOfString("")
	case "noble.dollar.vaults.v1.NAVUpdate.timestamp":
		m := new(timestamppb.Timestamp)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "noble.dollar.vaults.v1.NAVUpdate.block_height":
		return protoreflect.ValueOfInt64(int64(0))
	case "noble.dollar.vaults.v1.NAVUpdate.reason":
		return protoreflect.ValueOfString("")
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.dollar.vaults.v1.NAVUpdate"))
		}
		panic(fmt.Errorf("message noble.dollar.vaults.v1.NAVUpdate does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_NAVUpdate) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in noble.dollar.vaults.v1.NAVUpdate", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_NAVUpdate) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_NAVUpdate) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_NAVUpdate) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_NAVUpdate) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*NAVUpdate)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.PreviousNav)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.NewNav)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Timestamp != nil {
			l = options.Size(x.Timestamp)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.BlockHeight != 0 {
			n += 1 + runtime.Sov(uint64(x.BlockHeight))
		}
		l = len(x.Reason)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*NAVUpdate)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.Reason) > 0 {
			i -= len(x.Reason)
			copy(dAtA[i:], x.Reason)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Reason)))
			i--
			dAtA[i] = 0x2a
		}
		if x.BlockHeight != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.BlockHeight))
			i--
			dAtA[i] = 0x20
		}
		if x.Timestamp != nil {
			encoded, err := options.Marshal(x.Timestamp)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x1a
		}
		if len(x.NewNav) > 0 {
			i -= len(x.NewNav)
			copy(dAtA[i:], x.NewNav)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.NewNav)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.PreviousNav) > 0 {
			i -= len(x.PreviousNav)
			copy(dAtA[i:], x.PreviousNav)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.PreviousNav)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*NAVUpdate)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: NAVUpdate: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: NAVUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PreviousNav", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.PreviousNav = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field NewNav", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.NewNav = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Timestamp == nil {
					x.Timestamp = &timestamppb.Timestamp{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Timestamp); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 4:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
				}
				x.BlockHeight = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.BlockHeight |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Reason = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_PricingInfo                    protoreflect.MessageDescriptor
	fd_PricingInfo_share_price        protoreflect.FieldDescriptor
	fd_PricingInfo_applied_band       protoreflect.FieldDescriptor
	fd_PricingInfo_effective_fee_rate protoreflect.FieldDescriptor
	fd_PricingInfo_expected_amount    protoreflect.FieldDescriptor
)

func init() {
	file_noble_dollar_vaults_v1_nav_proto_init()
	md_PricingInfo = File_noble_dollar_vaults_v1_nav_proto.Messages().ByName("PricingInfo")
	fd_PricingInfo_share_price = md_PricingInfo.Fields().ByName("share_price")
	fd_PricingInfo_applied_band = md_PricingInfo.Fields().ByName("applied_band")
	fd_PricingInfo_effective_fee_rate = md_PricingInfo.Fields().ByName("effective_fee_rate")
	fd_PricingInfo_expected_amount = md_PricingInfo.Fields().ByName("expected_amount")
}

var _ protoreflect.Message = (*fastReflection_PricingInfo)(nil)

type fastReflection_PricingInfo PricingInfo

func (x *PricingInfo) ProtoReflect() protoreflect.Message {
	return (*fastReflection_PricingInfo)(x)
}

func (x *PricingInfo) slowProtoReflect() protoreflect.Message {
	mi := &file_noble_dollar_vaults_v1_nav_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_PricingInfo_messageType fastReflection_PricingInfo_messageType
var _ protoreflect.MessageType = fastReflection_PricingInfo_messageType{}

type fastReflection_PricingInfo_messageType struct{}

func (x fastReflection_PricingInfo_messageType) Zero() protoreflect.Message {
	return (*fastReflection_PricingInfo)(nil)
}
func (x fastReflection_PricingInfo_messageType) New() protoreflect.Message {
	return new(fastReflection_PricingInfo)
}
func (x fastReflection_PricingInfo_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_PricingInfo
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_PricingInfo) Descriptor() protoreflect.MessageDescriptor {
	return md_PricingInfo
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_PricingInfo) Type() protoreflect.MessageType {
	return _fastReflection_PricingInfo_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_PricingInfo) New() protoreflect.Message {
	return new(fastReflection_PricingInfo)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_PricingInfo) Interface() protoreflect.ProtoMessage {
	return (*PricingInfo)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_PricingInfo) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.SharePrice != "" {
		value := protoreflect.ValueOfString(x.SharePrice)
		if !f(fd_PricingInfo_share_price, value) {
			return
		}
	}
	if x.AppliedBand != nil {
		value := protoreflect.ValueOfMessage(x.AppliedBand.ProtoReflect())
		if !f(fd_PricingInfo_applied_band, value) {
			return
		}
	}
	if x.EffectiveFeeRate != int32(0) {
		value := protoreflect.ValueOfInt32(x.EffectiveFeeRate)
		if !f(fd_PricingInfo_effective_fee_rate, value) {
			return
		}
	}
	if x.ExpectedAmount != "" {
		value := protoreflect.ValueOfString(x.ExpectedAmount)
		if !f(fd_PricingInfo_expected_amount, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_PricingInfo) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "noble.dollar.vaults.v1.PricingInfo.share_price":
		return x.SharePrice != ""
	case "noble.dollar.vaults.v1.PricingInfo.applied_band":
		return x.AppliedBand != nil
	case "noble.dollar.vaults.v1.PricingInfo.effective_fee_rate":
		return x.EffectiveFeeRate != int32(0)
	case "noble.dollar.vaults.v1.PricingInfo.expected_amount":
		return x.ExpectedAmount != ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.dollar.vaults.v1.PricingInfo"))
		}
		panic(fmt.Errorf("message noble.dollar.vaults.v1.PricingInfo does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_PricingInfo) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "noble.dollar.vaults.v1.PricingInfo.share_price":
		x.SharePrice = ""
	case "noble.dollar.vaults.v1.PricingInfo.applied_band":
		x.AppliedBand = nil
	case "noble.dollar.vaults.v1.PricingInfo.effective_fee_rate":
		x.EffectiveFeeRate = int32(0)
	case "noble.dollar.vaults.v1.PricingInfo.expected_amount":
		x.ExpectedAmount = ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.dollar.vaults.v1.PricingInfo"))
		}
		panic(fmt.Errorf("message noble.dollar.vaults.v1.PricingInfo does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_PricingInfo) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "noble.dollar.vaults.v1.PricingInfo.share_price":
		value := x.SharePrice
		return protoreflect.ValueOfString(value)
	case "noble.dollar.vaults.v1.PricingInfo.applied_band":
		value := x.AppliedBand
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "noble.dollar.vaults.v1.PricingInfo.effective_fee_rate":
		value := x.EffectiveFeeRate
		return protoreflect.ValueOfInt32(value)
	case "noble.dollar.vaults.v1.PricingInfo.expected_amount":
		value := x.ExpectedAmount
		return protoreflect.ValueOfString(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.dollar.vaults.v1.PricingInfo"))
		}
		panic(fmt.Errorf("message noble.dollar.vaults.v1.PricingInfo does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_PricingInfo) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "noble.dollar.vaults.v1.PricingInfo.share_price":
		x.SharePrice = value.Interface().(string)
	case "noble.dollar.vaults.v1.PricingInfo.applied_band":
		x.AppliedBand = value.Message().Interface().(*NAVBand)
	case "noble.dollar.vaults.v1.PricingInfo.effective_fee_rate":
		x.EffectiveFeeRate = int32(value.Int())
	case "noble.dollar.vaults.v1.PricingInfo.expected_amount":
		x.ExpectedAmount = value.Interface().(string)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.dollar.vaults.v1.PricingInfo"))
		}
		panic(fmt.Errorf("message noble.dollar.vaults.v1.PricingInfo does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_PricingInfo) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "noble.dollar.vaults.v1.PricingInfo.applied_band":
		if x.AppliedBand == nil {
			x.AppliedBand = new(NAVBand)
		}
		return protoreflect.ValueOfMessage(x.AppliedBand.ProtoReflect())
	case "noble.dollar.vaults.v1.PricingInfo.share_price":
		panic(fmt.Errorf("field share_price of message noble.dollar.vaults.v1.PricingInfo is not mutable"))
	case "noble.dollar.vaults.v1.PricingInfo.effective_fee_rate":
		panic(fmt.Errorf("field effective_fee_rate of message noble.dollar.vaults.v1.PricingInfo is not mutable"))
	case "noble.dollar.vaults.v1.PricingInfo.expected_amount":
		panic(fmt.Errorf("field expected_amount of message noble.dollar.vaults.v1.PricingInfo is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.dollar.vaults.v1.PricingInfo"))
		}
		panic(fmt.Errorf("message noble.dollar.vaults.v1.PricingInfo does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_PricingInfo) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "noble.dollar.vaults.v1.PricingInfo.share_price":
		return protoreflect.ValueOfString("")
	case "noble.dollar.vaults.v1.PricingInfo.applied_band":
		m := new(NAVBand)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "noble.dollar.vaults.v1.PricingInfo.effective_fee_rate":
		return protoreflect.ValueOfInt32(int32(0))
	case "noble.dollar.vaults.v1.PricingInfo.expected_amount":
		return protoreflect.ValueOfString("")
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.dollar.vaults.v1.PricingInfo"))
		}
		panic(fmt.Errorf("message noble.dollar.vaults.v1.PricingInfo does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_PricingInfo) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in noble.dollar.vaults.v1.PricingInfo", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_PricingInfo) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_PricingInfo) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_PricingInfo) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_PricingInfo) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*PricingInfo)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.SharePrice)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.AppliedBand != nil {
			l = options.Size(x.AppliedBand)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.EffectiveFeeRate != 0 {
			n += 1 + runtime.Sov(uint64(x.EffectiveFeeRate))
		}
		l = len(x.ExpectedAmount)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*PricingInfo)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.ExpectedAmount) > 0 {
			i -= len(x.ExpectedAmount)
			copy(dAtA[i:], x.ExpectedAmount)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.ExpectedAmount)))
			i--
			dAtA[i] = 0x22
		}
		if x.EffectiveFeeRate != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.EffectiveFeeRate))
			i--
			dAtA[i] = 0x18
		}
		if x.AppliedBand != nil {
			encoded, err := options.Marshal(x.AppliedBand)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.SharePrice) > 0 {
			i -= len(x.SharePrice)
			copy(dAtA[i:], x.SharePrice)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.SharePrice)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*PricingInfo)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: PricingInfo: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: PricingInfo: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field SharePrice", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.SharePrice = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field AppliedBand", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.AppliedBand == nil {
					x.AppliedBand = &NAVBand{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.AppliedBand); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 3:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field EffectiveFeeRate", wireType)
				}
				x.EffectiveFeeRate = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.EffectiveFeeRate |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ExpectedAmount", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ExpectedAmount = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_LossEvent               protoreflect.MessageDescriptor
	fd_LossEvent_loss_amount   protoreflect.FieldDescriptor
	fd_LossEvent_previous_nav  protoreflect.FieldDescriptor
	fd_LossEvent_new_nav       protoreflect.FieldDescriptor
	fd_LossEvent_reason        protoreflect.FieldDescriptor
	fd_LossEvent_recovery_plan protoreflect.FieldDescriptor
	fd_LossEvent_timestamp     protoreflect.FieldDescriptor
)

func init() {
	file_noble_dollar_vaults_v1_nav_proto_init()
	md_LossEvent = File_noble_dollar_vaults_v1_nav_proto.Messages().ByName("LossEvent")
	fd_LossEvent_loss_amount = md_LossEvent.Fields().ByName("loss_amount")
	fd_LossEvent_previous_nav = md_LossEvent.Fields().ByName("previous_nav")
	fd_LossEvent_new_nav = md_LossEvent.Fields().ByName("new_nav")
	fd_LossEvent_reason = md_LossEvent.Fields().ByName("reason")
	fd_LossEvent_recovery_plan = md_LossEvent.Fields().ByName("recovery_plan")
	fd_LossEvent_timestamp = md_LossEvent.Fields().ByName("timestamp")
}

var _ protoreflect.Message = (*fastReflection_LossEvent)(nil)

type fastReflection_LossEvent LossEvent

func (x *LossEvent) ProtoReflect() protoreflect.Message {
	return (*fastReflection_LossEvent)(x)
}

func (x *LossEvent) slowProtoReflect() protoreflect.Message {
	mi := &file_noble_dollar_vaults_v1_nav_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_LossEvent_messageType fastReflection_LossEvent_messageType
var _ protoreflect.MessageType = fastReflection_LossEvent_messageType{}

type fastReflection_LossEvent_messageType struct{}

func (x fastReflection_LossEvent_messageType) Zero() protoreflect.Message {
	return (*fastReflection_LossEvent)(nil)
}
func (x fastReflection_LossEvent_messageType) New() protoreflect.Message {
	return new(fastReflection_LossEvent)
}
func (x fastReflection_LossEvent_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_LossEvent
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_LossEvent) Descriptor() protoreflect.MessageDescriptor {
	return md_LossEvent
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_LossEvent) Type() protoreflect.MessageType {
	return _fastReflection_LossEvent_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_LossEvent) New() protoreflect.Message {
	return new(fastReflection_LossEvent)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_LossEvent) Interface() protoreflect.ProtoMessage {
	return (*LossEvent)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_LossEvent) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.LossAmount != "" {
		value := protoreflect.ValueOfString(x.LossAmount)
		if !f(fd_LossEvent_loss_amount, value) {
			return
		}
	}
	if x.PreviousNav != "" {
		value := protoreflect.ValueOfString(x.PreviousNav)
		if !f(fd_LossEvent_previous_nav, value) {
			return
		}
	}
	if x.NewNav != "" {
		value := protoreflect.ValueOfString(x.NewNav)
		if !f(fd_LossEvent_new_nav, value) {
			return
		}
	}
	if x.Reason != "" {
		value := protoreflect.ValueOfString(x.Reason)
		if !f(fd_LossEvent_reason, value) {
			return
		}
	}
	if x.RecoveryPlan != "" {
		value := protoreflect.ValueOfString(x.RecoveryPlan)
		if !f(fd_LossEvent_recovery_plan, value) {
			return
		}
	}
	if x.Timestamp != nil {
		value := protoreflect.ValueOfMessage(x.Timestamp.ProtoReflect())
		if !f(fd_LossEvent_timestamp, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_LossEvent) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "noble.dollar.vaults.v1.LossEvent.loss_amount":
		return x.LossAmount != ""
	case "noble.dollar.vaults.v1.LossEvent.previous_nav":
		return x.PreviousNav != ""
	case "noble.dollar.vaults.v1.LossEvent.new_nav":
		return x.NewNav != ""
	case "noble.dollar.vaults.v1.LossEvent.reason":
		return x.Reason != ""
	case "noble.dollar.vaults.v1.LossEvent.recovery_plan":
		return x.RecoveryPlan != ""
	case "noble.dollar.vaults.v1.LossEvent.timestamp":
		return x.Timestamp != nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.dollar.vaults.v1.LossEvent"))
		}
		panic(fmt.Errorf("message noble.dollar.vaults.v1.LossEvent does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_LossEvent) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "noble.dollar.vaults.v1.LossEvent.loss_amount":
		x.LossAmount = ""
	case "noble.dollar.vaults.v1.LossEvent.previous_nav":
		x.PreviousNav = ""
	case "noble.dollar.vaults.v1.LossEvent.new_nav":
		x.NewNav = ""
	case "noble.dollar.vaults.v1.LossEvent.reason":
		x.Reason = ""
	case "noble.dollar.vaults.v1.LossEvent.recovery_plan":
		x.RecoveryPlan = ""
	case "noble.dollar.vaults.v1.LossEvent.timestamp":
		x.Timestamp = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.dollar.vaults.v1.LossEvent"))
		}
		panic(fmt.Errorf("message noble.dollar.vaults.v1.LossEvent does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_LossEvent) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "noble.dollar.vaults.v1.LossEvent.loss_amount":
		value := x.LossAmount
		return protoreflect.ValueOfString(value)
	case "noble.dollar.vaults.v1.LossEvent.previous_nav":
		value := x.PreviousNav
		return protoreflect.ValueOfString(value)
	case "noble.dollar.vaults.v1.LossEvent.new_nav":
		value := x.NewNav
		return protoreflect.ValueOfString(value)
	case "noble.dollar.vaults.v1.LossEvent.reason":
		value := x.Reason
		return protoreflect.ValueOfString(value)
	case "noble.dollar.vaults.v1.LossEvent.recovery_plan":
		value := x.RecoveryPlan
		return protoreflect.ValueOfString(value)
	case "noble.dollar.vaults.v1.LossEvent.timestamp":
		value := x.Timestamp
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.dollar.vaults.v1.LossEvent"))
		}
		panic(fmt.Errorf("message noble.dollar.vaults.v1.LossEvent does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_LossEvent) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "noble.dollar.vaults.v1.LossEvent.loss_amount":
		x.LossAmount = value.Interface().(string)
	case "noble.dollar.vaults.v1.LossEvent.previous_nav":
		x.PreviousNav = value.Interface().(string)
	case "noble.dollar.vaults.v1.LossEvent.new_nav":
		x.NewNav = value.Interface().(string)
	case "noble.dollar.vaults.v1.LossEvent.reason":
		x.Reason = value.Interface().(string)
	case "noble.dollar.vaults.v1.LossEvent.recovery_plan":
		x.RecoveryPlan = value.Interface().(string)
	case "noble.dollar.vaults.v1.LossEvent.timestamp":
		x.Timestamp = value.Message().Interface().(*timestamppb.Timestamp)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.dollar.vaults.v1.LossEvent"))
		}
		panic(fmt.Errorf("message noble.dollar.vaults.v1.LossEvent does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_LossEvent) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "noble.dollar.vaults.v1.LossEvent.timestamp":
		if x.Timestamp == nil {
			x.Timestamp = new(timestamppb.Timestamp)
		}
		return protoreflect.ValueOfMessage(x.Timestamp.ProtoReflect())
	case "noble.dollar.vaults.v1.LossEvent.loss_amount":
		panic(fmt.Errorf("field loss_amount of message noble.dollar.vaults.v1.LossEvent is not mutable"))
	case "noble.dollar.vaults.v1.LossEvent.previous_nav":
		panic(fmt.Errorf("field previous_nav of message noble.dollar.vaults.v1.LossEvent is not mutable"))
	case "noble.dollar.vaults.v1.LossEvent.new_nav":
		panic(fmt.Errorf("field new_nav of message noble.dollar.vaults.v1.LossEvent is not mutable"))
	case "noble.dollar.vaults.v1.LossEvent.reason":
		panic(fmt.Errorf("field reason of message noble.dollar.vaults.v1.LossEvent is not mutable"))
	case "noble.dollar.vaults.v1.LossEvent.recovery_plan":
		panic(fmt.Errorf("field recovery_plan of message noble.dollar.vaults.v1.LossEvent is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.dollar.vaults.v1.LossEvent"))
		}
		panic(fmt.Errorf("message noble.dollar.vaults.v1.LossEvent does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_LossEvent) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "noble.dollar.vaults.v1.LossEvent.loss_amount":
		return protoreflect.ValueOfString("")
	case "noble.dollar.vaults.v1.LossEvent.previous_nav":
		return protoreflect.ValueOfString("")
	case "noble.dollar.vaults.v1.LossEvent.new_nav":
		return protoreflect.ValueOfString("")
	case "noble.dollar.vaults.v1.LossEvent.reason":
		return protoreflect.ValueOfString("")
	case "noble.dollar.vaults.v1.LossEvent.recovery_plan":
		return protoreflect.ValueOfString("")
	case "noble.dollar.vaults.v1.LossEvent.timestamp":
		m := new(timestamppb.Timestamp)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.dollar.vaults.v1.LossEvent"))
		}
		panic(fmt.Errorf("message noble.dollar.vaults.v1.LossEvent does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_LossEvent) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in noble.dollar.vaults.v1.LossEvent", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_LossEvent) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_LossEvent) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_LossEvent) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_LossEvent) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*LossEvent)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.LossAmount)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.PreviousNav)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.NewNav)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Reason)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.RecoveryPlan)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Timestamp != nil {
			l = options.Size(x.Timestamp)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*LossEvent)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.Timestamp != nil {
			encoded, err := options.Marshal(x.Timestamp)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x32
		}
		if len(x.RecoveryPlan) > 0 {
			i -= len(x.RecoveryPlan)
			copy(dAtA[i:], x.RecoveryPlan)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.RecoveryPlan)))
			i--
			dAtA[i] = 0x2a
		}
		if len(x.Reason) > 0 {
			i -= len(x.Reason)
			copy(dAtA[i:], x.Reason)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Reason)))
			i--
			dAtA[i] = 0x22
		}
		if len(x.NewNav) > 0 {
			i -= len(x.NewNav)
			copy(dAtA[i:], x.NewNav)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.NewNav)))
			i--
			dAtA[i] = 0x1a
		}
		if len(x.PreviousNav) > 0 {
			i -= len(x.PreviousNav)
			copy(dAtA[i:], x.PreviousNav)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.PreviousNav)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.LossAmount) > 0 {
			i -= len(x.LossAmount)
			copy(dAtA[i:], x.LossAmount)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.LossAmount)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*LossEvent)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: LossEvent: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: LossEvent: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field LossAmount", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.LossAmount = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PreviousNav", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.PreviousNav = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field NewNav", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.NewNav = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Reason = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field RecoveryPlan", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.RecoveryPlan = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 6:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Timestamp == nil {
					x.Timestamp = &timestamppb.Timestamp{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Timestamp); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: noble/dollar/vaults/v1/nav.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// NAVBand defines the pricing bands for deposits and withdrawals
type NAVBand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Lower bound of the band (basis points above/below NAV)
	LowerBound int32 `protobuf:"varint,1,opt,name=lower_bound,json=lowerBound,proto3" json:"lower_bound,omitempty"`
	// Upper bound of the band (basis points above/below NAV)
	UpperBound int32 `protobuf:"varint,2,opt,name=upper_bound,json=upperBound,proto3" json:"upper_bound,omitempty"`
	// Fee rate applied within this band (basis points)
	FeeRate int32 `protobuf:"varint,3,opt,name=fee_rate,json=feeRate,proto3" json:"fee_rate,omitempty"`
}

func (x *NAVBand) Reset() {
	*x = NAVBand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_noble_dollar_vaults_v1_nav_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NAVBand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NAVBand) ProtoMessage() {}

// Deprecated: Use NAVBand.ProtoReflect.Descriptor instead.
func (*NAVBand) Descriptor() ([]byte, []int) {
	return file_noble_dollar_vaults_v1_nav_proto_rawDescGZIP(), []int{0}
}

func (x *NAVBand) GetLowerBound() int32 {
	if x != nil {
		return x.LowerBound
	}
	return 0
}

func (x *NAVBand) GetUpperBound() int32 {
	if x != nil {
		return x.UpperBound
	}
	return 0
}

func (x *NAVBand) GetFeeRate() int32 {
	if x != nil {
		return x.FeeRate
	}
	return 0
}

// NAVConfig defines the configuration for NAV-based pricing
type NAVConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Base NAV bands for deposits
	DepositBands []*NAVBand `protobuf:"bytes,1,rep,name=deposit_bands,json=depositBands,proto3" json:"deposit_bands,omitempty"`
	// Base NAV bands for withdrawals
	WithdrawalBands []*NAVBand `protobuf:"bytes,2,rep,name=withdrawal_bands,json=withdrawalBands,proto3" json:"withdrawal_bands,omitempty"`
	// Minimum NAV update interval (seconds)
	MinNavUpdateInterval int64 `protobuf:"varint,3,opt,name=min_nav_update_interval,json=minNavUpdateInterval,proto3" json:"min_nav_update_interval,omitempty"`
	// Maximum allowed NAV deviation before emergency controls (basis points)
	MaxNavDeviation int32 `protobuf:"varint,4,opt,name=max_nav_deviation,json=maxNavDeviation,proto3" json:"max_nav_deviation,omitempty"`
	// Emergency circuit breaker threshold (basis points)
	CircuitBreakerThreshold int32 `protobuf:"varint,5,opt,name=circuit_breaker_threshold,json=circuitBreakerThreshold,proto3" json:"circuit_breaker_threshold,omitempty"`
}

func (x *NAVConfig) Reset() {
	*x = NAVConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_noble_dollar_vaults_v1_nav_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NAVConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NAVConfig) ProtoMessage() {}

// Deprecated: Use NAVConfig.ProtoReflect.Descriptor instead.
func (*NAVConfig) Descriptor() ([]byte, []int) {
	return file_noble_dollar_vaults_v1_nav_proto_rawDescGZIP(), []int{1}
}

func (x *NAVConfig) GetDepositBands() []*NAVBand {
	if x != nil {
		return x.DepositBands
	}
	return nil
}

func (x *NAVConfig) GetWithdrawalBands() []*NAVBand {
	if x != nil {
		return x.WithdrawalBands
	}
	return nil
}

func (x *NAVConfig) GetMinNavUpdateInterval() int64 {
	if x != nil {
		return x.MinNavUpdateInterval
	}
	return 0
}

func (x *NAVConfig) GetMaxNavDeviation() int32 {
	if x != nil {
		return x.MaxNavDeviation
	}
	return 0
}

func (x *NAVConfig) GetCircuitBreakerThreshold() int32 {
	if x != nil {
		return x.CircuitBreakerThreshold
	}
	return 0
}

// VaultState represents the current state of a vault with share-based accounting
type VaultState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Total shares outstanding
	TotalShares string `protobuf:"bytes,1,opt,name=total_shares,json=totalShares,proto3" json:"total_shares,omitempty"`
	// Current NAV point (total value of all assets)
	NavPoint string `protobuf:"bytes,2,opt,name=nav_point,json=navPoint,proto3" json:"nav_point,omitempty"`
	// Last NAV update timestamp
	LastNavUpdate *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=last_nav_update,json=lastNavUpdate,proto3" json:"last_nav_update,omitempty"`
	// Total principal deposited (for tracking)
	TotalPrincipal string `protobuf:"bytes,4,opt,name=total_principal,json=totalPrincipal,proto3" json:"total_principal,omitempty"`
	// Accumulated yield
	AccumulatedYield string `protobuf:"bytes,5,opt,name=accumulated_yield,json=accumulatedYield,proto3" json:"accumulated_yield,omitempty"`
	// Emergency flags
	CircuitBreakerActive bool `protobuf:"varint,6,opt,name=circuit_breaker_active,json=circuitBreakerActive,proto3" json:"circuit_breaker_active,omitempty"`
	DepositsPaused       bool `protobuf:"varint,7,opt,name=deposits_paused,json=depositsPaused,proto3" json:"deposits_paused,omitempty"`
	WithdrawalsPaused    bool `protobuf:"varint,8,opt,name=withdrawals_paused,json=withdrawalsPaused,proto3" json:"withdrawals_paused,omitempty"`
}

func (x *VaultState) Reset() {
	*x = VaultState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_noble_dollar_vaults_v1_nav_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VaultState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VaultState) ProtoMessage() {}

// Deprecated: Use VaultState.ProtoReflect.Descriptor instead.
func (*VaultState) Descriptor() ([]byte, []int) {
	return file_noble_dollar_vaults_v1_nav_proto_rawDescGZIP(), []int{2}
}

func (x *VaultState) GetTotalShares() string {
	if x != nil {
		return x.TotalShares
	}
	return ""
}

func (x *VaultState) GetNavPoint() string {
	if x != nil {
		return x.NavPoint
	}
	return ""
}

func (x *VaultState) GetLastNavUpdate() *timestamppb.Timestamp {
	if x != nil {
		return x.LastNavUpdate
	}
	return nil
}

func (x *VaultState) GetTotalPrincipal() string {
	if x != nil {
		return x.TotalPrincipal
	}
	return ""
}

func (x *VaultState) GetAccumulatedYield() string {
	if x != nil {
		return x.AccumulatedYield
	}
	return ""
}

func (x *VaultState) GetCircuitBreakerActive() bool {
	if x != nil {
		return x.CircuitBreakerActive
	}
	return false
}

func (x *VaultState) GetDepositsPaused() bool {
	if x != nil {
		return x.DepositsPaused
	}
	return false
}

func (x *VaultState) GetWithdrawalsPaused() bool {
	if x != nil {
		return x.WithdrawalsPaused
	}
	return false
}

// NAVUpdate represents a NAV update event
type NAVUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Previous NAV point
	PreviousNav string `protobuf:"bytes,1,opt,name=previous_nav,json=previousNav,proto3" json:"previous_nav,omitempty"`
	// New NAV point
	NewNav string `protobuf:"bytes,2,opt,name=new_nav,json=newNav,proto3" json:"new_nav,omitempty"`
	// Update timestamp
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Block height
	BlockHeight int64 `protobuf:"varint,4,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	// Update reason
	Reason string `protobuf:"bytes,5,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *NAVUpdate) Reset() {
	*x = NAVUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_noble_dollar_vaults_v1_nav_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NAVUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NAVUpdate) ProtoMessage() {}

// Deprecated: Use NAVUpdate.ProtoReflect.Descriptor instead.
func (*NAVUpdate) Descriptor() ([]byte, []int) {
	return file_noble_dollar_vaults_v1_nav_proto_rawDescGZIP(), []int{3}
}

func (x *NAVUpdate) GetPreviousNav() string {
	if x != nil {
		return x.PreviousNav
	}
	return ""
}

func (x *NAVUpdate) GetNewNav() string {
	if x != nil {
		return x.NewNav
	}
	return ""
}

func (x *NAVUpdate) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *NAVUpdate) GetBlockHeight() int64 {
	if x != nil {
		return x.BlockHeight
	}
	return 0
}

func (x *NAVUpdate) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

// PricingInfo provides pricing information for deposits/withdrawals
type PricingInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Current share price (NAV per share)
	SharePrice string `protobuf:"bytes,1,opt,name=share_price,json=sharePrice,proto3" json:"share_price,omitempty"`
	// Applied NAV band
	AppliedBand *NAVBand `protobuf:"bytes,2,opt,name=applied_band,json=appliedBand,proto3" json:"applied_band,omitempty"`
	// Effective fee rate
	EffectiveFeeRate int32 `protobuf:"varint,3,opt,name=effective_fee_rate,json=effectiveFeeRate,proto3" json:"effective_fee_rate,omitempty"`
	// Expected shares for deposit or token amount for withdrawal
	ExpectedAmount string `protobuf:"bytes,4,opt,name=expected_amount,json=expectedAmount,proto3" json:"expected_amount,omitempty"`
}

func (x *PricingInfo) Reset() {
	*x = PricingInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_noble_dollar_vaults_v1_nav_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PricingInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PricingInfo) ProtoMessage() {}

// Deprecated: Use PricingInfo.ProtoReflect.Descriptor instead.
func (*PricingInfo) Descriptor() ([]byte, []int) {
	return file_noble_dollar_vaults_v1_nav_proto_rawDescGZIP(), []int{4}
}

func (x *PricingInfo) GetSharePrice() string {
	if x != nil {
		return x.SharePrice
	}
	return ""
}

func (x *PricingInfo) GetAppliedBand() *NAVBand {
	if x != nil {
		return x.AppliedBand
	}
	return nil
}

func (x *PricingInfo) GetEffectiveFeeRate() int32 {
	if x != nil {
		return x.EffectiveFeeRate
	}
	return 0
}

func (x *PricingInfo) GetExpectedAmount() string {
	if x != nil {
		return x.ExpectedAmount
	}
	return ""
}

// LossEvent represents a loss in vault value
type LossEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Amount of loss
	LossAmount string `protobuf:"bytes,1,opt,name=loss_amount,json=lossAmount,proto3" json:"loss_amount,omitempty"`
	// Previous NAV before loss
	PreviousNav string `protobuf:"bytes,2,opt,name=previous_nav,json=previousNav,proto3" json:"previous_nav,omitempty"`
	// New NAV after loss
	NewNav string `protobuf:"bytes,3,opt,name=new_nav,json=newNav,proto3" json:"new_nav,omitempty"`
	// Loss reason/source
	Reason string `protobuf:"bytes,4,opt,name=reason,proto3" json:"reason,omitempty"`
	// Recovery plan if applicable
	RecoveryPlan string `protobuf:"bytes,5,opt,name=recovery_plan,json=recoveryPlan,proto3" json:"recovery_plan,omitempty"`
	// Timestamp of loss
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *LossEvent) Reset() {
	*x = LossEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_noble_dollar_vaults_v1_nav_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LossEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LossEvent) ProtoMessage() {}

// Deprecated: Use LossEvent.ProtoReflect.Descriptor instead.
func (*LossEvent) Descriptor() ([]byte, []int) {
	return file_noble_dollar_vaults_v1_nav_proto_rawDescGZIP(), []int{5}
}

func (x *LossEvent) GetLossAmount() string {
	if x != nil {
		return x.LossAmount
	}
	return ""
}

func (x *LossEvent) GetPreviousNav() string {
	if x != nil {
		return x.PreviousNav
	}
	return ""
}

func (x *LossEvent) GetNewNav() string {
	if x != nil {
		return x.NewNav
	}
	return ""
}

func (x *LossEvent) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *LossEvent) GetRecoveryPlan() string {
	if x != nil {
		return x.RecoveryPlan
	}
	return ""
}

func (x *LossEvent) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

var File_noble_dollar_vaults_v1_nav_proto protoreflect.FileDescriptor

var file_noble_dollar_vaults_v1_nav_proto_rawDesc = []byte{
	0x0a, 0x20, 0x6e, 0x6f, 0x62, 0x6c, 0x65, 0x2f, 0x64, 0x6f, 0x6c, 0x6c, 0x61, 0x72, 0x2f, 0x76,
	0x61, 0x75, 0x6c, 0x74, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x61, 0x76, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x16, 0x6e, 0x6f, 0x62, 0x6c, 0x65, 0x2e, 0x64, 0x6f, 0x6c, 0x6c, 0x61, 0x72,
	0x2e, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x1a, 0x11, 0x61, 0x6d, 0x69, 0x6e,
	0x6f, 0x2f, 0x61, 0x6d, 0x69, 0x6e, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x63,
	0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x73, 0x6d,
	0x6f, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x67, 0x6f, 0x67, 0x6f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x66, 0x0a, 0x07, 0x4e, 0x41, 0x56, 0x42, 0x61, 0x6e, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x6f,
	0x77, 0x65, 0x72, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x75,
	0x70, 0x70, 0x65, 0x72, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x75, 0x70, 0x70, 0x65, 0x72, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x19, 0x0a, 0x08,
	0x66, 0x65, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x66, 0x65, 0x65, 0x52, 0x61, 0x74, 0x65, 0x22, 0xbc, 0x02, 0x0a, 0x09, 0x4e, 0x41, 0x56, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x44, 0x0a, 0x0d, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x5f, 0x62, 0x61, 0x6e, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6e,
	0x6f, 0x62, 0x6c, 0x65, 0x2e, 0x64, 0x6f, 0x6c, 0x6c, 0x61, 0x72, 0x2e, 0x76, 0x61, 0x75, 0x6c,
	0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x41, 0x56, 0x42, 0x61, 0x6e, 0x64, 0x52, 0x0c, 0x64,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x42, 0x61, 0x6e, 0x64, 0x73, 0x12, 0x4a, 0x0a, 0x10, 0x77,
	0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x5f, 0x62, 0x61, 0x6e, 0x64, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6e, 0x6f, 0x62, 0x6c, 0x65, 0x2e, 0x64, 0x6f,
	0x6c, 0x6c, 0x61, 0x72, 0x2e, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4e,
	0x41, 0x56, 0x42, 0x61, 0x6e, 0x64, 0x52, 0x0f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77,
	0x61, 0x6c, 0x42, 0x61, 0x6e, 0x64, 0x73, 0x12, 0x35, 0x0a, 0x17, 0x6d, 0x69, 0x6e, 0x5f, 0x6e,
	0x61, 0x76, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x6d, 0x69, 0x6e, 0x4e, 0x61, 0x76,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x2a,
	0x0a, 0x11, 0x6d, 0x61, 0x78, 0x5f, 0x6e, 0x61, 0x76, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x6d, 0x61, 0x78, 0x4e, 0x61,
	0x76, 0x44, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x19, 0x63, 0x69,
	0x72, 0x63, 0x75, 0x69, 0x74, 0x5f, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x74, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x17, 0x63,
	0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x54, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x22, 0xc6, 0x04, 0x0a, 0x0a, 0x56, 0x61, 0x75, 0x6c, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x53, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x30, 0xc8, 0xde, 0x1f,
	0x00, 0xda, 0xde, 0x1f, 0x15, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69,
	0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x49, 0x6e, 0x74, 0xd2, 0xb4, 0x2d, 0x0a, 0x63, 0x6f,
	0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0xa8, 0xe7, 0xb0, 0x2a, 0x01, 0x52, 0x0b, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x53, 0x68, 0x61, 0x72, 0x65, 0x73, 0x12, 0x4d, 0x0a, 0x09, 0x6e, 0x61,
	0x76, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x30, 0xc8,
	0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x15, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b,
	0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x49, 0x6e, 0x74, 0xd2, 0xb4, 0x2d, 0x0a,
	0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0xa8, 0xe7, 0xb0, 0x2a, 0x01, 0x52,
	0x08, 0x6e, 0x61, 0x76, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x4c, 0x0a, 0x0f, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x6e, 0x61, 0x76, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x08,
	0xc8, 0xde, 0x1f, 0x00, 0x90, 0xdf, 0x1f, 0x01, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61,
	0x76, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x59, 0x0a, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x30, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x15, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73,
	0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x49, 0x6e, 0x74, 0xd2,
	0xb4, 0x2d, 0x0a, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0xa8, 0xe7, 0xb0,
	0x2a, 0x01, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70,
	0x61, 0x6c, 0x12, 0x5d, 0x0a, 0x11, 0x61, 0x63, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x79, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x30, 0xc8,
	0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x15, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b,
	0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x49, 0x6e, 0x74, 0xd2, 0xb4, 0x2d, 0x0a,
	0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0xa8, 0xe7, 0xb0, 0x2a, 0x01, 0x52,
	0x10, 0x61, 0x63, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x59, 0x69, 0x65, 0x6c,
	0x64, 0x12, 0x34, 0x0a, 0x16, 0x63, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x5f, 0x62, 0x72, 0x65,
	0x61, 0x6b, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x14, 0x63, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x65,
	0x72, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x73, 0x5f, 0x70, 0x61, 0x75, 0x73, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0e, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x73, 0x50, 0x61, 0x75, 0x73, 0x65, 0x64,
	0x12, 0x2d, 0x0a, 0x12, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x73, 0x5f,
	0x70, 0x61, 0x75, 0x73, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x77, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x73, 0x50, 0x61, 0x75, 0x73, 0x65, 0x64, 0x22,
	0xaa, 0x02, 0x0a, 0x09, 0x4e, 0x41, 0x56, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x53, 0x0a,
	0x0c, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x6e, 0x61, 0x76, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x30, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x15, 0x63, 0x6f, 0x73,
	0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x49,
	0x6e, 0x74, 0xd2, 0xb4, 0x2d, 0x0a, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x49, 0x6e, 0x74,
	0xa8, 0xe7, 0xb0, 0x2a, 0x01, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x4e,
	0x61, 0x76, 0x12, 0x49, 0x0a, 0x07, 0x6e, 0x65, 0x77, 0x5f, 0x6e, 0x61, 0x76, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x30, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x15, 0x63, 0x6f, 0x73,
	0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x49,
	0x6e, 0x74, 0xd2, 0xb4, 0x2d, 0x0a, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x49, 0x6e, 0x74,
	0xa8, 0xe7, 0xb0, 0x2a, 0x01, 0x52, 0x06, 0x6e, 0x65, 0x77, 0x4e, 0x61, 0x76, 0x12, 0x42, 0x0a,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x08, 0xc8, 0xde,
	0x1f, 0x00, 0x90, 0xdf, 0x1f, 0x01, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0xb3, 0x02, 0x0a,
	0x0b, 0x50, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x57, 0x0a, 0x0b,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x36, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x1b, 0x63, 0x6f, 0x73, 0x6d, 0x6f,
	0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x4c, 0x65, 0x67,
	0x61, 0x63, 0x79, 0x44, 0x65, 0x63, 0xd2, 0xb4, 0x2d, 0x0a, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73,
	0x2e, 0x44, 0x65, 0x63, 0xa8, 0xe7, 0xb0, 0x2a, 0x01, 0x52, 0x0a, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x42, 0x0a, 0x0c, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64,
	0x5f, 0x62, 0x61, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6e, 0x6f,
	0x62, 0x6c, 0x65, 0x2e, 0x64, 0x6f, 0x6c, 0x6c, 0x61, 0x72, 0x2e, 0x76, 0x61, 0x75, 0x6c, 0x74,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x41, 0x56, 0x42, 0x61, 0x6e, 0x64, 0x52, 0x0b, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x65, 0x64, 0x42, 0x61, 0x6e, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x65, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x46, 0x65, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x59, 0x0a, 0x0f, 0x65, 0x78, 0x70, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x30, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x15, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73,
	0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x49, 0x6e, 0x74, 0xd2,
	0xb4, 0x2d, 0x0a, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0xa8, 0xe7, 0xb0,
	0x2a, 0x01, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0xff, 0x02, 0x0a, 0x09, 0x4c, 0x6f, 0x73, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x51, 0x0a, 0x0b, 0x6c, 0x6f, 0x73, 0x73, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x30, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x15, 0x63,
	0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68,
	0x2e, 0x49, 0x6e, 0x74, 0xd2, 0xb4, 0x2d, 0x0a, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x49,
	0x6e, 0x74, 0xa8, 0xe7, 0xb0, 0x2a, 0x01, 0x52, 0x0a, 0x6c, 0x6f, 0x73, 0x73, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x53, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f,
	0x6e, 0x61, 0x76, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x30, 0xc8, 0xde, 0x1f, 0x00, 0xda,
	0xde, 0x1f, 0x15, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f,
	0x6d, 0x61, 0x74, 0x68, 0x2e, 0x49, 0x6e, 0x74, 0xd2, 0xb4, 0x2d, 0x0a, 0x63, 0x6f, 0x73, 0x6d,
	0x6f, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0xa8, 0xe7, 0xb0, 0x2a, 0x01, 0x52, 0x0b, 0x70, 0x72, 0x65,
	0x76, 0x69, 0x6f, 0x75, 0x73, 0x4e, 0x61, 0x76, 0x12, 0x49, 0x0a, 0x07, 0x6e, 0x65, 0x77, 0x5f,
	0x6e, 0x61, 0x76, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x30, 0xc8, 0xde, 0x1f, 0x00, 0xda,
	0xde, 0x1f, 0x15, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f,
	0x6d, 0x61, 0x74, 0x68, 0x2e, 0x49, 0x6e, 0x74, 0xd2, 0xb4, 0x2d, 0x0a, 0x63, 0x6f, 0x73, 0x6d,
	0x6f, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0xa8, 0xe7, 0xb0, 0x2a, 0x01, 0x52, 0x06, 0x6e, 0x65, 0x77,
	0x4e, 0x61, 0x76, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x72,
	0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x50, 0x6c, 0x61, 0x6e,
	0x12, 0x42, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42,
	0x08, 0xc8, 0xde, 0x1f, 0x00, 0x90, 0xdf, 0x1f, 0x01, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x42, 0xda, 0x01, 0x0a, 0x1a, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x6f, 0x62,
	0x6c, 0x65, 0x2e, 0x64, 0x6f, 0x6c, 0x6c, 0x61, 0x72, 0x2e, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x73,
	0x2e, 0x76, 0x31, 0x42, 0x08, 0x4e, 0x61, 0x76, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a,
	0x37, 0x64, 0x6f, 0x6c, 0x6c, 0x61, 0x72, 0x2e, 0x6e, 0x6f, 0x62, 0x6c, 0x65, 0x2e, 0x78, 0x79,
	0x7a, 0x2f, 0x76, 0x32, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6e, 0x6f, 0x62, 0x6c, 0x65, 0x2f, 0x64,
	0x6f, 0x6c, 0x6c, 0x61, 0x72, 0x2f, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x2f, 0x76, 0x31, 0x3b,
	0x76, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x4e, 0x44, 0x56, 0xaa, 0x02,
	0x16, 0x4e, 0x6f, 0x62, 0x6c, 0x65, 0x2e, 0x44, 0x6f, 0x6c, 0x6c, 0x61, 0x72, 0x2e, 0x56, 0x61,
	0x75, 0x6c, 0x74, 0x73, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x16, 0x4e, 0x6f, 0x62, 0x6c, 0x65, 0x5c,
	0x44, 0x6f, 0x6c, 0x6c, 0x61, 0x72, 0x5c, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x5c, 0x56, 0x31,
	0xe2, 0x02, 0x22, 0x4e, 0x6f, 0x62, 0x6c, 0x65, 0x5c, 0x44, 0x6f, 0x6c, 0x6c, 0x61, 0x72, 0x5c,
	0x56, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x19, 0x4e, 0x6f, 0x62, 0x6c, 0x65, 0x3a, 0x3a, 0x44,
	0x6f, 0x6c, 0x6c, 0x61, 0x72, 0x3a, 0x3a, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x3a, 0x3a, 0x56,
	0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_noble_dollar_vaults_v1_nav_proto_rawDescOnce sync.Once
	file_noble_dollar_vaults_v1_nav_proto_rawDescData = file_noble_dollar_vaults_v1_nav_proto_rawDesc
)

func file_noble_dollar_vaults_v1_nav_proto_rawDescGZIP() []byte {
	file_noble_dollar_vaults_v1_nav_proto_rawDescOnce.Do(func() {
		file_noble_dollar_vaults_v1_nav_proto_rawDescData = protoimpl.X.CompressGZIP(file_noble_dollar_vaults_v1_nav_proto_rawDescData)
	})
	return file_noble_dollar_vaults_v1_nav_proto_rawDescData
}

var file_noble_dollar_vaults_v1_nav_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_noble_dollar_vaults_v1_nav_proto_goTypes = []interface{}{
	(*NAVBand)(nil),               // 0: noble.dollar.vaults.v1.NAVBand
	(*NAVConfig)(nil),             // 1: noble.dollar.vaults.v1.NAVConfig
	(*VaultState)(nil),            // 2: noble.dollar.vaults.v1.VaultState
	(*NAVUpdate)(nil),             // 3: noble.dollar.vaults.v1.NAVUpdate
	(*PricingInfo)(nil),           // 4: noble.dollar.vaults.v1.PricingInfo
	(*LossEvent)(nil),             // 5: noble.dollar.vaults.v1.LossEvent
	(*timestamppb.Timestamp)(nil), // 6: google.protobuf.Timestamp
}
var file_noble_dollar_vaults_v1_nav_proto_depIdxs = []int32{
	0, // 0: noble.dollar.vaults.v1.NAVConfig.deposit_bands:type_name -> noble.dollar.vaults.v1.NAVBand
	0, // 1: noble.dollar.vaults.v1.NAVConfig.withdrawal_bands:type_name -> noble.dollar.vaults.v1.NAVBand
	6, // 2: noble.dollar.vaults.v1.VaultState.last_nav_update:type_name -> google.protobuf.Timestamp
	6, // 3: noble.dollar.vaults.v1.NAVUpdate.timestamp:type_name -> google.protobuf.Timestamp
	0, // 4: noble.dollar.vaults.v1.PricingInfo.applied_band:type_name -> noble.dollar.vaults.v1.NAVBand
	6, // 5: noble.dollar.vaults.v1.LossEvent.timestamp:type_name -> google.protobuf.Timestamp
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_noble_dollar_vaults_v1_nav_proto_init() }
func file_noble_dollar_vaults_v1_nav_proto_init() {
	if File_noble_dollar_vaults_v1_nav_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_noble_dollar_vaults_v1_nav_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NAVBand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_noble_dollar_vaults_v1_nav_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NAVConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_noble_dollar_vaults_v1_nav_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VaultState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_noble_dollar_vaults_v1_nav_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NAVUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_noble_dollar_vaults_v1_nav_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PricingInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_noble_dollar_vaults_v1_nav_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LossEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_noble_dollar_vaults_v1_nav_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_noble_dollar_vaults_v1_nav_proto_goTypes,
		DependencyIndexes: file_noble_dollar_vaults_v1_nav_proto_depIdxs,
		MessageInfos:      file_noble_dollar_vaults_v1_nav_proto_msgTypes,
	}.Build()
	File_noble_dollar_vaults_v1_nav_proto = out.File
	file_noble_dollar_vaults_v1_nav_proto_rawDesc = nil
	file_noble_dollar_vaults_v1_nav_proto_goTypes = nil
	file_noble_dollar_vaults_v1_nav_proto_depIdxs = nil
}

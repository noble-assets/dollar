// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package vaultsv2

import (
	_ "cosmossdk.io/api/amino"
	v1 "dollar.noble.xyz/v2/api/vaults/v1"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	runtime "github.com/cosmos/cosmos-proto/runtime"
	_ "github.com/cosmos/gogoproto/gogoproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	reflect "reflect"
	sync "sync"
)

var (
	md_UserPosition                      protoreflect.MessageDescriptor
	fd_UserPosition_shares               protoreflect.FieldDescriptor
	fd_UserPosition_original_deposit     protoreflect.FieldDescriptor
	fd_UserPosition_first_deposit_time   protoreflect.FieldDescriptor
	fd_UserPosition_last_activity_time   protoreflect.FieldDescriptor
	fd_UserPosition_receive_yield        protoreflect.FieldDescriptor
	fd_UserPosition_shares_pending_exit  protoreflect.FieldDescriptor
	fd_UserPosition_active_exit_requests protoreflect.FieldDescriptor
)

func init() {
	file_noble_dollar_vaults_v2_vaults_proto_init()
	md_UserPosition = File_noble_dollar_vaults_v2_vaults_proto.Messages().ByName("UserPosition")
	fd_UserPosition_shares = md_UserPosition.Fields().ByName("shares")
	fd_UserPosition_original_deposit = md_UserPosition.Fields().ByName("original_deposit")
	fd_UserPosition_first_deposit_time = md_UserPosition.Fields().ByName("first_deposit_time")
	fd_UserPosition_last_activity_time = md_UserPosition.Fields().ByName("last_activity_time")
	fd_UserPosition_receive_yield = md_UserPosition.Fields().ByName("receive_yield")
	fd_UserPosition_shares_pending_exit = md_UserPosition.Fields().ByName("shares_pending_exit")
	fd_UserPosition_active_exit_requests = md_UserPosition.Fields().ByName("active_exit_requests")
}

var _ protoreflect.Message = (*fastReflection_UserPosition)(nil)

type fastReflection_UserPosition UserPosition

func (x *UserPosition) ProtoReflect() protoreflect.Message {
	return (*fastReflection_UserPosition)(x)
}

func (x *UserPosition) slowProtoReflect() protoreflect.Message {
	mi := &file_noble_dollar_vaults_v2_vaults_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_UserPosition_messageType fastReflection_UserPosition_messageType
var _ protoreflect.MessageType = fastReflection_UserPosition_messageType{}

type fastReflection_UserPosition_messageType struct{}

func (x fastReflection_UserPosition_messageType) Zero() protoreflect.Message {
	return (*fastReflection_UserPosition)(nil)
}
func (x fastReflection_UserPosition_messageType) New() protoreflect.Message {
	return new(fastReflection_UserPosition)
}
func (x fastReflection_UserPosition_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_UserPosition
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_UserPosition) Descriptor() protoreflect.MessageDescriptor {
	return md_UserPosition
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_UserPosition) Type() protoreflect.MessageType {
	return _fastReflection_UserPosition_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_UserPosition) New() protoreflect.Message {
	return new(fastReflection_UserPosition)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_UserPosition) Interface() protoreflect.ProtoMessage {
	return (*UserPosition)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_UserPosition) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Shares != "" {
		value := protoreflect.ValueOfString(x.Shares)
		if !f(fd_UserPosition_shares, value) {
			return
		}
	}
	if x.OriginalDeposit != "" {
		value := protoreflect.ValueOfString(x.OriginalDeposit)
		if !f(fd_UserPosition_original_deposit, value) {
			return
		}
	}
	if x.FirstDepositTime != nil {
		value := protoreflect.ValueOfMessage(x.FirstDepositTime.ProtoReflect())
		if !f(fd_UserPosition_first_deposit_time, value) {
			return
		}
	}
	if x.LastActivityTime != nil {
		value := protoreflect.ValueOfMessage(x.LastActivityTime.ProtoReflect())
		if !f(fd_UserPosition_last_activity_time, value) {
			return
		}
	}
	if x.ReceiveYield != false {
		value := protoreflect.ValueOfBool(x.ReceiveYield)
		if !f(fd_UserPosition_receive_yield, value) {
			return
		}
	}
	if x.SharesPendingExit != "" {
		value := protoreflect.ValueOfString(x.SharesPendingExit)
		if !f(fd_UserPosition_shares_pending_exit, value) {
			return
		}
	}
	if x.ActiveExitRequests != int32(0) {
		value := protoreflect.ValueOfInt32(x.ActiveExitRequests)
		if !f(fd_UserPosition_active_exit_requests, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_UserPosition) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "noble.dollar.vaults.v2.UserPosition.shares":
		return x.Shares != ""
	case "noble.dollar.vaults.v2.UserPosition.original_deposit":
		return x.OriginalDeposit != ""
	case "noble.dollar.vaults.v2.UserPosition.first_deposit_time":
		return x.FirstDepositTime != nil
	case "noble.dollar.vaults.v2.UserPosition.last_activity_time":
		return x.LastActivityTime != nil
	case "noble.dollar.vaults.v2.UserPosition.receive_yield":
		return x.ReceiveYield != false
	case "noble.dollar.vaults.v2.UserPosition.shares_pending_exit":
		return x.SharesPendingExit != ""
	case "noble.dollar.vaults.v2.UserPosition.active_exit_requests":
		return x.ActiveExitRequests != int32(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.dollar.vaults.v2.UserPosition"))
		}
		panic(fmt.Errorf("message noble.dollar.vaults.v2.UserPosition does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_UserPosition) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "noble.dollar.vaults.v2.UserPosition.shares":
		x.Shares = ""
	case "noble.dollar.vaults.v2.UserPosition.original_deposit":
		x.OriginalDeposit = ""
	case "noble.dollar.vaults.v2.UserPosition.first_deposit_time":
		x.FirstDepositTime = nil
	case "noble.dollar.vaults.v2.UserPosition.last_activity_time":
		x.LastActivityTime = nil
	case "noble.dollar.vaults.v2.UserPosition.receive_yield":
		x.ReceiveYield = false
	case "noble.dollar.vaults.v2.UserPosition.shares_pending_exit":
		x.SharesPendingExit = ""
	case "noble.dollar.vaults.v2.UserPosition.active_exit_requests":
		x.ActiveExitRequests = int32(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.dollar.vaults.v2.UserPosition"))
		}
		panic(fmt.Errorf("message noble.dollar.vaults.v2.UserPosition does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_UserPosition) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "noble.dollar.vaults.v2.UserPosition.shares":
		value := x.Shares
		return protoreflect.ValueOfString(value)
	case "noble.dollar.vaults.v2.UserPosition.original_deposit":
		value := x.OriginalDeposit
		return protoreflect.ValueOfString(value)
	case "noble.dollar.vaults.v2.UserPosition.first_deposit_time":
		value := x.FirstDepositTime
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "noble.dollar.vaults.v2.UserPosition.last_activity_time":
		value := x.LastActivityTime
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "noble.dollar.vaults.v2.UserPosition.receive_yield":
		value := x.ReceiveYield
		return protoreflect.ValueOfBool(value)
	case "noble.dollar.vaults.v2.UserPosition.shares_pending_exit":
		value := x.SharesPendingExit
		return protoreflect.ValueOfString(value)
	case "noble.dollar.vaults.v2.UserPosition.active_exit_requests":
		value := x.ActiveExitRequests
		return protoreflect.ValueOfInt32(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.dollar.vaults.v2.UserPosition"))
		}
		panic(fmt.Errorf("message noble.dollar.vaults.v2.UserPosition does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_UserPosition) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "noble.dollar.vaults.v2.UserPosition.shares":
		x.Shares = value.Interface().(string)
	case "noble.dollar.vaults.v2.UserPosition.original_deposit":
		x.OriginalDeposit = value.Interface().(string)
	case "noble.dollar.vaults.v2.UserPosition.first_deposit_time":
		x.FirstDepositTime = value.Message().Interface().(*timestamppb.Timestamp)
	case "noble.dollar.vaults.v2.UserPosition.last_activity_time":
		x.LastActivityTime = value.Message().Interface().(*timestamppb.Timestamp)
	case "noble.dollar.vaults.v2.UserPosition.receive_yield":
		x.ReceiveYield = value.Bool()
	case "noble.dollar.vaults.v2.UserPosition.shares_pending_exit":
		x.SharesPendingExit = value.Interface().(string)
	case "noble.dollar.vaults.v2.UserPosition.active_exit_requests":
		x.ActiveExitRequests = int32(value.Int())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.dollar.vaults.v2.UserPosition"))
		}
		panic(fmt.Errorf("message noble.dollar.vaults.v2.UserPosition does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_UserPosition) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "noble.dollar.vaults.v2.UserPosition.first_deposit_time":
		if x.FirstDepositTime == nil {
			x.FirstDepositTime = new(timestamppb.Timestamp)
		}
		return protoreflect.ValueOfMessage(x.FirstDepositTime.ProtoReflect())
	case "noble.dollar.vaults.v2.UserPosition.last_activity_time":
		if x.LastActivityTime == nil {
			x.LastActivityTime = new(timestamppb.Timestamp)
		}
		return protoreflect.ValueOfMessage(x.LastActivityTime.ProtoReflect())
	case "noble.dollar.vaults.v2.UserPosition.shares":
		panic(fmt.Errorf("field shares of message noble.dollar.vaults.v2.UserPosition is not mutable"))
	case "noble.dollar.vaults.v2.UserPosition.original_deposit":
		panic(fmt.Errorf("field original_deposit of message noble.dollar.vaults.v2.UserPosition is not mutable"))
	case "noble.dollar.vaults.v2.UserPosition.receive_yield":
		panic(fmt.Errorf("field receive_yield of message noble.dollar.vaults.v2.UserPosition is not mutable"))
	case "noble.dollar.vaults.v2.UserPosition.shares_pending_exit":
		panic(fmt.Errorf("field shares_pending_exit of message noble.dollar.vaults.v2.UserPosition is not mutable"))
	case "noble.dollar.vaults.v2.UserPosition.active_exit_requests":
		panic(fmt.Errorf("field active_exit_requests of message noble.dollar.vaults.v2.UserPosition is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.dollar.vaults.v2.UserPosition"))
		}
		panic(fmt.Errorf("message noble.dollar.vaults.v2.UserPosition does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_UserPosition) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "noble.dollar.vaults.v2.UserPosition.shares":
		return protoreflect.ValueOfString("")
	case "noble.dollar.vaults.v2.UserPosition.original_deposit":
		return protoreflect.ValueOfString("")
	case "noble.dollar.vaults.v2.UserPosition.first_deposit_time":
		m := new(timestamppb.Timestamp)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "noble.dollar.vaults.v2.UserPosition.last_activity_time":
		m := new(timestamppb.Timestamp)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "noble.dollar.vaults.v2.UserPosition.receive_yield":
		return protoreflect.ValueOfBool(false)
	case "noble.dollar.vaults.v2.UserPosition.shares_pending_exit":
		return protoreflect.ValueOfString("")
	case "noble.dollar.vaults.v2.UserPosition.active_exit_requests":
		return protoreflect.ValueOfInt32(int32(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.dollar.vaults.v2.UserPosition"))
		}
		panic(fmt.Errorf("message noble.dollar.vaults.v2.UserPosition does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_UserPosition) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in noble.dollar.vaults.v2.UserPosition", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_UserPosition) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_UserPosition) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_UserPosition) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_UserPosition) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*UserPosition)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.Shares)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.OriginalDeposit)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.FirstDepositTime != nil {
			l = options.Size(x.FirstDepositTime)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.LastActivityTime != nil {
			l = options.Size(x.LastActivityTime)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.ReceiveYield {
			n += 2
		}
		l = len(x.SharesPendingExit)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.ActiveExitRequests != 0 {
			n += 1 + runtime.Sov(uint64(x.ActiveExitRequests))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*UserPosition)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.ActiveExitRequests != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.ActiveExitRequests))
			i--
			dAtA[i] = 0x38
		}
		if len(x.SharesPendingExit) > 0 {
			i -= len(x.SharesPendingExit)
			copy(dAtA[i:], x.SharesPendingExit)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.SharesPendingExit)))
			i--
			dAtA[i] = 0x32
		}
		if x.ReceiveYield {
			i--
			if x.ReceiveYield {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x28
		}
		if x.LastActivityTime != nil {
			encoded, err := options.Marshal(x.LastActivityTime)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x22
		}
		if x.FirstDepositTime != nil {
			encoded, err := options.Marshal(x.FirstDepositTime)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x1a
		}
		if len(x.OriginalDeposit) > 0 {
			i -= len(x.OriginalDeposit)
			copy(dAtA[i:], x.OriginalDeposit)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.OriginalDeposit)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.Shares) > 0 {
			i -= len(x.Shares)
			copy(dAtA[i:], x.Shares)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Shares)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*UserPosition)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: UserPosition: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: UserPosition: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Shares", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Shares = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field OriginalDeposit", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.OriginalDeposit = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field FirstDepositTime", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.FirstDepositTime == nil {
					x.FirstDepositTime = &timestamppb.Timestamp{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.FirstDepositTime); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field LastActivityTime", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.LastActivityTime == nil {
					x.LastActivityTime = &timestamppb.Timestamp{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.LastActivityTime); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 5:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ReceiveYield", wireType)
				}
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				x.ReceiveYield = bool(v != 0)
			case 6:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field SharesPendingExit", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.SharesPendingExit = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 7:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ActiveExitRequests", wireType)
				}
				x.ActiveExitRequests = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.ActiveExitRequests |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_ExitRequest                      protoreflect.MessageDescriptor
	fd_ExitRequest_request_id           protoreflect.FieldDescriptor
	fd_ExitRequest_shares               protoreflect.FieldDescriptor
	fd_ExitRequest_request_time         protoreflect.FieldDescriptor
	fd_ExitRequest_unlock_time          protoreflect.FieldDescriptor
	fd_ExitRequest_status               protoreflect.FieldDescriptor
	fd_ExitRequest_estimated_amount     protoreflect.FieldDescriptor
	fd_ExitRequest_request_block_height protoreflect.FieldDescriptor
)

func init() {
	file_noble_dollar_vaults_v2_vaults_proto_init()
	md_ExitRequest = File_noble_dollar_vaults_v2_vaults_proto.Messages().ByName("ExitRequest")
	fd_ExitRequest_request_id = md_ExitRequest.Fields().ByName("request_id")
	fd_ExitRequest_shares = md_ExitRequest.Fields().ByName("shares")
	fd_ExitRequest_request_time = md_ExitRequest.Fields().ByName("request_time")
	fd_ExitRequest_unlock_time = md_ExitRequest.Fields().ByName("unlock_time")
	fd_ExitRequest_status = md_ExitRequest.Fields().ByName("status")
	fd_ExitRequest_estimated_amount = md_ExitRequest.Fields().ByName("estimated_amount")
	fd_ExitRequest_request_block_height = md_ExitRequest.Fields().ByName("request_block_height")
}

var _ protoreflect.Message = (*fastReflection_ExitRequest)(nil)

type fastReflection_ExitRequest ExitRequest

func (x *ExitRequest) ProtoReflect() protoreflect.Message {
	return (*fastReflection_ExitRequest)(x)
}

func (x *ExitRequest) slowProtoReflect() protoreflect.Message {
	mi := &file_noble_dollar_vaults_v2_vaults_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_ExitRequest_messageType fastReflection_ExitRequest_messageType
var _ protoreflect.MessageType = fastReflection_ExitRequest_messageType{}

type fastReflection_ExitRequest_messageType struct{}

func (x fastReflection_ExitRequest_messageType) Zero() protoreflect.Message {
	return (*fastReflection_ExitRequest)(nil)
}
func (x fastReflection_ExitRequest_messageType) New() protoreflect.Message {
	return new(fastReflection_ExitRequest)
}
func (x fastReflection_ExitRequest_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_ExitRequest
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_ExitRequest) Descriptor() protoreflect.MessageDescriptor {
	return md_ExitRequest
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_ExitRequest) Type() protoreflect.MessageType {
	return _fastReflection_ExitRequest_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_ExitRequest) New() protoreflect.Message {
	return new(fastReflection_ExitRequest)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_ExitRequest) Interface() protoreflect.ProtoMessage {
	return (*ExitRequest)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_ExitRequest) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.RequestId != "" {
		value := protoreflect.ValueOfString(x.RequestId)
		if !f(fd_ExitRequest_request_id, value) {
			return
		}
	}
	if x.Shares != "" {
		value := protoreflect.ValueOfString(x.Shares)
		if !f(fd_ExitRequest_shares, value) {
			return
		}
	}
	if x.RequestTime != nil {
		value := protoreflect.ValueOfMessage(x.RequestTime.ProtoReflect())
		if !f(fd_ExitRequest_request_time, value) {
			return
		}
	}
	if x.UnlockTime != nil {
		value := protoreflect.ValueOfMessage(x.UnlockTime.ProtoReflect())
		if !f(fd_ExitRequest_unlock_time, value) {
			return
		}
	}
	if x.Status != 0 {
		value := protoreflect.ValueOfEnum((protoreflect.EnumNumber)(x.Status))
		if !f(fd_ExitRequest_status, value) {
			return
		}
	}
	if x.EstimatedAmount != "" {
		value := protoreflect.ValueOfString(x.EstimatedAmount)
		if !f(fd_ExitRequest_estimated_amount, value) {
			return
		}
	}
	if x.RequestBlockHeight != int64(0) {
		value := protoreflect.ValueOfInt64(x.RequestBlockHeight)
		if !f(fd_ExitRequest_request_block_height, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_ExitRequest) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "noble.dollar.vaults.v2.ExitRequest.request_id":
		return x.RequestId != ""
	case "noble.dollar.vaults.v2.ExitRequest.shares":
		return x.Shares != ""
	case "noble.dollar.vaults.v2.ExitRequest.request_time":
		return x.RequestTime != nil
	case "noble.dollar.vaults.v2.ExitRequest.unlock_time":
		return x.UnlockTime != nil
	case "noble.dollar.vaults.v2.ExitRequest.status":
		return x.Status != 0
	case "noble.dollar.vaults.v2.ExitRequest.estimated_amount":
		return x.EstimatedAmount != ""
	case "noble.dollar.vaults.v2.ExitRequest.request_block_height":
		return x.RequestBlockHeight != int64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.dollar.vaults.v2.ExitRequest"))
		}
		panic(fmt.Errorf("message noble.dollar.vaults.v2.ExitRequest does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ExitRequest) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "noble.dollar.vaults.v2.ExitRequest.request_id":
		x.RequestId = ""
	case "noble.dollar.vaults.v2.ExitRequest.shares":
		x.Shares = ""
	case "noble.dollar.vaults.v2.ExitRequest.request_time":
		x.RequestTime = nil
	case "noble.dollar.vaults.v2.ExitRequest.unlock_time":
		x.UnlockTime = nil
	case "noble.dollar.vaults.v2.ExitRequest.status":
		x.Status = 0
	case "noble.dollar.vaults.v2.ExitRequest.estimated_amount":
		x.EstimatedAmount = ""
	case "noble.dollar.vaults.v2.ExitRequest.request_block_height":
		x.RequestBlockHeight = int64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.dollar.vaults.v2.ExitRequest"))
		}
		panic(fmt.Errorf("message noble.dollar.vaults.v2.ExitRequest does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_ExitRequest) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "noble.dollar.vaults.v2.ExitRequest.request_id":
		value := x.RequestId
		return protoreflect.ValueOfString(value)
	case "noble.dollar.vaults.v2.ExitRequest.shares":
		value := x.Shares
		return protoreflect.ValueOfString(value)
	case "noble.dollar.vaults.v2.ExitRequest.request_time":
		value := x.RequestTime
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "noble.dollar.vaults.v2.ExitRequest.unlock_time":
		value := x.UnlockTime
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "noble.dollar.vaults.v2.ExitRequest.status":
		value := x.Status
		return protoreflect.ValueOfEnum((protoreflect.EnumNumber)(value))
	case "noble.dollar.vaults.v2.ExitRequest.estimated_amount":
		value := x.EstimatedAmount
		return protoreflect.ValueOfString(value)
	case "noble.dollar.vaults.v2.ExitRequest.request_block_height":
		value := x.RequestBlockHeight
		return protoreflect.ValueOfInt64(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.dollar.vaults.v2.ExitRequest"))
		}
		panic(fmt.Errorf("message noble.dollar.vaults.v2.ExitRequest does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ExitRequest) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "noble.dollar.vaults.v2.ExitRequest.request_id":
		x.RequestId = value.Interface().(string)
	case "noble.dollar.vaults.v2.ExitRequest.shares":
		x.Shares = value.Interface().(string)
	case "noble.dollar.vaults.v2.ExitRequest.request_time":
		x.RequestTime = value.Message().Interface().(*timestamppb.Timestamp)
	case "noble.dollar.vaults.v2.ExitRequest.unlock_time":
		x.UnlockTime = value.Message().Interface().(*timestamppb.Timestamp)
	case "noble.dollar.vaults.v2.ExitRequest.status":
		x.Status = (ExitRequestStatus)(value.Enum())
	case "noble.dollar.vaults.v2.ExitRequest.estimated_amount":
		x.EstimatedAmount = value.Interface().(string)
	case "noble.dollar.vaults.v2.ExitRequest.request_block_height":
		x.RequestBlockHeight = value.Int()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.dollar.vaults.v2.ExitRequest"))
		}
		panic(fmt.Errorf("message noble.dollar.vaults.v2.ExitRequest does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ExitRequest) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "noble.dollar.vaults.v2.ExitRequest.request_time":
		if x.RequestTime == nil {
			x.RequestTime = new(timestamppb.Timestamp)
		}
		return protoreflect.ValueOfMessage(x.RequestTime.ProtoReflect())
	case "noble.dollar.vaults.v2.ExitRequest.unlock_time":
		if x.UnlockTime == nil {
			x.UnlockTime = new(timestamppb.Timestamp)
		}
		return protoreflect.ValueOfMessage(x.UnlockTime.ProtoReflect())
	case "noble.dollar.vaults.v2.ExitRequest.request_id":
		panic(fmt.Errorf("field request_id of message noble.dollar.vaults.v2.ExitRequest is not mutable"))
	case "noble.dollar.vaults.v2.ExitRequest.shares":
		panic(fmt.Errorf("field shares of message noble.dollar.vaults.v2.ExitRequest is not mutable"))
	case "noble.dollar.vaults.v2.ExitRequest.status":
		panic(fmt.Errorf("field status of message noble.dollar.vaults.v2.ExitRequest is not mutable"))
	case "noble.dollar.vaults.v2.ExitRequest.estimated_amount":
		panic(fmt.Errorf("field estimated_amount of message noble.dollar.vaults.v2.ExitRequest is not mutable"))
	case "noble.dollar.vaults.v2.ExitRequest.request_block_height":
		panic(fmt.Errorf("field request_block_height of message noble.dollar.vaults.v2.ExitRequest is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.dollar.vaults.v2.ExitRequest"))
		}
		panic(fmt.Errorf("message noble.dollar.vaults.v2.ExitRequest does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_ExitRequest) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "noble.dollar.vaults.v2.ExitRequest.request_id":
		return protoreflect.ValueOfString("")
	case "noble.dollar.vaults.v2.ExitRequest.shares":
		return protoreflect.ValueOfString("")
	case "noble.dollar.vaults.v2.ExitRequest.request_time":
		m := new(timestamppb.Timestamp)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "noble.dollar.vaults.v2.ExitRequest.unlock_time":
		m := new(timestamppb.Timestamp)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "noble.dollar.vaults.v2.ExitRequest.status":
		return protoreflect.ValueOfEnum(0)
	case "noble.dollar.vaults.v2.ExitRequest.estimated_amount":
		return protoreflect.ValueOfString("")
	case "noble.dollar.vaults.v2.ExitRequest.request_block_height":
		return protoreflect.ValueOfInt64(int64(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.dollar.vaults.v2.ExitRequest"))
		}
		panic(fmt.Errorf("message noble.dollar.vaults.v2.ExitRequest does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_ExitRequest) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in noble.dollar.vaults.v2.ExitRequest", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_ExitRequest) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ExitRequest) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_ExitRequest) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_ExitRequest) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*ExitRequest)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.RequestId)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Shares)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.RequestTime != nil {
			l = options.Size(x.RequestTime)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.UnlockTime != nil {
			l = options.Size(x.UnlockTime)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Status != 0 {
			n += 1 + runtime.Sov(uint64(x.Status))
		}
		l = len(x.EstimatedAmount)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.RequestBlockHeight != 0 {
			n += 1 + runtime.Sov(uint64(x.RequestBlockHeight))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*ExitRequest)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.RequestBlockHeight != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.RequestBlockHeight))
			i--
			dAtA[i] = 0x38
		}
		if len(x.EstimatedAmount) > 0 {
			i -= len(x.EstimatedAmount)
			copy(dAtA[i:], x.EstimatedAmount)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.EstimatedAmount)))
			i--
			dAtA[i] = 0x32
		}
		if x.Status != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Status))
			i--
			dAtA[i] = 0x28
		}
		if x.UnlockTime != nil {
			encoded, err := options.Marshal(x.UnlockTime)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x22
		}
		if x.RequestTime != nil {
			encoded, err := options.Marshal(x.RequestTime)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x1a
		}
		if len(x.Shares) > 0 {
			i -= len(x.Shares)
			copy(dAtA[i:], x.Shares)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Shares)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.RequestId) > 0 {
			i -= len(x.RequestId)
			copy(dAtA[i:], x.RequestId)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.RequestId)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*ExitRequest)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: ExitRequest: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: ExitRequest: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field RequestId", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.RequestId = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Shares", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Shares = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field RequestTime", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.RequestTime == nil {
					x.RequestTime = &timestamppb.Timestamp{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.RequestTime); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field UnlockTime", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.UnlockTime == nil {
					x.UnlockTime = &timestamppb.Timestamp{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.UnlockTime); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 5:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
				}
				x.Status = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Status |= ExitRequestStatus(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 6:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field EstimatedAmount", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.EstimatedAmount = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 7:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field RequestBlockHeight", wireType)
				}
				x.RequestBlockHeight = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.RequestBlockHeight |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_VaultState                           protoreflect.MessageDescriptor
	fd_VaultState_vault_type                protoreflect.FieldDescriptor
	fd_VaultState_total_shares              protoreflect.FieldDescriptor
	fd_VaultState_total_nav                 protoreflect.FieldDescriptor
	fd_VaultState_share_price               protoreflect.FieldDescriptor
	fd_VaultState_total_users               protoreflect.FieldDescriptor
	fd_VaultState_deposits_enabled          protoreflect.FieldDescriptor
	fd_VaultState_withdrawals_enabled       protoreflect.FieldDescriptor
	fd_VaultState_last_nav_update           protoreflect.FieldDescriptor
	fd_VaultState_total_shares_pending_exit protoreflect.FieldDescriptor
	fd_VaultState_pending_exit_requests     protoreflect.FieldDescriptor
)

func init() {
	file_noble_dollar_vaults_v2_vaults_proto_init()
	md_VaultState = File_noble_dollar_vaults_v2_vaults_proto.Messages().ByName("VaultState")
	fd_VaultState_vault_type = md_VaultState.Fields().ByName("vault_type")
	fd_VaultState_total_shares = md_VaultState.Fields().ByName("total_shares")
	fd_VaultState_total_nav = md_VaultState.Fields().ByName("total_nav")
	fd_VaultState_share_price = md_VaultState.Fields().ByName("share_price")
	fd_VaultState_total_users = md_VaultState.Fields().ByName("total_users")
	fd_VaultState_deposits_enabled = md_VaultState.Fields().ByName("deposits_enabled")
	fd_VaultState_withdrawals_enabled = md_VaultState.Fields().ByName("withdrawals_enabled")
	fd_VaultState_last_nav_update = md_VaultState.Fields().ByName("last_nav_update")
	fd_VaultState_total_shares_pending_exit = md_VaultState.Fields().ByName("total_shares_pending_exit")
	fd_VaultState_pending_exit_requests = md_VaultState.Fields().ByName("pending_exit_requests")
}

var _ protoreflect.Message = (*fastReflection_VaultState)(nil)

type fastReflection_VaultState VaultState

func (x *VaultState) ProtoReflect() protoreflect.Message {
	return (*fastReflection_VaultState)(x)
}

func (x *VaultState) slowProtoReflect() protoreflect.Message {
	mi := &file_noble_dollar_vaults_v2_vaults_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_VaultState_messageType fastReflection_VaultState_messageType
var _ protoreflect.MessageType = fastReflection_VaultState_messageType{}

type fastReflection_VaultState_messageType struct{}

func (x fastReflection_VaultState_messageType) Zero() protoreflect.Message {
	return (*fastReflection_VaultState)(nil)
}
func (x fastReflection_VaultState_messageType) New() protoreflect.Message {
	return new(fastReflection_VaultState)
}
func (x fastReflection_VaultState_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_VaultState
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_VaultState) Descriptor() protoreflect.MessageDescriptor {
	return md_VaultState
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_VaultState) Type() protoreflect.MessageType {
	return _fastReflection_VaultState_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_VaultState) New() protoreflect.Message {
	return new(fastReflection_VaultState)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_VaultState) Interface() protoreflect.ProtoMessage {
	return (*VaultState)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_VaultState) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.VaultType != 0 {
		value := protoreflect.ValueOfEnum((protoreflect.EnumNumber)(x.VaultType))
		if !f(fd_VaultState_vault_type, value) {
			return
		}
	}
	if x.TotalShares != "" {
		value := protoreflect.ValueOfString(x.TotalShares)
		if !f(fd_VaultState_total_shares, value) {
			return
		}
	}
	if x.TotalNav != "" {
		value := protoreflect.ValueOfString(x.TotalNav)
		if !f(fd_VaultState_total_nav, value) {
			return
		}
	}
	if x.SharePrice != "" {
		value := protoreflect.ValueOfString(x.SharePrice)
		if !f(fd_VaultState_share_price, value) {
			return
		}
	}
	if x.TotalUsers != uint64(0) {
		value := protoreflect.ValueOfUint64(x.TotalUsers)
		if !f(fd_VaultState_total_users, value) {
			return
		}
	}
	if x.DepositsEnabled != false {
		value := protoreflect.ValueOfBool(x.DepositsEnabled)
		if !f(fd_VaultState_deposits_enabled, value) {
			return
		}
	}
	if x.WithdrawalsEnabled != false {
		value := protoreflect.ValueOfBool(x.WithdrawalsEnabled)
		if !f(fd_VaultState_withdrawals_enabled, value) {
			return
		}
	}
	if x.LastNavUpdate != nil {
		value := protoreflect.ValueOfMessage(x.LastNavUpdate.ProtoReflect())
		if !f(fd_VaultState_last_nav_update, value) {
			return
		}
	}
	if x.TotalSharesPendingExit != "" {
		value := protoreflect.ValueOfString(x.TotalSharesPendingExit)
		if !f(fd_VaultState_total_shares_pending_exit, value) {
			return
		}
	}
	if x.PendingExitRequests != int32(0) {
		value := protoreflect.ValueOfInt32(x.PendingExitRequests)
		if !f(fd_VaultState_pending_exit_requests, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_VaultState) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "noble.dollar.vaults.v2.VaultState.vault_type":
		return x.VaultType != 0
	case "noble.dollar.vaults.v2.VaultState.total_shares":
		return x.TotalShares != ""
	case "noble.dollar.vaults.v2.VaultState.total_nav":
		return x.TotalNav != ""
	case "noble.dollar.vaults.v2.VaultState.share_price":
		return x.SharePrice != ""
	case "noble.dollar.vaults.v2.VaultState.total_users":
		return x.TotalUsers != uint64(0)
	case "noble.dollar.vaults.v2.VaultState.deposits_enabled":
		return x.DepositsEnabled != false
	case "noble.dollar.vaults.v2.VaultState.withdrawals_enabled":
		return x.WithdrawalsEnabled != false
	case "noble.dollar.vaults.v2.VaultState.last_nav_update":
		return x.LastNavUpdate != nil
	case "noble.dollar.vaults.v2.VaultState.total_shares_pending_exit":
		return x.TotalSharesPendingExit != ""
	case "noble.dollar.vaults.v2.VaultState.pending_exit_requests":
		return x.PendingExitRequests != int32(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.dollar.vaults.v2.VaultState"))
		}
		panic(fmt.Errorf("message noble.dollar.vaults.v2.VaultState does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_VaultState) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "noble.dollar.vaults.v2.VaultState.vault_type":
		x.VaultType = 0
	case "noble.dollar.vaults.v2.VaultState.total_shares":
		x.TotalShares = ""
	case "noble.dollar.vaults.v2.VaultState.total_nav":
		x.TotalNav = ""
	case "noble.dollar.vaults.v2.VaultState.share_price":
		x.SharePrice = ""
	case "noble.dollar.vaults.v2.VaultState.total_users":
		x.TotalUsers = uint64(0)
	case "noble.dollar.vaults.v2.VaultState.deposits_enabled":
		x.DepositsEnabled = false
	case "noble.dollar.vaults.v2.VaultState.withdrawals_enabled":
		x.WithdrawalsEnabled = false
	case "noble.dollar.vaults.v2.VaultState.last_nav_update":
		x.LastNavUpdate = nil
	case "noble.dollar.vaults.v2.VaultState.total_shares_pending_exit":
		x.TotalSharesPendingExit = ""
	case "noble.dollar.vaults.v2.VaultState.pending_exit_requests":
		x.PendingExitRequests = int32(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.dollar.vaults.v2.VaultState"))
		}
		panic(fmt.Errorf("message noble.dollar.vaults.v2.VaultState does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_VaultState) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "noble.dollar.vaults.v2.VaultState.vault_type":
		value := x.VaultType
		return protoreflect.ValueOfEnum((protoreflect.EnumNumber)(value))
	case "noble.dollar.vaults.v2.VaultState.total_shares":
		value := x.TotalShares
		return protoreflect.ValueOfString(value)
	case "noble.dollar.vaults.v2.VaultState.total_nav":
		value := x.TotalNav
		return protoreflect.ValueOfString(value)
	case "noble.dollar.vaults.v2.VaultState.share_price":
		value := x.SharePrice
		return protoreflect.ValueOfString(value)
	case "noble.dollar.vaults.v2.VaultState.total_users":
		value := x.TotalUsers
		return protoreflect.ValueOfUint64(value)
	case "noble.dollar.vaults.v2.VaultState.deposits_enabled":
		value := x.DepositsEnabled
		return protoreflect.ValueOfBool(value)
	case "noble.dollar.vaults.v2.VaultState.withdrawals_enabled":
		value := x.WithdrawalsEnabled
		return protoreflect.ValueOfBool(value)
	case "noble.dollar.vaults.v2.VaultState.last_nav_update":
		value := x.LastNavUpdate
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "noble.dollar.vaults.v2.VaultState.total_shares_pending_exit":
		value := x.TotalSharesPendingExit
		return protoreflect.ValueOfString(value)
	case "noble.dollar.vaults.v2.VaultState.pending_exit_requests":
		value := x.PendingExitRequests
		return protoreflect.ValueOfInt32(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.dollar.vaults.v2.VaultState"))
		}
		panic(fmt.Errorf("message noble.dollar.vaults.v2.VaultState does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_VaultState) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "noble.dollar.vaults.v2.VaultState.vault_type":
		x.VaultType = (v1.VaultType)(value.Enum())
	case "noble.dollar.vaults.v2.VaultState.total_shares":
		x.TotalShares = value.Interface().(string)
	case "noble.dollar.vaults.v2.VaultState.total_nav":
		x.TotalNav = value.Interface().(string)
	case "noble.dollar.vaults.v2.VaultState.share_price":
		x.SharePrice = value.Interface().(string)
	case "noble.dollar.vaults.v2.VaultState.total_users":
		x.TotalUsers = value.Uint()
	case "noble.dollar.vaults.v2.VaultState.deposits_enabled":
		x.DepositsEnabled = value.Bool()
	case "noble.dollar.vaults.v2.VaultState.withdrawals_enabled":
		x.WithdrawalsEnabled = value.Bool()
	case "noble.dollar.vaults.v2.VaultState.last_nav_update":
		x.LastNavUpdate = value.Message().Interface().(*timestamppb.Timestamp)
	case "noble.dollar.vaults.v2.VaultState.total_shares_pending_exit":
		x.TotalSharesPendingExit = value.Interface().(string)
	case "noble.dollar.vaults.v2.VaultState.pending_exit_requests":
		x.PendingExitRequests = int32(value.Int())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.dollar.vaults.v2.VaultState"))
		}
		panic(fmt.Errorf("message noble.dollar.vaults.v2.VaultState does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_VaultState) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "noble.dollar.vaults.v2.VaultState.last_nav_update":
		if x.LastNavUpdate == nil {
			x.LastNavUpdate = new(timestamppb.Timestamp)
		}
		return protoreflect.ValueOfMessage(x.LastNavUpdate.ProtoReflect())
	case "noble.dollar.vaults.v2.VaultState.vault_type":
		panic(fmt.Errorf("field vault_type of message noble.dollar.vaults.v2.VaultState is not mutable"))
	case "noble.dollar.vaults.v2.VaultState.total_shares":
		panic(fmt.Errorf("field total_shares of message noble.dollar.vaults.v2.VaultState is not mutable"))
	case "noble.dollar.vaults.v2.VaultState.total_nav":
		panic(fmt.Errorf("field total_nav of message noble.dollar.vaults.v2.VaultState is not mutable"))
	case "noble.dollar.vaults.v2.VaultState.share_price":
		panic(fmt.Errorf("field share_price of message noble.dollar.vaults.v2.VaultState is not mutable"))
	case "noble.dollar.vaults.v2.VaultState.total_users":
		panic(fmt.Errorf("field total_users of message noble.dollar.vaults.v2.VaultState is not mutable"))
	case "noble.dollar.vaults.v2.VaultState.deposits_enabled":
		panic(fmt.Errorf("field deposits_enabled of message noble.dollar.vaults.v2.VaultState is not mutable"))
	case "noble.dollar.vaults.v2.VaultState.withdrawals_enabled":
		panic(fmt.Errorf("field withdrawals_enabled of message noble.dollar.vaults.v2.VaultState is not mutable"))
	case "noble.dollar.vaults.v2.VaultState.total_shares_pending_exit":
		panic(fmt.Errorf("field total_shares_pending_exit of message noble.dollar.vaults.v2.VaultState is not mutable"))
	case "noble.dollar.vaults.v2.VaultState.pending_exit_requests":
		panic(fmt.Errorf("field pending_exit_requests of message noble.dollar.vaults.v2.VaultState is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.dollar.vaults.v2.VaultState"))
		}
		panic(fmt.Errorf("message noble.dollar.vaults.v2.VaultState does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_VaultState) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "noble.dollar.vaults.v2.VaultState.vault_type":
		return protoreflect.ValueOfEnum(0)
	case "noble.dollar.vaults.v2.VaultState.total_shares":
		return protoreflect.ValueOfString("")
	case "noble.dollar.vaults.v2.VaultState.total_nav":
		return protoreflect.ValueOfString("")
	case "noble.dollar.vaults.v2.VaultState.share_price":
		return protoreflect.ValueOfString("")
	case "noble.dollar.vaults.v2.VaultState.total_users":
		return protoreflect.ValueOfUint64(uint64(0))
	case "noble.dollar.vaults.v2.VaultState.deposits_enabled":
		return protoreflect.ValueOfBool(false)
	case "noble.dollar.vaults.v2.VaultState.withdrawals_enabled":
		return protoreflect.ValueOfBool(false)
	case "noble.dollar.vaults.v2.VaultState.last_nav_update":
		m := new(timestamppb.Timestamp)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "noble.dollar.vaults.v2.VaultState.total_shares_pending_exit":
		return protoreflect.ValueOfString("")
	case "noble.dollar.vaults.v2.VaultState.pending_exit_requests":
		return protoreflect.ValueOfInt32(int32(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.dollar.vaults.v2.VaultState"))
		}
		panic(fmt.Errorf("message noble.dollar.vaults.v2.VaultState does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_VaultState) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in noble.dollar.vaults.v2.VaultState", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_VaultState) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_VaultState) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_VaultState) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_VaultState) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*VaultState)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.VaultType != 0 {
			n += 1 + runtime.Sov(uint64(x.VaultType))
		}
		l = len(x.TotalShares)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.TotalNav)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.SharePrice)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.TotalUsers != 0 {
			n += 1 + runtime.Sov(uint64(x.TotalUsers))
		}
		if x.DepositsEnabled {
			n += 2
		}
		if x.WithdrawalsEnabled {
			n += 2
		}
		if x.LastNavUpdate != nil {
			l = options.Size(x.LastNavUpdate)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.TotalSharesPendingExit)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.PendingExitRequests != 0 {
			n += 1 + runtime.Sov(uint64(x.PendingExitRequests))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*VaultState)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.PendingExitRequests != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.PendingExitRequests))
			i--
			dAtA[i] = 0x50
		}
		if len(x.TotalSharesPendingExit) > 0 {
			i -= len(x.TotalSharesPendingExit)
			copy(dAtA[i:], x.TotalSharesPendingExit)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.TotalSharesPendingExit)))
			i--
			dAtA[i] = 0x4a
		}
		if x.LastNavUpdate != nil {
			encoded, err := options.Marshal(x.LastNavUpdate)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x42
		}
		if x.WithdrawalsEnabled {
			i--
			if x.WithdrawalsEnabled {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x38
		}
		if x.DepositsEnabled {
			i--
			if x.DepositsEnabled {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x30
		}
		if x.TotalUsers != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.TotalUsers))
			i--
			dAtA[i] = 0x28
		}
		if len(x.SharePrice) > 0 {
			i -= len(x.SharePrice)
			copy(dAtA[i:], x.SharePrice)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.SharePrice)))
			i--
			dAtA[i] = 0x22
		}
		if len(x.TotalNav) > 0 {
			i -= len(x.TotalNav)
			copy(dAtA[i:], x.TotalNav)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.TotalNav)))
			i--
			dAtA[i] = 0x1a
		}
		if len(x.TotalShares) > 0 {
			i -= len(x.TotalShares)
			copy(dAtA[i:], x.TotalShares)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.TotalShares)))
			i--
			dAtA[i] = 0x12
		}
		if x.VaultType != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.VaultType))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*VaultState)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: VaultState: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: VaultState: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field VaultType", wireType)
				}
				x.VaultType = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.VaultType |= v1.VaultType(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TotalShares", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.TotalShares = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TotalNav", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.TotalNav = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field SharePrice", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.SharePrice = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 5:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TotalUsers", wireType)
				}
				x.TotalUsers = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.TotalUsers |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 6:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field DepositsEnabled", wireType)
				}
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				x.DepositsEnabled = bool(v != 0)
			case 7:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field WithdrawalsEnabled", wireType)
				}
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				x.WithdrawalsEnabled = bool(v != 0)
			case 8:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field LastNavUpdate", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.LastNavUpdate == nil {
					x.LastNavUpdate = &timestamppb.Timestamp{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.LastNavUpdate); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 9:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TotalSharesPendingExit", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.TotalSharesPendingExit = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 10:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PendingExitRequests", wireType)
				}
				x.PendingExitRequests = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.PendingExitRequests |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_ShareCalculation                  protoreflect.MessageDescriptor
	fd_ShareCalculation_total_nav        protoreflect.FieldDescriptor
	fd_ShareCalculation_total_shares     protoreflect.FieldDescriptor
	fd_ShareCalculation_share_price      protoreflect.FieldDescriptor
	fd_ShareCalculation_calculation_time protoreflect.FieldDescriptor
)

func init() {
	file_noble_dollar_vaults_v2_vaults_proto_init()
	md_ShareCalculation = File_noble_dollar_vaults_v2_vaults_proto.Messages().ByName("ShareCalculation")
	fd_ShareCalculation_total_nav = md_ShareCalculation.Fields().ByName("total_nav")
	fd_ShareCalculation_total_shares = md_ShareCalculation.Fields().ByName("total_shares")
	fd_ShareCalculation_share_price = md_ShareCalculation.Fields().ByName("share_price")
	fd_ShareCalculation_calculation_time = md_ShareCalculation.Fields().ByName("calculation_time")
}

var _ protoreflect.Message = (*fastReflection_ShareCalculation)(nil)

type fastReflection_ShareCalculation ShareCalculation

func (x *ShareCalculation) ProtoReflect() protoreflect.Message {
	return (*fastReflection_ShareCalculation)(x)
}

func (x *ShareCalculation) slowProtoReflect() protoreflect.Message {
	mi := &file_noble_dollar_vaults_v2_vaults_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_ShareCalculation_messageType fastReflection_ShareCalculation_messageType
var _ protoreflect.MessageType = fastReflection_ShareCalculation_messageType{}

type fastReflection_ShareCalculation_messageType struct{}

func (x fastReflection_ShareCalculation_messageType) Zero() protoreflect.Message {
	return (*fastReflection_ShareCalculation)(nil)
}
func (x fastReflection_ShareCalculation_messageType) New() protoreflect.Message {
	return new(fastReflection_ShareCalculation)
}
func (x fastReflection_ShareCalculation_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_ShareCalculation
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_ShareCalculation) Descriptor() protoreflect.MessageDescriptor {
	return md_ShareCalculation
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_ShareCalculation) Type() protoreflect.MessageType {
	return _fastReflection_ShareCalculation_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_ShareCalculation) New() protoreflect.Message {
	return new(fastReflection_ShareCalculation)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_ShareCalculation) Interface() protoreflect.ProtoMessage {
	return (*ShareCalculation)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_ShareCalculation) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.TotalNav != "" {
		value := protoreflect.ValueOfString(x.TotalNav)
		if !f(fd_ShareCalculation_total_nav, value) {
			return
		}
	}
	if x.TotalShares != "" {
		value := protoreflect.ValueOfString(x.TotalShares)
		if !f(fd_ShareCalculation_total_shares, value) {
			return
		}
	}
	if x.SharePrice != "" {
		value := protoreflect.ValueOfString(x.SharePrice)
		if !f(fd_ShareCalculation_share_price, value) {
			return
		}
	}
	if x.CalculationTime != nil {
		value := protoreflect.ValueOfMessage(x.CalculationTime.ProtoReflect())
		if !f(fd_ShareCalculation_calculation_time, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_ShareCalculation) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "noble.dollar.vaults.v2.ShareCalculation.total_nav":
		return x.TotalNav != ""
	case "noble.dollar.vaults.v2.ShareCalculation.total_shares":
		return x.TotalShares != ""
	case "noble.dollar.vaults.v2.ShareCalculation.share_price":
		return x.SharePrice != ""
	case "noble.dollar.vaults.v2.ShareCalculation.calculation_time":
		return x.CalculationTime != nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.dollar.vaults.v2.ShareCalculation"))
		}
		panic(fmt.Errorf("message noble.dollar.vaults.v2.ShareCalculation does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ShareCalculation) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "noble.dollar.vaults.v2.ShareCalculation.total_nav":
		x.TotalNav = ""
	case "noble.dollar.vaults.v2.ShareCalculation.total_shares":
		x.TotalShares = ""
	case "noble.dollar.vaults.v2.ShareCalculation.share_price":
		x.SharePrice = ""
	case "noble.dollar.vaults.v2.ShareCalculation.calculation_time":
		x.CalculationTime = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.dollar.vaults.v2.ShareCalculation"))
		}
		panic(fmt.Errorf("message noble.dollar.vaults.v2.ShareCalculation does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_ShareCalculation) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "noble.dollar.vaults.v2.ShareCalculation.total_nav":
		value := x.TotalNav
		return protoreflect.ValueOfString(value)
	case "noble.dollar.vaults.v2.ShareCalculation.total_shares":
		value := x.TotalShares
		return protoreflect.ValueOfString(value)
	case "noble.dollar.vaults.v2.ShareCalculation.share_price":
		value := x.SharePrice
		return protoreflect.ValueOfString(value)
	case "noble.dollar.vaults.v2.ShareCalculation.calculation_time":
		value := x.CalculationTime
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.dollar.vaults.v2.ShareCalculation"))
		}
		panic(fmt.Errorf("message noble.dollar.vaults.v2.ShareCalculation does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ShareCalculation) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "noble.dollar.vaults.v2.ShareCalculation.total_nav":
		x.TotalNav = value.Interface().(string)
	case "noble.dollar.vaults.v2.ShareCalculation.total_shares":
		x.TotalShares = value.Interface().(string)
	case "noble.dollar.vaults.v2.ShareCalculation.share_price":
		x.SharePrice = value.Interface().(string)
	case "noble.dollar.vaults.v2.ShareCalculation.calculation_time":
		x.CalculationTime = value.Message().Interface().(*timestamppb.Timestamp)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.dollar.vaults.v2.ShareCalculation"))
		}
		panic(fmt.Errorf("message noble.dollar.vaults.v2.ShareCalculation does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ShareCalculation) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "noble.dollar.vaults.v2.ShareCalculation.calculation_time":
		if x.CalculationTime == nil {
			x.CalculationTime = new(timestamppb.Timestamp)
		}
		return protoreflect.ValueOfMessage(x.CalculationTime.ProtoReflect())
	case "noble.dollar.vaults.v2.ShareCalculation.total_nav":
		panic(fmt.Errorf("field total_nav of message noble.dollar.vaults.v2.ShareCalculation is not mutable"))
	case "noble.dollar.vaults.v2.ShareCalculation.total_shares":
		panic(fmt.Errorf("field total_shares of message noble.dollar.vaults.v2.ShareCalculation is not mutable"))
	case "noble.dollar.vaults.v2.ShareCalculation.share_price":
		panic(fmt.Errorf("field share_price of message noble.dollar.vaults.v2.ShareCalculation is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.dollar.vaults.v2.ShareCalculation"))
		}
		panic(fmt.Errorf("message noble.dollar.vaults.v2.ShareCalculation does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_ShareCalculation) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "noble.dollar.vaults.v2.ShareCalculation.total_nav":
		return protoreflect.ValueOfString("")
	case "noble.dollar.vaults.v2.ShareCalculation.total_shares":
		return protoreflect.ValueOfString("")
	case "noble.dollar.vaults.v2.ShareCalculation.share_price":
		return protoreflect.ValueOfString("")
	case "noble.dollar.vaults.v2.ShareCalculation.calculation_time":
		m := new(timestamppb.Timestamp)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.dollar.vaults.v2.ShareCalculation"))
		}
		panic(fmt.Errorf("message noble.dollar.vaults.v2.ShareCalculation does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_ShareCalculation) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in noble.dollar.vaults.v2.ShareCalculation", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_ShareCalculation) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_ShareCalculation) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_ShareCalculation) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_ShareCalculation) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*ShareCalculation)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.TotalNav)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.TotalShares)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.SharePrice)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.CalculationTime != nil {
			l = options.Size(x.CalculationTime)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*ShareCalculation)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.CalculationTime != nil {
			encoded, err := options.Marshal(x.CalculationTime)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x22
		}
		if len(x.SharePrice) > 0 {
			i -= len(x.SharePrice)
			copy(dAtA[i:], x.SharePrice)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.SharePrice)))
			i--
			dAtA[i] = 0x1a
		}
		if len(x.TotalShares) > 0 {
			i -= len(x.TotalShares)
			copy(dAtA[i:], x.TotalShares)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.TotalShares)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.TotalNav) > 0 {
			i -= len(x.TotalNav)
			copy(dAtA[i:], x.TotalNav)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.TotalNav)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*ShareCalculation)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: ShareCalculation: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: ShareCalculation: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TotalNav", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.TotalNav = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TotalShares", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.TotalShares = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field SharePrice", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.SharePrice = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field CalculationTime", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.CalculationTime == nil {
					x.CalculationTime = &timestamppb.Timestamp{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.CalculationTime); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_DepositResult                  protoreflect.MessageDescriptor
	fd_DepositResult_amount_deposited protoreflect.FieldDescriptor
	fd_DepositResult_shares_received  protoreflect.FieldDescriptor
	fd_DepositResult_fees_paid        protoreflect.FieldDescriptor
	fd_DepositResult_share_price      protoreflect.FieldDescriptor
)

func init() {
	file_noble_dollar_vaults_v2_vaults_proto_init()
	md_DepositResult = File_noble_dollar_vaults_v2_vaults_proto.Messages().ByName("DepositResult")
	fd_DepositResult_amount_deposited = md_DepositResult.Fields().ByName("amount_deposited")
	fd_DepositResult_shares_received = md_DepositResult.Fields().ByName("shares_received")
	fd_DepositResult_fees_paid = md_DepositResult.Fields().ByName("fees_paid")
	fd_DepositResult_share_price = md_DepositResult.Fields().ByName("share_price")
}

var _ protoreflect.Message = (*fastReflection_DepositResult)(nil)

type fastReflection_DepositResult DepositResult

func (x *DepositResult) ProtoReflect() protoreflect.Message {
	return (*fastReflection_DepositResult)(x)
}

func (x *DepositResult) slowProtoReflect() protoreflect.Message {
	mi := &file_noble_dollar_vaults_v2_vaults_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_DepositResult_messageType fastReflection_DepositResult_messageType
var _ protoreflect.MessageType = fastReflection_DepositResult_messageType{}

type fastReflection_DepositResult_messageType struct{}

func (x fastReflection_DepositResult_messageType) Zero() protoreflect.Message {
	return (*fastReflection_DepositResult)(nil)
}
func (x fastReflection_DepositResult_messageType) New() protoreflect.Message {
	return new(fastReflection_DepositResult)
}
func (x fastReflection_DepositResult_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_DepositResult
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_DepositResult) Descriptor() protoreflect.MessageDescriptor {
	return md_DepositResult
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_DepositResult) Type() protoreflect.MessageType {
	return _fastReflection_DepositResult_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_DepositResult) New() protoreflect.Message {
	return new(fastReflection_DepositResult)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_DepositResult) Interface() protoreflect.ProtoMessage {
	return (*DepositResult)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_DepositResult) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.AmountDeposited != "" {
		value := protoreflect.ValueOfString(x.AmountDeposited)
		if !f(fd_DepositResult_amount_deposited, value) {
			return
		}
	}
	if x.SharesReceived != "" {
		value := protoreflect.ValueOfString(x.SharesReceived)
		if !f(fd_DepositResult_shares_received, value) {
			return
		}
	}
	if x.FeesPaid != "" {
		value := protoreflect.ValueOfString(x.FeesPaid)
		if !f(fd_DepositResult_fees_paid, value) {
			return
		}
	}
	if x.SharePrice != "" {
		value := protoreflect.ValueOfString(x.SharePrice)
		if !f(fd_DepositResult_share_price, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_DepositResult) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "noble.dollar.vaults.v2.DepositResult.amount_deposited":
		return x.AmountDeposited != ""
	case "noble.dollar.vaults.v2.DepositResult.shares_received":
		return x.SharesReceived != ""
	case "noble.dollar.vaults.v2.DepositResult.fees_paid":
		return x.FeesPaid != ""
	case "noble.dollar.vaults.v2.DepositResult.share_price":
		return x.SharePrice != ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.dollar.vaults.v2.DepositResult"))
		}
		panic(fmt.Errorf("message noble.dollar.vaults.v2.DepositResult does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_DepositResult) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "noble.dollar.vaults.v2.DepositResult.amount_deposited":
		x.AmountDeposited = ""
	case "noble.dollar.vaults.v2.DepositResult.shares_received":
		x.SharesReceived = ""
	case "noble.dollar.vaults.v2.DepositResult.fees_paid":
		x.FeesPaid = ""
	case "noble.dollar.vaults.v2.DepositResult.share_price":
		x.SharePrice = ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.dollar.vaults.v2.DepositResult"))
		}
		panic(fmt.Errorf("message noble.dollar.vaults.v2.DepositResult does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_DepositResult) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "noble.dollar.vaults.v2.DepositResult.amount_deposited":
		value := x.AmountDeposited
		return protoreflect.ValueOfString(value)
	case "noble.dollar.vaults.v2.DepositResult.shares_received":
		value := x.SharesReceived
		return protoreflect.ValueOfString(value)
	case "noble.dollar.vaults.v2.DepositResult.fees_paid":
		value := x.FeesPaid
		return protoreflect.ValueOfString(value)
	case "noble.dollar.vaults.v2.DepositResult.share_price":
		value := x.SharePrice
		return protoreflect.ValueOfString(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.dollar.vaults.v2.DepositResult"))
		}
		panic(fmt.Errorf("message noble.dollar.vaults.v2.DepositResult does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_DepositResult) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "noble.dollar.vaults.v2.DepositResult.amount_deposited":
		x.AmountDeposited = value.Interface().(string)
	case "noble.dollar.vaults.v2.DepositResult.shares_received":
		x.SharesReceived = value.Interface().(string)
	case "noble.dollar.vaults.v2.DepositResult.fees_paid":
		x.FeesPaid = value.Interface().(string)
	case "noble.dollar.vaults.v2.DepositResult.share_price":
		x.SharePrice = value.Interface().(string)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.dollar.vaults.v2.DepositResult"))
		}
		panic(fmt.Errorf("message noble.dollar.vaults.v2.DepositResult does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_DepositResult) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "noble.dollar.vaults.v2.DepositResult.amount_deposited":
		panic(fmt.Errorf("field amount_deposited of message noble.dollar.vaults.v2.DepositResult is not mutable"))
	case "noble.dollar.vaults.v2.DepositResult.shares_received":
		panic(fmt.Errorf("field shares_received of message noble.dollar.vaults.v2.DepositResult is not mutable"))
	case "noble.dollar.vaults.v2.DepositResult.fees_paid":
		panic(fmt.Errorf("field fees_paid of message noble.dollar.vaults.v2.DepositResult is not mutable"))
	case "noble.dollar.vaults.v2.DepositResult.share_price":
		panic(fmt.Errorf("field share_price of message noble.dollar.vaults.v2.DepositResult is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.dollar.vaults.v2.DepositResult"))
		}
		panic(fmt.Errorf("message noble.dollar.vaults.v2.DepositResult does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_DepositResult) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "noble.dollar.vaults.v2.DepositResult.amount_deposited":
		return protoreflect.ValueOfString("")
	case "noble.dollar.vaults.v2.DepositResult.shares_received":
		return protoreflect.ValueOfString("")
	case "noble.dollar.vaults.v2.DepositResult.fees_paid":
		return protoreflect.ValueOfString("")
	case "noble.dollar.vaults.v2.DepositResult.share_price":
		return protoreflect.ValueOfString("")
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.dollar.vaults.v2.DepositResult"))
		}
		panic(fmt.Errorf("message noble.dollar.vaults.v2.DepositResult does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_DepositResult) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in noble.dollar.vaults.v2.DepositResult", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_DepositResult) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_DepositResult) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_DepositResult) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_DepositResult) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*DepositResult)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.AmountDeposited)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.SharesReceived)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.FeesPaid)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.SharePrice)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*DepositResult)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.SharePrice) > 0 {
			i -= len(x.SharePrice)
			copy(dAtA[i:], x.SharePrice)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.SharePrice)))
			i--
			dAtA[i] = 0x22
		}
		if len(x.FeesPaid) > 0 {
			i -= len(x.FeesPaid)
			copy(dAtA[i:], x.FeesPaid)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.FeesPaid)))
			i--
			dAtA[i] = 0x1a
		}
		if len(x.SharesReceived) > 0 {
			i -= len(x.SharesReceived)
			copy(dAtA[i:], x.SharesReceived)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.SharesReceived)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.AmountDeposited) > 0 {
			i -= len(x.AmountDeposited)
			copy(dAtA[i:], x.AmountDeposited)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.AmountDeposited)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*DepositResult)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: DepositResult: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: DepositResult: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field AmountDeposited", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.AmountDeposited = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field SharesReceived", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.SharesReceived = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field FeesPaid", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.FeesPaid = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field SharePrice", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.SharePrice = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_WithdrawalResult                  protoreflect.MessageDescriptor
	fd_WithdrawalResult_shares_redeemed  protoreflect.FieldDescriptor
	fd_WithdrawalResult_amount_withdrawn protoreflect.FieldDescriptor
	fd_WithdrawalResult_fees_paid        protoreflect.FieldDescriptor
	fd_WithdrawalResult_share_price      protoreflect.FieldDescriptor
)

func init() {
	file_noble_dollar_vaults_v2_vaults_proto_init()
	md_WithdrawalResult = File_noble_dollar_vaults_v2_vaults_proto.Messages().ByName("WithdrawalResult")
	fd_WithdrawalResult_shares_redeemed = md_WithdrawalResult.Fields().ByName("shares_redeemed")
	fd_WithdrawalResult_amount_withdrawn = md_WithdrawalResult.Fields().ByName("amount_withdrawn")
	fd_WithdrawalResult_fees_paid = md_WithdrawalResult.Fields().ByName("fees_paid")
	fd_WithdrawalResult_share_price = md_WithdrawalResult.Fields().ByName("share_price")
}

var _ protoreflect.Message = (*fastReflection_WithdrawalResult)(nil)

type fastReflection_WithdrawalResult WithdrawalResult

func (x *WithdrawalResult) ProtoReflect() protoreflect.Message {
	return (*fastReflection_WithdrawalResult)(x)
}

func (x *WithdrawalResult) slowProtoReflect() protoreflect.Message {
	mi := &file_noble_dollar_vaults_v2_vaults_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_WithdrawalResult_messageType fastReflection_WithdrawalResult_messageType
var _ protoreflect.MessageType = fastReflection_WithdrawalResult_messageType{}

type fastReflection_WithdrawalResult_messageType struct{}

func (x fastReflection_WithdrawalResult_messageType) Zero() protoreflect.Message {
	return (*fastReflection_WithdrawalResult)(nil)
}
func (x fastReflection_WithdrawalResult_messageType) New() protoreflect.Message {
	return new(fastReflection_WithdrawalResult)
}
func (x fastReflection_WithdrawalResult_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_WithdrawalResult
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_WithdrawalResult) Descriptor() protoreflect.MessageDescriptor {
	return md_WithdrawalResult
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_WithdrawalResult) Type() protoreflect.MessageType {
	return _fastReflection_WithdrawalResult_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_WithdrawalResult) New() protoreflect.Message {
	return new(fastReflection_WithdrawalResult)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_WithdrawalResult) Interface() protoreflect.ProtoMessage {
	return (*WithdrawalResult)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_WithdrawalResult) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.SharesRedeemed != "" {
		value := protoreflect.ValueOfString(x.SharesRedeemed)
		if !f(fd_WithdrawalResult_shares_redeemed, value) {
			return
		}
	}
	if x.AmountWithdrawn != "" {
		value := protoreflect.ValueOfString(x.AmountWithdrawn)
		if !f(fd_WithdrawalResult_amount_withdrawn, value) {
			return
		}
	}
	if x.FeesPaid != "" {
		value := protoreflect.ValueOfString(x.FeesPaid)
		if !f(fd_WithdrawalResult_fees_paid, value) {
			return
		}
	}
	if x.SharePrice != "" {
		value := protoreflect.ValueOfString(x.SharePrice)
		if !f(fd_WithdrawalResult_share_price, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_WithdrawalResult) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "noble.dollar.vaults.v2.WithdrawalResult.shares_redeemed":
		return x.SharesRedeemed != ""
	case "noble.dollar.vaults.v2.WithdrawalResult.amount_withdrawn":
		return x.AmountWithdrawn != ""
	case "noble.dollar.vaults.v2.WithdrawalResult.fees_paid":
		return x.FeesPaid != ""
	case "noble.dollar.vaults.v2.WithdrawalResult.share_price":
		return x.SharePrice != ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.dollar.vaults.v2.WithdrawalResult"))
		}
		panic(fmt.Errorf("message noble.dollar.vaults.v2.WithdrawalResult does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_WithdrawalResult) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "noble.dollar.vaults.v2.WithdrawalResult.shares_redeemed":
		x.SharesRedeemed = ""
	case "noble.dollar.vaults.v2.WithdrawalResult.amount_withdrawn":
		x.AmountWithdrawn = ""
	case "noble.dollar.vaults.v2.WithdrawalResult.fees_paid":
		x.FeesPaid = ""
	case "noble.dollar.vaults.v2.WithdrawalResult.share_price":
		x.SharePrice = ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.dollar.vaults.v2.WithdrawalResult"))
		}
		panic(fmt.Errorf("message noble.dollar.vaults.v2.WithdrawalResult does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_WithdrawalResult) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "noble.dollar.vaults.v2.WithdrawalResult.shares_redeemed":
		value := x.SharesRedeemed
		return protoreflect.ValueOfString(value)
	case "noble.dollar.vaults.v2.WithdrawalResult.amount_withdrawn":
		value := x.AmountWithdrawn
		return protoreflect.ValueOfString(value)
	case "noble.dollar.vaults.v2.WithdrawalResult.fees_paid":
		value := x.FeesPaid
		return protoreflect.ValueOfString(value)
	case "noble.dollar.vaults.v2.WithdrawalResult.share_price":
		value := x.SharePrice
		return protoreflect.ValueOfString(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.dollar.vaults.v2.WithdrawalResult"))
		}
		panic(fmt.Errorf("message noble.dollar.vaults.v2.WithdrawalResult does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_WithdrawalResult) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "noble.dollar.vaults.v2.WithdrawalResult.shares_redeemed":
		x.SharesRedeemed = value.Interface().(string)
	case "noble.dollar.vaults.v2.WithdrawalResult.amount_withdrawn":
		x.AmountWithdrawn = value.Interface().(string)
	case "noble.dollar.vaults.v2.WithdrawalResult.fees_paid":
		x.FeesPaid = value.Interface().(string)
	case "noble.dollar.vaults.v2.WithdrawalResult.share_price":
		x.SharePrice = value.Interface().(string)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.dollar.vaults.v2.WithdrawalResult"))
		}
		panic(fmt.Errorf("message noble.dollar.vaults.v2.WithdrawalResult does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_WithdrawalResult) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "noble.dollar.vaults.v2.WithdrawalResult.shares_redeemed":
		panic(fmt.Errorf("field shares_redeemed of message noble.dollar.vaults.v2.WithdrawalResult is not mutable"))
	case "noble.dollar.vaults.v2.WithdrawalResult.amount_withdrawn":
		panic(fmt.Errorf("field amount_withdrawn of message noble.dollar.vaults.v2.WithdrawalResult is not mutable"))
	case "noble.dollar.vaults.v2.WithdrawalResult.fees_paid":
		panic(fmt.Errorf("field fees_paid of message noble.dollar.vaults.v2.WithdrawalResult is not mutable"))
	case "noble.dollar.vaults.v2.WithdrawalResult.share_price":
		panic(fmt.Errorf("field share_price of message noble.dollar.vaults.v2.WithdrawalResult is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.dollar.vaults.v2.WithdrawalResult"))
		}
		panic(fmt.Errorf("message noble.dollar.vaults.v2.WithdrawalResult does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_WithdrawalResult) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "noble.dollar.vaults.v2.WithdrawalResult.shares_redeemed":
		return protoreflect.ValueOfString("")
	case "noble.dollar.vaults.v2.WithdrawalResult.amount_withdrawn":
		return protoreflect.ValueOfString("")
	case "noble.dollar.vaults.v2.WithdrawalResult.fees_paid":
		return protoreflect.ValueOfString("")
	case "noble.dollar.vaults.v2.WithdrawalResult.share_price":
		return protoreflect.ValueOfString("")
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.dollar.vaults.v2.WithdrawalResult"))
		}
		panic(fmt.Errorf("message noble.dollar.vaults.v2.WithdrawalResult does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_WithdrawalResult) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in noble.dollar.vaults.v2.WithdrawalResult", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_WithdrawalResult) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_WithdrawalResult) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_WithdrawalResult) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_WithdrawalResult) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*WithdrawalResult)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.SharesRedeemed)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.AmountWithdrawn)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.FeesPaid)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.SharePrice)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*WithdrawalResult)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.SharePrice) > 0 {
			i -= len(x.SharePrice)
			copy(dAtA[i:], x.SharePrice)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.SharePrice)))
			i--
			dAtA[i] = 0x22
		}
		if len(x.FeesPaid) > 0 {
			i -= len(x.FeesPaid)
			copy(dAtA[i:], x.FeesPaid)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.FeesPaid)))
			i--
			dAtA[i] = 0x1a
		}
		if len(x.AmountWithdrawn) > 0 {
			i -= len(x.AmountWithdrawn)
			copy(dAtA[i:], x.AmountWithdrawn)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.AmountWithdrawn)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.SharesRedeemed) > 0 {
			i -= len(x.SharesRedeemed)
			copy(dAtA[i:], x.SharesRedeemed)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.SharesRedeemed)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*WithdrawalResult)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: WithdrawalResult: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: WithdrawalResult: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field SharesRedeemed", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.SharesRedeemed = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field AmountWithdrawn", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.AmountWithdrawn = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field FeesPaid", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.FeesPaid = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field SharePrice", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.SharePrice = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_YieldDistribution                       protoreflect.MessageDescriptor
	fd_YieldDistribution_total_yield           protoreflect.FieldDescriptor
	fd_YieldDistribution_yield_per_share       protoreflect.FieldDescriptor
	fd_YieldDistribution_distribution_time     protoreflect.FieldDescriptor
	fd_YieldDistribution_eligible_shareholders protoreflect.FieldDescriptor
	fd_YieldDistribution_yield_source          protoreflect.FieldDescriptor
)

func init() {
	file_noble_dollar_vaults_v2_vaults_proto_init()
	md_YieldDistribution = File_noble_dollar_vaults_v2_vaults_proto.Messages().ByName("YieldDistribution")
	fd_YieldDistribution_total_yield = md_YieldDistribution.Fields().ByName("total_yield")
	fd_YieldDistribution_yield_per_share = md_YieldDistribution.Fields().ByName("yield_per_share")
	fd_YieldDistribution_distribution_time = md_YieldDistribution.Fields().ByName("distribution_time")
	fd_YieldDistribution_eligible_shareholders = md_YieldDistribution.Fields().ByName("eligible_shareholders")
	fd_YieldDistribution_yield_source = md_YieldDistribution.Fields().ByName("yield_source")
}

var _ protoreflect.Message = (*fastReflection_YieldDistribution)(nil)

type fastReflection_YieldDistribution YieldDistribution

func (x *YieldDistribution) ProtoReflect() protoreflect.Message {
	return (*fastReflection_YieldDistribution)(x)
}

func (x *YieldDistribution) slowProtoReflect() protoreflect.Message {
	mi := &file_noble_dollar_vaults_v2_vaults_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_YieldDistribution_messageType fastReflection_YieldDistribution_messageType
var _ protoreflect.MessageType = fastReflection_YieldDistribution_messageType{}

type fastReflection_YieldDistribution_messageType struct{}

func (x fastReflection_YieldDistribution_messageType) Zero() protoreflect.Message {
	return (*fastReflection_YieldDistribution)(nil)
}
func (x fastReflection_YieldDistribution_messageType) New() protoreflect.Message {
	return new(fastReflection_YieldDistribution)
}
func (x fastReflection_YieldDistribution_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_YieldDistribution
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_YieldDistribution) Descriptor() protoreflect.MessageDescriptor {
	return md_YieldDistribution
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_YieldDistribution) Type() protoreflect.MessageType {
	return _fastReflection_YieldDistribution_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_YieldDistribution) New() protoreflect.Message {
	return new(fastReflection_YieldDistribution)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_YieldDistribution) Interface() protoreflect.ProtoMessage {
	return (*YieldDistribution)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_YieldDistribution) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.TotalYield != "" {
		value := protoreflect.ValueOfString(x.TotalYield)
		if !f(fd_YieldDistribution_total_yield, value) {
			return
		}
	}
	if x.YieldPerShare != "" {
		value := protoreflect.ValueOfString(x.YieldPerShare)
		if !f(fd_YieldDistribution_yield_per_share, value) {
			return
		}
	}
	if x.DistributionTime != nil {
		value := protoreflect.ValueOfMessage(x.DistributionTime.ProtoReflect())
		if !f(fd_YieldDistribution_distribution_time, value) {
			return
		}
	}
	if x.EligibleShareholders != uint64(0) {
		value := protoreflect.ValueOfUint64(x.EligibleShareholders)
		if !f(fd_YieldDistribution_eligible_shareholders, value) {
			return
		}
	}
	if x.YieldSource != "" {
		value := protoreflect.ValueOfString(x.YieldSource)
		if !f(fd_YieldDistribution_yield_source, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_YieldDistribution) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "noble.dollar.vaults.v2.YieldDistribution.total_yield":
		return x.TotalYield != ""
	case "noble.dollar.vaults.v2.YieldDistribution.yield_per_share":
		return x.YieldPerShare != ""
	case "noble.dollar.vaults.v2.YieldDistribution.distribution_time":
		return x.DistributionTime != nil
	case "noble.dollar.vaults.v2.YieldDistribution.eligible_shareholders":
		return x.EligibleShareholders != uint64(0)
	case "noble.dollar.vaults.v2.YieldDistribution.yield_source":
		return x.YieldSource != ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.dollar.vaults.v2.YieldDistribution"))
		}
		panic(fmt.Errorf("message noble.dollar.vaults.v2.YieldDistribution does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_YieldDistribution) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "noble.dollar.vaults.v2.YieldDistribution.total_yield":
		x.TotalYield = ""
	case "noble.dollar.vaults.v2.YieldDistribution.yield_per_share":
		x.YieldPerShare = ""
	case "noble.dollar.vaults.v2.YieldDistribution.distribution_time":
		x.DistributionTime = nil
	case "noble.dollar.vaults.v2.YieldDistribution.eligible_shareholders":
		x.EligibleShareholders = uint64(0)
	case "noble.dollar.vaults.v2.YieldDistribution.yield_source":
		x.YieldSource = ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.dollar.vaults.v2.YieldDistribution"))
		}
		panic(fmt.Errorf("message noble.dollar.vaults.v2.YieldDistribution does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_YieldDistribution) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "noble.dollar.vaults.v2.YieldDistribution.total_yield":
		value := x.TotalYield
		return protoreflect.ValueOfString(value)
	case "noble.dollar.vaults.v2.YieldDistribution.yield_per_share":
		value := x.YieldPerShare
		return protoreflect.ValueOfString(value)
	case "noble.dollar.vaults.v2.YieldDistribution.distribution_time":
		value := x.DistributionTime
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "noble.dollar.vaults.v2.YieldDistribution.eligible_shareholders":
		value := x.EligibleShareholders
		return protoreflect.ValueOfUint64(value)
	case "noble.dollar.vaults.v2.YieldDistribution.yield_source":
		value := x.YieldSource
		return protoreflect.ValueOfString(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.dollar.vaults.v2.YieldDistribution"))
		}
		panic(fmt.Errorf("message noble.dollar.vaults.v2.YieldDistribution does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_YieldDistribution) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "noble.dollar.vaults.v2.YieldDistribution.total_yield":
		x.TotalYield = value.Interface().(string)
	case "noble.dollar.vaults.v2.YieldDistribution.yield_per_share":
		x.YieldPerShare = value.Interface().(string)
	case "noble.dollar.vaults.v2.YieldDistribution.distribution_time":
		x.DistributionTime = value.Message().Interface().(*timestamppb.Timestamp)
	case "noble.dollar.vaults.v2.YieldDistribution.eligible_shareholders":
		x.EligibleShareholders = value.Uint()
	case "noble.dollar.vaults.v2.YieldDistribution.yield_source":
		x.YieldSource = value.Interface().(string)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.dollar.vaults.v2.YieldDistribution"))
		}
		panic(fmt.Errorf("message noble.dollar.vaults.v2.YieldDistribution does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_YieldDistribution) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "noble.dollar.vaults.v2.YieldDistribution.distribution_time":
		if x.DistributionTime == nil {
			x.DistributionTime = new(timestamppb.Timestamp)
		}
		return protoreflect.ValueOfMessage(x.DistributionTime.ProtoReflect())
	case "noble.dollar.vaults.v2.YieldDistribution.total_yield":
		panic(fmt.Errorf("field total_yield of message noble.dollar.vaults.v2.YieldDistribution is not mutable"))
	case "noble.dollar.vaults.v2.YieldDistribution.yield_per_share":
		panic(fmt.Errorf("field yield_per_share of message noble.dollar.vaults.v2.YieldDistribution is not mutable"))
	case "noble.dollar.vaults.v2.YieldDistribution.eligible_shareholders":
		panic(fmt.Errorf("field eligible_shareholders of message noble.dollar.vaults.v2.YieldDistribution is not mutable"))
	case "noble.dollar.vaults.v2.YieldDistribution.yield_source":
		panic(fmt.Errorf("field yield_source of message noble.dollar.vaults.v2.YieldDistribution is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.dollar.vaults.v2.YieldDistribution"))
		}
		panic(fmt.Errorf("message noble.dollar.vaults.v2.YieldDistribution does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_YieldDistribution) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "noble.dollar.vaults.v2.YieldDistribution.total_yield":
		return protoreflect.ValueOfString("")
	case "noble.dollar.vaults.v2.YieldDistribution.yield_per_share":
		return protoreflect.ValueOfString("")
	case "noble.dollar.vaults.v2.YieldDistribution.distribution_time":
		m := new(timestamppb.Timestamp)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "noble.dollar.vaults.v2.YieldDistribution.eligible_shareholders":
		return protoreflect.ValueOfUint64(uint64(0))
	case "noble.dollar.vaults.v2.YieldDistribution.yield_source":
		return protoreflect.ValueOfString("")
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: noble.dollar.vaults.v2.YieldDistribution"))
		}
		panic(fmt.Errorf("message noble.dollar.vaults.v2.YieldDistribution does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_YieldDistribution) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in noble.dollar.vaults.v2.YieldDistribution", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_YieldDistribution) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_YieldDistribution) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_YieldDistribution) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_YieldDistribution) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*YieldDistribution)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.TotalYield)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.YieldPerShare)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.DistributionTime != nil {
			l = options.Size(x.DistributionTime)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.EligibleShareholders != 0 {
			n += 1 + runtime.Sov(uint64(x.EligibleShareholders))
		}
		l = len(x.YieldSource)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*YieldDistribution)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.YieldSource) > 0 {
			i -= len(x.YieldSource)
			copy(dAtA[i:], x.YieldSource)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.YieldSource)))
			i--
			dAtA[i] = 0x2a
		}
		if x.EligibleShareholders != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.EligibleShareholders))
			i--
			dAtA[i] = 0x20
		}
		if x.DistributionTime != nil {
			encoded, err := options.Marshal(x.DistributionTime)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x1a
		}
		if len(x.YieldPerShare) > 0 {
			i -= len(x.YieldPerShare)
			copy(dAtA[i:], x.YieldPerShare)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.YieldPerShare)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.TotalYield) > 0 {
			i -= len(x.TotalYield)
			copy(dAtA[i:], x.TotalYield)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.TotalYield)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*YieldDistribution)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: YieldDistribution: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: YieldDistribution: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TotalYield", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.TotalYield = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field YieldPerShare", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.YieldPerShare = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field DistributionTime", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.DistributionTime == nil {
					x.DistributionTime = &timestamppb.Timestamp{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.DistributionTime); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 4:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field EligibleShareholders", wireType)
				}
				x.EligibleShareholders = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.EligibleShareholders |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field YieldSource", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.YieldSource = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: noble/dollar/vaults/v2/vaults.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ExitRequestStatus represents the status of an exit request
type ExitRequestStatus int32

const (
	// Request is pending (waiting for unlock time)
	ExitRequestStatus_EXIT_REQUEST_STATUS_PENDING ExitRequestStatus = 0
	// Request is ready to be processed
	ExitRequestStatus_EXIT_REQUEST_STATUS_READY ExitRequestStatus = 1
	// Request has been processed
	ExitRequestStatus_EXIT_REQUEST_STATUS_PROCESSED ExitRequestStatus = 2
	// Request was cancelled by user
	ExitRequestStatus_EXIT_REQUEST_STATUS_CANCELLED ExitRequestStatus = 3
	// Request expired without processing
	ExitRequestStatus_EXIT_REQUEST_STATUS_EXPIRED ExitRequestStatus = 4
)

// Enum value maps for ExitRequestStatus.
var (
	ExitRequestStatus_name = map[int32]string{
		0: "EXIT_REQUEST_STATUS_PENDING",
		1: "EXIT_REQUEST_STATUS_READY",
		2: "EXIT_REQUEST_STATUS_PROCESSED",
		3: "EXIT_REQUEST_STATUS_CANCELLED",
		4: "EXIT_REQUEST_STATUS_EXPIRED",
	}
	ExitRequestStatus_value = map[string]int32{
		"EXIT_REQUEST_STATUS_PENDING":   0,
		"EXIT_REQUEST_STATUS_READY":     1,
		"EXIT_REQUEST_STATUS_PROCESSED": 2,
		"EXIT_REQUEST_STATUS_CANCELLED": 3,
		"EXIT_REQUEST_STATUS_EXPIRED":   4,
	}
)

func (x ExitRequestStatus) Enum() *ExitRequestStatus {
	p := new(ExitRequestStatus)
	*p = x
	return p
}

func (x ExitRequestStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExitRequestStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_noble_dollar_vaults_v2_vaults_proto_enumTypes[0].Descriptor()
}

func (ExitRequestStatus) Type() protoreflect.EnumType {
	return &file_noble_dollar_vaults_v2_vaults_proto_enumTypes[0]
}

func (x ExitRequestStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExitRequestStatus.Descriptor instead.
func (ExitRequestStatus) EnumDescriptor() ([]byte, []int) {
	return file_noble_dollar_vaults_v2_vaults_proto_rawDescGZIP(), []int{0}
}

// UserPosition represents a user's position in the V2 share-based vault system
type UserPosition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Total shares owned by the user
	Shares string `protobuf:"bytes,1,opt,name=shares,proto3" json:"shares,omitempty"`
	// Original deposit amount (for tracking purposes)
	OriginalDeposit string `protobuf:"bytes,2,opt,name=original_deposit,json=originalDeposit,proto3" json:"original_deposit,omitempty"`
	// Timestamp of first deposit
	FirstDepositTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=first_deposit_time,json=firstDepositTime,proto3" json:"first_deposit_time,omitempty"`
	// Timestamp of last deposit/withdrawal
	LastActivityTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=last_activity_time,json=lastActivityTime,proto3" json:"last_activity_time,omitempty"`
	// Whether user wants to receive yield (vs contributing to fee pool)
	ReceiveYield bool `protobuf:"varint,5,opt,name=receive_yield,json=receiveYield,proto3" json:"receive_yield,omitempty"`
	// Shares pending exit (for staked vaults)
	SharesPendingExit string `protobuf:"bytes,6,opt,name=shares_pending_exit,json=sharesPendingExit,proto3" json:"shares_pending_exit,omitempty"`
	// Number of active exit requests
	ActiveExitRequests int32 `protobuf:"varint,7,opt,name=active_exit_requests,json=activeExitRequests,proto3" json:"active_exit_requests,omitempty"`
}

func (x *UserPosition) Reset() {
	*x = UserPosition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_noble_dollar_vaults_v2_vaults_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserPosition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserPosition) ProtoMessage() {}

// Deprecated: Use UserPosition.ProtoReflect.Descriptor instead.
func (*UserPosition) Descriptor() ([]byte, []int) {
	return file_noble_dollar_vaults_v2_vaults_proto_rawDescGZIP(), []int{0}
}

func (x *UserPosition) GetShares() string {
	if x != nil {
		return x.Shares
	}
	return ""
}

func (x *UserPosition) GetOriginalDeposit() string {
	if x != nil {
		return x.OriginalDeposit
	}
	return ""
}

func (x *UserPosition) GetFirstDepositTime() *timestamppb.Timestamp {
	if x != nil {
		return x.FirstDepositTime
	}
	return nil
}

func (x *UserPosition) GetLastActivityTime() *timestamppb.Timestamp {
	if x != nil {
		return x.LastActivityTime
	}
	return nil
}

func (x *UserPosition) GetReceiveYield() bool {
	if x != nil {
		return x.ReceiveYield
	}
	return false
}

func (x *UserPosition) GetSharesPendingExit() string {
	if x != nil {
		return x.SharesPendingExit
	}
	return ""
}

func (x *UserPosition) GetActiveExitRequests() int32 {
	if x != nil {
		return x.ActiveExitRequests
	}
	return 0
}

// ExitRequest represents a pending exit from a staked vault
type ExitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique request ID
	RequestId string `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// Shares to be exited
	Shares string `protobuf:"bytes,2,opt,name=shares,proto3" json:"shares,omitempty"`
	// When the exit was requested
	RequestTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=request_time,json=requestTime,proto3" json:"request_time,omitempty"`
	// When the exit can be processed (after unbonding period)
	UnlockTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=unlock_time,json=unlockTime,proto3" json:"unlock_time,omitempty"`
	// Current status of the exit request
	Status ExitRequestStatus `protobuf:"varint,5,opt,name=status,proto3,enum=noble.dollar.vaults.v2.ExitRequestStatus" json:"status,omitempty"`
	// Estimated amount to receive (calculated at request time)
	EstimatedAmount string `protobuf:"bytes,6,opt,name=estimated_amount,json=estimatedAmount,proto3" json:"estimated_amount,omitempty"`
	// Block height when request was made
	RequestBlockHeight int64 `protobuf:"varint,7,opt,name=request_block_height,json=requestBlockHeight,proto3" json:"request_block_height,omitempty"`
}

func (x *ExitRequest) Reset() {
	*x = ExitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_noble_dollar_vaults_v2_vaults_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExitRequest) ProtoMessage() {}

// Deprecated: Use ExitRequest.ProtoReflect.Descriptor instead.
func (*ExitRequest) Descriptor() ([]byte, []int) {
	return file_noble_dollar_vaults_v2_vaults_proto_rawDescGZIP(), []int{1}
}

func (x *ExitRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *ExitRequest) GetShares() string {
	if x != nil {
		return x.Shares
	}
	return ""
}

func (x *ExitRequest) GetRequestTime() *timestamppb.Timestamp {
	if x != nil {
		return x.RequestTime
	}
	return nil
}

func (x *ExitRequest) GetUnlockTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UnlockTime
	}
	return nil
}

func (x *ExitRequest) GetStatus() ExitRequestStatus {
	if x != nil {
		return x.Status
	}
	return ExitRequestStatus_EXIT_REQUEST_STATUS_PENDING
}

func (x *ExitRequest) GetEstimatedAmount() string {
	if x != nil {
		return x.EstimatedAmount
	}
	return ""
}

func (x *ExitRequest) GetRequestBlockHeight() int64 {
	if x != nil {
		return x.RequestBlockHeight
	}
	return 0
}

// VaultState represents the current state of a V2 vault
type VaultState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Vault type
	VaultType v1.VaultType `protobuf:"varint,1,opt,name=vault_type,json=vaultType,proto3,enum=noble.dollar.vaults.v1.VaultType" json:"vault_type,omitempty"`
	// Total shares issued
	TotalShares string `protobuf:"bytes,2,opt,name=total_shares,json=totalShares,proto3" json:"total_shares,omitempty"`
	// Total Net Asset Value
	TotalNav string `protobuf:"bytes,3,opt,name=total_nav,json=totalNav,proto3" json:"total_nav,omitempty"`
	// Current share price (NAV per share)
	SharePrice string `protobuf:"bytes,4,opt,name=share_price,json=sharePrice,proto3" json:"share_price,omitempty"`
	// Total number of users with positions
	TotalUsers uint64 `protobuf:"varint,5,opt,name=total_users,json=totalUsers,proto3" json:"total_users,omitempty"`
	// Whether deposits are currently enabled
	DepositsEnabled bool `protobuf:"varint,6,opt,name=deposits_enabled,json=depositsEnabled,proto3" json:"deposits_enabled,omitempty"`
	// Whether withdrawals are currently enabled
	WithdrawalsEnabled bool `protobuf:"varint,7,opt,name=withdrawals_enabled,json=withdrawalsEnabled,proto3" json:"withdrawals_enabled,omitempty"`
	// Last NAV update timestamp
	LastNavUpdate *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=last_nav_update,json=lastNavUpdate,proto3" json:"last_nav_update,omitempty"`
	// Total shares pending exit
	TotalSharesPendingExit string `protobuf:"bytes,9,opt,name=total_shares_pending_exit,json=totalSharesPendingExit,proto3" json:"total_shares_pending_exit,omitempty"`
	// Number of pending exit requests
	PendingExitRequests int32 `protobuf:"varint,10,opt,name=pending_exit_requests,json=pendingExitRequests,proto3" json:"pending_exit_requests,omitempty"`
}

func (x *VaultState) Reset() {
	*x = VaultState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_noble_dollar_vaults_v2_vaults_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VaultState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VaultState) ProtoMessage() {}

// Deprecated: Use VaultState.ProtoReflect.Descriptor instead.
func (*VaultState) Descriptor() ([]byte, []int) {
	return file_noble_dollar_vaults_v2_vaults_proto_rawDescGZIP(), []int{2}
}

func (x *VaultState) GetVaultType() v1.VaultType {
	if x != nil {
		return x.VaultType
	}
	return v1.VaultType(0)
}

func (x *VaultState) GetTotalShares() string {
	if x != nil {
		return x.TotalShares
	}
	return ""
}

func (x *VaultState) GetTotalNav() string {
	if x != nil {
		return x.TotalNav
	}
	return ""
}

func (x *VaultState) GetSharePrice() string {
	if x != nil {
		return x.SharePrice
	}
	return ""
}

func (x *VaultState) GetTotalUsers() uint64 {
	if x != nil {
		return x.TotalUsers
	}
	return 0
}

func (x *VaultState) GetDepositsEnabled() bool {
	if x != nil {
		return x.DepositsEnabled
	}
	return false
}

func (x *VaultState) GetWithdrawalsEnabled() bool {
	if x != nil {
		return x.WithdrawalsEnabled
	}
	return false
}

func (x *VaultState) GetLastNavUpdate() *timestamppb.Timestamp {
	if x != nil {
		return x.LastNavUpdate
	}
	return nil
}

func (x *VaultState) GetTotalSharesPendingExit() string {
	if x != nil {
		return x.TotalSharesPendingExit
	}
	return ""
}

func (x *VaultState) GetPendingExitRequests() int32 {
	if x != nil {
		return x.PendingExitRequests
	}
	return 0
}

// ShareCalculation contains details about share price calculations
type ShareCalculation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Total NAV used in calculation
	TotalNav string `protobuf:"bytes,1,opt,name=total_nav,json=totalNav,proto3" json:"total_nav,omitempty"`
	// Total shares used in calculation
	TotalShares string `protobuf:"bytes,2,opt,name=total_shares,json=totalShares,proto3" json:"total_shares,omitempty"`
	// Resulting share price
	SharePrice string `protobuf:"bytes,3,opt,name=share_price,json=sharePrice,proto3" json:"share_price,omitempty"`
	// Calculation timestamp
	CalculationTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=calculation_time,json=calculationTime,proto3" json:"calculation_time,omitempty"`
}

func (x *ShareCalculation) Reset() {
	*x = ShareCalculation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_noble_dollar_vaults_v2_vaults_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShareCalculation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShareCalculation) ProtoMessage() {}

// Deprecated: Use ShareCalculation.ProtoReflect.Descriptor instead.
func (*ShareCalculation) Descriptor() ([]byte, []int) {
	return file_noble_dollar_vaults_v2_vaults_proto_rawDescGZIP(), []int{3}
}

func (x *ShareCalculation) GetTotalNav() string {
	if x != nil {
		return x.TotalNav
	}
	return ""
}

func (x *ShareCalculation) GetTotalShares() string {
	if x != nil {
		return x.TotalShares
	}
	return ""
}

func (x *ShareCalculation) GetSharePrice() string {
	if x != nil {
		return x.SharePrice
	}
	return ""
}

func (x *ShareCalculation) GetCalculationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CalculationTime
	}
	return nil
}

// DepositResult contains the outcome of a deposit operation
type DepositResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Amount deposited (after fees)
	AmountDeposited string `protobuf:"bytes,1,opt,name=amount_deposited,json=amountDeposited,proto3" json:"amount_deposited,omitempty"`
	// Shares received
	SharesReceived string `protobuf:"bytes,2,opt,name=shares_received,json=sharesReceived,proto3" json:"shares_received,omitempty"`
	// Fees paid
	FeesPaid string `protobuf:"bytes,3,opt,name=fees_paid,json=feesPaid,proto3" json:"fees_paid,omitempty"`
	// Share price at time of deposit
	SharePrice string `protobuf:"bytes,4,opt,name=share_price,json=sharePrice,proto3" json:"share_price,omitempty"`
}

func (x *DepositResult) Reset() {
	*x = DepositResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_noble_dollar_vaults_v2_vaults_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DepositResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DepositResult) ProtoMessage() {}

// Deprecated: Use DepositResult.ProtoReflect.Descriptor instead.
func (*DepositResult) Descriptor() ([]byte, []int) {
	return file_noble_dollar_vaults_v2_vaults_proto_rawDescGZIP(), []int{4}
}

func (x *DepositResult) GetAmountDeposited() string {
	if x != nil {
		return x.AmountDeposited
	}
	return ""
}

func (x *DepositResult) GetSharesReceived() string {
	if x != nil {
		return x.SharesReceived
	}
	return ""
}

func (x *DepositResult) GetFeesPaid() string {
	if x != nil {
		return x.FeesPaid
	}
	return ""
}

func (x *DepositResult) GetSharePrice() string {
	if x != nil {
		return x.SharePrice
	}
	return ""
}

// WithdrawalResult contains the outcome of a withdrawal operation
type WithdrawalResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Shares redeemed
	SharesRedeemed string `protobuf:"bytes,1,opt,name=shares_redeemed,json=sharesRedeemed,proto3" json:"shares_redeemed,omitempty"`
	// Amount withdrawn (after fees)
	AmountWithdrawn string `protobuf:"bytes,2,opt,name=amount_withdrawn,json=amountWithdrawn,proto3" json:"amount_withdrawn,omitempty"`
	// Fees paid
	FeesPaid string `protobuf:"bytes,3,opt,name=fees_paid,json=feesPaid,proto3" json:"fees_paid,omitempty"`
	// Share price at time of withdrawal
	SharePrice string `protobuf:"bytes,4,opt,name=share_price,json=sharePrice,proto3" json:"share_price,omitempty"`
}

func (x *WithdrawalResult) Reset() {
	*x = WithdrawalResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_noble_dollar_vaults_v2_vaults_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WithdrawalResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithdrawalResult) ProtoMessage() {}

// Deprecated: Use WithdrawalResult.ProtoReflect.Descriptor instead.
func (*WithdrawalResult) Descriptor() ([]byte, []int) {
	return file_noble_dollar_vaults_v2_vaults_proto_rawDescGZIP(), []int{5}
}

func (x *WithdrawalResult) GetSharesRedeemed() string {
	if x != nil {
		return x.SharesRedeemed
	}
	return ""
}

func (x *WithdrawalResult) GetAmountWithdrawn() string {
	if x != nil {
		return x.AmountWithdrawn
	}
	return ""
}

func (x *WithdrawalResult) GetFeesPaid() string {
	if x != nil {
		return x.FeesPaid
	}
	return ""
}

func (x *WithdrawalResult) GetSharePrice() string {
	if x != nil {
		return x.SharePrice
	}
	return ""
}

// YieldDistribution represents yield distribution to shareholders
type YieldDistribution struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Total yield amount distributed
	TotalYield string `protobuf:"bytes,1,opt,name=total_yield,json=totalYield,proto3" json:"total_yield,omitempty"`
	// Yield per share
	YieldPerShare string `protobuf:"bytes,2,opt,name=yield_per_share,json=yieldPerShare,proto3" json:"yield_per_share,omitempty"`
	// Distribution timestamp
	DistributionTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=distribution_time,json=distributionTime,proto3" json:"distribution_time,omitempty"`
	// Number of eligible shareholders
	EligibleShareholders uint64 `protobuf:"varint,4,opt,name=eligible_shareholders,json=eligibleShareholders,proto3" json:"eligible_shareholders,omitempty"`
	// Source of the yield (e.g., "staking_rewards", "trading_fees")
	YieldSource string `protobuf:"bytes,5,opt,name=yield_source,json=yieldSource,proto3" json:"yield_source,omitempty"`
}

func (x *YieldDistribution) Reset() {
	*x = YieldDistribution{}
	if protoimpl.UnsafeEnabled {
		mi := &file_noble_dollar_vaults_v2_vaults_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *YieldDistribution) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YieldDistribution) ProtoMessage() {}

// Deprecated: Use YieldDistribution.ProtoReflect.Descriptor instead.
func (*YieldDistribution) Descriptor() ([]byte, []int) {
	return file_noble_dollar_vaults_v2_vaults_proto_rawDescGZIP(), []int{6}
}

func (x *YieldDistribution) GetTotalYield() string {
	if x != nil {
		return x.TotalYield
	}
	return ""
}

func (x *YieldDistribution) GetYieldPerShare() string {
	if x != nil {
		return x.YieldPerShare
	}
	return ""
}

func (x *YieldDistribution) GetDistributionTime() *timestamppb.Timestamp {
	if x != nil {
		return x.DistributionTime
	}
	return nil
}

func (x *YieldDistribution) GetEligibleShareholders() uint64 {
	if x != nil {
		return x.EligibleShareholders
	}
	return 0
}

func (x *YieldDistribution) GetYieldSource() string {
	if x != nil {
		return x.YieldSource
	}
	return ""
}

var File_noble_dollar_vaults_v2_vaults_proto protoreflect.FileDescriptor

var file_noble_dollar_vaults_v2_vaults_proto_rawDesc = []byte{
	0x0a, 0x23, 0x6e, 0x6f, 0x62, 0x6c, 0x65, 0x2f, 0x64, 0x6f, 0x6c, 0x6c, 0x61, 0x72, 0x2f, 0x76,
	0x61, 0x75, 0x6c, 0x74, 0x73, 0x2f, 0x76, 0x32, 0x2f, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x16, 0x6e, 0x6f, 0x62, 0x6c, 0x65, 0x2e, 0x64, 0x6f, 0x6c,
	0x6c, 0x61, 0x72, 0x2e, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x2e, 0x76, 0x32, 0x1a, 0x11, 0x61,
	0x6d, 0x69, 0x6e, 0x6f, 0x2f, 0x61, 0x6d, 0x69, 0x6e, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x19, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63,
	0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x67, 0x6f, 0x67,
	0x6f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x23, 0x6e, 0x6f, 0x62, 0x6c, 0x65, 0x2f, 0x64, 0x6f, 0x6c, 0x6c, 0x61, 0x72,
	0x2f, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x61, 0x75, 0x6c, 0x74,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x96, 0x04, 0x0a, 0x0c, 0x55, 0x73, 0x65, 0x72,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x48, 0x0a, 0x06, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x30, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde,
	0x1f, 0x15, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d,
	0x61, 0x74, 0x68, 0x2e, 0x49, 0x6e, 0x74, 0xd2, 0xb4, 0x2d, 0x0a, 0x63, 0x6f, 0x73, 0x6d, 0x6f,
	0x73, 0x2e, 0x49, 0x6e, 0x74, 0xa8, 0xe7, 0xb0, 0x2a, 0x01, 0x52, 0x06, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x73, 0x12, 0x5b, 0x0a, 0x10, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x64,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x30, 0xc8, 0xde,
	0x1f, 0x00, 0xda, 0xde, 0x1f, 0x15, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e,
	0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x49, 0x6e, 0x74, 0xd2, 0xb4, 0x2d, 0x0a, 0x63,
	0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0xa8, 0xe7, 0xb0, 0x2a, 0x01, 0x52, 0x0f,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x12,
	0x52, 0x0a, 0x12, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x08, 0xc8, 0xde, 0x1f, 0x00, 0x90, 0xdf, 0x1f,
	0x01, 0x52, 0x10, 0x66, 0x69, 0x72, 0x73, 0x74, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x52, 0x0a, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x08, 0xc8, 0xde, 0x1f,
	0x00, 0x90, 0xdf, 0x1f, 0x01, 0x52, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x5f, 0x79, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x59, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x60, 0x0a, 0x13,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x5f, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x65,
	0x78, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x30, 0xc8, 0xde, 0x1f, 0x00, 0xda,
	0xde, 0x1f, 0x15, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f,
	0x6d, 0x61, 0x74, 0x68, 0x2e, 0x49, 0x6e, 0x74, 0xd2, 0xb4, 0x2d, 0x0a, 0x63, 0x6f, 0x73, 0x6d,
	0x6f, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0xa8, 0xe7, 0xb0, 0x2a, 0x01, 0x52, 0x11, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x73, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x45, 0x78, 0x69, 0x74, 0x12, 0x30,
	0x0a, 0x14, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x65, 0x78, 0x69, 0x74, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x45, 0x78, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73,
	0x22, 0xd8, 0x03, 0x0a, 0x0b, 0x45, 0x78, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12,
	0x48, 0x0a, 0x06, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x30, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x15, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73,
	0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x49, 0x6e, 0x74, 0xd2, 0xb4,
	0x2d, 0x0a, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0xa8, 0xe7, 0xb0, 0x2a,
	0x01, 0x52, 0x06, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x12, 0x47, 0x0a, 0x0c, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x08, 0xc8, 0xde, 0x1f,
	0x00, 0x90, 0xdf, 0x1f, 0x01, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x45, 0x0a, 0x0b, 0x75, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x42, 0x08, 0xc8, 0xde, 0x1f, 0x00, 0x90, 0xdf, 0x1f, 0x01, 0x52, 0x0a, 0x75,
	0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x6e, 0x6f, 0x62, 0x6c,
	0x65, 0x2e, 0x64, 0x6f, 0x6c, 0x6c, 0x61, 0x72, 0x2e, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x2e,
	0x76, 0x32, 0x2e, 0x45, 0x78, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x5b, 0x0a, 0x10,
	0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x30, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x15,
	0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74,
	0x68, 0x2e, 0x49, 0x6e, 0x74, 0xd2, 0xb4, 0x2d, 0x0a, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e,
	0x49, 0x6e, 0x74, 0xa8, 0xe7, 0xb0, 0x2a, 0x01, 0x52, 0x0f, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0xb7, 0x05, 0x0a, 0x0a,
	0x56, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x40, 0x0a, 0x0a, 0x76, 0x61,
	0x75, 0x6c, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21,
	0x2e, 0x6e, 0x6f, 0x62, 0x6c, 0x65, 0x2e, 0x64, 0x6f, 0x6c, 0x6c, 0x61, 0x72, 0x2e, 0x76, 0x61,
	0x75, 0x6c, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x09, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x53, 0x0a, 0x0c,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x30, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x15, 0x63, 0x6f, 0x73, 0x6d,
	0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x49, 0x6e,
	0x74, 0xd2, 0xb4, 0x2d, 0x0a, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0xa8,
	0xe7, 0xb0, 0x2a, 0x01, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x73, 0x12, 0x4d, 0x0a, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6e, 0x61, 0x76, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x30, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x15, 0x63, 0x6f,
	0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e,
	0x49, 0x6e, 0x74, 0xd2, 0xb4, 0x2d, 0x0a, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x49, 0x6e,
	0x74, 0xa8, 0xe7, 0xb0, 0x2a, 0x01, 0x52, 0x08, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4e, 0x61, 0x76,
	0x12, 0x57, 0x0a, 0x0b, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x36, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x1b, 0x63,
	0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68,
	0x2e, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x44, 0x65, 0x63, 0xd2, 0xb4, 0x2d, 0x0a, 0x63, 0x6f,
	0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x44, 0x65, 0x63, 0xa8, 0xe7, 0xb0, 0x2a, 0x01, 0x52, 0x0a, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x64, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x73, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x2f, 0x0a, 0x13, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61,
	0x77, 0x61, 0x6c, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x12, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x73, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x4c, 0x0a, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e,
	0x61, 0x76, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x08, 0xc8, 0xde, 0x1f,
	0x00, 0x90, 0xdf, 0x1f, 0x01, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x76, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x12, 0x6b, 0x0a, 0x19, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x73, 0x5f, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x78, 0x69,
	0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x30, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f,
	0x15, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61,
	0x74, 0x68, 0x2e, 0x49, 0x6e, 0x74, 0xd2, 0xb4, 0x2d, 0x0a, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73,
	0x2e, 0x49, 0x6e, 0x74, 0xa8, 0xe7, 0xb0, 0x2a, 0x01, 0x52, 0x16, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x73, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x45, 0x78, 0x69,
	0x74, 0x12, 0x32, 0x0a, 0x15, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x78, 0x69,
	0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x13, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x45, 0x78, 0x69, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x73, 0x22, 0xe0, 0x02, 0x0a, 0x10, 0x53, 0x68, 0x61, 0x72, 0x65, 0x43,
	0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x09, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x6e, 0x61, 0x76, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x30, 0xc8,
	0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x15, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b,
	0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x49, 0x6e, 0x74, 0xd2, 0xb4, 0x2d, 0x0a,
	0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0xa8, 0xe7, 0xb0, 0x2a, 0x01, 0x52,
	0x08, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4e, 0x61, 0x76, 0x12, 0x53, 0x0a, 0x0c, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x30, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x15, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73,
	0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x49, 0x6e, 0x74, 0xd2, 0xb4,
	0x2d, 0x0a, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0xa8, 0xe7, 0xb0, 0x2a,
	0x01, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x68, 0x61, 0x72, 0x65, 0x73, 0x12, 0x57,
	0x0a, 0x0b, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x36, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x1b, 0x63, 0x6f, 0x73,
	0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x4c,
	0x65, 0x67, 0x61, 0x63, 0x79, 0x44, 0x65, 0x63, 0xd2, 0xb4, 0x2d, 0x0a, 0x63, 0x6f, 0x73, 0x6d,
	0x6f, 0x73, 0x2e, 0x44, 0x65, 0x63, 0xa8, 0xe7, 0xb0, 0x2a, 0x01, 0x52, 0x0a, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x4f, 0x0a, 0x10, 0x63, 0x61, 0x6c, 0x63, 0x75,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x08, 0xc8,
	0xde, 0x1f, 0x00, 0x90, 0xdf, 0x1f, 0x01, 0x52, 0x0f, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xef, 0x02, 0x0a, 0x0d, 0x44, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x5b, 0x0a, 0x10, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x65, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x30, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x15, 0x63, 0x6f,
	0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e,
	0x49, 0x6e, 0x74, 0xd2, 0xb4, 0x2d, 0x0a, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x49, 0x6e,
	0x74, 0xa8, 0xe7, 0xb0, 0x2a, 0x01, 0x52, 0x0f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x65, 0x64, 0x12, 0x59, 0x0a, 0x0f, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x73, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x30, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x15, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73,
	0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x49, 0x6e, 0x74, 0xd2,
	0xb4, 0x2d, 0x0a, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0xa8, 0xe7, 0xb0,
	0x2a, 0x01, 0x52, 0x0e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x64, 0x12, 0x4d, 0x0a, 0x09, 0x66, 0x65, 0x65, 0x73, 0x5f, 0x70, 0x61, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x30, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x15, 0x63,
	0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68,
	0x2e, 0x49, 0x6e, 0x74, 0xd2, 0xb4, 0x2d, 0x0a, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x49,
	0x6e, 0x74, 0xa8, 0xe7, 0xb0, 0x2a, 0x01, 0x52, 0x08, 0x66, 0x65, 0x65, 0x73, 0x50, 0x61, 0x69,
	0x64, 0x12, 0x57, 0x0a, 0x0b, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x36, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x1b,
	0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74,
	0x68, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x44, 0x65, 0x63, 0xd2, 0xb4, 0x2d, 0x0a, 0x63,
	0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x44, 0x65, 0x63, 0xa8, 0xe7, 0xb0, 0x2a, 0x01, 0x52, 0x0a,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x22, 0xf2, 0x02, 0x0a, 0x10, 0x57,
	0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x59, 0x0a, 0x0f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x64, 0x65, 0x65, 0x6d,
	0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x30, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde,
	0x1f, 0x15, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d,
	0x61, 0x74, 0x68, 0x2e, 0x49, 0x6e, 0x74, 0xd2, 0xb4, 0x2d, 0x0a, 0x63, 0x6f, 0x73, 0x6d, 0x6f,
	0x73, 0x2e, 0x49, 0x6e, 0x74, 0xa8, 0xe7, 0xb0, 0x2a, 0x01, 0x52, 0x0e, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x73, 0x52, 0x65, 0x64, 0x65, 0x65, 0x6d, 0x65, 0x64, 0x12, 0x5b, 0x0a, 0x10, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x30, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x15, 0x63, 0x6f,
	0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e,
	0x49, 0x6e, 0x74, 0xd2, 0xb4, 0x2d, 0x0a, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x49, 0x6e,
	0x74, 0xa8, 0xe7, 0xb0, 0x2a, 0x01, 0x52, 0x0f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x57, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x6e, 0x12, 0x4d, 0x0a, 0x09, 0x66, 0x65, 0x65, 0x73, 0x5f,
	0x70, 0x61, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x30, 0xc8, 0xde, 0x1f, 0x00,
	0xda, 0xde, 0x1f, 0x15, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f,
	0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x49, 0x6e, 0x74, 0xd2, 0xb4, 0x2d, 0x0a, 0x63, 0x6f, 0x73,
	0x6d, 0x6f, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0xa8, 0xe7, 0xb0, 0x2a, 0x01, 0x52, 0x08, 0x66, 0x65,
	0x65, 0x73, 0x50, 0x61, 0x69, 0x64, 0x12, 0x57, 0x0a, 0x0b, 0x73, 0x68, 0x61, 0x72, 0x65, 0x5f,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x36, 0xc8, 0xde, 0x1f,
	0x00, 0xda, 0xde, 0x1f, 0x1b, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69,
	0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x44, 0x65, 0x63,
	0xd2, 0xb4, 0x2d, 0x0a, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x44, 0x65, 0x63, 0xa8, 0xe7,
	0xb0, 0x2a, 0x01, 0x52, 0x0a, 0x73, 0x68, 0x61, 0x72, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x22,
	0xf1, 0x02, 0x0a, 0x11, 0x59, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x79,
	0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x30, 0xc8, 0xde, 0x1f, 0x00,
	0xda, 0xde, 0x1f, 0x15, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f,
	0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x49, 0x6e, 0x74, 0xd2, 0xb4, 0x2d, 0x0a, 0x63, 0x6f, 0x73,
	0x6d, 0x6f, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0xa8, 0xe7, 0xb0, 0x2a, 0x01, 0x52, 0x0a, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x59, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x5e, 0x0a, 0x0f, 0x79, 0x69, 0x65, 0x6c,
	0x64, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x36, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x1b, 0x63, 0x6f, 0x73, 0x6d, 0x6f,
	0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x4c, 0x65, 0x67,
	0x61, 0x63, 0x79, 0x44, 0x65, 0x63, 0xd2, 0xb4, 0x2d, 0x0a, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73,
	0x2e, 0x44, 0x65, 0x63, 0xa8, 0xe7, 0xb0, 0x2a, 0x01, 0x52, 0x0d, 0x79, 0x69, 0x65, 0x6c, 0x64,
	0x50, 0x65, 0x72, 0x53, 0x68, 0x61, 0x72, 0x65, 0x12, 0x51, 0x0a, 0x11, 0x64, 0x69, 0x73, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42,
	0x08, 0xc8, 0xde, 0x1f, 0x00, 0x90, 0xdf, 0x1f, 0x01, 0x52, 0x10, 0x64, 0x69, 0x73, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x15, 0x65,
	0x6c, 0x69, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x6c,
	0x64, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x65, 0x6c, 0x69, 0x67,
	0x69, 0x62, 0x6c, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73,
	0x12, 0x21, 0x0a, 0x0c, 0x79, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x79, 0x69, 0x65, 0x6c, 0x64, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x2a, 0xc0, 0x01, 0x0a, 0x11, 0x45, 0x78, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x1b, 0x45, 0x58, 0x49,
	0x54, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x45, 0x58,
	0x49, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x59, 0x10, 0x01, 0x12, 0x21, 0x0a, 0x1d, 0x45, 0x58, 0x49,
	0x54, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x45, 0x44, 0x10, 0x02, 0x12, 0x21, 0x0a, 0x1d,
	0x45, 0x58, 0x49, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x12,
	0x1f, 0x0a, 0x1b, 0x45, 0x58, 0x49, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x44, 0x10, 0x04,
	0x1a, 0x04, 0x88, 0xa3, 0x1e, 0x00, 0x42, 0xdd, 0x01, 0x0a, 0x1a, 0x63, 0x6f, 0x6d, 0x2e, 0x6e,
	0x6f, 0x62, 0x6c, 0x65, 0x2e, 0x64, 0x6f, 0x6c, 0x6c, 0x61, 0x72, 0x2e, 0x76, 0x61, 0x75, 0x6c,
	0x74, 0x73, 0x2e, 0x76, 0x32, 0x42, 0x0b, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x50, 0x01, 0x5a, 0x37, 0x64, 0x6f, 0x6c, 0x6c, 0x61, 0x72, 0x2e, 0x6e, 0x6f, 0x62,
	0x6c, 0x65, 0x2e, 0x78, 0x79, 0x7a, 0x2f, 0x76, 0x32, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6e, 0x6f,
	0x62, 0x6c, 0x65, 0x2f, 0x64, 0x6f, 0x6c, 0x6c, 0x61, 0x72, 0x2f, 0x76, 0x61, 0x75, 0x6c, 0x74,
	0x73, 0x2f, 0x76, 0x32, 0x3b, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x76, 0x32, 0xa2, 0x02, 0x03,
	0x4e, 0x44, 0x56, 0xaa, 0x02, 0x16, 0x4e, 0x6f, 0x62, 0x6c, 0x65, 0x2e, 0x44, 0x6f, 0x6c, 0x6c,
	0x61, 0x72, 0x2e, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x2e, 0x56, 0x32, 0xca, 0x02, 0x16, 0x4e,
	0x6f, 0x62, 0x6c, 0x65, 0x5c, 0x44, 0x6f, 0x6c, 0x6c, 0x61, 0x72, 0x5c, 0x56, 0x61, 0x75, 0x6c,
	0x74, 0x73, 0x5c, 0x56, 0x32, 0xe2, 0x02, 0x22, 0x4e, 0x6f, 0x62, 0x6c, 0x65, 0x5c, 0x44, 0x6f,
	0x6c, 0x6c, 0x61, 0x72, 0x5c, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x5c, 0x56, 0x32, 0x5c, 0x47,
	0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x19, 0x4e, 0x6f, 0x62,
	0x6c, 0x65, 0x3a, 0x3a, 0x44, 0x6f, 0x6c, 0x6c, 0x61, 0x72, 0x3a, 0x3a, 0x56, 0x61, 0x75, 0x6c,
	0x74, 0x73, 0x3a, 0x3a, 0x56, 0x32, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_noble_dollar_vaults_v2_vaults_proto_rawDescOnce sync.Once
	file_noble_dollar_vaults_v2_vaults_proto_rawDescData = file_noble_dollar_vaults_v2_vaults_proto_rawDesc
)

func file_noble_dollar_vaults_v2_vaults_proto_rawDescGZIP() []byte {
	file_noble_dollar_vaults_v2_vaults_proto_rawDescOnce.Do(func() {
		file_noble_dollar_vaults_v2_vaults_proto_rawDescData = protoimpl.X.CompressGZIP(file_noble_dollar_vaults_v2_vaults_proto_rawDescData)
	})
	return file_noble_dollar_vaults_v2_vaults_proto_rawDescData
}

var file_noble_dollar_vaults_v2_vaults_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_noble_dollar_vaults_v2_vaults_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_noble_dollar_vaults_v2_vaults_proto_goTypes = []interface{}{
	(ExitRequestStatus)(0),        // 0: noble.dollar.vaults.v2.ExitRequestStatus
	(*UserPosition)(nil),          // 1: noble.dollar.vaults.v2.UserPosition
	(*ExitRequest)(nil),           // 2: noble.dollar.vaults.v2.ExitRequest
	(*VaultState)(nil),            // 3: noble.dollar.vaults.v2.VaultState
	(*ShareCalculation)(nil),      // 4: noble.dollar.vaults.v2.ShareCalculation
	(*DepositResult)(nil),         // 5: noble.dollar.vaults.v2.DepositResult
	(*WithdrawalResult)(nil),      // 6: noble.dollar.vaults.v2.WithdrawalResult
	(*YieldDistribution)(nil),     // 7: noble.dollar.vaults.v2.YieldDistribution
	(*timestamppb.Timestamp)(nil), // 8: google.protobuf.Timestamp
	(v1.VaultType)(0),             // 9: noble.dollar.vaults.v1.VaultType
}
var file_noble_dollar_vaults_v2_vaults_proto_depIdxs = []int32{
	8, // 0: noble.dollar.vaults.v2.UserPosition.first_deposit_time:type_name -> google.protobuf.Timestamp
	8, // 1: noble.dollar.vaults.v2.UserPosition.last_activity_time:type_name -> google.protobuf.Timestamp
	8, // 2: noble.dollar.vaults.v2.ExitRequest.request_time:type_name -> google.protobuf.Timestamp
	8, // 3: noble.dollar.vaults.v2.ExitRequest.unlock_time:type_name -> google.protobuf.Timestamp
	0, // 4: noble.dollar.vaults.v2.ExitRequest.status:type_name -> noble.dollar.vaults.v2.ExitRequestStatus
	9, // 5: noble.dollar.vaults.v2.VaultState.vault_type:type_name -> noble.dollar.vaults.v1.VaultType
	8, // 6: noble.dollar.vaults.v2.VaultState.last_nav_update:type_name -> google.protobuf.Timestamp
	8, // 7: noble.dollar.vaults.v2.ShareCalculation.calculation_time:type_name -> google.protobuf.Timestamp
	8, // 8: noble.dollar.vaults.v2.YieldDistribution.distribution_time:type_name -> google.protobuf.Timestamp
	9, // [9:9] is the sub-list for method output_type
	9, // [9:9] is the sub-list for method input_type
	9, // [9:9] is the sub-list for extension type_name
	9, // [9:9] is the sub-list for extension extendee
	0, // [0:9] is the sub-list for field type_name
}

func init() { file_noble_dollar_vaults_v2_vaults_proto_init() }
func file_noble_dollar_vaults_v2_vaults_proto_init() {
	if File_noble_dollar_vaults_v2_vaults_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_noble_dollar_vaults_v2_vaults_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserPosition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_noble_dollar_vaults_v2_vaults_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_noble_dollar_vaults_v2_vaults_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VaultState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_noble_dollar_vaults_v2_vaults_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShareCalculation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_noble_dollar_vaults_v2_vaults_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DepositResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_noble_dollar_vaults_v2_vaults_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WithdrawalResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_noble_dollar_vaults_v2_vaults_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*YieldDistribution); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_noble_dollar_vaults_v2_vaults_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_noble_dollar_vaults_v2_vaults_proto_goTypes,
		DependencyIndexes: file_noble_dollar_vaults_v2_vaults_proto_depIdxs,
		EnumInfos:         file_noble_dollar_vaults_v2_vaults_proto_enumTypes,
		MessageInfos:      file_noble_dollar_vaults_v2_vaults_proto_msgTypes,
	}.Build()
	File_noble_dollar_vaults_v2_vaults_proto = out.File
	file_noble_dollar_vaults_v2_vaults_proto_rawDesc = nil
	file_noble_dollar_vaults_v2_vaults_proto_goTypes = nil
	file_noble_dollar_vaults_v2_vaults_proto_depIdxs = nil
}

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: noble/dollar/vaults/v2/query.proto

package vaultsv2

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Query_VaultInfo_FullMethodName          = "/noble.dollar.vaults.v2.Query/VaultInfo"
	Query_AllVaults_FullMethodName          = "/noble.dollar.vaults.v2.Query/AllVaults"
	Query_UserPosition_FullMethodName       = "/noble.dollar.vaults.v2.Query/UserPosition"
	Query_UserPositions_FullMethodName      = "/noble.dollar.vaults.v2.Query/UserPositions"
	Query_SharePrice_FullMethodName         = "/noble.dollar.vaults.v2.Query/SharePrice"
	Query_NAVInfo_FullMethodName            = "/noble.dollar.vaults.v2.Query/NAVInfo"
	Query_CrossChainRoutes_FullMethodName   = "/noble.dollar.vaults.v2.Query/CrossChainRoutes"
	Query_CrossChainRoute_FullMethodName    = "/noble.dollar.vaults.v2.Query/CrossChainRoute"
	Query_RemotePosition_FullMethodName     = "/noble.dollar.vaults.v2.Query/RemotePosition"
	Query_RemotePositions_FullMethodName    = "/noble.dollar.vaults.v2.Query/RemotePositions"
	Query_InFlightPosition_FullMethodName   = "/noble.dollar.vaults.v2.Query/InFlightPosition"
	Query_InFlightPositions_FullMethodName  = "/noble.dollar.vaults.v2.Query/InFlightPositions"
	Query_CrossChainSnapshot_FullMethodName = "/noble.dollar.vaults.v2.Query/CrossChainSnapshot"
	Query_DriftAlerts_FullMethodName        = "/noble.dollar.vaults.v2.Query/DriftAlerts"
	Query_DepositPreview_FullMethodName     = "/noble.dollar.vaults.v2.Query/DepositPreview"
	Query_WithdrawalPreview_FullMethodName  = "/noble.dollar.vaults.v2.Query/WithdrawalPreview"
	Query_ExitQueue_FullMethodName          = "/noble.dollar.vaults.v2.Query/ExitQueue"
	Query_UserExitRequests_FullMethodName   = "/noble.dollar.vaults.v2.Query/UserExitRequests"
	Query_FeeInfo_FullMethodName            = "/noble.dollar.vaults.v2.Query/FeeInfo"
	Query_Stats_FullMethodName              = "/noble.dollar.vaults.v2.Query/Stats"
	Query_AllStats_FullMethodName           = "/noble.dollar.vaults.v2.Query/AllStats"
	Query_Params_FullMethodName             = "/noble.dollar.vaults.v2.Query/Params"
)

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Query defines the gRPC querier service for V2 vaults
type QueryClient interface {
	// VaultInfo returns configuration and state for a specific vault type
	VaultInfo(ctx context.Context, in *QueryVaultInfoRequest, opts ...grpc.CallOption) (*QueryVaultInfoResponse, error)
	// AllVaults returns information for all vault types
	AllVaults(ctx context.Context, in *QueryAllVaultsRequest, opts ...grpc.CallOption) (*QueryAllVaultsResponse, error)
	// UserPosition returns a user's position in a specific vault
	UserPosition(ctx context.Context, in *QueryUserPositionRequest, opts ...grpc.CallOption) (*QueryUserPositionResponse, error)
	// UserPositions returns all of a user's positions across vault types
	UserPositions(ctx context.Context, in *QueryUserPositionsRequest, opts ...grpc.CallOption) (*QueryUserPositionsResponse, error)
	// SharePrice returns the current share price for a vault type
	SharePrice(ctx context.Context, in *QuerySharePriceRequest, opts ...grpc.CallOption) (*QuerySharePriceResponse, error)
	// NAVInfo returns NAV information for a vault type
	NAVInfo(ctx context.Context, in *QueryNAVInfoRequest, opts ...grpc.CallOption) (*QueryNAVInfoResponse, error)
	// CrossChainRoutes returns all available cross-chain routes
	CrossChainRoutes(ctx context.Context, in *QueryCrossChainRoutesRequest, opts ...grpc.CallOption) (*QueryCrossChainRoutesResponse, error)
	// CrossChainRoute returns information for a specific route
	CrossChainRoute(ctx context.Context, in *QueryCrossChainRouteRequest, opts ...grpc.CallOption) (*QueryCrossChainRouteResponse, error)
	// RemotePosition returns a user's remote position on a specific route
	RemotePosition(ctx context.Context, in *QueryRemotePositionRequest, opts ...grpc.CallOption) (*QueryRemotePositionResponse, error)
	// RemotePositions returns all remote positions for a user
	RemotePositions(ctx context.Context, in *QueryRemotePositionsRequest, opts ...grpc.CallOption) (*QueryRemotePositionsResponse, error)
	// InFlightPosition returns information about an in-flight operation
	InFlightPosition(ctx context.Context, in *QueryInFlightPositionRequest, opts ...grpc.CallOption) (*QueryInFlightPositionResponse, error)
	// InFlightPositions returns all in-flight operations for a user
	InFlightPositions(ctx context.Context, in *QueryInFlightPositionsRequest, opts ...grpc.CallOption) (*QueryInFlightPositionsResponse, error)
	// CrossChainSnapshot returns cross-chain position snapshot for a vault
	CrossChainSnapshot(ctx context.Context, in *QueryCrossChainSnapshotRequest, opts ...grpc.CallOption) (*QueryCrossChainSnapshotResponse, error)
	// DriftAlerts returns drift alerts for a user or route
	DriftAlerts(ctx context.Context, in *QueryDriftAlertsRequest, opts ...grpc.CallOption) (*QueryDriftAlertsResponse, error)
	// DepositPreview shows what a user would receive for a deposit
	DepositPreview(ctx context.Context, in *QueryDepositPreviewRequest, opts ...grpc.CallOption) (*QueryDepositPreviewResponse, error)
	// WithdrawalPreview shows what a user would receive for a withdrawal
	WithdrawalPreview(ctx context.Context, in *QueryWithdrawalPreviewRequest, opts ...grpc.CallOption) (*QueryWithdrawalPreviewResponse, error)
	// ExitQueue returns pending exit requests for a vault type
	ExitQueue(ctx context.Context, in *QueryExitQueueRequest, opts ...grpc.CallOption) (*QueryExitQueueResponse, error)
	// UserExitRequests returns a user's pending exit requests
	UserExitRequests(ctx context.Context, in *QueryUserExitRequestsRequest, opts ...grpc.CallOption) (*QueryUserExitRequestsResponse, error)
	// FeeInfo returns fee configuration for a vault type
	FeeInfo(ctx context.Context, in *QueryFeeInfoRequest, opts ...grpc.CallOption) (*QueryFeeInfoResponse, error)
	// Stats returns statistics for a vault type
	Stats(ctx context.Context, in *QueryStatsRequest, opts ...grpc.CallOption) (*QueryStatsResponse, error)
	// AllStats returns statistics for all vault types
	AllStats(ctx context.Context, in *QueryAllStatsRequest, opts ...grpc.CallOption) (*QueryAllStatsResponse, error)
	// Params returns the module parameters
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
}

type queryClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryClient(cc grpc.ClientConnInterface) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) VaultInfo(ctx context.Context, in *QueryVaultInfoRequest, opts ...grpc.CallOption) (*QueryVaultInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryVaultInfoResponse)
	err := c.cc.Invoke(ctx, Query_VaultInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AllVaults(ctx context.Context, in *QueryAllVaultsRequest, opts ...grpc.CallOption) (*QueryAllVaultsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryAllVaultsResponse)
	err := c.cc.Invoke(ctx, Query_AllVaults_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) UserPosition(ctx context.Context, in *QueryUserPositionRequest, opts ...grpc.CallOption) (*QueryUserPositionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryUserPositionResponse)
	err := c.cc.Invoke(ctx, Query_UserPosition_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) UserPositions(ctx context.Context, in *QueryUserPositionsRequest, opts ...grpc.CallOption) (*QueryUserPositionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryUserPositionsResponse)
	err := c.cc.Invoke(ctx, Query_UserPositions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SharePrice(ctx context.Context, in *QuerySharePriceRequest, opts ...grpc.CallOption) (*QuerySharePriceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QuerySharePriceResponse)
	err := c.cc.Invoke(ctx, Query_SharePrice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) NAVInfo(ctx context.Context, in *QueryNAVInfoRequest, opts ...grpc.CallOption) (*QueryNAVInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryNAVInfoResponse)
	err := c.cc.Invoke(ctx, Query_NAVInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CrossChainRoutes(ctx context.Context, in *QueryCrossChainRoutesRequest, opts ...grpc.CallOption) (*QueryCrossChainRoutesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryCrossChainRoutesResponse)
	err := c.cc.Invoke(ctx, Query_CrossChainRoutes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CrossChainRoute(ctx context.Context, in *QueryCrossChainRouteRequest, opts ...grpc.CallOption) (*QueryCrossChainRouteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryCrossChainRouteResponse)
	err := c.cc.Invoke(ctx, Query_CrossChainRoute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RemotePosition(ctx context.Context, in *QueryRemotePositionRequest, opts ...grpc.CallOption) (*QueryRemotePositionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryRemotePositionResponse)
	err := c.cc.Invoke(ctx, Query_RemotePosition_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RemotePositions(ctx context.Context, in *QueryRemotePositionsRequest, opts ...grpc.CallOption) (*QueryRemotePositionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryRemotePositionsResponse)
	err := c.cc.Invoke(ctx, Query_RemotePositions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) InFlightPosition(ctx context.Context, in *QueryInFlightPositionRequest, opts ...grpc.CallOption) (*QueryInFlightPositionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryInFlightPositionResponse)
	err := c.cc.Invoke(ctx, Query_InFlightPosition_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) InFlightPositions(ctx context.Context, in *QueryInFlightPositionsRequest, opts ...grpc.CallOption) (*QueryInFlightPositionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryInFlightPositionsResponse)
	err := c.cc.Invoke(ctx, Query_InFlightPositions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CrossChainSnapshot(ctx context.Context, in *QueryCrossChainSnapshotRequest, opts ...grpc.CallOption) (*QueryCrossChainSnapshotResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryCrossChainSnapshotResponse)
	err := c.cc.Invoke(ctx, Query_CrossChainSnapshot_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DriftAlerts(ctx context.Context, in *QueryDriftAlertsRequest, opts ...grpc.CallOption) (*QueryDriftAlertsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryDriftAlertsResponse)
	err := c.cc.Invoke(ctx, Query_DriftAlerts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DepositPreview(ctx context.Context, in *QueryDepositPreviewRequest, opts ...grpc.CallOption) (*QueryDepositPreviewResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryDepositPreviewResponse)
	err := c.cc.Invoke(ctx, Query_DepositPreview_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) WithdrawalPreview(ctx context.Context, in *QueryWithdrawalPreviewRequest, opts ...grpc.CallOption) (*QueryWithdrawalPreviewResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryWithdrawalPreviewResponse)
	err := c.cc.Invoke(ctx, Query_WithdrawalPreview_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ExitQueue(ctx context.Context, in *QueryExitQueueRequest, opts ...grpc.CallOption) (*QueryExitQueueResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryExitQueueResponse)
	err := c.cc.Invoke(ctx, Query_ExitQueue_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) UserExitRequests(ctx context.Context, in *QueryUserExitRequestsRequest, opts ...grpc.CallOption) (*QueryUserExitRequestsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryUserExitRequestsResponse)
	err := c.cc.Invoke(ctx, Query_UserExitRequests_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) FeeInfo(ctx context.Context, in *QueryFeeInfoRequest, opts ...grpc.CallOption) (*QueryFeeInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryFeeInfoResponse)
	err := c.cc.Invoke(ctx, Query_FeeInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Stats(ctx context.Context, in *QueryStatsRequest, opts ...grpc.CallOption) (*QueryStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryStatsResponse)
	err := c.cc.Invoke(ctx, Query_Stats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AllStats(ctx context.Context, in *QueryAllStatsRequest, opts ...grpc.CallOption) (*QueryAllStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryAllStatsResponse)
	err := c.cc.Invoke(ctx, Query_AllStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, Query_Params_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
// All implementations must embed UnimplementedQueryServer
// for forward compatibility.
//
// Query defines the gRPC querier service for V2 vaults
type QueryServer interface {
	// VaultInfo returns configuration and state for a specific vault type
	VaultInfo(context.Context, *QueryVaultInfoRequest) (*QueryVaultInfoResponse, error)
	// AllVaults returns information for all vault types
	AllVaults(context.Context, *QueryAllVaultsRequest) (*QueryAllVaultsResponse, error)
	// UserPosition returns a user's position in a specific vault
	UserPosition(context.Context, *QueryUserPositionRequest) (*QueryUserPositionResponse, error)
	// UserPositions returns all of a user's positions across vault types
	UserPositions(context.Context, *QueryUserPositionsRequest) (*QueryUserPositionsResponse, error)
	// SharePrice returns the current share price for a vault type
	SharePrice(context.Context, *QuerySharePriceRequest) (*QuerySharePriceResponse, error)
	// NAVInfo returns NAV information for a vault type
	NAVInfo(context.Context, *QueryNAVInfoRequest) (*QueryNAVInfoResponse, error)
	// CrossChainRoutes returns all available cross-chain routes
	CrossChainRoutes(context.Context, *QueryCrossChainRoutesRequest) (*QueryCrossChainRoutesResponse, error)
	// CrossChainRoute returns information for a specific route
	CrossChainRoute(context.Context, *QueryCrossChainRouteRequest) (*QueryCrossChainRouteResponse, error)
	// RemotePosition returns a user's remote position on a specific route
	RemotePosition(context.Context, *QueryRemotePositionRequest) (*QueryRemotePositionResponse, error)
	// RemotePositions returns all remote positions for a user
	RemotePositions(context.Context, *QueryRemotePositionsRequest) (*QueryRemotePositionsResponse, error)
	// InFlightPosition returns information about an in-flight operation
	InFlightPosition(context.Context, *QueryInFlightPositionRequest) (*QueryInFlightPositionResponse, error)
	// InFlightPositions returns all in-flight operations for a user
	InFlightPositions(context.Context, *QueryInFlightPositionsRequest) (*QueryInFlightPositionsResponse, error)
	// CrossChainSnapshot returns cross-chain position snapshot for a vault
	CrossChainSnapshot(context.Context, *QueryCrossChainSnapshotRequest) (*QueryCrossChainSnapshotResponse, error)
	// DriftAlerts returns drift alerts for a user or route
	DriftAlerts(context.Context, *QueryDriftAlertsRequest) (*QueryDriftAlertsResponse, error)
	// DepositPreview shows what a user would receive for a deposit
	DepositPreview(context.Context, *QueryDepositPreviewRequest) (*QueryDepositPreviewResponse, error)
	// WithdrawalPreview shows what a user would receive for a withdrawal
	WithdrawalPreview(context.Context, *QueryWithdrawalPreviewRequest) (*QueryWithdrawalPreviewResponse, error)
	// ExitQueue returns pending exit requests for a vault type
	ExitQueue(context.Context, *QueryExitQueueRequest) (*QueryExitQueueResponse, error)
	// UserExitRequests returns a user's pending exit requests
	UserExitRequests(context.Context, *QueryUserExitRequestsRequest) (*QueryUserExitRequestsResponse, error)
	// FeeInfo returns fee configuration for a vault type
	FeeInfo(context.Context, *QueryFeeInfoRequest) (*QueryFeeInfoResponse, error)
	// Stats returns statistics for a vault type
	Stats(context.Context, *QueryStatsRequest) (*QueryStatsResponse, error)
	// AllStats returns statistics for all vault types
	AllStats(context.Context, *QueryAllStatsRequest) (*QueryAllStatsResponse, error)
	// Params returns the module parameters
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	mustEmbedUnimplementedQueryServer()
}

// UnimplementedQueryServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedQueryServer struct{}

func (UnimplementedQueryServer) VaultInfo(context.Context, *QueryVaultInfoRequest) (*QueryVaultInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VaultInfo not implemented")
}
func (UnimplementedQueryServer) AllVaults(context.Context, *QueryAllVaultsRequest) (*QueryAllVaultsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllVaults not implemented")
}
func (UnimplementedQueryServer) UserPosition(context.Context, *QueryUserPositionRequest) (*QueryUserPositionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserPosition not implemented")
}
func (UnimplementedQueryServer) UserPositions(context.Context, *QueryUserPositionsRequest) (*QueryUserPositionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserPositions not implemented")
}
func (UnimplementedQueryServer) SharePrice(context.Context, *QuerySharePriceRequest) (*QuerySharePriceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SharePrice not implemented")
}
func (UnimplementedQueryServer) NAVInfo(context.Context, *QueryNAVInfoRequest) (*QueryNAVInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NAVInfo not implemented")
}
func (UnimplementedQueryServer) CrossChainRoutes(context.Context, *QueryCrossChainRoutesRequest) (*QueryCrossChainRoutesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CrossChainRoutes not implemented")
}
func (UnimplementedQueryServer) CrossChainRoute(context.Context, *QueryCrossChainRouteRequest) (*QueryCrossChainRouteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CrossChainRoute not implemented")
}
func (UnimplementedQueryServer) RemotePosition(context.Context, *QueryRemotePositionRequest) (*QueryRemotePositionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemotePosition not implemented")
}
func (UnimplementedQueryServer) RemotePositions(context.Context, *QueryRemotePositionsRequest) (*QueryRemotePositionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemotePositions not implemented")
}
func (UnimplementedQueryServer) InFlightPosition(context.Context, *QueryInFlightPositionRequest) (*QueryInFlightPositionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InFlightPosition not implemented")
}
func (UnimplementedQueryServer) InFlightPositions(context.Context, *QueryInFlightPositionsRequest) (*QueryInFlightPositionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InFlightPositions not implemented")
}
func (UnimplementedQueryServer) CrossChainSnapshot(context.Context, *QueryCrossChainSnapshotRequest) (*QueryCrossChainSnapshotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CrossChainSnapshot not implemented")
}
func (UnimplementedQueryServer) DriftAlerts(context.Context, *QueryDriftAlertsRequest) (*QueryDriftAlertsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DriftAlerts not implemented")
}
func (UnimplementedQueryServer) DepositPreview(context.Context, *QueryDepositPreviewRequest) (*QueryDepositPreviewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DepositPreview not implemented")
}
func (UnimplementedQueryServer) WithdrawalPreview(context.Context, *QueryWithdrawalPreviewRequest) (*QueryWithdrawalPreviewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WithdrawalPreview not implemented")
}
func (UnimplementedQueryServer) ExitQueue(context.Context, *QueryExitQueueRequest) (*QueryExitQueueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExitQueue not implemented")
}
func (UnimplementedQueryServer) UserExitRequests(context.Context, *QueryUserExitRequestsRequest) (*QueryUserExitRequestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserExitRequests not implemented")
}
func (UnimplementedQueryServer) FeeInfo(context.Context, *QueryFeeInfoRequest) (*QueryFeeInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FeeInfo not implemented")
}
func (UnimplementedQueryServer) Stats(context.Context, *QueryStatsRequest) (*QueryStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stats not implemented")
}
func (UnimplementedQueryServer) AllStats(context.Context, *QueryAllStatsRequest) (*QueryAllStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllStats not implemented")
}
func (UnimplementedQueryServer) Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (UnimplementedQueryServer) mustEmbedUnimplementedQueryServer() {}
func (UnimplementedQueryServer) testEmbeddedByValue()               {}

// UnsafeQueryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryServer will
// result in compilation errors.
type UnsafeQueryServer interface {
	mustEmbedUnimplementedQueryServer()
}

func RegisterQueryServer(s grpc.ServiceRegistrar, srv QueryServer) {
	// If the following call pancis, it indicates UnimplementedQueryServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Query_ServiceDesc, srv)
}

func _Query_VaultInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryVaultInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).VaultInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_VaultInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).VaultInfo(ctx, req.(*QueryVaultInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AllVaults_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllVaultsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AllVaults(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_AllVaults_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AllVaults(ctx, req.(*QueryAllVaultsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_UserPosition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryUserPositionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).UserPosition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_UserPosition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).UserPosition(ctx, req.(*QueryUserPositionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_UserPositions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryUserPositionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).UserPositions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_UserPositions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).UserPositions(ctx, req.(*QueryUserPositionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SharePrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySharePriceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SharePrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_SharePrice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SharePrice(ctx, req.(*QuerySharePriceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_NAVInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryNAVInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).NAVInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_NAVInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).NAVInfo(ctx, req.(*QueryNAVInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CrossChainRoutes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCrossChainRoutesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CrossChainRoutes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_CrossChainRoutes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CrossChainRoutes(ctx, req.(*QueryCrossChainRoutesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CrossChainRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCrossChainRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CrossChainRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_CrossChainRoute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CrossChainRoute(ctx, req.(*QueryCrossChainRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RemotePosition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRemotePositionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RemotePosition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_RemotePosition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RemotePosition(ctx, req.(*QueryRemotePositionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RemotePositions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRemotePositionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RemotePositions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_RemotePositions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RemotePositions(ctx, req.(*QueryRemotePositionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_InFlightPosition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryInFlightPositionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).InFlightPosition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_InFlightPosition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).InFlightPosition(ctx, req.(*QueryInFlightPositionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_InFlightPositions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryInFlightPositionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).InFlightPositions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_InFlightPositions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).InFlightPositions(ctx, req.(*QueryInFlightPositionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CrossChainSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCrossChainSnapshotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CrossChainSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_CrossChainSnapshot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CrossChainSnapshot(ctx, req.(*QueryCrossChainSnapshotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DriftAlerts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDriftAlertsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DriftAlerts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_DriftAlerts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DriftAlerts(ctx, req.(*QueryDriftAlertsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DepositPreview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDepositPreviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DepositPreview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_DepositPreview_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DepositPreview(ctx, req.(*QueryDepositPreviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_WithdrawalPreview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryWithdrawalPreviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).WithdrawalPreview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_WithdrawalPreview_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).WithdrawalPreview(ctx, req.(*QueryWithdrawalPreviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ExitQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryExitQueueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ExitQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_ExitQueue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ExitQueue(ctx, req.(*QueryExitQueueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_UserExitRequests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryUserExitRequestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).UserExitRequests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_UserExitRequests_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).UserExitRequests(ctx, req.(*QueryUserExitRequestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_FeeInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryFeeInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).FeeInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_FeeInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).FeeInfo(ctx, req.(*QueryFeeInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Stats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Stats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Stats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Stats(ctx, req.(*QueryStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AllStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AllStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_AllStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AllStats(ctx, req.(*QueryAllStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Params_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Query_ServiceDesc is the grpc.ServiceDesc for Query service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Query_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "noble.dollar.vaults.v2.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "VaultInfo",
			Handler:    _Query_VaultInfo_Handler,
		},
		{
			MethodName: "AllVaults",
			Handler:    _Query_AllVaults_Handler,
		},
		{
			MethodName: "UserPosition",
			Handler:    _Query_UserPosition_Handler,
		},
		{
			MethodName: "UserPositions",
			Handler:    _Query_UserPositions_Handler,
		},
		{
			MethodName: "SharePrice",
			Handler:    _Query_SharePrice_Handler,
		},
		{
			MethodName: "NAVInfo",
			Handler:    _Query_NAVInfo_Handler,
		},
		{
			MethodName: "CrossChainRoutes",
			Handler:    _Query_CrossChainRoutes_Handler,
		},
		{
			MethodName: "CrossChainRoute",
			Handler:    _Query_CrossChainRoute_Handler,
		},
		{
			MethodName: "RemotePosition",
			Handler:    _Query_RemotePosition_Handler,
		},
		{
			MethodName: "RemotePositions",
			Handler:    _Query_RemotePositions_Handler,
		},
		{
			MethodName: "InFlightPosition",
			Handler:    _Query_InFlightPosition_Handler,
		},
		{
			MethodName: "InFlightPositions",
			Handler:    _Query_InFlightPositions_Handler,
		},
		{
			MethodName: "CrossChainSnapshot",
			Handler:    _Query_CrossChainSnapshot_Handler,
		},
		{
			MethodName: "DriftAlerts",
			Handler:    _Query_DriftAlerts_Handler,
		},
		{
			MethodName: "DepositPreview",
			Handler:    _Query_DepositPreview_Handler,
		},
		{
			MethodName: "WithdrawalPreview",
			Handler:    _Query_WithdrawalPreview_Handler,
		},
		{
			MethodName: "ExitQueue",
			Handler:    _Query_ExitQueue_Handler,
		},
		{
			MethodName: "UserExitRequests",
			Handler:    _Query_UserExitRequests_Handler,
		},
		{
			MethodName: "FeeInfo",
			Handler:    _Query_FeeInfo_Handler,
		},
		{
			MethodName: "Stats",
			Handler:    _Query_Stats_Handler,
		},
		{
			MethodName: "AllStats",
			Handler:    _Query_AllStats_Handler,
		},
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "noble/dollar/vaults/v2/query.proto",
}

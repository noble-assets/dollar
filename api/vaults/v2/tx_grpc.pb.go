// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: noble/dollar/vaults/v2/tx.proto

package vaultsv2

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Msg_Deposit_FullMethodName            = "/noble.dollar.vaults.v2.Msg/Deposit"
	Msg_Withdraw_FullMethodName           = "/noble.dollar.vaults.v2.Msg/Withdraw"
	Msg_RequestExit_FullMethodName        = "/noble.dollar.vaults.v2.Msg/RequestExit"
	Msg_CancelExit_FullMethodName         = "/noble.dollar.vaults.v2.Msg/CancelExit"
	Msg_SetYieldPreference_FullMethodName = "/noble.dollar.vaults.v2.Msg/SetYieldPreference"
	Msg_ProcessExitQueue_FullMethodName   = "/noble.dollar.vaults.v2.Msg/ProcessExitQueue"
	Msg_UpdateNAV_FullMethodName          = "/noble.dollar.vaults.v2.Msg/UpdateNAV"
	Msg_UpdateVaultConfig_FullMethodName  = "/noble.dollar.vaults.v2.Msg/UpdateVaultConfig"
	Msg_UpdateParams_FullMethodName       = "/noble.dollar.vaults.v2.Msg/UpdateParams"
)

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Msg defines the V2 vaults transaction service
type MsgClient interface {
	// Deposit into a V2 vault
	Deposit(ctx context.Context, in *MsgDeposit, opts ...grpc.CallOption) (*MsgDepositResponse, error)
	// Withdraw from a V2 vault (flexible vaults only)
	Withdraw(ctx context.Context, in *MsgWithdraw, opts ...grpc.CallOption) (*MsgWithdrawResponse, error)
	// Request exit from a staked vault
	RequestExit(ctx context.Context, in *MsgRequestExit, opts ...grpc.CallOption) (*MsgRequestExitResponse, error)
	// Cancel a pending exit request
	CancelExit(ctx context.Context, in *MsgCancelExit, opts ...grpc.CallOption) (*MsgCancelExitResponse, error)
	// Set yield preference for a user's position
	SetYieldPreference(ctx context.Context, in *MsgSetYieldPreference, opts ...grpc.CallOption) (*MsgSetYieldPreferenceResponse, error)
	// Process exit queue (admin only)
	ProcessExitQueue(ctx context.Context, in *MsgProcessExitQueue, opts ...grpc.CallOption) (*MsgProcessExitQueueResponse, error)
	// Update NAV for a vault (authority only)
	UpdateNAV(ctx context.Context, in *MsgUpdateNAV, opts ...grpc.CallOption) (*MsgUpdateNAVResponse, error)
	// Update vault configuration (authority only)
	UpdateVaultConfig(ctx context.Context, in *MsgUpdateVaultConfig, opts ...grpc.CallOption) (*MsgUpdateVaultConfigResponse, error)
	// Update module parameters (authority only)
	UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
}

type msgClient struct {
	cc grpc.ClientConnInterface
}

func NewMsgClient(cc grpc.ClientConnInterface) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) Deposit(ctx context.Context, in *MsgDeposit, opts ...grpc.CallOption) (*MsgDepositResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MsgDepositResponse)
	err := c.cc.Invoke(ctx, Msg_Deposit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) Withdraw(ctx context.Context, in *MsgWithdraw, opts ...grpc.CallOption) (*MsgWithdrawResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MsgWithdrawResponse)
	err := c.cc.Invoke(ctx, Msg_Withdraw_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RequestExit(ctx context.Context, in *MsgRequestExit, opts ...grpc.CallOption) (*MsgRequestExitResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MsgRequestExitResponse)
	err := c.cc.Invoke(ctx, Msg_RequestExit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CancelExit(ctx context.Context, in *MsgCancelExit, opts ...grpc.CallOption) (*MsgCancelExitResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MsgCancelExitResponse)
	err := c.cc.Invoke(ctx, Msg_CancelExit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SetYieldPreference(ctx context.Context, in *MsgSetYieldPreference, opts ...grpc.CallOption) (*MsgSetYieldPreferenceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MsgSetYieldPreferenceResponse)
	err := c.cc.Invoke(ctx, Msg_SetYieldPreference_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ProcessExitQueue(ctx context.Context, in *MsgProcessExitQueue, opts ...grpc.CallOption) (*MsgProcessExitQueueResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MsgProcessExitQueueResponse)
	err := c.cc.Invoke(ctx, Msg_ProcessExitQueue_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateNAV(ctx context.Context, in *MsgUpdateNAV, opts ...grpc.CallOption) (*MsgUpdateNAVResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MsgUpdateNAVResponse)
	err := c.cc.Invoke(ctx, Msg_UpdateNAV_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateVaultConfig(ctx context.Context, in *MsgUpdateVaultConfig, opts ...grpc.CallOption) (*MsgUpdateVaultConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MsgUpdateVaultConfigResponse)
	err := c.cc.Invoke(ctx, Msg_UpdateVaultConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, Msg_UpdateParams_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
// All implementations must embed UnimplementedMsgServer
// for forward compatibility.
//
// Msg defines the V2 vaults transaction service
type MsgServer interface {
	// Deposit into a V2 vault
	Deposit(context.Context, *MsgDeposit) (*MsgDepositResponse, error)
	// Withdraw from a V2 vault (flexible vaults only)
	Withdraw(context.Context, *MsgWithdraw) (*MsgWithdrawResponse, error)
	// Request exit from a staked vault
	RequestExit(context.Context, *MsgRequestExit) (*MsgRequestExitResponse, error)
	// Cancel a pending exit request
	CancelExit(context.Context, *MsgCancelExit) (*MsgCancelExitResponse, error)
	// Set yield preference for a user's position
	SetYieldPreference(context.Context, *MsgSetYieldPreference) (*MsgSetYieldPreferenceResponse, error)
	// Process exit queue (admin only)
	ProcessExitQueue(context.Context, *MsgProcessExitQueue) (*MsgProcessExitQueueResponse, error)
	// Update NAV for a vault (authority only)
	UpdateNAV(context.Context, *MsgUpdateNAV) (*MsgUpdateNAVResponse, error)
	// Update vault configuration (authority only)
	UpdateVaultConfig(context.Context, *MsgUpdateVaultConfig) (*MsgUpdateVaultConfigResponse, error)
	// Update module parameters (authority only)
	UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error)
	mustEmbedUnimplementedMsgServer()
}

// UnimplementedMsgServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMsgServer struct{}

func (UnimplementedMsgServer) Deposit(context.Context, *MsgDeposit) (*MsgDepositResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Deposit not implemented")
}
func (UnimplementedMsgServer) Withdraw(context.Context, *MsgWithdraw) (*MsgWithdrawResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Withdraw not implemented")
}
func (UnimplementedMsgServer) RequestExit(context.Context, *MsgRequestExit) (*MsgRequestExitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestExit not implemented")
}
func (UnimplementedMsgServer) CancelExit(context.Context, *MsgCancelExit) (*MsgCancelExitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelExit not implemented")
}
func (UnimplementedMsgServer) SetYieldPreference(context.Context, *MsgSetYieldPreference) (*MsgSetYieldPreferenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetYieldPreference not implemented")
}
func (UnimplementedMsgServer) ProcessExitQueue(context.Context, *MsgProcessExitQueue) (*MsgProcessExitQueueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessExitQueue not implemented")
}
func (UnimplementedMsgServer) UpdateNAV(context.Context, *MsgUpdateNAV) (*MsgUpdateNAVResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNAV not implemented")
}
func (UnimplementedMsgServer) UpdateVaultConfig(context.Context, *MsgUpdateVaultConfig) (*MsgUpdateVaultConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVaultConfig not implemented")
}
func (UnimplementedMsgServer) UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateParams not implemented")
}
func (UnimplementedMsgServer) mustEmbedUnimplementedMsgServer() {}
func (UnimplementedMsgServer) testEmbeddedByValue()             {}

// UnsafeMsgServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MsgServer will
// result in compilation errors.
type UnsafeMsgServer interface {
	mustEmbedUnimplementedMsgServer()
}

func RegisterMsgServer(s grpc.ServiceRegistrar, srv MsgServer) {
	// If the following call pancis, it indicates UnimplementedMsgServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Msg_ServiceDesc, srv)
}

func _Msg_Deposit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDeposit)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Deposit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_Deposit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Deposit(ctx, req.(*MsgDeposit))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_Withdraw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgWithdraw)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Withdraw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_Withdraw_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Withdraw(ctx, req.(*MsgWithdraw))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RequestExit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRequestExit)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RequestExit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_RequestExit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RequestExit(ctx, req.(*MsgRequestExit))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CancelExit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCancelExit)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CancelExit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_CancelExit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CancelExit(ctx, req.(*MsgCancelExit))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SetYieldPreference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSetYieldPreference)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetYieldPreference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_SetYieldPreference_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetYieldPreference(ctx, req.(*MsgSetYieldPreference))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ProcessExitQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgProcessExitQueue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ProcessExitQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_ProcessExitQueue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ProcessExitQueue(ctx, req.(*MsgProcessExitQueue))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateNAV_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateNAV)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateNAV(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateNAV_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateNAV(ctx, req.(*MsgUpdateNAV))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateVaultConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateVaultConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateVaultConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateVaultConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateVaultConfig(ctx, req.(*MsgUpdateVaultConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateParams_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateParams(ctx, req.(*MsgUpdateParams))
	}
	return interceptor(ctx, in, info, handler)
}

// Msg_ServiceDesc is the grpc.ServiceDesc for Msg service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Msg_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "noble.dollar.vaults.v2.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Deposit",
			Handler:    _Msg_Deposit_Handler,
		},
		{
			MethodName: "Withdraw",
			Handler:    _Msg_Withdraw_Handler,
		},
		{
			MethodName: "RequestExit",
			Handler:    _Msg_RequestExit_Handler,
		},
		{
			MethodName: "CancelExit",
			Handler:    _Msg_CancelExit_Handler,
		},
		{
			MethodName: "SetYieldPreference",
			Handler:    _Msg_SetYieldPreference_Handler,
		},
		{
			MethodName: "ProcessExitQueue",
			Handler:    _Msg_ProcessExitQueue_Handler,
		},
		{
			MethodName: "UpdateNAV",
			Handler:    _Msg_UpdateNAV_Handler,
		},
		{
			MethodName: "UpdateVaultConfig",
			Handler:    _Msg_UpdateVaultConfig_Handler,
		},
		{
			MethodName: "UpdateParams",
			Handler:    _Msg_UpdateParams_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "noble/dollar/vaults/v2/tx.proto",
}

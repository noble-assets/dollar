// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: noble/dollar/v2/query.proto

package dollarv2

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Query_Stats_FullMethodName           = "/noble.dollar.v2.Query/Stats"
	Query_YieldRecipients_FullMethodName = "/noble.dollar.v2.Query/YieldRecipients"
	Query_YieldRecipient_FullMethodName  = "/noble.dollar.v2.Query/YieldRecipient"
	Query_RetryAmounts_FullMethodName    = "/noble.dollar.v2.Query/RetryAmounts"
	Query_RetryAmount_FullMethodName     = "/noble.dollar.v2.Query/RetryAmount"
)

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueryClient interface {
	Stats(ctx context.Context, in *QueryStats, opts ...grpc.CallOption) (*QueryStatsResponse, error)
	YieldRecipients(ctx context.Context, in *QueryYieldRecipients, opts ...grpc.CallOption) (*QueryYieldRecipientsResponse, error)
	YieldRecipient(ctx context.Context, in *QueryYieldRecipient, opts ...grpc.CallOption) (*QueryYieldRecipientResponse, error)
	RetryAmounts(ctx context.Context, in *QueryRetryAmounts, opts ...grpc.CallOption) (*QueryRetryAmountsResponse, error)
	RetryAmount(ctx context.Context, in *QueryRetryAmount, opts ...grpc.CallOption) (*QueryRetryAmountResponse, error)
}

type queryClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryClient(cc grpc.ClientConnInterface) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Stats(ctx context.Context, in *QueryStats, opts ...grpc.CallOption) (*QueryStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryStatsResponse)
	err := c.cc.Invoke(ctx, Query_Stats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) YieldRecipients(ctx context.Context, in *QueryYieldRecipients, opts ...grpc.CallOption) (*QueryYieldRecipientsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryYieldRecipientsResponse)
	err := c.cc.Invoke(ctx, Query_YieldRecipients_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) YieldRecipient(ctx context.Context, in *QueryYieldRecipient, opts ...grpc.CallOption) (*QueryYieldRecipientResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryYieldRecipientResponse)
	err := c.cc.Invoke(ctx, Query_YieldRecipient_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RetryAmounts(ctx context.Context, in *QueryRetryAmounts, opts ...grpc.CallOption) (*QueryRetryAmountsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryRetryAmountsResponse)
	err := c.cc.Invoke(ctx, Query_RetryAmounts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RetryAmount(ctx context.Context, in *QueryRetryAmount, opts ...grpc.CallOption) (*QueryRetryAmountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryRetryAmountResponse)
	err := c.cc.Invoke(ctx, Query_RetryAmount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
// All implementations must embed UnimplementedQueryServer
// for forward compatibility.
type QueryServer interface {
	Stats(context.Context, *QueryStats) (*QueryStatsResponse, error)
	YieldRecipients(context.Context, *QueryYieldRecipients) (*QueryYieldRecipientsResponse, error)
	YieldRecipient(context.Context, *QueryYieldRecipient) (*QueryYieldRecipientResponse, error)
	RetryAmounts(context.Context, *QueryRetryAmounts) (*QueryRetryAmountsResponse, error)
	RetryAmount(context.Context, *QueryRetryAmount) (*QueryRetryAmountResponse, error)
	mustEmbedUnimplementedQueryServer()
}

// UnimplementedQueryServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedQueryServer struct{}

func (UnimplementedQueryServer) Stats(context.Context, *QueryStats) (*QueryStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stats not implemented")
}
func (UnimplementedQueryServer) YieldRecipients(context.Context, *QueryYieldRecipients) (*QueryYieldRecipientsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method YieldRecipients not implemented")
}
func (UnimplementedQueryServer) YieldRecipient(context.Context, *QueryYieldRecipient) (*QueryYieldRecipientResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method YieldRecipient not implemented")
}
func (UnimplementedQueryServer) RetryAmounts(context.Context, *QueryRetryAmounts) (*QueryRetryAmountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetryAmounts not implemented")
}
func (UnimplementedQueryServer) RetryAmount(context.Context, *QueryRetryAmount) (*QueryRetryAmountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetryAmount not implemented")
}
func (UnimplementedQueryServer) mustEmbedUnimplementedQueryServer() {}
func (UnimplementedQueryServer) testEmbeddedByValue()               {}

// UnsafeQueryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryServer will
// result in compilation errors.
type UnsafeQueryServer interface {
	mustEmbedUnimplementedQueryServer()
}

func RegisterQueryServer(s grpc.ServiceRegistrar, srv QueryServer) {
	// If the following call pancis, it indicates UnimplementedQueryServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Query_ServiceDesc, srv)
}

func _Query_Stats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryStats)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Stats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Stats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Stats(ctx, req.(*QueryStats))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_YieldRecipients_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryYieldRecipients)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).YieldRecipients(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_YieldRecipients_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).YieldRecipients(ctx, req.(*QueryYieldRecipients))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_YieldRecipient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryYieldRecipient)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).YieldRecipient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_YieldRecipient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).YieldRecipient(ctx, req.(*QueryYieldRecipient))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RetryAmounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRetryAmounts)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RetryAmounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_RetryAmounts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RetryAmounts(ctx, req.(*QueryRetryAmounts))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RetryAmount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRetryAmount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RetryAmount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_RetryAmount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RetryAmount(ctx, req.(*QueryRetryAmount))
	}
	return interceptor(ctx, in, info, handler)
}

// Query_ServiceDesc is the grpc.ServiceDesc for Query service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Query_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "noble.dollar.v2.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Stats",
			Handler:    _Query_Stats_Handler,
		},
		{
			MethodName: "YieldRecipients",
			Handler:    _Query_YieldRecipients_Handler,
		},
		{
			MethodName: "YieldRecipient",
			Handler:    _Query_YieldRecipient_Handler,
		},
		{
			MethodName: "RetryAmounts",
			Handler:    _Query_RetryAmounts_Handler,
		},
		{
			MethodName: "RetryAmount",
			Handler:    _Query_RetryAmount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "noble/dollar/v2/query.proto",
}

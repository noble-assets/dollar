// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: noble/dollar/v1/events.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Paused is an event emitted when the module pause
// state is changed to paused.
type Paused struct {
}

func (m *Paused) Reset()         { *m = Paused{} }
func (m *Paused) String() string { return proto.CompactTextString(m) }
func (*Paused) ProtoMessage()    {}
func (*Paused) Descriptor() ([]byte, []int) {
	return fileDescriptor_aa87d210ca37cf94, []int{0}
}
func (m *Paused) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Paused) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Paused.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Paused) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Paused.Merge(m, src)
}
func (m *Paused) XXX_Size() int {
	return m.Size()
}
func (m *Paused) XXX_DiscardUnknown() {
	xxx_messageInfo_Paused.DiscardUnknown(m)
}

var xxx_messageInfo_Paused proto.InternalMessageInfo

// NotPaused is an event emitted when the module pause
// state is changed to not paused.
type NotPaused struct {
}

func (m *NotPaused) Reset()         { *m = NotPaused{} }
func (m *NotPaused) String() string { return proto.CompactTextString(m) }
func (*NotPaused) ProtoMessage()    {}
func (*NotPaused) Descriptor() ([]byte, []int) {
	return fileDescriptor_aa87d210ca37cf94, []int{1}
}
func (m *NotPaused) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NotPaused) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NotPaused.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NotPaused) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NotPaused.Merge(m, src)
}
func (m *NotPaused) XXX_Size() int {
	return m.Size()
}
func (m *NotPaused) XXX_DiscardUnknown() {
	xxx_messageInfo_NotPaused.DiscardUnknown(m)
}

var xxx_messageInfo_NotPaused proto.InternalMessageInfo

// YieldClaimed is an event emitted when an user claim
// accrued yield.
type YieldClaimed struct {
	Account string                `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	Amount  cosmossdk_io_math.Int `protobuf:"bytes,2,opt,name=amount,proto3,customtype=cosmossdk.io/math.Int" json:"amount"`
}

func (m *YieldClaimed) Reset()         { *m = YieldClaimed{} }
func (m *YieldClaimed) String() string { return proto.CompactTextString(m) }
func (*YieldClaimed) ProtoMessage()    {}
func (*YieldClaimed) Descriptor() ([]byte, []int) {
	return fileDescriptor_aa87d210ca37cf94, []int{2}
}
func (m *YieldClaimed) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *YieldClaimed) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_YieldClaimed.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *YieldClaimed) XXX_Merge(src proto.Message) {
	xxx_messageInfo_YieldClaimed.Merge(m, src)
}
func (m *YieldClaimed) XXX_Size() int {
	return m.Size()
}
func (m *YieldClaimed) XXX_DiscardUnknown() {
	xxx_messageInfo_YieldClaimed.DiscardUnknown(m)
}

var xxx_messageInfo_YieldClaimed proto.InternalMessageInfo

func (m *YieldClaimed) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

// IndexUpdated is an event emitted when the index is updated.
type IndexUpdated struct {
	OldIndex       int64                 `protobuf:"varint,1,opt,name=old_index,json=oldIndex,proto3" json:"old_index,omitempty"`
	NewIndex       int64                 `protobuf:"varint,2,opt,name=new_index,json=newIndex,proto3" json:"new_index,omitempty"`
	TotalPrincipal cosmossdk_io_math.Int `protobuf:"bytes,3,opt,name=total_principal,json=totalPrincipal,proto3,customtype=cosmossdk.io/math.Int" json:"total_principal"`
	YieldAccrued   cosmossdk_io_math.Int `protobuf:"bytes,4,opt,name=yield_accrued,json=yieldAccrued,proto3,customtype=cosmossdk.io/math.Int" json:"yield_accrued"`
}

func (m *IndexUpdated) Reset()         { *m = IndexUpdated{} }
func (m *IndexUpdated) String() string { return proto.CompactTextString(m) }
func (*IndexUpdated) ProtoMessage()    {}
func (*IndexUpdated) Descriptor() ([]byte, []int) {
	return fileDescriptor_aa87d210ca37cf94, []int{3}
}
func (m *IndexUpdated) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IndexUpdated) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IndexUpdated.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IndexUpdated) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IndexUpdated.Merge(m, src)
}
func (m *IndexUpdated) XXX_Size() int {
	return m.Size()
}
func (m *IndexUpdated) XXX_DiscardUnknown() {
	xxx_messageInfo_IndexUpdated.DiscardUnknown(m)
}

var xxx_messageInfo_IndexUpdated proto.InternalMessageInfo

func (m *IndexUpdated) GetOldIndex() int64 {
	if m != nil {
		return m.OldIndex
	}
	return 0
}

func (m *IndexUpdated) GetNewIndex() int64 {
	if m != nil {
		return m.NewIndex
	}
	return 0
}

func init() {
	proto.RegisterType((*Paused)(nil), "noble.dollar.v1.Paused")
	proto.RegisterType((*NotPaused)(nil), "noble.dollar.v1.NotPaused")
	proto.RegisterType((*YieldClaimed)(nil), "noble.dollar.v1.YieldClaimed")
	proto.RegisterType((*IndexUpdated)(nil), "noble.dollar.v1.IndexUpdated")
}

func init() { proto.RegisterFile("noble/dollar/v1/events.proto", fileDescriptor_aa87d210ca37cf94) }

var fileDescriptor_aa87d210ca37cf94 = []byte{
	// 359 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x91, 0x4f, 0x4e, 0xc2, 0x40,
	0x14, 0xc6, 0x5b, 0x30, 0x08, 0x23, 0x4a, 0x6c, 0xd4, 0x54, 0x34, 0xc5, 0xb0, 0x32, 0x26, 0xb6,
	0x10, 0x4f, 0x20, 0x6e, 0x64, 0x63, 0x08, 0x09, 0x0b, 0xdc, 0x34, 0x43, 0x67, 0x82, 0x13, 0xa7,
	0xf3, 0x9a, 0x76, 0xf8, 0xe7, 0x29, 0x3c, 0x86, 0x4b, 0x17, 0x1e, 0x82, 0x25, 0x71, 0x65, 0x5c,
	0x10, 0x03, 0x0b, 0xef, 0xe0, 0xca, 0x74, 0xa6, 0x5c, 0x80, 0xcd, 0x64, 0xbe, 0xf7, 0x7b, 0xf3,
	0xbd, 0x97, 0xf9, 0xd0, 0xb9, 0x80, 0x01, 0xa7, 0x1e, 0x01, 0xce, 0x71, 0xec, 0x8d, 0x9b, 0x1e,
	0x1d, 0x53, 0x21, 0x13, 0x37, 0x8a, 0x41, 0x82, 0x55, 0x51, 0xd4, 0xd5, 0xd4, 0x1d, 0x37, 0xab,
	0x87, 0x38, 0x64, 0x02, 0x3c, 0x75, 0xea, 0x9e, 0xea, 0x69, 0x00, 0x49, 0x08, 0x89, 0xaf, 0x94,
	0xa7, 0x45, 0x86, 0x8e, 0x86, 0x30, 0x04, 0x5d, 0x4f, 0x6f, 0xba, 0x5a, 0x2f, 0xa2, 0x42, 0x07,
	0x8f, 0x12, 0x4a, 0xea, 0x7b, 0xa8, 0xf4, 0x00, 0x32, 0x13, 0x31, 0x2a, 0xf7, 0x19, 0xe5, 0xe4,
	0x8e, 0x63, 0x16, 0x52, 0x62, 0xd9, 0x68, 0x17, 0x07, 0x01, 0x8c, 0x84, 0xb4, 0xcd, 0x0b, 0xf3,
	0xb2, 0xd4, 0xdd, 0x48, 0xeb, 0x1e, 0x15, 0x70, 0xa8, 0x40, 0x2e, 0x05, 0xad, 0xc6, 0x7c, 0x59,
	0x33, 0xbe, 0x97, 0xb5, 0x63, 0x3d, 0x3c, 0x21, 0xcf, 0x2e, 0x03, 0x2f, 0xc4, 0xf2, 0xc9, 0x6d,
	0x0b, 0xf9, 0xf9, 0x71, 0x8d, 0xb2, 0xad, 0xda, 0x42, 0xbe, 0xfd, 0xbe, 0x5f, 0x99, 0xdd, 0xec,
	0x7d, 0xfd, 0xcf, 0x44, 0xe5, 0xb6, 0x20, 0x74, 0xda, 0x8b, 0x08, 0x96, 0x94, 0x58, 0x67, 0xa8,
	0x04, 0x9c, 0xf8, 0x2c, 0xad, 0xa9, 0xb1, 0xf9, 0x6e, 0x11, 0x38, 0x51, 0x3d, 0x29, 0x14, 0x74,
	0x92, 0xc1, 0x9c, 0x86, 0x82, 0x4e, 0x34, 0xec, 0xa3, 0x8a, 0x04, 0x89, 0xb9, 0x1f, 0xc5, 0x4c,
	0x04, 0x2c, 0xc2, 0xdc, 0xce, 0x6f, 0xb9, 0xdd, 0x81, 0x32, 0xea, 0x6c, 0x7c, 0xac, 0x1e, 0xda,
	0x9f, 0xa5, 0x3f, 0xe3, 0xe3, 0x20, 0x88, 0x47, 0x94, 0xd8, 0x3b, 0x5b, 0x1a, 0x97, 0x95, 0xcd,
	0xad, 0x76, 0x69, 0x35, 0xe6, 0x2b, 0xc7, 0x5c, 0xac, 0x1c, 0xf3, 0x67, 0xe5, 0x98, 0xaf, 0x6b,
	0xc7, 0x58, 0xac, 0x1d, 0xe3, 0x6b, 0xed, 0x18, 0x8f, 0x27, 0x59, 0xe0, 0x3a, 0xfd, 0xe9, 0xec,
	0xc5, 0x93, 0xb3, 0x88, 0x26, 0x83, 0x82, 0x0a, 0xf0, 0xe6, 0x3f, 0x00, 0x00, 0xff, 0xff, 0xe1,
	0x8e, 0x31, 0xd3, 0x35, 0x02, 0x00, 0x00,
}

func (m *Paused) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Paused) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Paused) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *NotPaused) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NotPaused) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NotPaused) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *YieldClaimed) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *YieldClaimed) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *YieldClaimed) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Account) > 0 {
		i -= len(m.Account)
		copy(dAtA[i:], m.Account)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Account)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *IndexUpdated) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IndexUpdated) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IndexUpdated) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.YieldAccrued.Size()
		i -= size
		if _, err := m.YieldAccrued.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.TotalPrincipal.Size()
		i -= size
		if _, err := m.TotalPrincipal.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.NewIndex != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.NewIndex))
		i--
		dAtA[i] = 0x10
	}
	if m.OldIndex != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.OldIndex))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintEvents(dAtA []byte, offset int, v uint64) int {
	offset -= sovEvents(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Paused) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *NotPaused) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *YieldClaimed) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Account)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovEvents(uint64(l))
	return n
}

func (m *IndexUpdated) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OldIndex != 0 {
		n += 1 + sovEvents(uint64(m.OldIndex))
	}
	if m.NewIndex != 0 {
		n += 1 + sovEvents(uint64(m.NewIndex))
	}
	l = m.TotalPrincipal.Size()
	n += 1 + l + sovEvents(uint64(l))
	l = m.YieldAccrued.Size()
	n += 1 + l + sovEvents(uint64(l))
	return n
}

func sovEvents(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEvents(x uint64) (n int) {
	return sovEvents(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Paused) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Paused: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Paused: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NotPaused) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NotPaused: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NotPaused: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *YieldClaimed) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: YieldClaimed: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: YieldClaimed: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IndexUpdated) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IndexUpdated: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IndexUpdated: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OldIndex", wireType)
			}
			m.OldIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OldIndex |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewIndex", wireType)
			}
			m.NewIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NewIndex |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalPrincipal", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalPrincipal.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field YieldAccrued", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.YieldAccrued.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvents(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEvents
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEvents
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEvents
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEvents        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvents          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEvents = fmt.Errorf("proto: unexpected end of group")
)

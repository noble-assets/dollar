// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: noble/dollar/vaults/v1/vaults_v2.proto

package vaults

import (
	context "context"
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// ExitRequestStatus represents the status of an exit request
type ExitRequestStatus int32

const (
	// Request is pending in queue
	EXIT_STATUS_PENDING ExitRequestStatus = 0
	// Request is being processed
	EXIT_STATUS_PROCESSING ExitRequestStatus = 1
	// Request has been completed
	EXIT_STATUS_COMPLETED ExitRequestStatus = 2
	// Request was cancelled
	EXIT_STATUS_CANCELLED ExitRequestStatus = 3
	// Request expired
	EXIT_STATUS_EXPIRED ExitRequestStatus = 4
)

var ExitRequestStatus_name = map[int32]string{
	0: "EXIT_STATUS_PENDING",
	1: "EXIT_STATUS_PROCESSING",
	2: "EXIT_STATUS_COMPLETED",
	3: "EXIT_STATUS_CANCELLED",
	4: "EXIT_STATUS_EXPIRED",
}

var ExitRequestStatus_value = map[string]int32{
	"EXIT_STATUS_PENDING":    0,
	"EXIT_STATUS_PROCESSING": 1,
	"EXIT_STATUS_COMPLETED":  2,
	"EXIT_STATUS_CANCELLED":  3,
	"EXIT_STATUS_EXPIRED":    4,
}

func (x ExitRequestStatus) String() string {
	return proto.EnumName(ExitRequestStatus_name, int32(x))
}

func (ExitRequestStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3f2278c9f0560185, []int{0}
}

// MsgDeposit allows users to deposit tokens and receive shares
type MsgDeposit struct {
	// User making the deposit
	Signer string `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty"`
	// Vault type
	VaultType VaultType `protobuf:"varint,2,opt,name=vault_type,json=vaultType,proto3,enum=noble.dollar.vaults.v1.VaultType" json:"vault_type,omitempty"`
	// Amount to deposit
	Amount cosmossdk_io_math.Int `protobuf:"bytes,3,opt,name=amount,proto3,customtype=cosmossdk.io/math.Int" json:"amount"`
	// Minimum shares expected (slippage protection)
	MinShares cosmossdk_io_math.Int `protobuf:"bytes,4,opt,name=min_shares,json=minShares,proto3,customtype=cosmossdk.io/math.Int" json:"min_shares"`
	// Whether to forgo yield for redistribution
	ForgoYield bool `protobuf:"varint,5,opt,name=forgo_yield,json=forgoYield,proto3" json:"forgo_yield,omitempty"`
}

func (m *MsgDeposit) Reset()         { *m = MsgDeposit{} }
func (m *MsgDeposit) String() string { return proto.CompactTextString(m) }
func (*MsgDeposit) ProtoMessage()    {}
func (*MsgDeposit) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f2278c9f0560185, []int{0}
}
func (m *MsgDeposit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeposit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeposit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeposit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeposit.Merge(m, src)
}
func (m *MsgDeposit) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeposit) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeposit.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeposit proto.InternalMessageInfo

// MsgDepositResponse returns the result of a deposit
type MsgDepositResponse struct {
	// Shares minted for the user
	SharesMinted cosmossdk_io_math.Int `protobuf:"bytes,1,opt,name=shares_minted,json=sharesMinted,proto3,customtype=cosmossdk.io/math.Int" json:"shares_minted"`
	// Share price at time of deposit
	SharePrice cosmossdk_io_math.LegacyDec `protobuf:"bytes,2,opt,name=share_price,json=sharePrice,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"share_price"`
	// Fee charged
	FeeCharged cosmossdk_io_math.Int `protobuf:"bytes,3,opt,name=fee_charged,json=feeCharged,proto3,customtype=cosmossdk.io/math.Int" json:"fee_charged"`
}

func (m *MsgDepositResponse) Reset()         { *m = MsgDepositResponse{} }
func (m *MsgDepositResponse) String() string { return proto.CompactTextString(m) }
func (*MsgDepositResponse) ProtoMessage()    {}
func (*MsgDepositResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f2278c9f0560185, []int{1}
}
func (m *MsgDepositResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDepositResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDepositResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDepositResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDepositResponse.Merge(m, src)
}
func (m *MsgDepositResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgDepositResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDepositResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDepositResponse proto.InternalMessageInfo

// MsgWithdraw allows users to withdraw tokens by burning shares
type MsgWithdraw struct {
	// User making the withdrawal
	Signer string `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty"`
	// Vault type
	VaultType VaultType `protobuf:"varint,2,opt,name=vault_type,json=vaultType,proto3,enum=noble.dollar.vaults.v1.VaultType" json:"vault_type,omitempty"`
	// Shares to burn (0 = withdraw all)
	Shares cosmossdk_io_math.Int `protobuf:"bytes,3,opt,name=shares,proto3,customtype=cosmossdk.io/math.Int" json:"shares"`
	// Minimum tokens expected (slippage protection)
	MinTokens cosmossdk_io_math.Int `protobuf:"bytes,4,opt,name=min_tokens,json=minTokens,proto3,customtype=cosmossdk.io/math.Int" json:"min_tokens"`
}

func (m *MsgWithdraw) Reset()         { *m = MsgWithdraw{} }
func (m *MsgWithdraw) String() string { return proto.CompactTextString(m) }
func (*MsgWithdraw) ProtoMessage()    {}
func (*MsgWithdraw) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f2278c9f0560185, []int{2}
}
func (m *MsgWithdraw) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgWithdraw) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgWithdraw.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgWithdraw) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgWithdraw.Merge(m, src)
}
func (m *MsgWithdraw) XXX_Size() int {
	return m.Size()
}
func (m *MsgWithdraw) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgWithdraw.DiscardUnknown(m)
}

var xxx_messageInfo_MsgWithdraw proto.InternalMessageInfo

// MsgWithdrawResponse returns the result of a withdrawal
type MsgWithdrawResponse struct {
	// Tokens withdrawn
	TokensWithdrawn cosmossdk_io_math.Int `protobuf:"bytes,1,opt,name=tokens_withdrawn,json=tokensWithdrawn,proto3,customtype=cosmossdk.io/math.Int" json:"tokens_withdrawn"`
	// Shares burned
	SharesBurned cosmossdk_io_math.Int `protobuf:"bytes,2,opt,name=shares_burned,json=sharesBurned,proto3,customtype=cosmossdk.io/math.Int" json:"shares_burned"`
	// Share price at time of withdrawal
	SharePrice cosmossdk_io_math.LegacyDec `protobuf:"bytes,3,opt,name=share_price,json=sharePrice,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"share_price"`
	// Fee charged
	FeeCharged cosmossdk_io_math.Int `protobuf:"bytes,4,opt,name=fee_charged,json=feeCharged,proto3,customtype=cosmossdk.io/math.Int" json:"fee_charged"`
}

func (m *MsgWithdrawResponse) Reset()         { *m = MsgWithdrawResponse{} }
func (m *MsgWithdrawResponse) String() string { return proto.CompactTextString(m) }
func (*MsgWithdrawResponse) ProtoMessage()    {}
func (*MsgWithdrawResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f2278c9f0560185, []int{3}
}
func (m *MsgWithdrawResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgWithdrawResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgWithdrawResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgWithdrawResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgWithdrawResponse.Merge(m, src)
}
func (m *MsgWithdrawResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgWithdrawResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgWithdrawResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgWithdrawResponse proto.InternalMessageInfo

// MsgRequestExit allows users to join the exit queue for large withdrawals
type MsgRequestExit struct {
	// User requesting exit
	Signer string `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty"`
	// Vault type
	VaultType VaultType `protobuf:"varint,2,opt,name=vault_type,json=vaultType,proto3,enum=noble.dollar.vaults.v1.VaultType" json:"vault_type,omitempty"`
	// Shares to exit with
	Shares cosmossdk_io_math.Int `protobuf:"bytes,3,opt,name=shares,proto3,customtype=cosmossdk.io/math.Int" json:"shares"`
}

func (m *MsgRequestExit) Reset()         { *m = MsgRequestExit{} }
func (m *MsgRequestExit) String() string { return proto.CompactTextString(m) }
func (*MsgRequestExit) ProtoMessage()    {}
func (*MsgRequestExit) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f2278c9f0560185, []int{4}
}
func (m *MsgRequestExit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRequestExit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRequestExit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRequestExit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRequestExit.Merge(m, src)
}
func (m *MsgRequestExit) XXX_Size() int {
	return m.Size()
}
func (m *MsgRequestExit) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRequestExit.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRequestExit proto.InternalMessageInfo

// MsgRequestExitResponse returns the exit request details
type MsgRequestExitResponse struct {
	// Queue position
	QueuePosition uint64 `protobuf:"varint,1,opt,name=queue_position,json=queuePosition,proto3" json:"queue_position,omitempty"`
	// Estimated completion time
	EstimatedCompletion time.Time `protobuf:"bytes,2,opt,name=estimated_completion,json=estimatedCompletion,proto3,stdtime" json:"estimated_completion"`
	// Exit request ID
	ExitId string `protobuf:"bytes,3,opt,name=exit_id,json=exitId,proto3" json:"exit_id,omitempty"`
}

func (m *MsgRequestExitResponse) Reset()         { *m = MsgRequestExitResponse{} }
func (m *MsgRequestExitResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRequestExitResponse) ProtoMessage()    {}
func (*MsgRequestExitResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f2278c9f0560185, []int{5}
}
func (m *MsgRequestExitResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRequestExitResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRequestExitResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRequestExitResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRequestExitResponse.Merge(m, src)
}
func (m *MsgRequestExitResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRequestExitResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRequestExitResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRequestExitResponse proto.InternalMessageInfo

func (m *MsgRequestExitResponse) GetQueuePosition() uint64 {
	if m != nil {
		return m.QueuePosition
	}
	return 0
}

func (m *MsgRequestExitResponse) GetEstimatedCompletion() time.Time {
	if m != nil {
		return m.EstimatedCompletion
	}
	return time.Time{}
}

func (m *MsgRequestExitResponse) GetExitId() string {
	if m != nil {
		return m.ExitId
	}
	return ""
}

// MsgCancelExit allows users to cancel their exit request
type MsgCancelExit struct {
	// User cancelling exit
	Signer string `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty"`
	// Exit request ID to cancel
	ExitId string `protobuf:"bytes,2,opt,name=exit_id,json=exitId,proto3" json:"exit_id,omitempty"`
}

func (m *MsgCancelExit) Reset()         { *m = MsgCancelExit{} }
func (m *MsgCancelExit) String() string { return proto.CompactTextString(m) }
func (*MsgCancelExit) ProtoMessage()    {}
func (*MsgCancelExit) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f2278c9f0560185, []int{6}
}
func (m *MsgCancelExit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCancelExit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCancelExit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCancelExit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCancelExit.Merge(m, src)
}
func (m *MsgCancelExit) XXX_Size() int {
	return m.Size()
}
func (m *MsgCancelExit) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCancelExit.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCancelExit proto.InternalMessageInfo

// MsgCancelExitResponse confirms exit cancellation
type MsgCancelExitResponse struct {
	// Shares returned to user
	SharesReturned cosmossdk_io_math.Int `protobuf:"bytes,1,opt,name=shares_returned,json=sharesReturned,proto3,customtype=cosmossdk.io/math.Int" json:"shares_returned"`
}

func (m *MsgCancelExitResponse) Reset()         { *m = MsgCancelExitResponse{} }
func (m *MsgCancelExitResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCancelExitResponse) ProtoMessage()    {}
func (*MsgCancelExitResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f2278c9f0560185, []int{7}
}
func (m *MsgCancelExitResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCancelExitResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCancelExitResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCancelExitResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCancelExitResponse.Merge(m, src)
}
func (m *MsgCancelExitResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCancelExitResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCancelExitResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCancelExitResponse proto.InternalMessageInfo

// MsgSetYieldPreference allows users to set their yield preference
type MsgSetYieldPreference struct {
	// User setting preference
	Signer string `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty"`
	// Vault type
	VaultType VaultType `protobuf:"varint,2,opt,name=vault_type,json=vaultType,proto3,enum=noble.dollar.vaults.v1.VaultType" json:"vault_type,omitempty"`
	// Whether to forgo yield
	ForgoYield bool `protobuf:"varint,3,opt,name=forgo_yield,json=forgoYield,proto3" json:"forgo_yield,omitempty"`
}

func (m *MsgSetYieldPreference) Reset()         { *m = MsgSetYieldPreference{} }
func (m *MsgSetYieldPreference) String() string { return proto.CompactTextString(m) }
func (*MsgSetYieldPreference) ProtoMessage()    {}
func (*MsgSetYieldPreference) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f2278c9f0560185, []int{8}
}
func (m *MsgSetYieldPreference) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetYieldPreference) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetYieldPreference.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetYieldPreference) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetYieldPreference.Merge(m, src)
}
func (m *MsgSetYieldPreference) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetYieldPreference) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetYieldPreference.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetYieldPreference proto.InternalMessageInfo

// MsgSetYieldPreferenceResponse confirms yield preference update
type MsgSetYieldPreferenceResponse struct {
	// Previous preference
	PreviousPreference bool `protobuf:"varint,1,opt,name=previous_preference,json=previousPreference,proto3" json:"previous_preference,omitempty"`
	// New preference
	NewPreference bool `protobuf:"varint,2,opt,name=new_preference,json=newPreference,proto3" json:"new_preference,omitempty"`
}

func (m *MsgSetYieldPreferenceResponse) Reset()         { *m = MsgSetYieldPreferenceResponse{} }
func (m *MsgSetYieldPreferenceResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSetYieldPreferenceResponse) ProtoMessage()    {}
func (*MsgSetYieldPreferenceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f2278c9f0560185, []int{9}
}
func (m *MsgSetYieldPreferenceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetYieldPreferenceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetYieldPreferenceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetYieldPreferenceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetYieldPreferenceResponse.Merge(m, src)
}
func (m *MsgSetYieldPreferenceResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetYieldPreferenceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetYieldPreferenceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetYieldPreferenceResponse proto.InternalMessageInfo

func (m *MsgSetYieldPreferenceResponse) GetPreviousPreference() bool {
	if m != nil {
		return m.PreviousPreference
	}
	return false
}

func (m *MsgSetYieldPreferenceResponse) GetNewPreference() bool {
	if m != nil {
		return m.NewPreference
	}
	return false
}

// MsgProcessExitQueue processes pending exit requests
type MsgProcessExitQueue struct {
	// Authority processing the queue
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	// Vault type to process
	VaultType VaultType `protobuf:"varint,2,opt,name=vault_type,json=vaultType,proto3,enum=noble.dollar.vaults.v1.VaultType" json:"vault_type,omitempty"`
	// Maximum number of requests to process
	MaxRequests uint64 `protobuf:"varint,3,opt,name=max_requests,json=maxRequests,proto3" json:"max_requests,omitempty"`
}

func (m *MsgProcessExitQueue) Reset()         { *m = MsgProcessExitQueue{} }
func (m *MsgProcessExitQueue) String() string { return proto.CompactTextString(m) }
func (*MsgProcessExitQueue) ProtoMessage()    {}
func (*MsgProcessExitQueue) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f2278c9f0560185, []int{10}
}
func (m *MsgProcessExitQueue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgProcessExitQueue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgProcessExitQueue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgProcessExitQueue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgProcessExitQueue.Merge(m, src)
}
func (m *MsgProcessExitQueue) XXX_Size() int {
	return m.Size()
}
func (m *MsgProcessExitQueue) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgProcessExitQueue.DiscardUnknown(m)
}

var xxx_messageInfo_MsgProcessExitQueue proto.InternalMessageInfo

// MsgProcessExitQueueResponse returns processing results
type MsgProcessExitQueueResponse struct {
	// Number of requests processed
	RequestsProcessed uint64 `protobuf:"varint,1,opt,name=requests_processed,json=requestsProcessed,proto3" json:"requests_processed,omitempty"`
	// Total tokens distributed
	TokensDistributed cosmossdk_io_math.Int `protobuf:"bytes,2,opt,name=tokens_distributed,json=tokensDistributed,proto3,customtype=cosmossdk.io/math.Int" json:"tokens_distributed"`
	// Total shares burned
	SharesBurned cosmossdk_io_math.Int `protobuf:"bytes,3,opt,name=shares_burned,json=sharesBurned,proto3,customtype=cosmossdk.io/math.Int" json:"shares_burned"`
}

func (m *MsgProcessExitQueueResponse) Reset()         { *m = MsgProcessExitQueueResponse{} }
func (m *MsgProcessExitQueueResponse) String() string { return proto.CompactTextString(m) }
func (*MsgProcessExitQueueResponse) ProtoMessage()    {}
func (*MsgProcessExitQueueResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f2278c9f0560185, []int{11}
}
func (m *MsgProcessExitQueueResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgProcessExitQueueResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgProcessExitQueueResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgProcessExitQueueResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgProcessExitQueueResponse.Merge(m, src)
}
func (m *MsgProcessExitQueueResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgProcessExitQueueResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgProcessExitQueueResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgProcessExitQueueResponse proto.InternalMessageInfo

func (m *MsgProcessExitQueueResponse) GetRequestsProcessed() uint64 {
	if m != nil {
		return m.RequestsProcessed
	}
	return 0
}

// MsgUpdateNAV updates the vault's NAV
type MsgUpdateNAV struct {
	// Authority updating NAV
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	// Vault type
	VaultType VaultType `protobuf:"varint,2,opt,name=vault_type,json=vaultType,proto3,enum=noble.dollar.vaults.v1.VaultType" json:"vault_type,omitempty"`
	// New NAV value
	NewNav cosmossdk_io_math.Int `protobuf:"bytes,3,opt,name=new_nav,json=newNav,proto3,customtype=cosmossdk.io/math.Int" json:"new_nav"`
	// Update reason
	Reason string `protobuf:"bytes,4,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (m *MsgUpdateNAV) Reset()         { *m = MsgUpdateNAV{} }
func (m *MsgUpdateNAV) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateNAV) ProtoMessage()    {}
func (*MsgUpdateNAV) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f2278c9f0560185, []int{12}
}
func (m *MsgUpdateNAV) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateNAV) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateNAV.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateNAV) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateNAV.Merge(m, src)
}
func (m *MsgUpdateNAV) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateNAV) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateNAV.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateNAV proto.InternalMessageInfo

// MsgUpdateNAVResponse confirms NAV update
type MsgUpdateNAVResponse struct {
	// Previous NAV
	PreviousNav cosmossdk_io_math.Int `protobuf:"bytes,1,opt,name=previous_nav,json=previousNav,proto3,customtype=cosmossdk.io/math.Int" json:"previous_nav"`
	// New NAV
	NewNav cosmossdk_io_math.Int `protobuf:"bytes,2,opt,name=new_nav,json=newNav,proto3,customtype=cosmossdk.io/math.Int" json:"new_nav"`
	// NAV change percentage (basis points)
	ChangePercentage int32 `protobuf:"varint,3,opt,name=change_percentage,json=changePercentage,proto3" json:"change_percentage,omitempty"`
}

func (m *MsgUpdateNAVResponse) Reset()         { *m = MsgUpdateNAVResponse{} }
func (m *MsgUpdateNAVResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateNAVResponse) ProtoMessage()    {}
func (*MsgUpdateNAVResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f2278c9f0560185, []int{13}
}
func (m *MsgUpdateNAVResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateNAVResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateNAVResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateNAVResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateNAVResponse.Merge(m, src)
}
func (m *MsgUpdateNAVResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateNAVResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateNAVResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateNAVResponse proto.InternalMessageInfo

func (m *MsgUpdateNAVResponse) GetChangePercentage() int32 {
	if m != nil {
		return m.ChangePercentage
	}
	return 0
}

// UserPosition represents a user's position in the V2 vault system
type UserPosition struct {
	// User's share balance
	Shares cosmossdk_io_math.Int `protobuf:"bytes,1,opt,name=shares,proto3,customtype=cosmossdk.io/math.Int" json:"shares"`
	// Principal deposited (for tracking)
	PrincipalDeposited cosmossdk_io_math.Int `protobuf:"bytes,2,opt,name=principal_deposited,json=principalDeposited,proto3,customtype=cosmossdk.io/math.Int" json:"principal_deposited"`
	// Average entry price
	AvgEntryPrice cosmossdk_io_math.LegacyDec `protobuf:"bytes,3,opt,name=avg_entry_price,json=avgEntryPrice,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"avg_entry_price"`
	// First deposit timestamp
	FirstDeposit time.Time `protobuf:"bytes,4,opt,name=first_deposit,json=firstDeposit,proto3,stdtime" json:"first_deposit"`
	// Last activity timestamp
	LastActivity time.Time `protobuf:"bytes,5,opt,name=last_activity,json=lastActivity,proto3,stdtime" json:"last_activity"`
	// Yield preference setting
	ForgoYield bool `protobuf:"varint,6,opt,name=forgo_yield,json=forgoYield,proto3" json:"forgo_yield,omitempty"`
	// Exit requests for this user
	ExitRequests []*ExitRequest `protobuf:"bytes,7,rep,name=exit_requests,json=exitRequests,proto3" json:"exit_requests,omitempty"`
}

func (m *UserPosition) Reset()         { *m = UserPosition{} }
func (m *UserPosition) String() string { return proto.CompactTextString(m) }
func (*UserPosition) ProtoMessage()    {}
func (*UserPosition) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f2278c9f0560185, []int{14}
}
func (m *UserPosition) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserPosition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserPosition.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserPosition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserPosition.Merge(m, src)
}
func (m *UserPosition) XXX_Size() int {
	return m.Size()
}
func (m *UserPosition) XXX_DiscardUnknown() {
	xxx_messageInfo_UserPosition.DiscardUnknown(m)
}

var xxx_messageInfo_UserPosition proto.InternalMessageInfo

func (m *UserPosition) GetFirstDeposit() time.Time {
	if m != nil {
		return m.FirstDeposit
	}
	return time.Time{}
}

func (m *UserPosition) GetLastActivity() time.Time {
	if m != nil {
		return m.LastActivity
	}
	return time.Time{}
}

func (m *UserPosition) GetForgoYield() bool {
	if m != nil {
		return m.ForgoYield
	}
	return false
}

func (m *UserPosition) GetExitRequests() []*ExitRequest {
	if m != nil {
		return m.ExitRequests
	}
	return nil
}

// ExitRequest represents a request to exit the vault via the queue
type ExitRequest struct {
	// Unique request ID
	RequestId string `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// User making the request
	UserAddress []byte `protobuf:"bytes,2,opt,name=user_address,json=userAddress,proto3" json:"user_address,omitempty"`
	// Vault type
	VaultType VaultType `protobuf:"varint,3,opt,name=vault_type,json=vaultType,proto3,enum=noble.dollar.vaults.v1.VaultType" json:"vault_type,omitempty"`
	// Shares to exit with
	Shares cosmossdk_io_math.Int `protobuf:"bytes,4,opt,name=shares,proto3,customtype=cosmossdk.io/math.Int" json:"shares"`
	// Request timestamp
	RequestedAt time.Time `protobuf:"bytes,5,opt,name=requested_at,json=requestedAt,proto3,stdtime" json:"requested_at"`
	// Queue position
	QueuePosition uint64 `protobuf:"varint,6,opt,name=queue_position,json=queuePosition,proto3" json:"queue_position,omitempty"`
	// Expected tokens to receive (at request time)
	ExpectedTokens cosmossdk_io_math.Int `protobuf:"bytes,7,opt,name=expected_tokens,json=expectedTokens,proto3,customtype=cosmossdk.io/math.Int" json:"expected_tokens"`
	// Request status
	Status ExitRequestStatus `protobuf:"varint,8,opt,name=status,proto3,enum=noble.dollar.vaults.v1.ExitRequestStatus" json:"status,omitempty"`
}

func (m *ExitRequest) Reset()         { *m = ExitRequest{} }
func (m *ExitRequest) String() string { return proto.CompactTextString(m) }
func (*ExitRequest) ProtoMessage()    {}
func (*ExitRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f2278c9f0560185, []int{15}
}
func (m *ExitRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExitRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExitRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExitRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExitRequest.Merge(m, src)
}
func (m *ExitRequest) XXX_Size() int {
	return m.Size()
}
func (m *ExitRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ExitRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ExitRequest proto.InternalMessageInfo

func (m *ExitRequest) GetRequestId() string {
	if m != nil {
		return m.RequestId
	}
	return ""
}

func (m *ExitRequest) GetUserAddress() []byte {
	if m != nil {
		return m.UserAddress
	}
	return nil
}

func (m *ExitRequest) GetVaultType() VaultType {
	if m != nil {
		return m.VaultType
	}
	return UNSPECIFIED
}

func (m *ExitRequest) GetRequestedAt() time.Time {
	if m != nil {
		return m.RequestedAt
	}
	return time.Time{}
}

func (m *ExitRequest) GetQueuePosition() uint64 {
	if m != nil {
		return m.QueuePosition
	}
	return 0
}

func (m *ExitRequest) GetStatus() ExitRequestStatus {
	if m != nil {
		return m.Status
	}
	return EXIT_STATUS_PENDING
}

type QueryVaultStateRequest struct {
	VaultType VaultType `protobuf:"varint,1,opt,name=vault_type,json=vaultType,proto3,enum=noble.dollar.vaults.v1.VaultType" json:"vault_type,omitempty"`
}

func (m *QueryVaultStateRequest) Reset()         { *m = QueryVaultStateRequest{} }
func (m *QueryVaultStateRequest) String() string { return proto.CompactTextString(m) }
func (*QueryVaultStateRequest) ProtoMessage()    {}
func (*QueryVaultStateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f2278c9f0560185, []int{16}
}
func (m *QueryVaultStateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryVaultStateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryVaultStateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryVaultStateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryVaultStateRequest.Merge(m, src)
}
func (m *QueryVaultStateRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryVaultStateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryVaultStateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryVaultStateRequest proto.InternalMessageInfo

func (m *QueryVaultStateRequest) GetVaultType() VaultType {
	if m != nil {
		return m.VaultType
	}
	return UNSPECIFIED
}

type QueryVaultStateResponse struct {
	VaultState *VaultState `protobuf:"bytes,1,opt,name=vault_state,json=vaultState,proto3" json:"vault_state,omitempty"`
	NavConfig  *NAVConfig  `protobuf:"bytes,2,opt,name=nav_config,json=navConfig,proto3" json:"nav_config,omitempty"`
	FeeConfig  *FeeConfig  `protobuf:"bytes,3,opt,name=fee_config,json=feeConfig,proto3" json:"fee_config,omitempty"`
}

func (m *QueryVaultStateResponse) Reset()         { *m = QueryVaultStateResponse{} }
func (m *QueryVaultStateResponse) String() string { return proto.CompactTextString(m) }
func (*QueryVaultStateResponse) ProtoMessage()    {}
func (*QueryVaultStateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f2278c9f0560185, []int{17}
}
func (m *QueryVaultStateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryVaultStateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryVaultStateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryVaultStateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryVaultStateResponse.Merge(m, src)
}
func (m *QueryVaultStateResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryVaultStateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryVaultStateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryVaultStateResponse proto.InternalMessageInfo

func (m *QueryVaultStateResponse) GetVaultState() *VaultState {
	if m != nil {
		return m.VaultState
	}
	return nil
}

func (m *QueryVaultStateResponse) GetNavConfig() *NAVConfig {
	if m != nil {
		return m.NavConfig
	}
	return nil
}

func (m *QueryVaultStateResponse) GetFeeConfig() *FeeConfig {
	if m != nil {
		return m.FeeConfig
	}
	return nil
}

type QueryUserPositionRequest struct {
	Address   string    `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	VaultType VaultType `protobuf:"varint,2,opt,name=vault_type,json=vaultType,proto3,enum=noble.dollar.vaults.v1.VaultType" json:"vault_type,omitempty"`
}

func (m *QueryUserPositionRequest) Reset()         { *m = QueryUserPositionRequest{} }
func (m *QueryUserPositionRequest) String() string { return proto.CompactTextString(m) }
func (*QueryUserPositionRequest) ProtoMessage()    {}
func (*QueryUserPositionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f2278c9f0560185, []int{18}
}
func (m *QueryUserPositionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryUserPositionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryUserPositionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryUserPositionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryUserPositionRequest.Merge(m, src)
}
func (m *QueryUserPositionRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryUserPositionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryUserPositionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryUserPositionRequest proto.InternalMessageInfo

func (m *QueryUserPositionRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *QueryUserPositionRequest) GetVaultType() VaultType {
	if m != nil {
		return m.VaultType
	}
	return UNSPECIFIED
}

type QueryUserPositionResponse struct {
	Position       *UserPosition         `protobuf:"bytes,1,opt,name=position,proto3" json:"position,omitempty"`
	CurrentValue   cosmossdk_io_math.Int `protobuf:"bytes,2,opt,name=current_value,json=currentValue,proto3,customtype=cosmossdk.io/math.Int" json:"current_value"`
	UnrealizedGain cosmossdk_io_math.Int `protobuf:"bytes,3,opt,name=unrealized_gain,json=unrealizedGain,proto3,customtype=cosmossdk.io/math.Int" json:"unrealized_gain"`
}

func (m *QueryUserPositionResponse) Reset()         { *m = QueryUserPositionResponse{} }
func (m *QueryUserPositionResponse) String() string { return proto.CompactTextString(m) }
func (*QueryUserPositionResponse) ProtoMessage()    {}
func (*QueryUserPositionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f2278c9f0560185, []int{19}
}
func (m *QueryUserPositionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryUserPositionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryUserPositionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryUserPositionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryUserPositionResponse.Merge(m, src)
}
func (m *QueryUserPositionResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryUserPositionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryUserPositionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryUserPositionResponse proto.InternalMessageInfo

func (m *QueryUserPositionResponse) GetPosition() *UserPosition {
	if m != nil {
		return m.Position
	}
	return nil
}

type QuerySharePriceRequest struct {
	VaultType VaultType `protobuf:"varint,1,opt,name=vault_type,json=vaultType,proto3,enum=noble.dollar.vaults.v1.VaultType" json:"vault_type,omitempty"`
}

func (m *QuerySharePriceRequest) Reset()         { *m = QuerySharePriceRequest{} }
func (m *QuerySharePriceRequest) String() string { return proto.CompactTextString(m) }
func (*QuerySharePriceRequest) ProtoMessage()    {}
func (*QuerySharePriceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f2278c9f0560185, []int{20}
}
func (m *QuerySharePriceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySharePriceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySharePriceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySharePriceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySharePriceRequest.Merge(m, src)
}
func (m *QuerySharePriceRequest) XXX_Size() int {
	return m.Size()
}
func (m *QuerySharePriceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySharePriceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySharePriceRequest proto.InternalMessageInfo

func (m *QuerySharePriceRequest) GetVaultType() VaultType {
	if m != nil {
		return m.VaultType
	}
	return UNSPECIFIED
}

type QuerySharePriceResponse struct {
	SharePrice cosmossdk_io_math.LegacyDec `protobuf:"bytes,1,opt,name=share_price,json=sharePrice,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"share_price"`
	LastUpdate time.Time                   `protobuf:"bytes,2,opt,name=last_update,json=lastUpdate,proto3,stdtime" json:"last_update"`
}

func (m *QuerySharePriceResponse) Reset()         { *m = QuerySharePriceResponse{} }
func (m *QuerySharePriceResponse) String() string { return proto.CompactTextString(m) }
func (*QuerySharePriceResponse) ProtoMessage()    {}
func (*QuerySharePriceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f2278c9f0560185, []int{21}
}
func (m *QuerySharePriceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySharePriceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySharePriceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySharePriceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySharePriceResponse.Merge(m, src)
}
func (m *QuerySharePriceResponse) XXX_Size() int {
	return m.Size()
}
func (m *QuerySharePriceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySharePriceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySharePriceResponse proto.InternalMessageInfo

func (m *QuerySharePriceResponse) GetLastUpdate() time.Time {
	if m != nil {
		return m.LastUpdate
	}
	return time.Time{}
}

type QueryPricingInfoRequest struct {
	VaultType VaultType             `protobuf:"varint,1,opt,name=vault_type,json=vaultType,proto3,enum=noble.dollar.vaults.v1.VaultType" json:"vault_type,omitempty"`
	Amount    cosmossdk_io_math.Int `protobuf:"bytes,2,opt,name=amount,proto3,customtype=cosmossdk.io/math.Int" json:"amount"`
	IsDeposit bool                  `protobuf:"varint,3,opt,name=is_deposit,json=isDeposit,proto3" json:"is_deposit,omitempty"`
}

func (m *QueryPricingInfoRequest) Reset()         { *m = QueryPricingInfoRequest{} }
func (m *QueryPricingInfoRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPricingInfoRequest) ProtoMessage()    {}
func (*QueryPricingInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f2278c9f0560185, []int{22}
}
func (m *QueryPricingInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPricingInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPricingInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPricingInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPricingInfoRequest.Merge(m, src)
}
func (m *QueryPricingInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPricingInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPricingInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPricingInfoRequest proto.InternalMessageInfo

func (m *QueryPricingInfoRequest) GetVaultType() VaultType {
	if m != nil {
		return m.VaultType
	}
	return UNSPECIFIED
}

func (m *QueryPricingInfoRequest) GetIsDeposit() bool {
	if m != nil {
		return m.IsDeposit
	}
	return false
}

type QueryPricingInfoResponse struct {
	PricingInfo *PricingInfo `protobuf:"bytes,1,opt,name=pricing_info,json=pricingInfo,proto3" json:"pricing_info,omitempty"`
}

func (m *QueryPricingInfoResponse) Reset()         { *m = QueryPricingInfoResponse{} }
func (m *QueryPricingInfoResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPricingInfoResponse) ProtoMessage()    {}
func (*QueryPricingInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f2278c9f0560185, []int{23}
}
func (m *QueryPricingInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPricingInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPricingInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPricingInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPricingInfoResponse.Merge(m, src)
}
func (m *QueryPricingInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPricingInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPricingInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPricingInfoResponse proto.InternalMessageInfo

func (m *QueryPricingInfoResponse) GetPricingInfo() *PricingInfo {
	if m != nil {
		return m.PricingInfo
	}
	return nil
}

type QueryExitQueueRequest struct {
	VaultType   VaultType `protobuf:"varint,1,opt,name=vault_type,json=vaultType,proto3,enum=noble.dollar.vaults.v1.VaultType" json:"vault_type,omitempty"`
	UserAddress string    `protobuf:"bytes,2,opt,name=user_address,json=userAddress,proto3" json:"user_address,omitempty"`
}

func (m *QueryExitQueueRequest) Reset()         { *m = QueryExitQueueRequest{} }
func (m *QueryExitQueueRequest) String() string { return proto.CompactTextString(m) }
func (*QueryExitQueueRequest) ProtoMessage()    {}
func (*QueryExitQueueRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f2278c9f0560185, []int{24}
}
func (m *QueryExitQueueRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryExitQueueRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryExitQueueRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryExitQueueRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryExitQueueRequest.Merge(m, src)
}
func (m *QueryExitQueueRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryExitQueueRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryExitQueueRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryExitQueueRequest proto.InternalMessageInfo

func (m *QueryExitQueueRequest) GetVaultType() VaultType {
	if m != nil {
		return m.VaultType
	}
	return UNSPECIFIED
}

func (m *QueryExitQueueRequest) GetUserAddress() string {
	if m != nil {
		return m.UserAddress
	}
	return ""
}

type QueryExitQueueResponse struct {
	UserRequests      []*ExitRequest        `protobuf:"bytes,1,rep,name=user_requests,json=userRequests,proto3" json:"user_requests,omitempty"`
	TotalQueueLength  uint64                `protobuf:"varint,2,opt,name=total_queue_length,json=totalQueueLength,proto3" json:"total_queue_length,omitempty"`
	TotalQueuedShares cosmossdk_io_math.Int `protobuf:"bytes,3,opt,name=total_queued_shares,json=totalQueuedShares,proto3,customtype=cosmossdk.io/math.Int" json:"total_queued_shares"`
}

func (m *QueryExitQueueResponse) Reset()         { *m = QueryExitQueueResponse{} }
func (m *QueryExitQueueResponse) String() string { return proto.CompactTextString(m) }
func (*QueryExitQueueResponse) ProtoMessage()    {}
func (*QueryExitQueueResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f2278c9f0560185, []int{25}
}
func (m *QueryExitQueueResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryExitQueueResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryExitQueueResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryExitQueueResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryExitQueueResponse.Merge(m, src)
}
func (m *QueryExitQueueResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryExitQueueResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryExitQueueResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryExitQueueResponse proto.InternalMessageInfo

func (m *QueryExitQueueResponse) GetUserRequests() []*ExitRequest {
	if m != nil {
		return m.UserRequests
	}
	return nil
}

func (m *QueryExitQueueResponse) GetTotalQueueLength() uint64 {
	if m != nil {
		return m.TotalQueueLength
	}
	return 0
}

type QueryDepositPreviewRequest struct {
	VaultType VaultType             `protobuf:"varint,1,opt,name=vault_type,json=vaultType,proto3,enum=noble.dollar.vaults.v1.VaultType" json:"vault_type,omitempty"`
	Amount    cosmossdk_io_math.Int `protobuf:"bytes,2,opt,name=amount,proto3,customtype=cosmossdk.io/math.Int" json:"amount"`
}

func (m *QueryDepositPreviewRequest) Reset()         { *m = QueryDepositPreviewRequest{} }
func (m *QueryDepositPreviewRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDepositPreviewRequest) ProtoMessage()    {}
func (*QueryDepositPreviewRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f2278c9f0560185, []int{26}
}
func (m *QueryDepositPreviewRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDepositPreviewRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDepositPreviewRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDepositPreviewRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDepositPreviewRequest.Merge(m, src)
}
func (m *QueryDepositPreviewRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDepositPreviewRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDepositPreviewRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDepositPreviewRequest proto.InternalMessageInfo

func (m *QueryDepositPreviewRequest) GetVaultType() VaultType {
	if m != nil {
		return m.VaultType
	}
	return UNSPECIFIED
}

type QueryDepositPreviewResponse struct {
	EstimatedShares cosmossdk_io_math.Int       `protobuf:"bytes,1,opt,name=estimated_shares,json=estimatedShares,proto3,customtype=cosmossdk.io/math.Int" json:"estimated_shares"`
	SharePrice      cosmossdk_io_math.LegacyDec `protobuf:"bytes,2,opt,name=share_price,json=sharePrice,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"share_price"`
	FeeAmount       cosmossdk_io_math.Int       `protobuf:"bytes,3,opt,name=fee_amount,json=feeAmount,proto3,customtype=cosmossdk.io/math.Int" json:"fee_amount"`
}

func (m *QueryDepositPreviewResponse) Reset()         { *m = QueryDepositPreviewResponse{} }
func (m *QueryDepositPreviewResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDepositPreviewResponse) ProtoMessage()    {}
func (*QueryDepositPreviewResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f2278c9f0560185, []int{27}
}
func (m *QueryDepositPreviewResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDepositPreviewResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDepositPreviewResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDepositPreviewResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDepositPreviewResponse.Merge(m, src)
}
func (m *QueryDepositPreviewResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDepositPreviewResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDepositPreviewResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDepositPreviewResponse proto.InternalMessageInfo

type QueryWithdrawalPreviewRequest struct {
	VaultType VaultType             `protobuf:"varint,1,opt,name=vault_type,json=vaultType,proto3,enum=noble.dollar.vaults.v1.VaultType" json:"vault_type,omitempty"`
	Shares    cosmossdk_io_math.Int `protobuf:"bytes,2,opt,name=shares,proto3,customtype=cosmossdk.io/math.Int" json:"shares"`
}

func (m *QueryWithdrawalPreviewRequest) Reset()         { *m = QueryWithdrawalPreviewRequest{} }
func (m *QueryWithdrawalPreviewRequest) String() string { return proto.CompactTextString(m) }
func (*QueryWithdrawalPreviewRequest) ProtoMessage()    {}
func (*QueryWithdrawalPreviewRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f2278c9f0560185, []int{28}
}
func (m *QueryWithdrawalPreviewRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryWithdrawalPreviewRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryWithdrawalPreviewRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryWithdrawalPreviewRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryWithdrawalPreviewRequest.Merge(m, src)
}
func (m *QueryWithdrawalPreviewRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryWithdrawalPreviewRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryWithdrawalPreviewRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryWithdrawalPreviewRequest proto.InternalMessageInfo

func (m *QueryWithdrawalPreviewRequest) GetVaultType() VaultType {
	if m != nil {
		return m.VaultType
	}
	return UNSPECIFIED
}

type QueryWithdrawalPreviewResponse struct {
	EstimatedTokens cosmossdk_io_math.Int       `protobuf:"bytes,1,opt,name=estimated_tokens,json=estimatedTokens,proto3,customtype=cosmossdk.io/math.Int" json:"estimated_tokens"`
	SharePrice      cosmossdk_io_math.LegacyDec `protobuf:"bytes,2,opt,name=share_price,json=sharePrice,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"share_price"`
	FeeAmount       cosmossdk_io_math.Int       `protobuf:"bytes,3,opt,name=fee_amount,json=feeAmount,proto3,customtype=cosmossdk.io/math.Int" json:"fee_amount"`
}

func (m *QueryWithdrawalPreviewResponse) Reset()         { *m = QueryWithdrawalPreviewResponse{} }
func (m *QueryWithdrawalPreviewResponse) String() string { return proto.CompactTextString(m) }
func (*QueryWithdrawalPreviewResponse) ProtoMessage()    {}
func (*QueryWithdrawalPreviewResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f2278c9f0560185, []int{29}
}
func (m *QueryWithdrawalPreviewResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryWithdrawalPreviewResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryWithdrawalPreviewResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryWithdrawalPreviewResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryWithdrawalPreviewResponse.Merge(m, src)
}
func (m *QueryWithdrawalPreviewResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryWithdrawalPreviewResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryWithdrawalPreviewResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryWithdrawalPreviewResponse proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("noble.dollar.vaults.v1.ExitRequestStatus", ExitRequestStatus_name, ExitRequestStatus_value)
	proto.RegisterType((*MsgDeposit)(nil), "noble.dollar.vaults.v1.MsgDeposit")
	proto.RegisterType((*MsgDepositResponse)(nil), "noble.dollar.vaults.v1.MsgDepositResponse")
	proto.RegisterType((*MsgWithdraw)(nil), "noble.dollar.vaults.v1.MsgWithdraw")
	proto.RegisterType((*MsgWithdrawResponse)(nil), "noble.dollar.vaults.v1.MsgWithdrawResponse")
	proto.RegisterType((*MsgRequestExit)(nil), "noble.dollar.vaults.v1.MsgRequestExit")
	proto.RegisterType((*MsgRequestExitResponse)(nil), "noble.dollar.vaults.v1.MsgRequestExitResponse")
	proto.RegisterType((*MsgCancelExit)(nil), "noble.dollar.vaults.v1.MsgCancelExit")
	proto.RegisterType((*MsgCancelExitResponse)(nil), "noble.dollar.vaults.v1.MsgCancelExitResponse")
	proto.RegisterType((*MsgSetYieldPreference)(nil), "noble.dollar.vaults.v1.MsgSetYieldPreference")
	proto.RegisterType((*MsgSetYieldPreferenceResponse)(nil), "noble.dollar.vaults.v1.MsgSetYieldPreferenceResponse")
	proto.RegisterType((*MsgProcessExitQueue)(nil), "noble.dollar.vaults.v1.MsgProcessExitQueue")
	proto.RegisterType((*MsgProcessExitQueueResponse)(nil), "noble.dollar.vaults.v1.MsgProcessExitQueueResponse")
	proto.RegisterType((*MsgUpdateNAV)(nil), "noble.dollar.vaults.v1.MsgUpdateNAV")
	proto.RegisterType((*MsgUpdateNAVResponse)(nil), "noble.dollar.vaults.v1.MsgUpdateNAVResponse")
	proto.RegisterType((*UserPosition)(nil), "noble.dollar.vaults.v1.UserPosition")
	proto.RegisterType((*ExitRequest)(nil), "noble.dollar.vaults.v1.ExitRequest")
	proto.RegisterType((*QueryVaultStateRequest)(nil), "noble.dollar.vaults.v1.QueryVaultStateRequest")
	proto.RegisterType((*QueryVaultStateResponse)(nil), "noble.dollar.vaults.v1.QueryVaultStateResponse")
	proto.RegisterType((*QueryUserPositionRequest)(nil), "noble.dollar.vaults.v1.QueryUserPositionRequest")
	proto.RegisterType((*QueryUserPositionResponse)(nil), "noble.dollar.vaults.v1.QueryUserPositionResponse")
	proto.RegisterType((*QuerySharePriceRequest)(nil), "noble.dollar.vaults.v1.QuerySharePriceRequest")
	proto.RegisterType((*QuerySharePriceResponse)(nil), "noble.dollar.vaults.v1.QuerySharePriceResponse")
	proto.RegisterType((*QueryPricingInfoRequest)(nil), "noble.dollar.vaults.v1.QueryPricingInfoRequest")
	proto.RegisterType((*QueryPricingInfoResponse)(nil), "noble.dollar.vaults.v1.QueryPricingInfoResponse")
	proto.RegisterType((*QueryExitQueueRequest)(nil), "noble.dollar.vaults.v1.QueryExitQueueRequest")
	proto.RegisterType((*QueryExitQueueResponse)(nil), "noble.dollar.vaults.v1.QueryExitQueueResponse")
	proto.RegisterType((*QueryDepositPreviewRequest)(nil), "noble.dollar.vaults.v1.QueryDepositPreviewRequest")
	proto.RegisterType((*QueryDepositPreviewResponse)(nil), "noble.dollar.vaults.v1.QueryDepositPreviewResponse")
	proto.RegisterType((*QueryWithdrawalPreviewRequest)(nil), "noble.dollar.vaults.v1.QueryWithdrawalPreviewRequest")
	proto.RegisterType((*QueryWithdrawalPreviewResponse)(nil), "noble.dollar.vaults.v1.QueryWithdrawalPreviewResponse")
}

func init() {
	proto.RegisterFile("noble/dollar/vaults/v1/vaults_v2.proto", fileDescriptor_3f2278c9f0560185)
}

var fileDescriptor_3f2278c9f0560185 = []byte{
	// 2227 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x59, 0x4d, 0x6c, 0x1b, 0xc7,
	0x15, 0xd6, 0x52, 0xb4, 0x24, 0x3e, 0x52, 0xb2, 0xb4, 0xfe, 0x93, 0xd7, 0xb5, 0x24, 0xaf, 0xe3,
	0xc0, 0x55, 0x22, 0x52, 0xa6, 0x6b, 0x1f, 0x94, 0x1e, 0xa2, 0x1f, 0xc6, 0x26, 0x20, 0xc9, 0xf4,
	0x52, 0x96, 0xe3, 0xb4, 0xe8, 0x76, 0x44, 0x0e, 0x57, 0xdb, 0x90, 0xb3, 0xcc, 0xce, 0x92, 0x92,
	0x7c, 0x2a, 0x82, 0x1e, 0x82, 0x5e, 0xe2, 0x53, 0x7b, 0x69, 0x81, 0xa0, 0x2d, 0xd0, 0x00, 0xbd,
	0xb8, 0x40, 0x2e, 0x3d, 0xf5, 0xd2, 0x43, 0x6e, 0x0d, 0x72, 0x2a, 0x7a, 0x48, 0x0b, 0xfb, 0xe0,
	0xa6, 0x87, 0xa2, 0x28, 0xd0, 0x7b, 0x31, 0x3f, 0xbb, 0x5c, 0xf1, 0x4f, 0x22, 0x29, 0xc3, 0xcd,
	0x85, 0xd8, 0xdd, 0x79, 0xef, 0x7b, 0x6f, 0xde, 0x7c, 0x33, 0xef, 0xbd, 0x21, 0xbc, 0x4e, 0x9c,
	0x9d, 0x32, 0x4e, 0x15, 0x9d, 0x72, 0x19, 0xb9, 0xa9, 0x3a, 0xaa, 0x95, 0x3d, 0x9a, 0xaa, 0xdf,
	0x90, 0x4f, 0x66, 0x3d, 0x9d, 0xac, 0xba, 0x8e, 0xe7, 0xa8, 0xe7, 0xb9, 0x5c, 0x52, 0xc8, 0x25,
	0xc5, 0x68, 0xb2, 0x7e, 0x43, 0x9b, 0x42, 0x15, 0x9b, 0x38, 0x29, 0xfe, 0x2b, 0x44, 0xb5, 0x0b,
	0x05, 0x87, 0x56, 0x1c, 0x9a, 0xaa, 0x50, 0x8b, 0x21, 0x55, 0xa8, 0x25, 0x07, 0x2e, 0x8a, 0x01,
	0x93, 0xbf, 0xa5, 0xc4, 0x8b, 0x1c, 0x3a, 0x6b, 0x39, 0x96, 0x23, 0xbe, 0xb3, 0x27, 0xf9, 0x75,
	0xd6, 0x72, 0x1c, 0xab, 0x8c, 0x53, 0xfc, 0x6d, 0xa7, 0x56, 0x4a, 0x79, 0x76, 0x05, 0x53, 0x0f,
	0x55, 0xaa, 0x52, 0xe0, 0x6a, 0x57, 0xef, 0xa5, 0xd0, 0x5c, 0x07, 0x21, 0x82, 0xea, 0x52, 0xe2,
	0x4a, 0x07, 0x89, 0x12, 0xc6, 0x3e, 0xc8, 0xf5, 0x0e, 0x22, 0x05, 0xd7, 0xa1, 0xd4, 0x2c, 0xec,
	0x22, 0x9b, 0x08, 0x49, 0xfd, 0x5f, 0x11, 0x80, 0x0d, 0x6a, 0xad, 0xe1, 0xaa, 0x43, 0x6d, 0x4f,
	0x5d, 0x84, 0x11, 0x6a, 0x5b, 0x04, 0xbb, 0xd3, 0xca, 0x9c, 0x72, 0x3d, 0xb6, 0x32, 0xfd, 0xe5,
	0x67, 0x0b, 0x67, 0xe5, 0xdc, 0x97, 0x8b, 0x45, 0x17, 0x53, 0x9a, 0xf7, 0x5c, 0x9b, 0x58, 0x86,
	0x94, 0x53, 0xdf, 0x06, 0xe0, 0xf8, 0xa6, 0x77, 0x50, 0xc5, 0xd3, 0x91, 0x39, 0xe5, 0xfa, 0x44,
	0xfa, 0x4a, 0xb2, 0x7d, 0xfc, 0x93, 0xdb, 0xec, 0x69, 0xeb, 0xa0, 0x8a, 0x8d, 0x58, 0xdd, 0x7f,
	0x54, 0xef, 0xc2, 0x08, 0xaa, 0x38, 0x35, 0xe2, 0x4d, 0x0f, 0x73, 0x9b, 0x8b, 0x9f, 0x7f, 0x35,
	0x3b, 0xf4, 0xd7, 0xaf, 0x66, 0xcf, 0x09, 0xbb, 0xb4, 0xf8, 0x7e, 0xd2, 0x76, 0x52, 0x15, 0xe4,
	0xed, 0x26, 0xb3, 0xc4, 0xfb, 0xf2, 0xb3, 0x05, 0x90, 0x0e, 0x65, 0x89, 0xf7, 0xe9, 0x8b, 0xa7,
	0xf3, 0x8a, 0x21, 0xf5, 0xd5, 0x7b, 0x00, 0x15, 0x9b, 0x98, 0x74, 0x17, 0xb9, 0x98, 0x4e, 0x47,
	0xfb, 0x44, 0x8b, 0x55, 0x6c, 0x92, 0xe7, 0x10, 0xea, 0x2c, 0xc4, 0x4b, 0x8e, 0x6b, 0x39, 0xe6,
	0x81, 0x8d, 0xcb, 0xc5, 0xe9, 0x53, 0x73, 0xca, 0xf5, 0x31, 0x03, 0xf8, 0xa7, 0x47, 0xec, 0xcb,
	0xd2, 0xe2, 0x47, 0x9f, 0xcc, 0x0e, 0xfd, 0xe3, 0x93, 0xd9, 0xa1, 0x0f, 0x5f, 0x3c, 0x9d, 0x97,
	0x21, 0xf9, 0xe9, 0x8b, 0xa7, 0xf3, 0xd3, 0x4d, 0xa1, 0x4f, 0xa7, 0x64, 0x84, 0xf5, 0x9f, 0x47,
	0x40, 0x6d, 0x04, 0xdc, 0xc0, 0xb4, 0xea, 0x10, 0x8a, 0xd5, 0x07, 0x30, 0x2e, 0xdc, 0x36, 0x2b,
	0x36, 0xf1, 0x70, 0x51, 0xc6, 0xbf, 0x77, 0xef, 0x13, 0x02, 0x66, 0x83, 0xa3, 0xa8, 0x0f, 0x21,
	0xce, 0xdf, 0xcd, 0xaa, 0x6b, 0x17, 0xc4, 0xf2, 0xc4, 0x56, 0x6e, 0x4b, 0xd0, 0x4b, 0xad, 0xa0,
	0xeb, 0xd8, 0x42, 0x85, 0x83, 0x35, 0x5c, 0x08, 0x41, 0xaf, 0xe1, 0x82, 0x80, 0x06, 0x0e, 0x95,
	0x63, 0x48, 0xea, 0x7d, 0x88, 0x97, 0x30, 0x66, 0x54, 0x72, 0x2d, 0x5c, 0xec, 0x7b, 0xe5, 0xa0,
	0x84, 0xf1, 0xaa, 0xc0, 0xd0, 0xff, 0x1c, 0x81, 0xf8, 0x06, 0xb5, 0x1e, 0xda, 0xde, 0x6e, 0xd1,
	0x45, 0x7b, 0xaf, 0x8a, 0x8b, 0x92, 0x3d, 0x7d, 0x73, 0x51, 0xe8, 0xfb, 0x5c, 0xf4, 0x9c, 0xf7,
	0x31, 0x19, 0x8c, 0x8b, 0x5b, 0x1c, 0x62, 0xe9, 0x46, 0x07, 0xaa, 0x5d, 0x6c, 0xa1, 0x9a, 0x1f,
	0x41, 0xfd, 0xbf, 0x11, 0x38, 0x13, 0x8a, 0x68, 0x40, 0xb6, 0xef, 0xc1, 0xa4, 0xf0, 0xcb, 0xdc,
	0x93, 0x43, 0xa4, 0x6f, 0xbe, 0x9d, 0x16, 0x48, 0xbe, 0x0d, 0x12, 0x62, 0xf2, 0x4e, 0xcd, 0x25,
	0xb8, 0x28, 0x49, 0xd7, 0x37, 0x93, 0x57, 0x38, 0x4a, 0x33, 0x93, 0x87, 0x5f, 0x16, 0x93, 0xa3,
	0x27, 0xc0, 0xe4, 0x9f, 0x44, 0x60, 0x62, 0x83, 0x5a, 0x06, 0xfe, 0xa0, 0x86, 0xa9, 0x97, 0xd9,
	0x7f, 0x75, 0x07, 0xeb, 0xc9, 0x90, 0x79, 0xe9, 0x3b, 0x1d, 0xb8, 0xf7, 0xad, 0x16, 0xee, 0x85,
	0xe6, 0xac, 0xff, 0x5e, 0x81, 0xf3, 0x87, 0xc3, 0x10, 0x30, 0xf0, 0x1a, 0x4c, 0x7c, 0x50, 0xc3,
	0x35, 0x6c, 0xf2, 0x53, 0xd0, 0x76, 0x04, 0xff, 0xa2, 0xc6, 0x38, 0xff, 0x9a, 0x93, 0x1f, 0xd5,
	0x87, 0x70, 0x16, 0x53, 0xcf, 0xae, 0x20, 0x0f, 0x17, 0xcd, 0x82, 0x53, 0xa9, 0x96, 0x31, 0x17,
	0x66, 0xd1, 0x88, 0xa7, 0xb5, 0xa4, 0xc8, 0xb8, 0x49, 0x3f, 0xe3, 0x26, 0xb7, 0xfc, 0x8c, 0xbb,
	0x32, 0xc6, 0xe6, 0xfa, 0xe4, 0x6f, 0xb3, 0x8a, 0x71, 0x26, 0x40, 0x58, 0x0d, 0x00, 0xd4, 0x0b,
	0x30, 0x8a, 0xf7, 0x6d, 0xcf, 0xb4, 0xe5, 0xd1, 0x65, 0x8c, 0xb0, 0xd7, 0x6c, 0x51, 0xff, 0x58,
	0x81, 0xf1, 0x0d, 0x6a, 0xad, 0x22, 0x52, 0xc0, 0xe5, 0x3e, 0x57, 0x2e, 0x04, 0x1e, 0x09, 0x83,
	0x2f, 0xdd, 0xec, 0x10, 0xc6, 0x4b, 0x2d, 0x61, 0x6c, 0xd8, 0xd7, 0x5d, 0x38, 0x77, 0xc8, 0xa1,
	0x20, 0x86, 0x8f, 0xe0, 0xb4, 0xdc, 0x68, 0x2e, 0xf6, 0xc4, 0x56, 0xeb, 0x77, 0x13, 0x4f, 0x08,
	0x20, 0x43, 0xe2, 0xe8, 0x5f, 0x2b, 0xdc, 0x68, 0x1e, 0x7b, 0x3c, 0xcd, 0xe5, 0x5c, 0x5c, 0xc2,
	0x2e, 0x26, 0x05, 0xfc, 0x4a, 0x78, 0xdc, 0x94, 0x85, 0x87, 0x5b, 0xb2, 0xf0, 0x5b, 0x1d, 0xe2,
	0x7a, 0xb5, 0x25, 0xae, 0xad, 0x33, 0xd2, 0xf7, 0xe0, 0x72, 0xdb, 0xa9, 0x06, 0x71, 0x4e, 0xc1,
	0x99, 0xaa, 0x8b, 0xeb, 0xb6, 0x53, 0x63, 0xc5, 0xa0, 0x3f, 0xcc, 0xe7, 0x3f, 0x66, 0xa8, 0xfe,
	0x50, 0x28, 0x46, 0xd7, 0x60, 0x82, 0xe0, 0xbd, 0xb0, 0x6c, 0x84, 0xcb, 0x8e, 0x13, 0xbc, 0x17,
	0x32, 0xfc, 0x6f, 0x85, 0x9f, 0xce, 0x39, 0xd7, 0x29, 0x60, 0x4a, 0xd9, 0xd2, 0xde, 0x67, 0xe4,
	0x57, 0x6f, 0x43, 0x0c, 0xd5, 0xbc, 0x5d, 0xc7, 0xb5, 0xbd, 0x83, 0x23, 0xa3, 0xdc, 0x10, 0x3d,
	0x81, 0x40, 0x5f, 0x81, 0x44, 0x05, 0xed, 0x9b, 0xae, 0xd8, 0xb0, 0xe2, 0xd8, 0x88, 0x1a, 0xf1,
	0x0a, 0xda, 0x97, 0x7b, 0x98, 0x2e, 0x7d, 0x37, 0x1c, 0xea, 0x86, 0x71, 0x16, 0xed, 0x2b, 0x2d,
	0xd1, 0x6e, 0x9e, 0x1a, 0x3b, 0x18, 0x2f, 0xb5, 0x99, 0x72, 0x10, 0xea, 0x05, 0x50, 0x7d, 0xe3,
	0xac, 0xee, 0x66, 0x42, 0x92, 0xd5, 0x51, 0x63, 0xca, 0x1f, 0xc9, 0xf9, 0x03, 0xaa, 0x09, 0xaa,
	0xcc, 0x63, 0x45, 0x9b, 0x7a, 0xae, 0xbd, 0x53, 0xf3, 0x06, 0xc8, 0x37, 0x53, 0x02, 0x6b, 0xad,
	0x01, 0xd5, 0x9a, 0xcb, 0x86, 0x4f, 0x22, 0x97, 0xe9, 0xbf, 0x8a, 0x40, 0x62, 0x83, 0x5a, 0x0f,
	0xaa, 0x45, 0xe4, 0xe1, 0xcd, 0xe5, 0xed, 0x57, 0xb8, 0xe4, 0x59, 0x18, 0x65, 0x5c, 0x25, 0xa8,
	0xde, 0x7f, 0x92, 0x20, 0x78, 0x6f, 0x13, 0xd5, 0xd5, 0xf3, 0x30, 0xe2, 0x62, 0x44, 0x1d, 0x22,
	0x72, 0xa8, 0x21, 0xdf, 0x96, 0x6e, 0x75, 0xa6, 0x8c, 0xd6, 0x42, 0x99, 0x20, 0x26, 0xfa, 0x73,
	0x05, 0xce, 0x86, 0x83, 0x14, 0x90, 0x24, 0x0f, 0x89, 0x60, 0x3f, 0x32, 0xbf, 0xfb, 0x3d, 0xf4,
	0xe2, 0x3e, 0x0a, 0x73, 0x3e, 0x14, 0x87, 0xc8, 0x80, 0x71, 0x78, 0x03, 0xa6, 0x0a, 0xbb, 0x88,
	0x58, 0xd8, 0xac, 0x62, 0xb7, 0x80, 0x89, 0x87, 0x2c, 0x51, 0xaf, 0x9c, 0x32, 0x26, 0xc5, 0x40,
	0x2e, 0xf8, 0xae, 0xff, 0x22, 0x0a, 0x89, 0x07, 0x14, 0xbb, 0x41, 0xca, 0x6b, 0x24, 0x6d, 0x65,
	0xc0, 0x0a, 0x14, 0xb1, 0x73, 0xcb, 0x26, 0x05, 0xbb, 0x8a, 0xca, 0x66, 0x51, 0xf4, 0x1b, 0x03,
	0x6c, 0x0f, 0x35, 0x00, 0x5b, 0xf3, 0xb1, 0xd4, 0x1f, 0xc0, 0x69, 0x54, 0xb7, 0x4c, 0x4c, 0x3c,
	0xf7, 0xe0, 0x44, 0x0a, 0xb3, 0x71, 0x54, 0xb7, 0x32, 0x0c, 0x4d, 0xd4, 0x66, 0x59, 0x18, 0x2f,
	0xd9, 0x2e, 0xf5, 0x7c, 0xf7, 0x39, 0xb3, 0x8e, 0x9b, 0xf8, 0x13, 0x5c, 0xd5, 0xef, 0x6c, 0xb3,
	0x30, 0x5e, 0x46, 0xd4, 0x33, 0x51, 0xc1, 0xb3, 0xeb, 0x6c, 0x9b, 0x9d, 0xea, 0x05, 0x8a, 0xa9,
	0x2e, 0x4b, 0xcd, 0xe6, 0x7c, 0x34, 0xd2, 0x9c, 0x8f, 0xd4, 0xbb, 0x30, 0xce, 0x0b, 0x80, 0xe0,
	0x20, 0x1d, 0x9d, 0x1b, 0xbe, 0x1e, 0x4f, 0x5f, 0xed, 0xb4, 0x33, 0x45, 0x5a, 0xe7, 0xb2, 0x46,
	0x02, 0x37, 0x5e, 0xa8, 0xfe, 0xf5, 0x30, 0xc4, 0x43, 0xa3, 0xea, 0x65, 0x00, 0x09, 0xca, 0xaa,
	0x0b, 0xce, 0x10, 0x23, 0x26, 0xbf, 0x64, 0x8b, 0xec, 0x00, 0xaf, 0x51, 0xec, 0x9a, 0x48, 0x1c,
	0x18, 0x7c, 0xad, 0x13, 0x46, 0x9c, 0x7d, 0x93, 0x67, 0x48, 0xd3, 0x91, 0x31, 0x3c, 0x50, 0x59,
	0x19, 0x1d, 0x90, 0xa1, 0x77, 0x20, 0x21, 0x7d, 0xc7, 0x45, 0x13, 0x79, 0x3d, 0x2d, 0x49, 0x3c,
	0xd0, 0x5c, 0xf6, 0xda, 0x94, 0x93, 0x23, 0xed, 0xca, 0xc9, 0x47, 0x70, 0x1a, 0xef, 0x57, 0x71,
	0x81, 0x99, 0x93, 0x8d, 0xd9, 0x68, 0xbf, 0x15, 0x93, 0x0f, 0x24, 0xba, 0x33, 0x75, 0x19, 0x46,
	0xa8, 0x87, 0xbc, 0x1a, 0x9d, 0x1e, 0xe3, 0x21, 0xfd, 0xf6, 0x31, 0xd6, 0x3a, 0xcf, 0x15, 0x0c,
	0xa9, 0xa8, 0xbf, 0x07, 0xe7, 0xef, 0xd7, 0xb0, 0x7b, 0xc0, 0x83, 0xce, 0xc6, 0xb0, 0xbf, 0xea,
	0x87, 0xd7, 0x4c, 0xe9, 0x7d, 0xcd, 0xf4, 0x67, 0x0a, 0x5c, 0x68, 0x01, 0x97, 0xe7, 0xe9, 0x2a,
	0xc4, 0x05, 0x3a, 0xf3, 0x43, 0xc0, 0xc7, 0xd3, 0x7a, 0x57, 0x78, 0x01, 0x20, 0x9c, 0xe2, 0xcf,
	0xcc, 0x45, 0x82, 0xea, 0x66, 0xc1, 0x21, 0x25, 0xdb, 0x92, 0xf5, 0x79, 0x47, 0x17, 0x37, 0x97,
	0xb7, 0x57, 0xb9, 0xa0, 0x11, 0x23, 0xa8, 0x2e, 0x1e, 0x19, 0x02, 0xef, 0xc3, 0x04, 0xc2, 0x70,
	0x77, 0x84, 0x77, 0x30, 0xf6, 0x11, 0x4a, 0xfe, 0xa3, 0xfe, 0x44, 0x81, 0x69, 0x3e, 0xc9, 0xf0,
	0x81, 0xea, 0xc7, 0x30, 0x0d, 0xa3, 0xfe, 0xae, 0x38, 0x2a, 0xc1, 0xfa, 0x82, 0x83, 0xa7, 0x57,
	0xfd, 0xe3, 0x08, 0x5c, 0x6c, 0xe3, 0x92, 0x8c, 0xfc, 0xdb, 0x30, 0x76, 0xa8, 0xff, 0x89, 0xa7,
	0x5f, 0xeb, 0x84, 0x7e, 0x48, 0x3f, 0xd0, 0x62, 0x05, 0x4a, 0xa1, 0xe6, 0xba, 0x98, 0x78, 0x66,
	0x1d, 0x95, 0x6b, 0xb8, 0xff, 0x66, 0x5b, 0xc2, 0x6c, 0x33, 0x14, 0xb6, 0x51, 0x6a, 0xc4, 0xc5,
	0xa8, 0x6c, 0x3f, 0xc6, 0x45, 0xd3, 0x42, 0x36, 0xe9, 0xbb, 0x3a, 0x98, 0x68, 0x00, 0xdd, 0x41,
	0x36, 0x09, 0x58, 0x9e, 0x0f, 0x3a, 0xf0, 0x93, 0x63, 0xf9, 0x1f, 0x7c, 0x96, 0x87, 0xc1, 0x65,
	0xac, 0x9b, 0xee, 0x0f, 0x94, 0x13, 0xbb, 0x3f, 0xc8, 0x40, 0x9c, 0x27, 0x96, 0x1a, 0x2f, 0x54,
	0x7a, 0x6a, 0x4d, 0x81, 0x29, 0x8a, 0x02, 0x47, 0xff, 0x93, 0xef, 0x3b, 0x43, 0xb5, 0x89, 0x95,
	0x25, 0x25, 0xe7, 0xc4, 0x22, 0x13, 0xba, 0x63, 0x8d, 0x0c, 0x78, 0xc7, 0x7a, 0x19, 0xc0, 0xa6,
	0x41, 0x3e, 0x16, 0xbd, 0x58, 0xcc, 0xa6, 0xfe, 0xf5, 0xe6, 0x8e, 0xdc, 0x82, 0x87, 0x66, 0x21,
	0x97, 0xe0, 0x1d, 0x56, 0xb8, 0xf1, 0xcf, 0xa6, 0x4d, 0x4a, 0x8e, 0xa4, 0x7c, 0xc7, 0xac, 0x18,
	0x86, 0x88, 0x57, 0x1b, 0x2f, 0xfa, 0xcf, 0x14, 0x38, 0xc7, 0x8d, 0x84, 0x1a, 0x88, 0x93, 0x0a,
	0xd4, 0x5b, 0x6d, 0x32, 0x68, 0xb7, 0xb3, 0x22, 0x9c, 0x5b, 0xf5, 0xff, 0x28, 0x92, 0xdc, 0xad,
	0x9d, 0xcd, 0x5d, 0x18, 0xe7, 0xb8, 0x41, 0x49, 0xa0, 0xf4, 0x50, 0x12, 0x30, 0x4d, 0xbf, 0x24,
	0x50, 0xdf, 0x64, 0x4d, 0x8f, 0x87, 0xca, 0xa6, 0xc8, 0x78, 0x65, 0x4c, 0x2c, 0x6f, 0x97, 0xfb,
	0x19, 0x35, 0x26, 0xf9, 0x08, 0xb7, 0xbc, 0xce, 0xbf, 0xab, 0x3f, 0x84, 0x33, 0x21, 0xe9, 0xa2,
	0x39, 0xe0, 0x85, 0xd0, 0x54, 0xc3, 0x40, 0x51, 0xdc, 0x91, 0xeb, 0x9f, 0x2a, 0xa0, 0xf1, 0x49,
	0x4b, 0x0a, 0xe4, 0x58, 0x55, 0x8d, 0xf7, 0xfe, 0x0f, 0xb9, 0xab, 0xff, 0x26, 0x02, 0x97, 0xda,
	0xba, 0xda, 0xb8, 0x17, 0x6d, 0x5c, 0x37, 0x0d, 0x58, 0x85, 0x9f, 0x0e, 0x90, 0xe4, 0x7f, 0x09,
	0x2f, 0xed, 0x2a, 0xfe, 0x9e, 0x48, 0x9c, 0x03, 0xfe, 0x87, 0xc2, 0xf2, 0xe8, 0xb2, 0x08, 0xd3,
	0xef, 0x14, 0xb8, 0xcc, 0xc3, 0xe4, 0x5f, 0xea, 0xa2, 0xf2, 0xcb, 0x58, 0x54, 0x19, 0xe0, 0xc8,
	0x60, 0x45, 0xa4, 0xfe, 0xdb, 0x08, 0xcc, 0x74, 0xf2, 0xb6, 0xdd, 0xba, 0xca, 0xc2, 0x6f, 0xf0,
	0x75, 0x95, 0x95, 0xdf, 0x37, 0x66, 0x5d, 0xe7, 0x7f, 0xa9, 0xc0, 0x54, 0x4b, 0xf9, 0xa9, 0x5e,
	0x80, 0x33, 0x99, 0x77, 0xb3, 0x5b, 0x66, 0x7e, 0x6b, 0x79, 0xeb, 0x41, 0xde, 0xcc, 0x65, 0x36,
	0xd7, 0xb2, 0x9b, 0x77, 0x26, 0x87, 0x54, 0x0d, 0xce, 0x1f, 0x1a, 0x30, 0xee, 0xad, 0x66, 0xf2,
	0x79, 0x36, 0xa6, 0xa8, 0x17, 0xe1, 0x5c, 0x78, 0x6c, 0xf5, 0xde, 0x46, 0x6e, 0x3d, 0xb3, 0x95,
	0x59, 0x9b, 0x8c, 0xb4, 0x0c, 0x2d, 0x6f, 0xae, 0x66, 0xd6, 0xd7, 0x33, 0x6b, 0x93, 0xc3, 0xcd,
	0xa6, 0x32, 0xef, 0xe6, 0xb2, 0x46, 0x66, 0x6d, 0x32, 0xaa, 0x45, 0x3f, 0xfa, 0xf5, 0xcc, 0x50,
	0xfa, 0x9f, 0xa7, 0x00, 0x38, 0x59, 0xb6, 0xd3, 0x1b, 0xd4, 0x52, 0x1f, 0xc1, 0xa8, 0xdf, 0xbc,
	0x75, 0xac, 0x46, 0x1b, 0xff, 0xa4, 0x69, 0xf3, 0x47, 0xcb, 0x04, 0x84, 0xf8, 0x3e, 0x8c, 0x05,
	0x7f, 0x33, 0x5d, 0xed, 0xa2, 0xe7, 0x0b, 0x69, 0x6f, 0x1c, 0x43, 0x28, 0x40, 0xc7, 0x10, 0x0f,
	0x5f, 0xfd, 0xbf, 0xde, 0x45, 0x37, 0x24, 0xa7, 0x25, 0x8f, 0x27, 0x17, 0x98, 0xd9, 0x01, 0x08,
	0x5d, 0x53, 0x5f, 0xeb, 0xa2, 0xdd, 0x10, 0xd3, 0x16, 0x8e, 0x25, 0x16, 0xd8, 0x78, 0x0c, 0x6a,
	0x9b, 0x4b, 0xe0, 0x6e, 0x20, 0xad, 0xe2, 0xda, 0xad, 0x9e, 0xc4, 0x03, 0xdb, 0x1e, 0x4c, 0xb6,
	0xdc, 0x8d, 0x76, 0x5b, 0x87, 0x66, 0x61, 0xed, 0x66, 0x0f, 0xc2, 0x81, 0x55, 0x13, 0x62, 0x8d,
	0x7b, 0xb9, 0xd7, 0xba, 0x20, 0x04, 0x52, 0xda, 0x9b, 0xc7, 0x91, 0xf2, 0x0d, 0x68, 0xa7, 0x7e,
	0xcc, 0xf6, 0x65, 0xfa, 0x8f, 0x23, 0x90, 0x90, 0x64, 0xe7, 0xa7, 0x97, 0x5a, 0x91, 0xe4, 0x17,
	0xfd, 0x54, 0x47, 0x32, 0xb4, 0x6f, 0x11, 0xb5, 0xd4, 0xb1, 0xe5, 0xe5, 0x3c, 0x69, 0xd3, 0xbd,
	0xd3, 0x62, 0x57, 0x80, 0x36, 0x1d, 0x95, 0x76, 0xa3, 0x07, 0x0d, 0x69, 0xb4, 0x02, 0xd0, 0x28,
	0xcd, 0x8f, 0x98, 0x63, 0x4b, 0x83, 0x70, 0xc4, 0x1c, 0xdb, 0xd4, 0xfc, 0x55, 0x88, 0x87, 0x8a,
	0x48, 0xb5, 0xbb, 0x7e, 0x6b, 0xdd, 0xad, 0x2d, 0x1e, 0x5f, 0x41, 0x5a, 0xfc, 0x11, 0xc4, 0x1a,
	0x64, 0x5d, 0xe8, 0xaa, 0xde, 0x5c, 0xbc, 0x6a, 0xc9, 0xe3, 0x8a, 0x4b, 0x5b, 0x07, 0x30, 0x71,
	0xb8, 0x8e, 0x51, 0xd3, 0x5d, 0x11, 0xda, 0xd6, 0x67, 0x9d, 0x37, 0x49, 0xb7, 0x42, 0xe9, 0x43,
	0x05, 0xa6, 0x5a, 0xd2, 0xad, 0x7a, 0xab, 0x2b, 0x54, 0xa7, 0x62, 0x42, 0xbb, 0xdd, 0xab, 0x9a,
	0x70, 0x62, 0x65, 0xe9, 0xf3, 0x67, 0x33, 0xca, 0x17, 0xcf, 0x66, 0x94, 0xbf, 0x3f, 0x9b, 0x51,
	0x9e, 0x3c, 0x9f, 0x19, 0xfa, 0xe2, 0xf9, 0xcc, 0xd0, 0x5f, 0x9e, 0xcf, 0x0c, 0xbd, 0x37, 0x27,
	0xa1, 0x04, 0xee, 0xfe, 0xc1, 0xe3, 0x54, 0x3d, 0x9d, 0x62, 0xa5, 0x0a, 0x95, 0x37, 0xcd, 0x3b,
	0x23, 0xbc, 0x2f, 0xbb, 0xf9, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x0c, 0xf3, 0xce, 0x76, 0x51,
	0x24, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// VaultV2MsgClient is the client API for VaultV2Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type VaultV2MsgClient interface {
	// Deposit tokens to receive shares
	Deposit(ctx context.Context, in *MsgDeposit, opts ...grpc.CallOption) (*MsgDepositResponse, error)
	// Withdraw tokens by burning shares
	Withdraw(ctx context.Context, in *MsgWithdraw, opts ...grpc.CallOption) (*MsgWithdrawResponse, error)
	// Request exit to join withdrawal queue
	RequestExit(ctx context.Context, in *MsgRequestExit, opts ...grpc.CallOption) (*MsgRequestExitResponse, error)
	// Cancel exit request
	CancelExit(ctx context.Context, in *MsgCancelExit, opts ...grpc.CallOption) (*MsgCancelExitResponse, error)
	// Set yield preference
	SetYieldPreference(ctx context.Context, in *MsgSetYieldPreference, opts ...grpc.CallOption) (*MsgSetYieldPreferenceResponse, error)
	// Process exit queue (authority only)
	ProcessExitQueue(ctx context.Context, in *MsgProcessExitQueue, opts ...grpc.CallOption) (*MsgProcessExitQueueResponse, error)
	// Update vault NAV (authority only)
	UpdateNAV(ctx context.Context, in *MsgUpdateNAV, opts ...grpc.CallOption) (*MsgUpdateNAVResponse, error)
}

type vaultV2MsgClient struct {
	cc grpc1.ClientConn
}

func NewVaultV2MsgClient(cc grpc1.ClientConn) VaultV2MsgClient {
	return &vaultV2MsgClient{cc}
}

func (c *vaultV2MsgClient) Deposit(ctx context.Context, in *MsgDeposit, opts ...grpc.CallOption) (*MsgDepositResponse, error) {
	out := new(MsgDepositResponse)
	err := c.cc.Invoke(ctx, "/noble.dollar.vaults.v1.VaultV2Msg/Deposit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vaultV2MsgClient) Withdraw(ctx context.Context, in *MsgWithdraw, opts ...grpc.CallOption) (*MsgWithdrawResponse, error) {
	out := new(MsgWithdrawResponse)
	err := c.cc.Invoke(ctx, "/noble.dollar.vaults.v1.VaultV2Msg/Withdraw", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vaultV2MsgClient) RequestExit(ctx context.Context, in *MsgRequestExit, opts ...grpc.CallOption) (*MsgRequestExitResponse, error) {
	out := new(MsgRequestExitResponse)
	err := c.cc.Invoke(ctx, "/noble.dollar.vaults.v1.VaultV2Msg/RequestExit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vaultV2MsgClient) CancelExit(ctx context.Context, in *MsgCancelExit, opts ...grpc.CallOption) (*MsgCancelExitResponse, error) {
	out := new(MsgCancelExitResponse)
	err := c.cc.Invoke(ctx, "/noble.dollar.vaults.v1.VaultV2Msg/CancelExit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vaultV2MsgClient) SetYieldPreference(ctx context.Context, in *MsgSetYieldPreference, opts ...grpc.CallOption) (*MsgSetYieldPreferenceResponse, error) {
	out := new(MsgSetYieldPreferenceResponse)
	err := c.cc.Invoke(ctx, "/noble.dollar.vaults.v1.VaultV2Msg/SetYieldPreference", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vaultV2MsgClient) ProcessExitQueue(ctx context.Context, in *MsgProcessExitQueue, opts ...grpc.CallOption) (*MsgProcessExitQueueResponse, error) {
	out := new(MsgProcessExitQueueResponse)
	err := c.cc.Invoke(ctx, "/noble.dollar.vaults.v1.VaultV2Msg/ProcessExitQueue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vaultV2MsgClient) UpdateNAV(ctx context.Context, in *MsgUpdateNAV, opts ...grpc.CallOption) (*MsgUpdateNAVResponse, error) {
	out := new(MsgUpdateNAVResponse)
	err := c.cc.Invoke(ctx, "/noble.dollar.vaults.v1.VaultV2Msg/UpdateNAV", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VaultV2MsgServer is the server API for VaultV2Msg service.
type VaultV2MsgServer interface {
	// Deposit tokens to receive shares
	Deposit(context.Context, *MsgDeposit) (*MsgDepositResponse, error)
	// Withdraw tokens by burning shares
	Withdraw(context.Context, *MsgWithdraw) (*MsgWithdrawResponse, error)
	// Request exit to join withdrawal queue
	RequestExit(context.Context, *MsgRequestExit) (*MsgRequestExitResponse, error)
	// Cancel exit request
	CancelExit(context.Context, *MsgCancelExit) (*MsgCancelExitResponse, error)
	// Set yield preference
	SetYieldPreference(context.Context, *MsgSetYieldPreference) (*MsgSetYieldPreferenceResponse, error)
	// Process exit queue (authority only)
	ProcessExitQueue(context.Context, *MsgProcessExitQueue) (*MsgProcessExitQueueResponse, error)
	// Update vault NAV (authority only)
	UpdateNAV(context.Context, *MsgUpdateNAV) (*MsgUpdateNAVResponse, error)
}

// UnimplementedVaultV2MsgServer can be embedded to have forward compatible implementations.
type UnimplementedVaultV2MsgServer struct {
}

func (*UnimplementedVaultV2MsgServer) Deposit(ctx context.Context, req *MsgDeposit) (*MsgDepositResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Deposit not implemented")
}
func (*UnimplementedVaultV2MsgServer) Withdraw(ctx context.Context, req *MsgWithdraw) (*MsgWithdrawResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Withdraw not implemented")
}
func (*UnimplementedVaultV2MsgServer) RequestExit(ctx context.Context, req *MsgRequestExit) (*MsgRequestExitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestExit not implemented")
}
func (*UnimplementedVaultV2MsgServer) CancelExit(ctx context.Context, req *MsgCancelExit) (*MsgCancelExitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelExit not implemented")
}
func (*UnimplementedVaultV2MsgServer) SetYieldPreference(ctx context.Context, req *MsgSetYieldPreference) (*MsgSetYieldPreferenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetYieldPreference not implemented")
}
func (*UnimplementedVaultV2MsgServer) ProcessExitQueue(ctx context.Context, req *MsgProcessExitQueue) (*MsgProcessExitQueueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessExitQueue not implemented")
}
func (*UnimplementedVaultV2MsgServer) UpdateNAV(ctx context.Context, req *MsgUpdateNAV) (*MsgUpdateNAVResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNAV not implemented")
}

func RegisterVaultV2MsgServer(s grpc1.Server, srv VaultV2MsgServer) {
	s.RegisterService(&_VaultV2Msg_serviceDesc, srv)
}

func _VaultV2Msg_Deposit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDeposit)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VaultV2MsgServer).Deposit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/noble.dollar.vaults.v1.VaultV2Msg/Deposit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VaultV2MsgServer).Deposit(ctx, req.(*MsgDeposit))
	}
	return interceptor(ctx, in, info, handler)
}

func _VaultV2Msg_Withdraw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgWithdraw)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VaultV2MsgServer).Withdraw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/noble.dollar.vaults.v1.VaultV2Msg/Withdraw",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VaultV2MsgServer).Withdraw(ctx, req.(*MsgWithdraw))
	}
	return interceptor(ctx, in, info, handler)
}

func _VaultV2Msg_RequestExit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRequestExit)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VaultV2MsgServer).RequestExit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/noble.dollar.vaults.v1.VaultV2Msg/RequestExit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VaultV2MsgServer).RequestExit(ctx, req.(*MsgRequestExit))
	}
	return interceptor(ctx, in, info, handler)
}

func _VaultV2Msg_CancelExit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCancelExit)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VaultV2MsgServer).CancelExit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/noble.dollar.vaults.v1.VaultV2Msg/CancelExit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VaultV2MsgServer).CancelExit(ctx, req.(*MsgCancelExit))
	}
	return interceptor(ctx, in, info, handler)
}

func _VaultV2Msg_SetYieldPreference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSetYieldPreference)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VaultV2MsgServer).SetYieldPreference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/noble.dollar.vaults.v1.VaultV2Msg/SetYieldPreference",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VaultV2MsgServer).SetYieldPreference(ctx, req.(*MsgSetYieldPreference))
	}
	return interceptor(ctx, in, info, handler)
}

func _VaultV2Msg_ProcessExitQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgProcessExitQueue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VaultV2MsgServer).ProcessExitQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/noble.dollar.vaults.v1.VaultV2Msg/ProcessExitQueue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VaultV2MsgServer).ProcessExitQueue(ctx, req.(*MsgProcessExitQueue))
	}
	return interceptor(ctx, in, info, handler)
}

func _VaultV2Msg_UpdateNAV_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateNAV)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VaultV2MsgServer).UpdateNAV(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/noble.dollar.vaults.v1.VaultV2Msg/UpdateNAV",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VaultV2MsgServer).UpdateNAV(ctx, req.(*MsgUpdateNAV))
	}
	return interceptor(ctx, in, info, handler)
}

var VaultV2Msg_serviceDesc = _VaultV2Msg_serviceDesc
var _VaultV2Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "noble.dollar.vaults.v1.VaultV2Msg",
	HandlerType: (*VaultV2MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Deposit",
			Handler:    _VaultV2Msg_Deposit_Handler,
		},
		{
			MethodName: "Withdraw",
			Handler:    _VaultV2Msg_Withdraw_Handler,
		},
		{
			MethodName: "RequestExit",
			Handler:    _VaultV2Msg_RequestExit_Handler,
		},
		{
			MethodName: "CancelExit",
			Handler:    _VaultV2Msg_CancelExit_Handler,
		},
		{
			MethodName: "SetYieldPreference",
			Handler:    _VaultV2Msg_SetYieldPreference_Handler,
		},
		{
			MethodName: "ProcessExitQueue",
			Handler:    _VaultV2Msg_ProcessExitQueue_Handler,
		},
		{
			MethodName: "UpdateNAV",
			Handler:    _VaultV2Msg_UpdateNAV_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "noble/dollar/vaults/v1/vaults_v2.proto",
}

// VaultV2QueryClient is the client API for VaultV2Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type VaultV2QueryClient interface {
	// Get vault state
	VaultState(ctx context.Context, in *QueryVaultStateRequest, opts ...grpc.CallOption) (*QueryVaultStateResponse, error)
	// Get user position
	UserPosition(ctx context.Context, in *QueryUserPositionRequest, opts ...grpc.CallOption) (*QueryUserPositionResponse, error)
	// Get current share price
	SharePrice(ctx context.Context, in *QuerySharePriceRequest, opts ...grpc.CallOption) (*QuerySharePriceResponse, error)
	// Get deposit/withdrawal pricing
	PricingInfo(ctx context.Context, in *QueryPricingInfoRequest, opts ...grpc.CallOption) (*QueryPricingInfoResponse, error)
	// Get exit queue status
	ExitQueue(ctx context.Context, in *QueryExitQueueRequest, opts ...grpc.CallOption) (*QueryExitQueueResponse, error)
	// Preview deposit outcome
	DepositPreview(ctx context.Context, in *QueryDepositPreviewRequest, opts ...grpc.CallOption) (*QueryDepositPreviewResponse, error)
	// Preview withdrawal outcome
	WithdrawalPreview(ctx context.Context, in *QueryWithdrawalPreviewRequest, opts ...grpc.CallOption) (*QueryWithdrawalPreviewResponse, error)
}

type vaultV2QueryClient struct {
	cc grpc1.ClientConn
}

func NewVaultV2QueryClient(cc grpc1.ClientConn) VaultV2QueryClient {
	return &vaultV2QueryClient{cc}
}

func (c *vaultV2QueryClient) VaultState(ctx context.Context, in *QueryVaultStateRequest, opts ...grpc.CallOption) (*QueryVaultStateResponse, error) {
	out := new(QueryVaultStateResponse)
	err := c.cc.Invoke(ctx, "/noble.dollar.vaults.v1.VaultV2Query/VaultState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vaultV2QueryClient) UserPosition(ctx context.Context, in *QueryUserPositionRequest, opts ...grpc.CallOption) (*QueryUserPositionResponse, error) {
	out := new(QueryUserPositionResponse)
	err := c.cc.Invoke(ctx, "/noble.dollar.vaults.v1.VaultV2Query/UserPosition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vaultV2QueryClient) SharePrice(ctx context.Context, in *QuerySharePriceRequest, opts ...grpc.CallOption) (*QuerySharePriceResponse, error) {
	out := new(QuerySharePriceResponse)
	err := c.cc.Invoke(ctx, "/noble.dollar.vaults.v1.VaultV2Query/SharePrice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vaultV2QueryClient) PricingInfo(ctx context.Context, in *QueryPricingInfoRequest, opts ...grpc.CallOption) (*QueryPricingInfoResponse, error) {
	out := new(QueryPricingInfoResponse)
	err := c.cc.Invoke(ctx, "/noble.dollar.vaults.v1.VaultV2Query/PricingInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vaultV2QueryClient) ExitQueue(ctx context.Context, in *QueryExitQueueRequest, opts ...grpc.CallOption) (*QueryExitQueueResponse, error) {
	out := new(QueryExitQueueResponse)
	err := c.cc.Invoke(ctx, "/noble.dollar.vaults.v1.VaultV2Query/ExitQueue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vaultV2QueryClient) DepositPreview(ctx context.Context, in *QueryDepositPreviewRequest, opts ...grpc.CallOption) (*QueryDepositPreviewResponse, error) {
	out := new(QueryDepositPreviewResponse)
	err := c.cc.Invoke(ctx, "/noble.dollar.vaults.v1.VaultV2Query/DepositPreview", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vaultV2QueryClient) WithdrawalPreview(ctx context.Context, in *QueryWithdrawalPreviewRequest, opts ...grpc.CallOption) (*QueryWithdrawalPreviewResponse, error) {
	out := new(QueryWithdrawalPreviewResponse)
	err := c.cc.Invoke(ctx, "/noble.dollar.vaults.v1.VaultV2Query/WithdrawalPreview", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VaultV2QueryServer is the server API for VaultV2Query service.
type VaultV2QueryServer interface {
	// Get vault state
	VaultState(context.Context, *QueryVaultStateRequest) (*QueryVaultStateResponse, error)
	// Get user position
	UserPosition(context.Context, *QueryUserPositionRequest) (*QueryUserPositionResponse, error)
	// Get current share price
	SharePrice(context.Context, *QuerySharePriceRequest) (*QuerySharePriceResponse, error)
	// Get deposit/withdrawal pricing
	PricingInfo(context.Context, *QueryPricingInfoRequest) (*QueryPricingInfoResponse, error)
	// Get exit queue status
	ExitQueue(context.Context, *QueryExitQueueRequest) (*QueryExitQueueResponse, error)
	// Preview deposit outcome
	DepositPreview(context.Context, *QueryDepositPreviewRequest) (*QueryDepositPreviewResponse, error)
	// Preview withdrawal outcome
	WithdrawalPreview(context.Context, *QueryWithdrawalPreviewRequest) (*QueryWithdrawalPreviewResponse, error)
}

// UnimplementedVaultV2QueryServer can be embedded to have forward compatible implementations.
type UnimplementedVaultV2QueryServer struct {
}

func (*UnimplementedVaultV2QueryServer) VaultState(ctx context.Context, req *QueryVaultStateRequest) (*QueryVaultStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VaultState not implemented")
}
func (*UnimplementedVaultV2QueryServer) UserPosition(ctx context.Context, req *QueryUserPositionRequest) (*QueryUserPositionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserPosition not implemented")
}
func (*UnimplementedVaultV2QueryServer) SharePrice(ctx context.Context, req *QuerySharePriceRequest) (*QuerySharePriceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SharePrice not implemented")
}
func (*UnimplementedVaultV2QueryServer) PricingInfo(ctx context.Context, req *QueryPricingInfoRequest) (*QueryPricingInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PricingInfo not implemented")
}
func (*UnimplementedVaultV2QueryServer) ExitQueue(ctx context.Context, req *QueryExitQueueRequest) (*QueryExitQueueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExitQueue not implemented")
}
func (*UnimplementedVaultV2QueryServer) DepositPreview(ctx context.Context, req *QueryDepositPreviewRequest) (*QueryDepositPreviewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DepositPreview not implemented")
}
func (*UnimplementedVaultV2QueryServer) WithdrawalPreview(ctx context.Context, req *QueryWithdrawalPreviewRequest) (*QueryWithdrawalPreviewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WithdrawalPreview not implemented")
}

func RegisterVaultV2QueryServer(s grpc1.Server, srv VaultV2QueryServer) {
	s.RegisterService(&_VaultV2Query_serviceDesc, srv)
}

func _VaultV2Query_VaultState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryVaultStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VaultV2QueryServer).VaultState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/noble.dollar.vaults.v1.VaultV2Query/VaultState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VaultV2QueryServer).VaultState(ctx, req.(*QueryVaultStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VaultV2Query_UserPosition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryUserPositionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VaultV2QueryServer).UserPosition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/noble.dollar.vaults.v1.VaultV2Query/UserPosition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VaultV2QueryServer).UserPosition(ctx, req.(*QueryUserPositionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VaultV2Query_SharePrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySharePriceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VaultV2QueryServer).SharePrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/noble.dollar.vaults.v1.VaultV2Query/SharePrice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VaultV2QueryServer).SharePrice(ctx, req.(*QuerySharePriceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VaultV2Query_PricingInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPricingInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VaultV2QueryServer).PricingInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/noble.dollar.vaults.v1.VaultV2Query/PricingInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VaultV2QueryServer).PricingInfo(ctx, req.(*QueryPricingInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VaultV2Query_ExitQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryExitQueueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VaultV2QueryServer).ExitQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/noble.dollar.vaults.v1.VaultV2Query/ExitQueue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VaultV2QueryServer).ExitQueue(ctx, req.(*QueryExitQueueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VaultV2Query_DepositPreview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDepositPreviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VaultV2QueryServer).DepositPreview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/noble.dollar.vaults.v1.VaultV2Query/DepositPreview",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VaultV2QueryServer).DepositPreview(ctx, req.(*QueryDepositPreviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VaultV2Query_WithdrawalPreview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryWithdrawalPreviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VaultV2QueryServer).WithdrawalPreview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/noble.dollar.vaults.v1.VaultV2Query/WithdrawalPreview",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VaultV2QueryServer).WithdrawalPreview(ctx, req.(*QueryWithdrawalPreviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var VaultV2Query_serviceDesc = _VaultV2Query_serviceDesc
var _VaultV2Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "noble.dollar.vaults.v1.VaultV2Query",
	HandlerType: (*VaultV2QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "VaultState",
			Handler:    _VaultV2Query_VaultState_Handler,
		},
		{
			MethodName: "UserPosition",
			Handler:    _VaultV2Query_UserPosition_Handler,
		},
		{
			MethodName: "SharePrice",
			Handler:    _VaultV2Query_SharePrice_Handler,
		},
		{
			MethodName: "PricingInfo",
			Handler:    _VaultV2Query_PricingInfo_Handler,
		},
		{
			MethodName: "ExitQueue",
			Handler:    _VaultV2Query_ExitQueue_Handler,
		},
		{
			MethodName: "DepositPreview",
			Handler:    _VaultV2Query_DepositPreview_Handler,
		},
		{
			MethodName: "WithdrawalPreview",
			Handler:    _VaultV2Query_WithdrawalPreview_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "noble/dollar/vaults/v1/vaults_v2.proto",
}

func (m *MsgDeposit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeposit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeposit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ForgoYield {
		i--
		if m.ForgoYield {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	{
		size := m.MinShares.Size()
		i -= size
		if _, err := m.MinShares.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintVaultsV2(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintVaultsV2(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.VaultType != 0 {
		i = encodeVarintVaultsV2(dAtA, i, uint64(m.VaultType))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintVaultsV2(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgDepositResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDepositResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDepositResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.FeeCharged.Size()
		i -= size
		if _, err := m.FeeCharged.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintVaultsV2(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.SharePrice.Size()
		i -= size
		if _, err := m.SharePrice.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintVaultsV2(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.SharesMinted.Size()
		i -= size
		if _, err := m.SharesMinted.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintVaultsV2(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MsgWithdraw) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgWithdraw) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgWithdraw) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.MinTokens.Size()
		i -= size
		if _, err := m.MinTokens.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintVaultsV2(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.Shares.Size()
		i -= size
		if _, err := m.Shares.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintVaultsV2(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.VaultType != 0 {
		i = encodeVarintVaultsV2(dAtA, i, uint64(m.VaultType))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintVaultsV2(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgWithdrawResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgWithdrawResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgWithdrawResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.FeeCharged.Size()
		i -= size
		if _, err := m.FeeCharged.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintVaultsV2(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.SharePrice.Size()
		i -= size
		if _, err := m.SharePrice.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintVaultsV2(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.SharesBurned.Size()
		i -= size
		if _, err := m.SharesBurned.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintVaultsV2(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.TokensWithdrawn.Size()
		i -= size
		if _, err := m.TokensWithdrawn.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintVaultsV2(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MsgRequestExit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRequestExit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRequestExit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Shares.Size()
		i -= size
		if _, err := m.Shares.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintVaultsV2(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.VaultType != 0 {
		i = encodeVarintVaultsV2(dAtA, i, uint64(m.VaultType))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintVaultsV2(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRequestExitResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRequestExitResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRequestExitResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ExitId) > 0 {
		i -= len(m.ExitId)
		copy(dAtA[i:], m.ExitId)
		i = encodeVarintVaultsV2(dAtA, i, uint64(len(m.ExitId)))
		i--
		dAtA[i] = 0x1a
	}
	n1, err1 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.EstimatedCompletion, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.EstimatedCompletion):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintVaultsV2(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x12
	if m.QueuePosition != 0 {
		i = encodeVarintVaultsV2(dAtA, i, uint64(m.QueuePosition))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgCancelExit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCancelExit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCancelExit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ExitId) > 0 {
		i -= len(m.ExitId)
		copy(dAtA[i:], m.ExitId)
		i = encodeVarintVaultsV2(dAtA, i, uint64(len(m.ExitId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintVaultsV2(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCancelExitResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCancelExitResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCancelExitResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.SharesReturned.Size()
		i -= size
		if _, err := m.SharesReturned.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintVaultsV2(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MsgSetYieldPreference) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetYieldPreference) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetYieldPreference) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ForgoYield {
		i--
		if m.ForgoYield {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.VaultType != 0 {
		i = encodeVarintVaultsV2(dAtA, i, uint64(m.VaultType))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintVaultsV2(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSetYieldPreferenceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetYieldPreferenceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetYieldPreferenceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NewPreference {
		i--
		if m.NewPreference {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.PreviousPreference {
		i--
		if m.PreviousPreference {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgProcessExitQueue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgProcessExitQueue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgProcessExitQueue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MaxRequests != 0 {
		i = encodeVarintVaultsV2(dAtA, i, uint64(m.MaxRequests))
		i--
		dAtA[i] = 0x18
	}
	if m.VaultType != 0 {
		i = encodeVarintVaultsV2(dAtA, i, uint64(m.VaultType))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintVaultsV2(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgProcessExitQueueResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgProcessExitQueueResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgProcessExitQueueResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.SharesBurned.Size()
		i -= size
		if _, err := m.SharesBurned.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintVaultsV2(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.TokensDistributed.Size()
		i -= size
		if _, err := m.TokensDistributed.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintVaultsV2(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.RequestsProcessed != 0 {
		i = encodeVarintVaultsV2(dAtA, i, uint64(m.RequestsProcessed))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateNAV) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateNAV) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateNAV) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Reason) > 0 {
		i -= len(m.Reason)
		copy(dAtA[i:], m.Reason)
		i = encodeVarintVaultsV2(dAtA, i, uint64(len(m.Reason)))
		i--
		dAtA[i] = 0x22
	}
	{
		size := m.NewNav.Size()
		i -= size
		if _, err := m.NewNav.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintVaultsV2(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.VaultType != 0 {
		i = encodeVarintVaultsV2(dAtA, i, uint64(m.VaultType))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintVaultsV2(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateNAVResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateNAVResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateNAVResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ChangePercentage != 0 {
		i = encodeVarintVaultsV2(dAtA, i, uint64(m.ChangePercentage))
		i--
		dAtA[i] = 0x18
	}
	{
		size := m.NewNav.Size()
		i -= size
		if _, err := m.NewNav.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintVaultsV2(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.PreviousNav.Size()
		i -= size
		if _, err := m.PreviousNav.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintVaultsV2(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *UserPosition) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserPosition) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserPosition) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ExitRequests) > 0 {
		for iNdEx := len(m.ExitRequests) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ExitRequests[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintVaultsV2(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.ForgoYield {
		i--
		if m.ForgoYield {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	n2, err2 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.LastActivity, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.LastActivity):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintVaultsV2(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x2a
	n3, err3 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.FirstDeposit, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.FirstDeposit):])
	if err3 != nil {
		return 0, err3
	}
	i -= n3
	i = encodeVarintVaultsV2(dAtA, i, uint64(n3))
	i--
	dAtA[i] = 0x22
	{
		size := m.AvgEntryPrice.Size()
		i -= size
		if _, err := m.AvgEntryPrice.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintVaultsV2(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.PrincipalDeposited.Size()
		i -= size
		if _, err := m.PrincipalDeposited.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintVaultsV2(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.Shares.Size()
		i -= size
		if _, err := m.Shares.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintVaultsV2(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ExitRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExitRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExitRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintVaultsV2(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x40
	}
	{
		size := m.ExpectedTokens.Size()
		i -= size
		if _, err := m.ExpectedTokens.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintVaultsV2(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	if m.QueuePosition != 0 {
		i = encodeVarintVaultsV2(dAtA, i, uint64(m.QueuePosition))
		i--
		dAtA[i] = 0x30
	}
	n4, err4 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.RequestedAt, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.RequestedAt):])
	if err4 != nil {
		return 0, err4
	}
	i -= n4
	i = encodeVarintVaultsV2(dAtA, i, uint64(n4))
	i--
	dAtA[i] = 0x2a
	{
		size := m.Shares.Size()
		i -= size
		if _, err := m.Shares.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintVaultsV2(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if m.VaultType != 0 {
		i = encodeVarintVaultsV2(dAtA, i, uint64(m.VaultType))
		i--
		dAtA[i] = 0x18
	}
	if len(m.UserAddress) > 0 {
		i -= len(m.UserAddress)
		copy(dAtA[i:], m.UserAddress)
		i = encodeVarintVaultsV2(dAtA, i, uint64(len(m.UserAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.RequestId) > 0 {
		i -= len(m.RequestId)
		copy(dAtA[i:], m.RequestId)
		i = encodeVarintVaultsV2(dAtA, i, uint64(len(m.RequestId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryVaultStateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryVaultStateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryVaultStateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.VaultType != 0 {
		i = encodeVarintVaultsV2(dAtA, i, uint64(m.VaultType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryVaultStateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryVaultStateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryVaultStateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FeeConfig != nil {
		{
			size, err := m.FeeConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVaultsV2(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.NavConfig != nil {
		{
			size, err := m.NavConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVaultsV2(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.VaultState != nil {
		{
			size, err := m.VaultState.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVaultsV2(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryUserPositionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryUserPositionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryUserPositionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.VaultType != 0 {
		i = encodeVarintVaultsV2(dAtA, i, uint64(m.VaultType))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintVaultsV2(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryUserPositionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryUserPositionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryUserPositionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.UnrealizedGain.Size()
		i -= size
		if _, err := m.UnrealizedGain.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintVaultsV2(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.CurrentValue.Size()
		i -= size
		if _, err := m.CurrentValue.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintVaultsV2(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.Position != nil {
		{
			size, err := m.Position.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVaultsV2(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuerySharePriceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySharePriceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySharePriceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.VaultType != 0 {
		i = encodeVarintVaultsV2(dAtA, i, uint64(m.VaultType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QuerySharePriceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySharePriceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySharePriceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n9, err9 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.LastUpdate, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.LastUpdate):])
	if err9 != nil {
		return 0, err9
	}
	i -= n9
	i = encodeVarintVaultsV2(dAtA, i, uint64(n9))
	i--
	dAtA[i] = 0x12
	{
		size := m.SharePrice.Size()
		i -= size
		if _, err := m.SharePrice.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintVaultsV2(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryPricingInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPricingInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPricingInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsDeposit {
		i--
		if m.IsDeposit {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintVaultsV2(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.VaultType != 0 {
		i = encodeVarintVaultsV2(dAtA, i, uint64(m.VaultType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryPricingInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPricingInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPricingInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PricingInfo != nil {
		{
			size, err := m.PricingInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVaultsV2(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryExitQueueRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryExitQueueRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryExitQueueRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UserAddress) > 0 {
		i -= len(m.UserAddress)
		copy(dAtA[i:], m.UserAddress)
		i = encodeVarintVaultsV2(dAtA, i, uint64(len(m.UserAddress)))
		i--
		dAtA[i] = 0x12
	}
	if m.VaultType != 0 {
		i = encodeVarintVaultsV2(dAtA, i, uint64(m.VaultType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryExitQueueResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryExitQueueResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryExitQueueResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.TotalQueuedShares.Size()
		i -= size
		if _, err := m.TotalQueuedShares.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintVaultsV2(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.TotalQueueLength != 0 {
		i = encodeVarintVaultsV2(dAtA, i, uint64(m.TotalQueueLength))
		i--
		dAtA[i] = 0x10
	}
	if len(m.UserRequests) > 0 {
		for iNdEx := len(m.UserRequests) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UserRequests[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintVaultsV2(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryDepositPreviewRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDepositPreviewRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDepositPreviewRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintVaultsV2(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.VaultType != 0 {
		i = encodeVarintVaultsV2(dAtA, i, uint64(m.VaultType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryDepositPreviewResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDepositPreviewResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDepositPreviewResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.FeeAmount.Size()
		i -= size
		if _, err := m.FeeAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintVaultsV2(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.SharePrice.Size()
		i -= size
		if _, err := m.SharePrice.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintVaultsV2(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.EstimatedShares.Size()
		i -= size
		if _, err := m.EstimatedShares.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintVaultsV2(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryWithdrawalPreviewRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryWithdrawalPreviewRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryWithdrawalPreviewRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Shares.Size()
		i -= size
		if _, err := m.Shares.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintVaultsV2(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.VaultType != 0 {
		i = encodeVarintVaultsV2(dAtA, i, uint64(m.VaultType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryWithdrawalPreviewResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryWithdrawalPreviewResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryWithdrawalPreviewResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.FeeAmount.Size()
		i -= size
		if _, err := m.FeeAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintVaultsV2(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.SharePrice.Size()
		i -= size
		if _, err := m.SharePrice.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintVaultsV2(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.EstimatedTokens.Size()
		i -= size
		if _, err := m.EstimatedTokens.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintVaultsV2(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintVaultsV2(dAtA []byte, offset int, v uint64) int {
	offset -= sovVaultsV2(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgDeposit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovVaultsV2(uint64(l))
	}
	if m.VaultType != 0 {
		n += 1 + sovVaultsV2(uint64(m.VaultType))
	}
	l = m.Amount.Size()
	n += 1 + l + sovVaultsV2(uint64(l))
	l = m.MinShares.Size()
	n += 1 + l + sovVaultsV2(uint64(l))
	if m.ForgoYield {
		n += 2
	}
	return n
}

func (m *MsgDepositResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.SharesMinted.Size()
	n += 1 + l + sovVaultsV2(uint64(l))
	l = m.SharePrice.Size()
	n += 1 + l + sovVaultsV2(uint64(l))
	l = m.FeeCharged.Size()
	n += 1 + l + sovVaultsV2(uint64(l))
	return n
}

func (m *MsgWithdraw) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovVaultsV2(uint64(l))
	}
	if m.VaultType != 0 {
		n += 1 + sovVaultsV2(uint64(m.VaultType))
	}
	l = m.Shares.Size()
	n += 1 + l + sovVaultsV2(uint64(l))
	l = m.MinTokens.Size()
	n += 1 + l + sovVaultsV2(uint64(l))
	return n
}

func (m *MsgWithdrawResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.TokensWithdrawn.Size()
	n += 1 + l + sovVaultsV2(uint64(l))
	l = m.SharesBurned.Size()
	n += 1 + l + sovVaultsV2(uint64(l))
	l = m.SharePrice.Size()
	n += 1 + l + sovVaultsV2(uint64(l))
	l = m.FeeCharged.Size()
	n += 1 + l + sovVaultsV2(uint64(l))
	return n
}

func (m *MsgRequestExit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovVaultsV2(uint64(l))
	}
	if m.VaultType != 0 {
		n += 1 + sovVaultsV2(uint64(m.VaultType))
	}
	l = m.Shares.Size()
	n += 1 + l + sovVaultsV2(uint64(l))
	return n
}

func (m *MsgRequestExitResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.QueuePosition != 0 {
		n += 1 + sovVaultsV2(uint64(m.QueuePosition))
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.EstimatedCompletion)
	n += 1 + l + sovVaultsV2(uint64(l))
	l = len(m.ExitId)
	if l > 0 {
		n += 1 + l + sovVaultsV2(uint64(l))
	}
	return n
}

func (m *MsgCancelExit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovVaultsV2(uint64(l))
	}
	l = len(m.ExitId)
	if l > 0 {
		n += 1 + l + sovVaultsV2(uint64(l))
	}
	return n
}

func (m *MsgCancelExitResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.SharesReturned.Size()
	n += 1 + l + sovVaultsV2(uint64(l))
	return n
}

func (m *MsgSetYieldPreference) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovVaultsV2(uint64(l))
	}
	if m.VaultType != 0 {
		n += 1 + sovVaultsV2(uint64(m.VaultType))
	}
	if m.ForgoYield {
		n += 2
	}
	return n
}

func (m *MsgSetYieldPreferenceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PreviousPreference {
		n += 2
	}
	if m.NewPreference {
		n += 2
	}
	return n
}

func (m *MsgProcessExitQueue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovVaultsV2(uint64(l))
	}
	if m.VaultType != 0 {
		n += 1 + sovVaultsV2(uint64(m.VaultType))
	}
	if m.MaxRequests != 0 {
		n += 1 + sovVaultsV2(uint64(m.MaxRequests))
	}
	return n
}

func (m *MsgProcessExitQueueResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RequestsProcessed != 0 {
		n += 1 + sovVaultsV2(uint64(m.RequestsProcessed))
	}
	l = m.TokensDistributed.Size()
	n += 1 + l + sovVaultsV2(uint64(l))
	l = m.SharesBurned.Size()
	n += 1 + l + sovVaultsV2(uint64(l))
	return n
}

func (m *MsgUpdateNAV) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovVaultsV2(uint64(l))
	}
	if m.VaultType != 0 {
		n += 1 + sovVaultsV2(uint64(m.VaultType))
	}
	l = m.NewNav.Size()
	n += 1 + l + sovVaultsV2(uint64(l))
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovVaultsV2(uint64(l))
	}
	return n
}

func (m *MsgUpdateNAVResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.PreviousNav.Size()
	n += 1 + l + sovVaultsV2(uint64(l))
	l = m.NewNav.Size()
	n += 1 + l + sovVaultsV2(uint64(l))
	if m.ChangePercentage != 0 {
		n += 1 + sovVaultsV2(uint64(m.ChangePercentage))
	}
	return n
}

func (m *UserPosition) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Shares.Size()
	n += 1 + l + sovVaultsV2(uint64(l))
	l = m.PrincipalDeposited.Size()
	n += 1 + l + sovVaultsV2(uint64(l))
	l = m.AvgEntryPrice.Size()
	n += 1 + l + sovVaultsV2(uint64(l))
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.FirstDeposit)
	n += 1 + l + sovVaultsV2(uint64(l))
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.LastActivity)
	n += 1 + l + sovVaultsV2(uint64(l))
	if m.ForgoYield {
		n += 2
	}
	if len(m.ExitRequests) > 0 {
		for _, e := range m.ExitRequests {
			l = e.Size()
			n += 1 + l + sovVaultsV2(uint64(l))
		}
	}
	return n
}

func (m *ExitRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RequestId)
	if l > 0 {
		n += 1 + l + sovVaultsV2(uint64(l))
	}
	l = len(m.UserAddress)
	if l > 0 {
		n += 1 + l + sovVaultsV2(uint64(l))
	}
	if m.VaultType != 0 {
		n += 1 + sovVaultsV2(uint64(m.VaultType))
	}
	l = m.Shares.Size()
	n += 1 + l + sovVaultsV2(uint64(l))
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.RequestedAt)
	n += 1 + l + sovVaultsV2(uint64(l))
	if m.QueuePosition != 0 {
		n += 1 + sovVaultsV2(uint64(m.QueuePosition))
	}
	l = m.ExpectedTokens.Size()
	n += 1 + l + sovVaultsV2(uint64(l))
	if m.Status != 0 {
		n += 1 + sovVaultsV2(uint64(m.Status))
	}
	return n
}

func (m *QueryVaultStateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VaultType != 0 {
		n += 1 + sovVaultsV2(uint64(m.VaultType))
	}
	return n
}

func (m *QueryVaultStateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VaultState != nil {
		l = m.VaultState.Size()
		n += 1 + l + sovVaultsV2(uint64(l))
	}
	if m.NavConfig != nil {
		l = m.NavConfig.Size()
		n += 1 + l + sovVaultsV2(uint64(l))
	}
	if m.FeeConfig != nil {
		l = m.FeeConfig.Size()
		n += 1 + l + sovVaultsV2(uint64(l))
	}
	return n
}

func (m *QueryUserPositionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovVaultsV2(uint64(l))
	}
	if m.VaultType != 0 {
		n += 1 + sovVaultsV2(uint64(m.VaultType))
	}
	return n
}

func (m *QueryUserPositionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Position != nil {
		l = m.Position.Size()
		n += 1 + l + sovVaultsV2(uint64(l))
	}
	l = m.CurrentValue.Size()
	n += 1 + l + sovVaultsV2(uint64(l))
	l = m.UnrealizedGain.Size()
	n += 1 + l + sovVaultsV2(uint64(l))
	return n
}

func (m *QuerySharePriceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VaultType != 0 {
		n += 1 + sovVaultsV2(uint64(m.VaultType))
	}
	return n
}

func (m *QuerySharePriceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.SharePrice.Size()
	n += 1 + l + sovVaultsV2(uint64(l))
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.LastUpdate)
	n += 1 + l + sovVaultsV2(uint64(l))
	return n
}

func (m *QueryPricingInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VaultType != 0 {
		n += 1 + sovVaultsV2(uint64(m.VaultType))
	}
	l = m.Amount.Size()
	n += 1 + l + sovVaultsV2(uint64(l))
	if m.IsDeposit {
		n += 2
	}
	return n
}

func (m *QueryPricingInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PricingInfo != nil {
		l = m.PricingInfo.Size()
		n += 1 + l + sovVaultsV2(uint64(l))
	}
	return n
}

func (m *QueryExitQueueRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VaultType != 0 {
		n += 1 + sovVaultsV2(uint64(m.VaultType))
	}
	l = len(m.UserAddress)
	if l > 0 {
		n += 1 + l + sovVaultsV2(uint64(l))
	}
	return n
}

func (m *QueryExitQueueResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.UserRequests) > 0 {
		for _, e := range m.UserRequests {
			l = e.Size()
			n += 1 + l + sovVaultsV2(uint64(l))
		}
	}
	if m.TotalQueueLength != 0 {
		n += 1 + sovVaultsV2(uint64(m.TotalQueueLength))
	}
	l = m.TotalQueuedShares.Size()
	n += 1 + l + sovVaultsV2(uint64(l))
	return n
}

func (m *QueryDepositPreviewRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VaultType != 0 {
		n += 1 + sovVaultsV2(uint64(m.VaultType))
	}
	l = m.Amount.Size()
	n += 1 + l + sovVaultsV2(uint64(l))
	return n
}

func (m *QueryDepositPreviewResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.EstimatedShares.Size()
	n += 1 + l + sovVaultsV2(uint64(l))
	l = m.SharePrice.Size()
	n += 1 + l + sovVaultsV2(uint64(l))
	l = m.FeeAmount.Size()
	n += 1 + l + sovVaultsV2(uint64(l))
	return n
}

func (m *QueryWithdrawalPreviewRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VaultType != 0 {
		n += 1 + sovVaultsV2(uint64(m.VaultType))
	}
	l = m.Shares.Size()
	n += 1 + l + sovVaultsV2(uint64(l))
	return n
}

func (m *QueryWithdrawalPreviewResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.EstimatedTokens.Size()
	n += 1 + l + sovVaultsV2(uint64(l))
	l = m.SharePrice.Size()
	n += 1 + l + sovVaultsV2(uint64(l))
	l = m.FeeAmount.Size()
	n += 1 + l + sovVaultsV2(uint64(l))
	return n
}

func sovVaultsV2(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozVaultsV2(x uint64) (n int) {
	return sovVaultsV2(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgDeposit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVaultsV2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeposit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeposit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVaultsV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVaultsV2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVaultsV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VaultType", wireType)
			}
			m.VaultType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVaultsV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VaultType |= VaultType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVaultsV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVaultsV2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVaultsV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinShares", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVaultsV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVaultsV2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVaultsV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinShares.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForgoYield", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVaultsV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ForgoYield = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipVaultsV2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVaultsV2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDepositResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVaultsV2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDepositResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDepositResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SharesMinted", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVaultsV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVaultsV2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVaultsV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SharesMinted.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SharePrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVaultsV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVaultsV2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVaultsV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SharePrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeCharged", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVaultsV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVaultsV2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVaultsV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FeeCharged.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVaultsV2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVaultsV2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgWithdraw) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVaultsV2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgWithdraw: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgWithdraw: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVaultsV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVaultsV2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVaultsV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VaultType", wireType)
			}
			m.VaultType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVaultsV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VaultType |= VaultType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shares", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVaultsV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVaultsV2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVaultsV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Shares.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinTokens", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVaultsV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVaultsV2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVaultsV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinTokens.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVaultsV2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVaultsV2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgWithdrawResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVaultsV2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgWithdrawResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgWithdrawResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokensWithdrawn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVaultsV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVaultsV2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVaultsV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TokensWithdrawn.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SharesBurned", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVaultsV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVaultsV2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVaultsV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SharesBurned.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SharePrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVaultsV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVaultsV2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVaultsV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SharePrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeCharged", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVaultsV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVaultsV2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVaultsV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FeeCharged.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVaultsV2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVaultsV2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRequestExit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVaultsV2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRequestExit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRequestExit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVaultsV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVaultsV2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVaultsV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VaultType", wireType)
			}
			m.VaultType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVaultsV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VaultType |= VaultType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shares", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVaultsV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVaultsV2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVaultsV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Shares.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVaultsV2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVaultsV2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRequestExitResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVaultsV2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRequestExitResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRequestExitResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueuePosition", wireType)
			}
			m.QueuePosition = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVaultsV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.QueuePosition |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EstimatedCompletion", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVaultsV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVaultsV2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVaultsV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.EstimatedCompletion, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExitId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVaultsV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVaultsV2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVaultsV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExitId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVaultsV2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVaultsV2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCancelExit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVaultsV2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCancelExit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCancelExit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVaultsV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVaultsV2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVaultsV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExitId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVaultsV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVaultsV2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVaultsV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExitId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVaultsV2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVaultsV2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCancelExitResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVaultsV2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCancelExitResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCancelExitResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SharesReturned", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVaultsV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVaultsV2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVaultsV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SharesReturned.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVaultsV2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVaultsV2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetYieldPreference) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVaultsV2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetYieldPreference: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetYieldPreference: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVaultsV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVaultsV2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVaultsV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VaultType", wireType)
			}
			m.VaultType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVaultsV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VaultType |= VaultType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForgoYield", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVaultsV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ForgoYield = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipVaultsV2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVaultsV2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetYieldPreferenceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVaultsV2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetYieldPreferenceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetYieldPreferenceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreviousPreference", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVaultsV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PreviousPreference = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewPreference", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVaultsV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NewPreference = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipVaultsV2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVaultsV2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgProcessExitQueue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVaultsV2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgProcessExitQueue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgProcessExitQueue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVaultsV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVaultsV2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVaultsV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VaultType", wireType)
			}
			m.VaultType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVaultsV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VaultType |= VaultType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxRequests", wireType)
			}
			m.MaxRequests = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVaultsV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxRequests |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVaultsV2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVaultsV2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgProcessExitQueueResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVaultsV2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgProcessExitQueueResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgProcessExitQueueResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestsProcessed", wireType)
			}
			m.RequestsProcessed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVaultsV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestsProcessed |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokensDistributed", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVaultsV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVaultsV2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVaultsV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TokensDistributed.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SharesBurned", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVaultsV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVaultsV2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVaultsV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SharesBurned.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVaultsV2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVaultsV2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateNAV) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVaultsV2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateNAV: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateNAV: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVaultsV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVaultsV2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVaultsV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VaultType", wireType)
			}
			m.VaultType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVaultsV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VaultType |= VaultType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewNav", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVaultsV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVaultsV2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVaultsV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.NewNav.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVaultsV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVaultsV2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVaultsV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVaultsV2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVaultsV2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateNAVResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVaultsV2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateNAVResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateNAVResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreviousNav", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVaultsV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVaultsV2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVaultsV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PreviousNav.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewNav", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVaultsV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVaultsV2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVaultsV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.NewNav.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChangePercentage", wireType)
			}
			m.ChangePercentage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVaultsV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChangePercentage |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVaultsV2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVaultsV2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserPosition) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVaultsV2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserPosition: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserPosition: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shares", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVaultsV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVaultsV2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVaultsV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Shares.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrincipalDeposited", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVaultsV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVaultsV2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVaultsV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PrincipalDeposited.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvgEntryPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVaultsV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVaultsV2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVaultsV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AvgEntryPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstDeposit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVaultsV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVaultsV2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVaultsV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.FirstDeposit, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastActivity", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVaultsV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVaultsV2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVaultsV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.LastActivity, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForgoYield", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVaultsV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ForgoYield = bool(v != 0)
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExitRequests", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVaultsV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVaultsV2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVaultsV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExitRequests = append(m.ExitRequests, &ExitRequest{})
			if err := m.ExitRequests[len(m.ExitRequests)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVaultsV2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVaultsV2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExitRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVaultsV2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExitRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExitRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVaultsV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVaultsV2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVaultsV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVaultsV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthVaultsV2
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthVaultsV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserAddress = append(m.UserAddress[:0], dAtA[iNdEx:postIndex]...)
			if m.UserAddress == nil {
				m.UserAddress = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VaultType", wireType)
			}
			m.VaultType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVaultsV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VaultType |= VaultType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shares", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVaultsV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVaultsV2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVaultsV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Shares.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVaultsV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVaultsV2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVaultsV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.RequestedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueuePosition", wireType)
			}
			m.QueuePosition = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVaultsV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.QueuePosition |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpectedTokens", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVaultsV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVaultsV2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVaultsV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ExpectedTokens.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVaultsV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= ExitRequestStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVaultsV2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVaultsV2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryVaultStateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVaultsV2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryVaultStateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryVaultStateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VaultType", wireType)
			}
			m.VaultType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVaultsV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VaultType |= VaultType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVaultsV2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVaultsV2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryVaultStateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVaultsV2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryVaultStateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryVaultStateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VaultState", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVaultsV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVaultsV2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVaultsV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VaultState == nil {
				m.VaultState = &VaultState{}
			}
			if err := m.VaultState.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NavConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVaultsV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVaultsV2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVaultsV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NavConfig == nil {
				m.NavConfig = &NAVConfig{}
			}
			if err := m.NavConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVaultsV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVaultsV2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVaultsV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FeeConfig == nil {
				m.FeeConfig = &FeeConfig{}
			}
			if err := m.FeeConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVaultsV2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVaultsV2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryUserPositionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVaultsV2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryUserPositionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryUserPositionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVaultsV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVaultsV2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVaultsV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VaultType", wireType)
			}
			m.VaultType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVaultsV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VaultType |= VaultType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVaultsV2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVaultsV2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryUserPositionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVaultsV2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryUserPositionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryUserPositionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Position", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVaultsV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVaultsV2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVaultsV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Position == nil {
				m.Position = &UserPosition{}
			}
			if err := m.Position.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVaultsV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVaultsV2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVaultsV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CurrentValue.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnrealizedGain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVaultsV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVaultsV2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVaultsV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.UnrealizedGain.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVaultsV2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVaultsV2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySharePriceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVaultsV2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySharePriceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySharePriceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VaultType", wireType)
			}
			m.VaultType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVaultsV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VaultType |= VaultType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVaultsV2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVaultsV2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySharePriceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVaultsV2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySharePriceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySharePriceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SharePrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVaultsV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVaultsV2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVaultsV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SharePrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastUpdate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVaultsV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVaultsV2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVaultsV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.LastUpdate, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVaultsV2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVaultsV2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPricingInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVaultsV2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPricingInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPricingInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VaultType", wireType)
			}
			m.VaultType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVaultsV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VaultType |= VaultType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVaultsV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVaultsV2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVaultsV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsDeposit", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVaultsV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsDeposit = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipVaultsV2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVaultsV2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPricingInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVaultsV2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPricingInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPricingInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PricingInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVaultsV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVaultsV2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVaultsV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PricingInfo == nil {
				m.PricingInfo = &PricingInfo{}
			}
			if err := m.PricingInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVaultsV2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVaultsV2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryExitQueueRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVaultsV2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryExitQueueRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryExitQueueRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VaultType", wireType)
			}
			m.VaultType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVaultsV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VaultType |= VaultType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVaultsV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVaultsV2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVaultsV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVaultsV2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVaultsV2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryExitQueueResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVaultsV2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryExitQueueResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryExitQueueResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserRequests", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVaultsV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVaultsV2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVaultsV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserRequests = append(m.UserRequests, &ExitRequest{})
			if err := m.UserRequests[len(m.UserRequests)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalQueueLength", wireType)
			}
			m.TotalQueueLength = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVaultsV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalQueueLength |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalQueuedShares", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVaultsV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVaultsV2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVaultsV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalQueuedShares.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVaultsV2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVaultsV2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDepositPreviewRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVaultsV2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDepositPreviewRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDepositPreviewRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VaultType", wireType)
			}
			m.VaultType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVaultsV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VaultType |= VaultType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVaultsV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVaultsV2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVaultsV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVaultsV2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVaultsV2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDepositPreviewResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVaultsV2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDepositPreviewResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDepositPreviewResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EstimatedShares", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVaultsV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVaultsV2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVaultsV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EstimatedShares.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SharePrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVaultsV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVaultsV2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVaultsV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SharePrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVaultsV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVaultsV2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVaultsV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FeeAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVaultsV2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVaultsV2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryWithdrawalPreviewRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVaultsV2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryWithdrawalPreviewRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryWithdrawalPreviewRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VaultType", wireType)
			}
			m.VaultType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVaultsV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VaultType |= VaultType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shares", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVaultsV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVaultsV2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVaultsV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Shares.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVaultsV2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVaultsV2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryWithdrawalPreviewResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVaultsV2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryWithdrawalPreviewResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryWithdrawalPreviewResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EstimatedTokens", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVaultsV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVaultsV2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVaultsV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EstimatedTokens.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SharePrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVaultsV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVaultsV2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVaultsV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SharePrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVaultsV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVaultsV2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVaultsV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FeeAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVaultsV2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVaultsV2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipVaultsV2(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowVaultsV2
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVaultsV2
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVaultsV2
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthVaultsV2
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupVaultsV2
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthVaultsV2
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthVaultsV2        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowVaultsV2          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupVaultsV2 = fmt.Errorf("proto: unexpected end of group")
)

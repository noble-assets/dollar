// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: noble/dollar/vaults/v1/vaults.proto

package vaults

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// buf:lint:ignore ENUM_VALUE_PREFIX
type VaultType int32

const (
	// buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
	UNSPECIFIED VaultType = 0
	STAKED      VaultType = 1
	FLEXIBLE    VaultType = 2
)

var VaultType_name = map[int32]string{
	0: "UNSPECIFIED",
	1: "STAKED",
	2: "FLEXIBLE",
}

var VaultType_value = map[string]int32{
	"UNSPECIFIED": 0,
	"STAKED":      1,
	"FLEXIBLE":    2,
}

func (x VaultType) String() string {
	return proto.EnumName(VaultType_name, int32(x))
}

func (VaultType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_1a185cec7ba75cfc, []int{0}
}

// buf:lint:ignore ENUM_VALUE_PREFIX
type PausedType int32

const (
	// buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
	NONE   PausedType = 0
	LOCK   PausedType = 1
	UNLOCK PausedType = 2
	ALL    PausedType = 3
)

var PausedType_name = map[int32]string{
	0: "NONE",
	1: "LOCK",
	2: "UNLOCK",
	3: "ALL",
}

var PausedType_value = map[string]int32{
	"NONE":   0,
	"LOCK":   1,
	"UNLOCK": 2,
	"ALL":    3,
}

func (x PausedType) String() string {
	return proto.EnumName(PausedType_name, int32(x))
}

func (PausedType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_1a185cec7ba75cfc, []int{1}
}

type RewardsRecord struct {
	Index   cosmossdk_io_math.LegacyDec `protobuf:"bytes,1,opt,name=index,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"index"`
	Total   cosmossdk_io_math.Int       `protobuf:"bytes,2,opt,name=total,proto3,customtype=cosmossdk.io/math.Int" json:"total"`
	Rewards cosmossdk_io_math.Int       `protobuf:"bytes,3,opt,name=rewards,proto3,customtype=cosmossdk.io/math.Int" json:"rewards"`
}

func (m *RewardsRecord) Reset()         { *m = RewardsRecord{} }
func (m *RewardsRecord) String() string { return proto.CompactTextString(m) }
func (*RewardsRecord) ProtoMessage()    {}
func (*RewardsRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_1a185cec7ba75cfc, []int{0}
}
func (m *RewardsRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RewardsRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RewardsRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RewardsRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RewardsRecord.Merge(m, src)
}
func (m *RewardsRecord) XXX_Size() int {
	return m.Size()
}
func (m *RewardsRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_RewardsRecord.DiscardUnknown(m)
}

var xxx_messageInfo_RewardsRecord proto.InternalMessageInfo

type Position struct {
	Principal cosmossdk_io_math.Int       `protobuf:"bytes,1,opt,name=principal,proto3,customtype=cosmossdk.io/math.Int" json:"principal"`
	Index     cosmossdk_io_math.LegacyDec `protobuf:"bytes,2,opt,name=index,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"index"`
	Amount    cosmossdk_io_math.Int       `protobuf:"bytes,3,opt,name=amount,proto3,customtype=cosmossdk.io/math.Int" json:"amount"`
	Time      time.Time                   `protobuf:"bytes,4,opt,name=time,proto3,stdtime" json:"time"`
}

func (m *Position) Reset()         { *m = Position{} }
func (m *Position) String() string { return proto.CompactTextString(m) }
func (*Position) ProtoMessage()    {}
func (*Position) Descriptor() ([]byte, []int) {
	return fileDescriptor_1a185cec7ba75cfc, []int{1}
}
func (m *Position) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Position) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Position.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Position) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Position.Merge(m, src)
}
func (m *Position) XXX_Size() int {
	return m.Size()
}
func (m *Position) XXX_DiscardUnknown() {
	xxx_messageInfo_Position.DiscardUnknown(m)
}

var xxx_messageInfo_Position proto.InternalMessageInfo

func (m *Position) GetTime() time.Time {
	if m != nil {
		return m.Time
	}
	return time.Time{}
}

type PositionEntry struct {
	User      []byte                      `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	VaultType VaultType                   `protobuf:"varint,2,opt,name=vault_type,json=vaultType,proto3,enum=noble.dollar.vaults.v1.VaultType" json:"vault_type,omitempty"`
	Principal cosmossdk_io_math.Int       `protobuf:"bytes,3,opt,name=principal,proto3,customtype=cosmossdk.io/math.Int" json:"principal"`
	Index     cosmossdk_io_math.LegacyDec `protobuf:"bytes,4,opt,name=index,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"index"`
	Amount    cosmossdk_io_math.Int       `protobuf:"bytes,5,opt,name=amount,proto3,customtype=cosmossdk.io/math.Int" json:"amount"`
	Time      time.Time                   `protobuf:"bytes,6,opt,name=time,proto3,stdtime" json:"time"`
}

func (m *PositionEntry) Reset()         { *m = PositionEntry{} }
func (m *PositionEntry) String() string { return proto.CompactTextString(m) }
func (*PositionEntry) ProtoMessage()    {}
func (*PositionEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_1a185cec7ba75cfc, []int{2}
}
func (m *PositionEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PositionEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PositionEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PositionEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PositionEntry.Merge(m, src)
}
func (m *PositionEntry) XXX_Size() int {
	return m.Size()
}
func (m *PositionEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_PositionEntry.DiscardUnknown(m)
}

var xxx_messageInfo_PositionEntry proto.InternalMessageInfo

func (m *PositionEntry) GetUser() []byte {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *PositionEntry) GetVaultType() VaultType {
	if m != nil {
		return m.VaultType
	}
	return UNSPECIFIED
}

func (m *PositionEntry) GetTime() time.Time {
	if m != nil {
		return m.Time
	}
	return time.Time{}
}

func init() {
	proto.RegisterEnum("noble.dollar.vaults.v1.VaultType", VaultType_name, VaultType_value)
	proto.RegisterEnum("noble.dollar.vaults.v1.PausedType", PausedType_name, PausedType_value)
	proto.RegisterType((*RewardsRecord)(nil), "noble.dollar.vaults.v1.RewardsRecord")
	proto.RegisterType((*Position)(nil), "noble.dollar.vaults.v1.Position")
	proto.RegisterType((*PositionEntry)(nil), "noble.dollar.vaults.v1.PositionEntry")
}

func init() {
	proto.RegisterFile("noble/dollar/vaults/v1/vaults.proto", fileDescriptor_1a185cec7ba75cfc)
}

var fileDescriptor_1a185cec7ba75cfc = []byte{
	// 569 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x94, 0x31, 0x6f, 0xd3, 0x40,
	0x14, 0xc7, 0xed, 0xc4, 0x4d, 0x93, 0xd7, 0x16, 0xcc, 0x09, 0x50, 0x08, 0xc2, 0x29, 0x65, 0xa9,
	0x22, 0x61, 0xd3, 0x22, 0x01, 0x12, 0x0c, 0x34, 0x8d, 0x23, 0x42, 0xad, 0x34, 0x72, 0x53, 0x84,
	0x58, 0x2a, 0xc7, 0x3e, 0x82, 0x85, 0xed, 0xb3, 0xec, 0x4b, 0x68, 0xf8, 0x02, 0x30, 0xf6, 0x3b,
	0xb0, 0x30, 0x30, 0x30, 0xf0, 0x21, 0x3a, 0x56, 0x4c, 0x88, 0xa1, 0xa0, 0x64, 0x60, 0xe6, 0x1b,
	0x20, 0xdf, 0x5d, 0x28, 0x08, 0x96, 0x56, 0x59, 0xac, 0xff, 0xdd, 0xbd, 0xf7, 0xbb, 0x7b, 0xef,
	0xff, 0x64, 0xb8, 0x11, 0x91, 0x5e, 0x80, 0x0d, 0x8f, 0x04, 0x81, 0x93, 0x18, 0x43, 0x67, 0x10,
	0xd0, 0xd4, 0x18, 0xae, 0x09, 0xa5, 0xc7, 0x09, 0xa1, 0x04, 0x5d, 0x66, 0x41, 0x3a, 0x0f, 0xd2,
	0xc5, 0xd1, 0x70, 0xad, 0x72, 0xc1, 0x09, 0xfd, 0x88, 0x18, 0xec, 0xcb, 0x43, 0x2b, 0x57, 0x5c,
	0x92, 0x86, 0x24, 0xdd, 0x63, 0x2b, 0x83, 0x2f, 0xc4, 0xd1, 0xc5, 0x3e, 0xe9, 0x13, 0xbe, 0x9f,
	0x29, 0xb1, 0x5b, 0xed, 0x13, 0xd2, 0x0f, 0xb0, 0xc1, 0x56, 0xbd, 0xc1, 0x73, 0x83, 0xfa, 0x21,
	0x4e, 0xa9, 0x13, 0xc6, 0x3c, 0x60, 0xe5, 0xa7, 0x0c, 0x4b, 0x36, 0x7e, 0xe5, 0x24, 0x5e, 0x6a,
	0x63, 0x97, 0x24, 0x1e, 0xb2, 0x60, 0xce, 0x8f, 0x3c, 0xbc, 0x5f, 0x96, 0x97, 0xe5, 0xd5, 0x52,
	0xfd, 0xce, 0xe1, 0x71, 0x55, 0xfa, 0x7a, 0x5c, 0xbd, 0xca, 0x6f, 0x4b, 0xbd, 0x97, 0xba, 0x4f,
	0x8c, 0xd0, 0xa1, 0x2f, 0x74, 0x0b, 0xf7, 0x1d, 0x77, 0xd4, 0xc0, 0xee, 0xe7, 0x4f, 0x37, 0x41,
	0x3c, 0xa6, 0x81, 0xdd, 0xf7, 0x3f, 0x3e, 0xd6, 0x64, 0x9b, 0x43, 0x50, 0x13, 0xe6, 0x28, 0xa1,
	0x4e, 0x50, 0xce, 0x31, 0xda, 0x2d, 0x41, 0xbb, 0xf4, 0x2f, 0xad, 0x15, 0xd1, 0x3f, 0x38, 0xad,
	0x88, 0x0a, 0x0e, 0x4b, 0x47, 0x8f, 0x61, 0x3e, 0xe1, 0xcf, 0x2c, 0xe7, 0xcf, 0x48, 0x9a, 0x02,
	0x56, 0x3e, 0xe4, 0xa0, 0xd8, 0x21, 0xa9, 0x4f, 0x7d, 0x12, 0xa1, 0x36, 0x94, 0xe2, 0xc4, 0x8f,
	0x5c, 0x3f, 0x76, 0x02, 0x51, 0xf2, 0xe9, 0xd1, 0x27, 0x88, 0x93, 0xf6, 0xe5, 0x66, 0xd1, 0xbe,
	0x47, 0x50, 0x70, 0x42, 0x32, 0x88, 0xe8, 0x99, 0xab, 0x16, 0xf9, 0xe8, 0x1e, 0x28, 0x99, 0xf7,
	0x65, 0x65, 0x59, 0x5e, 0x5d, 0x58, 0xaf, 0xe8, 0x7c, 0x30, 0xf4, 0xe9, 0x60, 0xe8, 0xdd, 0xe9,
	0x60, 0xd4, 0x8b, 0xd9, 0x1d, 0x07, 0xdf, 0xaa, 0xb2, 0xcd, 0x32, 0x56, 0xde, 0xe4, 0x61, 0x69,
	0xda, 0x2e, 0x33, 0xa2, 0xc9, 0x08, 0x21, 0x50, 0x06, 0x29, 0x4e, 0x58, 0xbb, 0x16, 0x6d, 0xa6,
	0xd1, 0x43, 0x00, 0x36, 0xba, 0x7b, 0x74, 0x14, 0x63, 0x56, 0xfc, 0xb9, 0xf5, 0xeb, 0xfa, 0xff,
	0x47, 0x5b, 0x7f, 0x92, 0xa9, 0xee, 0x28, 0xc6, 0x76, 0x69, 0x38, 0x95, 0x7f, 0x3b, 0x91, 0x9f,
	0xa1, 0x13, 0xca, 0x6c, 0x9d, 0x98, 0x9b, 0x91, 0x13, 0x85, 0xd3, 0x3a, 0x51, 0x7b, 0x00, 0xa5,
	0xdf, 0x9d, 0x43, 0xe7, 0x61, 0x61, 0xb7, 0xbd, 0xd3, 0x31, 0x37, 0x5b, 0xcd, 0x96, 0xd9, 0x50,
	0x25, 0x04, 0x50, 0xd8, 0xe9, 0x6e, 0x6c, 0x99, 0x0d, 0x55, 0x46, 0x8b, 0x50, 0x6c, 0x5a, 0xe6,
	0xd3, 0x56, 0xdd, 0x32, 0xd5, 0x5c, 0x45, 0x79, 0xfb, 0x4e, 0x93, 0x6a, 0xf7, 0x01, 0x3a, 0xce,
	0x20, 0xc5, 0x1e, 0x4b, 0x2f, 0x82, 0xd2, 0xde, 0x6e, 0x9b, 0xaa, 0x94, 0x29, 0x6b, 0x7b, 0x73,
	0x4b, 0x95, 0x33, 0xc2, 0x6e, 0x9b, 0xe9, 0x1c, 0x9a, 0x87, 0xfc, 0x86, 0x65, 0xa9, 0x79, 0x9e,
	0x5c, 0xbf, 0x7b, 0x38, 0xd6, 0xe4, 0xa3, 0xb1, 0x26, 0x7f, 0x1f, 0x6b, 0xf2, 0xc1, 0x44, 0x93,
	0x8e, 0x26, 0x9a, 0xf4, 0x65, 0xa2, 0x49, 0xcf, 0xae, 0x09, 0x77, 0xb9, 0xd5, 0xfb, 0xa3, 0xd7,
	0x46, 0x36, 0x01, 0xa9, 0xf8, 0xc7, 0xf5, 0x0a, 0xac, 0xae, 0xdb, 0xbf, 0x02, 0x00, 0x00, 0xff,
	0xff, 0xe2, 0xe0, 0xbf, 0x18, 0x0b, 0x05, 0x00, 0x00,
}

func (m *RewardsRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RewardsRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RewardsRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Rewards.Size()
		i -= size
		if _, err := m.Rewards.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintVaults(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.Total.Size()
		i -= size
		if _, err := m.Total.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintVaults(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.Index.Size()
		i -= size
		if _, err := m.Index.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintVaults(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *Position) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Position) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Position) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n1, err1 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.Time, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.Time):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintVaults(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x22
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintVaults(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.Index.Size()
		i -= size
		if _, err := m.Index.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintVaults(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.Principal.Size()
		i -= size
		if _, err := m.Principal.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintVaults(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *PositionEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PositionEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PositionEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n2, err2 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.Time, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.Time):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintVaults(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x32
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintVaults(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.Index.Size()
		i -= size
		if _, err := m.Index.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintVaults(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.Principal.Size()
		i -= size
		if _, err := m.Principal.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintVaults(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.VaultType != 0 {
		i = encodeVarintVaults(dAtA, i, uint64(m.VaultType))
		i--
		dAtA[i] = 0x10
	}
	if len(m.User) > 0 {
		i -= len(m.User)
		copy(dAtA[i:], m.User)
		i = encodeVarintVaults(dAtA, i, uint64(len(m.User)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintVaults(dAtA []byte, offset int, v uint64) int {
	offset -= sovVaults(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RewardsRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Index.Size()
	n += 1 + l + sovVaults(uint64(l))
	l = m.Total.Size()
	n += 1 + l + sovVaults(uint64(l))
	l = m.Rewards.Size()
	n += 1 + l + sovVaults(uint64(l))
	return n
}

func (m *Position) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Principal.Size()
	n += 1 + l + sovVaults(uint64(l))
	l = m.Index.Size()
	n += 1 + l + sovVaults(uint64(l))
	l = m.Amount.Size()
	n += 1 + l + sovVaults(uint64(l))
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.Time)
	n += 1 + l + sovVaults(uint64(l))
	return n
}

func (m *PositionEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.User)
	if l > 0 {
		n += 1 + l + sovVaults(uint64(l))
	}
	if m.VaultType != 0 {
		n += 1 + sovVaults(uint64(m.VaultType))
	}
	l = m.Principal.Size()
	n += 1 + l + sovVaults(uint64(l))
	l = m.Index.Size()
	n += 1 + l + sovVaults(uint64(l))
	l = m.Amount.Size()
	n += 1 + l + sovVaults(uint64(l))
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.Time)
	n += 1 + l + sovVaults(uint64(l))
	return n
}

func sovVaults(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozVaults(x uint64) (n int) {
	return sovVaults(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RewardsRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVaults
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RewardsRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RewardsRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVaults
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVaults
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVaults
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Index.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVaults
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVaults
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVaults
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Total.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rewards", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVaults
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVaults
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVaults
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Rewards.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVaults(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVaults
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Position) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVaults
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Position: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Position: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Principal", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVaults
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVaults
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVaults
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Principal.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVaults
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVaults
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVaults
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Index.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVaults
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVaults
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVaults
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVaults
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVaults
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVaults
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.Time, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVaults(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVaults
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PositionEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVaults
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PositionEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PositionEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVaults
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthVaults
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthVaults
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.User = append(m.User[:0], dAtA[iNdEx:postIndex]...)
			if m.User == nil {
				m.User = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VaultType", wireType)
			}
			m.VaultType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVaults
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VaultType |= VaultType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Principal", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVaults
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVaults
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVaults
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Principal.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVaults
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVaults
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVaults
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Index.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVaults
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVaults
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVaults
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVaults
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVaults
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVaults
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.Time, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVaults(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVaults
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipVaults(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowVaults
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVaults
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVaults
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthVaults
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupVaults
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthVaults
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthVaults        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowVaults          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupVaults = fmt.Errorf("proto: unexpected end of group")
)

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: noble/dollar/vaults/v1/genesis.proto

package vaults

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// GenesisState defines the genesis state of the Noble Dollar Vaults submodule.
type GenesisState struct {
	// total_flexible_principal contains all the users positions inside Vaults.
	Positions []PositionEntry `protobuf:"bytes,2,rep,name=positions,proto3" json:"positions"`
	// rewards maps the rewards amounts by the index.
	Rewards []Reward `protobuf:"bytes,3,rep,name=rewards,proto3" json:"rewards"`
	// total_flexible_principal contains the total principal amount contained in the flexible Vault.
	TotalFlexiblePrincipal cosmossdk_io_math.Int `protobuf:"bytes,4,opt,name=total_flexible_principal,json=totalFlexiblePrincipal,proto3,customtype=cosmossdk.io/math.Int" json:"total_flexible_principal"`
	// paused represents the current pausing state of the Vaults.
	Paused PausedType `protobuf:"varint,5,opt,name=paused,proto3,enum=noble.dollar.vaults.v1.PausedType" json:"paused,omitempty"`
	// stats contains the genesis statistics around the Noble Dollar Vaults.
	Stats Stats `protobuf:"bytes,6,opt,name=stats,proto3" json:"stats"`
}

func (m *GenesisState) Reset()         { *m = GenesisState{} }
func (m *GenesisState) String() string { return proto.CompactTextString(m) }
func (*GenesisState) ProtoMessage()    {}
func (*GenesisState) Descriptor() ([]byte, []int) {
	return fileDescriptor_6175d63afe7542ef, []int{0}
}
func (m *GenesisState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisState.Merge(m, src)
}
func (m *GenesisState) XXX_Size() int {
	return m.Size()
}
func (m *GenesisState) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisState.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisState proto.InternalMessageInfo

func (m *GenesisState) GetPositions() []PositionEntry {
	if m != nil {
		return m.Positions
	}
	return nil
}

func (m *GenesisState) GetRewards() []Reward {
	if m != nil {
		return m.Rewards
	}
	return nil
}

func (m *GenesisState) GetPaused() PausedType {
	if m != nil {
		return m.Paused
	}
	return NONE
}

func (m *GenesisState) GetStats() Stats {
	if m != nil {
		return m.Stats
	}
	return Stats{}
}

func init() {
	proto.RegisterType((*GenesisState)(nil), "noble.dollar.vaults.v1.GenesisState")
}

func init() {
	proto.RegisterFile("noble/dollar/vaults/v1/genesis.proto", fileDescriptor_6175d63afe7542ef)
}

var fileDescriptor_6175d63afe7542ef = []byte{
	// 393 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x91, 0x4d, 0x8f, 0x12, 0x31,
	0x18, 0xc7, 0x67, 0x78, 0x33, 0x14, 0x63, 0xe2, 0x44, 0xc9, 0x48, 0xc2, 0x30, 0x41, 0x4d, 0x26,
	0x26, 0xb6, 0x82, 0x07, 0xa3, 0x07, 0x0f, 0x24, 0x6a, 0xb8, 0x91, 0xd1, 0x93, 0x17, 0x52, 0x98,
	0x8a, 0xd5, 0xd2, 0x4e, 0xa6, 0x05, 0x19, 0x3f, 0xc5, 0x7e, 0x8c, 0x3d, 0xee, 0x61, 0x3f, 0x04,
	0x47, 0xb2, 0xa7, 0xcd, 0x1e, 0xc8, 0x06, 0x0e, 0xfb, 0x25, 0xf6, 0xb0, 0xa1, 0x2d, 0xd9, 0xcb,
	0xce, 0xa5, 0xe9, 0xf3, 0xf4, 0xf7, 0xff, 0xf7, 0x79, 0x01, 0xaf, 0xb8, 0x98, 0x30, 0x82, 0x12,
	0xc1, 0x18, 0xce, 0xd0, 0x12, 0x2f, 0x98, 0x92, 0x68, 0xd9, 0x43, 0x33, 0xc2, 0x89, 0xa4, 0x12,
	0xa6, 0x99, 0x50, 0xc2, 0x6b, 0x6a, 0x0a, 0x1a, 0x0a, 0x1a, 0x0a, 0x2e, 0x7b, 0xad, 0xa7, 0x78,
	0x4e, 0xb9, 0x40, 0xfa, 0x34, 0x68, 0xeb, 0xc5, 0x54, 0xc8, 0xb9, 0x90, 0x63, 0x1d, 0x21, 0x13,
	0xd8, 0xa7, 0x67, 0x33, 0x31, 0x13, 0x26, 0x7f, 0xb8, 0xd9, 0xec, 0xcb, 0x82, 0x0a, 0xec, 0x2f,
	0x1a, 0xea, 0xde, 0x96, 0xc0, 0xe3, 0x6f, 0xa6, 0xa4, 0xef, 0x0a, 0x2b, 0xe2, 0x0d, 0x41, 0x3d,
	0x15, 0x92, 0x2a, 0x2a, 0xb8, 0xf4, 0x4b, 0x61, 0x39, 0x6a, 0xf4, 0x5f, 0xc3, 0x87, 0xab, 0x84,
	0x23, 0x0b, 0x7e, 0xe1, 0x2a, 0xcb, 0x07, 0x95, 0xf5, 0xb6, 0xe3, 0xc4, 0xf7, 0x6a, 0xef, 0x33,
	0x78, 0x94, 0x91, 0x7f, 0x38, 0x4b, 0xa4, 0x5f, 0xd6, 0x46, 0x41, 0x91, 0x51, 0xac, 0x31, 0xeb,
	0x70, 0x14, 0x79, 0x7f, 0x80, 0xaf, 0x84, 0xc2, 0x6c, 0xfc, 0x8b, 0x91, 0x15, 0x9d, 0x30, 0x32,
	0x4e, 0x33, 0xca, 0xa7, 0x34, 0xc5, 0xcc, 0xaf, 0x84, 0x6e, 0x54, 0x1f, 0xbc, 0x3b, 0x08, 0xae,
	0xb6, 0x9d, 0xe7, 0x66, 0x1c, 0x32, 0xf9, 0x0b, 0xa9, 0x40, 0x73, 0xac, 0x7e, 0xc3, 0x21, 0x57,
	0x17, 0xe7, 0x6f, 0x81, 0x9d, 0xd3, 0x90, 0xab, 0xd3, 0x9b, 0xb3, 0x37, 0x6e, 0xdc, 0xd4, 0x8e,
	0x5f, 0xad, 0xe1, 0xe8, 0xe8, 0xe7, 0x7d, 0x02, 0xb5, 0x14, 0x2f, 0x24, 0x49, 0xfc, 0x6a, 0xe8,
	0x46, 0x4f, 0xfa, 0xdd, 0xc2, 0x9e, 0x35, 0xf5, 0x23, 0x4f, 0x49, 0x6c, 0x15, 0xde, 0x47, 0x50,
	0x95, 0x0a, 0x2b, 0xe9, 0xd7, 0x42, 0x37, 0x6a, 0xf4, 0xdb, 0x45, 0xd2, 0xc3, 0x80, 0xa5, 0x6d,
	0xd2, 0x28, 0x06, 0x1f, 0xd6, 0xbb, 0xc0, 0xdd, 0xec, 0x02, 0xf7, 0x7a, 0x17, 0xb8, 0x27, 0xfb,
	0xc0, 0xd9, 0xec, 0x03, 0xe7, 0x72, 0x1f, 0x38, 0x3f, 0xdb, 0x56, 0x6e, 0xbc, 0x56, 0xf9, 0x7f,
	0xa4, 0xf2, 0x94, 0x48, 0xbb, 0xbd, 0x49, 0x4d, 0xaf, 0xef, 0xfd, 0x5d, 0x00, 0x00, 0x00, 0xff,
	0xff, 0xe9, 0xd1, 0xff, 0xae, 0x67, 0x02, 0x00, 0x00,
}

func (m *GenesisState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Stats.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	if m.Paused != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.Paused))
		i--
		dAtA[i] = 0x28
	}
	{
		size := m.TotalFlexiblePrincipal.Size()
		i -= size
		if _, err := m.TotalFlexiblePrincipal.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.Rewards) > 0 {
		for iNdEx := len(m.Rewards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Rewards[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Positions) > 0 {
		for iNdEx := len(m.Positions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Positions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintGenesis(dAtA []byte, offset int, v uint64) int {
	offset -= sovGenesis(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GenesisState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Positions) > 0 {
		for _, e := range m.Positions {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.Rewards) > 0 {
		for _, e := range m.Rewards {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	l = m.TotalFlexiblePrincipal.Size()
	n += 1 + l + sovGenesis(uint64(l))
	if m.Paused != 0 {
		n += 1 + sovGenesis(uint64(m.Paused))
	}
	l = m.Stats.Size()
	n += 1 + l + sovGenesis(uint64(l))
	return n
}

func sovGenesis(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGenesis(x uint64) (n int) {
	return sovGenesis(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GenesisState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Positions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Positions = append(m.Positions, PositionEntry{})
			if err := m.Positions[len(m.Positions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rewards = append(m.Rewards, Reward{})
			if err := m.Rewards[len(m.Rewards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalFlexiblePrincipal", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalFlexiblePrincipal.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Paused", wireType)
			}
			m.Paused = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Paused |= PausedType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Stats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGenesis(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGenesis
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGenesis
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGenesis
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGenesis        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGenesis          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGenesis = fmt.Errorf("proto: unexpected end of group")
)

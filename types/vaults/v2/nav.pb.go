// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: noble/dollar/vaults/v2/nav.proto

package v2

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// NAVBand defines the pricing bands for deposits and withdrawals
type NAVBand struct {
	// Lower bound of the band (basis points above/below NAV)
	LowerBound int32 `protobuf:"varint,1,opt,name=lower_bound,json=lowerBound,proto3" json:"lower_bound,omitempty"`
	// Upper bound of the band (basis points above/below NAV)
	UpperBound int32 `protobuf:"varint,2,opt,name=upper_bound,json=upperBound,proto3" json:"upper_bound,omitempty"`
	// Fee rate applied within this band (basis points)
	FeeRate int32 `protobuf:"varint,3,opt,name=fee_rate,json=feeRate,proto3" json:"fee_rate,omitempty"`
}

func (m *NAVBand) Reset()         { *m = NAVBand{} }
func (m *NAVBand) String() string { return proto.CompactTextString(m) }
func (*NAVBand) ProtoMessage()    {}
func (*NAVBand) Descriptor() ([]byte, []int) {
	return fileDescriptor_893b9e92a5bdeb81, []int{0}
}
func (m *NAVBand) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NAVBand) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NAVBand.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NAVBand) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NAVBand.Merge(m, src)
}
func (m *NAVBand) XXX_Size() int {
	return m.Size()
}
func (m *NAVBand) XXX_DiscardUnknown() {
	xxx_messageInfo_NAVBand.DiscardUnknown(m)
}

var xxx_messageInfo_NAVBand proto.InternalMessageInfo

func (m *NAVBand) GetLowerBound() int32 {
	if m != nil {
		return m.LowerBound
	}
	return 0
}

func (m *NAVBand) GetUpperBound() int32 {
	if m != nil {
		return m.UpperBound
	}
	return 0
}

func (m *NAVBand) GetFeeRate() int32 {
	if m != nil {
		return m.FeeRate
	}
	return 0
}

// NAVConfig defines the configuration for NAV-based pricing
type NAVConfig struct {
	// Base NAV bands for deposits
	DepositBands []*NAVBand `protobuf:"bytes,1,rep,name=deposit_bands,json=depositBands,proto3" json:"deposit_bands,omitempty"`
	// Base NAV bands for withdrawals
	WithdrawalBands []*NAVBand `protobuf:"bytes,2,rep,name=withdrawal_bands,json=withdrawalBands,proto3" json:"withdrawal_bands,omitempty"`
	// Minimum NAV update interval (seconds)
	MinNavUpdateInterval int64 `protobuf:"varint,3,opt,name=min_nav_update_interval,json=minNavUpdateInterval,proto3" json:"min_nav_update_interval,omitempty"`
	// Maximum allowed NAV deviation before emergency controls (basis points)
	MaxNavDeviation int32 `protobuf:"varint,4,opt,name=max_nav_deviation,json=maxNavDeviation,proto3" json:"max_nav_deviation,omitempty"`
	// Emergency circuit breaker threshold (basis points)
	CircuitBreakerThreshold int32 `protobuf:"varint,5,opt,name=circuit_breaker_threshold,json=circuitBreakerThreshold,proto3" json:"circuit_breaker_threshold,omitempty"`
}

func (m *NAVConfig) Reset()         { *m = NAVConfig{} }
func (m *NAVConfig) String() string { return proto.CompactTextString(m) }
func (*NAVConfig) ProtoMessage()    {}
func (*NAVConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_893b9e92a5bdeb81, []int{1}
}
func (m *NAVConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NAVConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NAVConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NAVConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NAVConfig.Merge(m, src)
}
func (m *NAVConfig) XXX_Size() int {
	return m.Size()
}
func (m *NAVConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_NAVConfig.DiscardUnknown(m)
}

var xxx_messageInfo_NAVConfig proto.InternalMessageInfo

func (m *NAVConfig) GetDepositBands() []*NAVBand {
	if m != nil {
		return m.DepositBands
	}
	return nil
}

func (m *NAVConfig) GetWithdrawalBands() []*NAVBand {
	if m != nil {
		return m.WithdrawalBands
	}
	return nil
}

func (m *NAVConfig) GetMinNavUpdateInterval() int64 {
	if m != nil {
		return m.MinNavUpdateInterval
	}
	return 0
}

func (m *NAVConfig) GetMaxNavDeviation() int32 {
	if m != nil {
		return m.MaxNavDeviation
	}
	return 0
}

func (m *NAVConfig) GetCircuitBreakerThreshold() int32 {
	if m != nil {
		return m.CircuitBreakerThreshold
	}
	return 0
}

// NAVInfo represents current NAV information for a vault
type NAVInfo struct {
	// Current NAV value
	CurrentNav cosmossdk_io_math.Int `protobuf:"bytes,1,opt,name=current_nav,json=currentNav,proto3,customtype=cosmossdk.io/math.Int" json:"current_nav"`
	// Previous NAV value
	PreviousNav cosmossdk_io_math.Int `protobuf:"bytes,2,opt,name=previous_nav,json=previousNav,proto3,customtype=cosmossdk.io/math.Int" json:"previous_nav"`
	// Last update timestamp
	LastUpdate time.Time `protobuf:"bytes,3,opt,name=last_update,json=lastUpdate,proto3,stdtime" json:"last_update"`
	// NAV change since last update (basis points)
	ChangeBps int32 `protobuf:"varint,4,opt,name=change_bps,json=changeBps,proto3" json:"change_bps,omitempty"`
	// Whether circuit breaker is active
	CircuitBreakerActive bool `protobuf:"varint,5,opt,name=circuit_breaker_active,json=circuitBreakerActive,proto3" json:"circuit_breaker_active,omitempty"`
}

func (m *NAVInfo) Reset()         { *m = NAVInfo{} }
func (m *NAVInfo) String() string { return proto.CompactTextString(m) }
func (*NAVInfo) ProtoMessage()    {}
func (*NAVInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_893b9e92a5bdeb81, []int{2}
}
func (m *NAVInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NAVInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NAVInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NAVInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NAVInfo.Merge(m, src)
}
func (m *NAVInfo) XXX_Size() int {
	return m.Size()
}
func (m *NAVInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_NAVInfo.DiscardUnknown(m)
}

var xxx_messageInfo_NAVInfo proto.InternalMessageInfo

func (m *NAVInfo) GetLastUpdate() time.Time {
	if m != nil {
		return m.LastUpdate
	}
	return time.Time{}
}

func (m *NAVInfo) GetChangeBps() int32 {
	if m != nil {
		return m.ChangeBps
	}
	return 0
}

func (m *NAVInfo) GetCircuitBreakerActive() bool {
	if m != nil {
		return m.CircuitBreakerActive
	}
	return false
}

// NAVUpdate represents a NAV update event
type NAVUpdate struct {
	// Previous NAV point
	PreviousNav cosmossdk_io_math.Int `protobuf:"bytes,1,opt,name=previous_nav,json=previousNav,proto3,customtype=cosmossdk.io/math.Int" json:"previous_nav"`
	// New NAV point
	NewNav cosmossdk_io_math.Int `protobuf:"bytes,2,opt,name=new_nav,json=newNav,proto3,customtype=cosmossdk.io/math.Int" json:"new_nav"`
	// Update timestamp
	Timestamp time.Time `protobuf:"bytes,3,opt,name=timestamp,proto3,stdtime" json:"timestamp"`
	// Block height
	BlockHeight int64 `protobuf:"varint,4,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	// Update reason
	Reason string `protobuf:"bytes,5,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (m *NAVUpdate) Reset()         { *m = NAVUpdate{} }
func (m *NAVUpdate) String() string { return proto.CompactTextString(m) }
func (*NAVUpdate) ProtoMessage()    {}
func (*NAVUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_893b9e92a5bdeb81, []int{3}
}
func (m *NAVUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NAVUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NAVUpdate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NAVUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NAVUpdate.Merge(m, src)
}
func (m *NAVUpdate) XXX_Size() int {
	return m.Size()
}
func (m *NAVUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_NAVUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_NAVUpdate proto.InternalMessageInfo

func (m *NAVUpdate) GetTimestamp() time.Time {
	if m != nil {
		return m.Timestamp
	}
	return time.Time{}
}

func (m *NAVUpdate) GetBlockHeight() int64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *NAVUpdate) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

// PricingInfo provides pricing information for deposits/withdrawals
type PricingInfo struct {
	// Current share price (NAV per share)
	SharePrice cosmossdk_io_math.LegacyDec `protobuf:"bytes,1,opt,name=share_price,json=sharePrice,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"share_price"`
	// Applied NAV band
	AppliedBand *NAVBand `protobuf:"bytes,2,opt,name=applied_band,json=appliedBand,proto3" json:"applied_band,omitempty"`
	// Effective fee rate
	EffectiveFeeRate int32 `protobuf:"varint,3,opt,name=effective_fee_rate,json=effectiveFeeRate,proto3" json:"effective_fee_rate,omitempty"`
	// Expected shares for deposit or token amount for withdrawal
	ExpectedAmount cosmossdk_io_math.Int `protobuf:"bytes,4,opt,name=expected_amount,json=expectedAmount,proto3,customtype=cosmossdk.io/math.Int" json:"expected_amount"`
}

func (m *PricingInfo) Reset()         { *m = PricingInfo{} }
func (m *PricingInfo) String() string { return proto.CompactTextString(m) }
func (*PricingInfo) ProtoMessage()    {}
func (*PricingInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_893b9e92a5bdeb81, []int{4}
}
func (m *PricingInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PricingInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PricingInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PricingInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PricingInfo.Merge(m, src)
}
func (m *PricingInfo) XXX_Size() int {
	return m.Size()
}
func (m *PricingInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PricingInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PricingInfo proto.InternalMessageInfo

func (m *PricingInfo) GetAppliedBand() *NAVBand {
	if m != nil {
		return m.AppliedBand
	}
	return nil
}

func (m *PricingInfo) GetEffectiveFeeRate() int32 {
	if m != nil {
		return m.EffectiveFeeRate
	}
	return 0
}

// LossEvent represents a loss in vault value
type LossEvent struct {
	// Amount of loss
	LossAmount cosmossdk_io_math.Int `protobuf:"bytes,1,opt,name=loss_amount,json=lossAmount,proto3,customtype=cosmossdk.io/math.Int" json:"loss_amount"`
	// Previous NAV before loss
	PreviousNav cosmossdk_io_math.Int `protobuf:"bytes,2,opt,name=previous_nav,json=previousNav,proto3,customtype=cosmossdk.io/math.Int" json:"previous_nav"`
	// New NAV after loss
	NewNav cosmossdk_io_math.Int `protobuf:"bytes,3,opt,name=new_nav,json=newNav,proto3,customtype=cosmossdk.io/math.Int" json:"new_nav"`
	// Loss reason/source
	Reason string `protobuf:"bytes,4,opt,name=reason,proto3" json:"reason,omitempty"`
	// Recovery plan if applicable
	RecoveryPlan string `protobuf:"bytes,5,opt,name=recovery_plan,json=recoveryPlan,proto3" json:"recovery_plan,omitempty"`
	// Timestamp of loss
	Timestamp time.Time `protobuf:"bytes,6,opt,name=timestamp,proto3,stdtime" json:"timestamp"`
}

func (m *LossEvent) Reset()         { *m = LossEvent{} }
func (m *LossEvent) String() string { return proto.CompactTextString(m) }
func (*LossEvent) ProtoMessage()    {}
func (*LossEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_893b9e92a5bdeb81, []int{5}
}
func (m *LossEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LossEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LossEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LossEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LossEvent.Merge(m, src)
}
func (m *LossEvent) XXX_Size() int {
	return m.Size()
}
func (m *LossEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_LossEvent.DiscardUnknown(m)
}

var xxx_messageInfo_LossEvent proto.InternalMessageInfo

func (m *LossEvent) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func (m *LossEvent) GetRecoveryPlan() string {
	if m != nil {
		return m.RecoveryPlan
	}
	return ""
}

func (m *LossEvent) GetTimestamp() time.Time {
	if m != nil {
		return m.Timestamp
	}
	return time.Time{}
}

func init() {
	proto.RegisterType((*NAVBand)(nil), "noble.dollar.vaults.v2.NAVBand")
	proto.RegisterType((*NAVConfig)(nil), "noble.dollar.vaults.v2.NAVConfig")
	proto.RegisterType((*NAVInfo)(nil), "noble.dollar.vaults.v2.NAVInfo")
	proto.RegisterType((*NAVUpdate)(nil), "noble.dollar.vaults.v2.NAVUpdate")
	proto.RegisterType((*PricingInfo)(nil), "noble.dollar.vaults.v2.PricingInfo")
	proto.RegisterType((*LossEvent)(nil), "noble.dollar.vaults.v2.LossEvent")
}

func init() { proto.RegisterFile("noble/dollar/vaults/v2/nav.proto", fileDescriptor_893b9e92a5bdeb81) }

var fileDescriptor_893b9e92a5bdeb81 = []byte{
	// 848 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x55, 0x4f, 0x6f, 0xdc, 0x44,
	0x14, 0x8f, 0x77, 0xdb, 0x24, 0x3b, 0xde, 0x92, 0x76, 0x14, 0xd2, 0x4d, 0x10, 0xbb, 0x61, 0x7b,
	0xa9, 0x2a, 0xb0, 0x51, 0xf8, 0x73, 0x40, 0xe2, 0x10, 0x93, 0x22, 0x16, 0x55, 0xab, 0x62, 0x4a,
	0x11, 0x5c, 0xac, 0x59, 0xfb, 0xad, 0x3d, 0x8a, 0x3d, 0x63, 0xcd, 0x8c, 0xbd, 0x09, 0x9f, 0xa2,
	0x1f, 0x03, 0x71, 0x42, 0x82, 0x23, 0x1f, 0xa0, 0x17, 0xa4, 0x8a, 0x13, 0xe2, 0x50, 0x50, 0x72,
	0xe0, 0x63, 0x80, 0x3c, 0x33, 0x4e, 0xd2, 0xc0, 0xa1, 0x6c, 0xe9, 0x25, 0xca, 0xbc, 0xf7, 0x7b,
	0xbf, 0xb7, 0xef, 0x37, 0xbf, 0x37, 0x46, 0xbb, 0x8c, 0xcf, 0x72, 0xf0, 0x13, 0x9e, 0xe7, 0x44,
	0xf8, 0x35, 0xa9, 0x72, 0x25, 0xfd, 0x7a, 0xcf, 0x67, 0xa4, 0xf6, 0x4a, 0xc1, 0x15, 0xc7, 0x5b,
	0x1a, 0xe1, 0x19, 0x84, 0x67, 0x10, 0x5e, 0xbd, 0xb7, 0x73, 0x83, 0x14, 0x94, 0x71, 0x5f, 0xff,
	0x35, 0xd0, 0x9d, 0xed, 0x98, 0xcb, 0x82, 0xcb, 0x48, 0x9f, 0x7c, 0x73, 0xb0, 0xa9, 0xcd, 0x94,
	0xa7, 0xdc, 0xc4, 0x9b, 0xff, 0x6c, 0x74, 0x94, 0x72, 0x9e, 0xe6, 0xe0, 0xeb, 0xd3, 0xac, 0x9a,
	0xfb, 0x8a, 0x16, 0x20, 0x15, 0x29, 0x4a, 0x03, 0x18, 0xcf, 0xd1, 0xda, 0x74, 0xff, 0x61, 0x40,
	0x58, 0x82, 0x47, 0xc8, 0xcd, 0xf9, 0x02, 0x44, 0x34, 0xe3, 0x15, 0x4b, 0x06, 0xce, 0xae, 0x73,
	0xfb, 0x6a, 0x88, 0x74, 0x28, 0x68, 0x22, 0x0d, 0xa0, 0x2a, 0xcb, 0x33, 0x40, 0xc7, 0x00, 0x74,
	0xc8, 0x00, 0xb6, 0xd1, 0xfa, 0x1c, 0x20, 0x12, 0x44, 0xc1, 0xa0, 0xab, 0xb3, 0x6b, 0x73, 0x80,
	0x90, 0x28, 0x18, 0xff, 0xd4, 0x41, 0xbd, 0xe9, 0xfe, 0xc3, 0x8f, 0x38, 0x9b, 0xd3, 0x14, 0x1f,
	0xa0, 0x6b, 0x09, 0x94, 0x5c, 0x52, 0x15, 0xcd, 0x08, 0x4b, 0xe4, 0xc0, 0xd9, 0xed, 0xde, 0x76,
	0xf7, 0x46, 0xde, 0xbf, 0x4b, 0xe1, 0xd9, 0x9f, 0x18, 0xf6, 0x6d, 0x55, 0x73, 0x90, 0xf8, 0x53,
	0x74, 0x7d, 0x41, 0x55, 0x96, 0x08, 0xb2, 0x20, 0xb9, 0x25, 0xea, 0x3c, 0x1f, 0xd1, 0xc6, 0x79,
	0xa1, 0xe1, 0x7a, 0x0f, 0xdd, 0x2c, 0x28, 0x8b, 0x18, 0xa9, 0xa3, 0xaa, 0x4c, 0x88, 0x82, 0x88,
	0x32, 0x05, 0xa2, 0x26, 0xb9, 0x9e, 0xa4, 0x1b, 0x6e, 0x16, 0x94, 0x4d, 0x49, 0xfd, 0x85, 0x4e,
	0x4e, 0x6c, 0x0e, 0xdf, 0x41, 0x37, 0x0a, 0x72, 0xa4, 0xcb, 0x12, 0xa8, 0x29, 0x51, 0x94, 0xb3,
	0xc1, 0x15, 0x3d, 0xfa, 0x46, 0x41, 0x8e, 0xa6, 0xa4, 0x3e, 0x68, 0xc3, 0xf8, 0x03, 0xb4, 0x1d,
	0x53, 0x11, 0x57, 0xcd, 0xd0, 0x02, 0xc8, 0x21, 0x88, 0x48, 0x65, 0x02, 0x64, 0xc6, 0xf3, 0x64,
	0x70, 0x55, 0xd7, 0xdc, 0xb4, 0x80, 0xc0, 0xe4, 0x1f, 0xb4, 0xe9, 0xf1, 0xcf, 0x1d, 0x7d, 0x4f,
	0x13, 0x36, 0xe7, 0xf8, 0x33, 0xe4, 0xc6, 0x95, 0x10, 0xc0, 0x54, 0xd3, 0x57, 0xdf, 0x53, 0x2f,
	0x78, 0xfb, 0xf1, 0xd3, 0xd1, 0xca, 0x6f, 0x4f, 0x47, 0xaf, 0x1a, 0x53, 0xc8, 0xe4, 0xd0, 0xa3,
	0xdc, 0x2f, 0x88, 0xca, 0xbc, 0x09, 0x53, 0xbf, 0xfc, 0xf8, 0x16, 0xb2, 0x6e, 0x99, 0x30, 0xf5,
	0xed, 0x9f, 0xdf, 0xdf, 0x71, 0x42, 0x64, 0x49, 0xa6, 0xa4, 0xc6, 0x9f, 0xa3, 0x7e, 0x29, 0xa0,
	0xa6, 0xbc, 0x92, 0x9a, 0xb3, 0xb3, 0x24, 0xa7, 0xdb, 0xb2, 0x34, 0xa4, 0x77, 0x91, 0x9b, 0x13,
	0xa9, 0xac, 0x9e, 0x5a, 0x46, 0x77, 0x6f, 0xc7, 0x33, 0x8e, 0xf4, 0x5a, 0x47, 0x7a, 0x0f, 0x5a,
	0x47, 0x06, 0xeb, 0x4d, 0xbf, 0x47, 0xbf, 0x8f, 0x9c, 0x10, 0x35, 0x85, 0x46, 0x6a, 0xfc, 0x3a,
	0x42, 0x71, 0x46, 0x58, 0x0a, 0xd1, 0xac, 0x94, 0x56, 0xdb, 0x9e, 0x89, 0x04, 0xa5, 0xc4, 0xef,
	0xa2, 0xad, 0xcb, 0xaa, 0x92, 0x58, 0xd1, 0x1a, 0xb4, 0xa4, 0xeb, 0xe1, 0xe6, 0xb3, 0x92, 0xee,
	0xeb, 0xdc, 0xf8, 0x3b, 0x63, 0x47, 0xdb, 0xe2, 0xf2, 0xf8, 0xce, 0xff, 0x31, 0xfe, 0x04, 0xad,
	0x31, 0x58, 0xbc, 0x90, 0x9c, 0xab, 0x0c, 0x16, 0x0d, 0x55, 0x80, 0x7a, 0x67, 0x7b, 0xfb, 0x9f,
	0x74, 0x3c, 0x2f, 0xc3, 0x6f, 0xa0, 0xfe, 0x2c, 0xe7, 0xf1, 0x61, 0x94, 0x01, 0x4d, 0x33, 0xa5,
	0x85, 0xec, 0x86, 0xae, 0x8e, 0x7d, 0xa2, 0x43, 0x78, 0x0b, 0xad, 0x0a, 0x20, 0x92, 0x33, 0x2d,
	0x5d, 0x2f, 0xb4, 0xa7, 0xf1, 0x0f, 0x1d, 0xe4, 0xde, 0x17, 0x34, 0xa6, 0x2c, 0xd5, 0x06, 0xfc,
	0x12, 0xb9, 0x32, 0x23, 0x02, 0xa2, 0x52, 0xd0, 0x18, 0xac, 0x5a, 0xef, 0xdb, 0xe9, 0x5e, 0xfb,
	0xe7, 0x74, 0xf7, 0x20, 0x25, 0xf1, 0xf1, 0x01, 0xc4, 0x17, 0x66, 0x3c, 0x80, 0xd8, 0xda, 0x50,
	0x53, 0x35, 0xf4, 0x80, 0x03, 0xd4, 0x27, 0x65, 0x99, 0x53, 0x48, 0xf4, 0x36, 0x6b, 0xdd, 0x9e,
	0x63, 0x99, 0x5d, 0x5b, 0xa4, 0x5f, 0xb1, 0x37, 0x11, 0x86, 0xf9, 0x1c, 0xf4, 0x35, 0x47, 0x97,
	0x5e, 0xa3, 0xeb, 0x67, 0x99, 0x8f, 0xcd, 0xb3, 0x84, 0xbf, 0x42, 0x1b, 0x70, 0x54, 0x42, 0xac,
	0x20, 0x89, 0x48, 0xc1, 0x2b, 0x66, 0x84, 0x59, 0xe6, 0xb2, 0x5e, 0x69, 0x89, 0xf6, 0x35, 0xcf,
	0xf8, 0xaf, 0x0e, 0xea, 0xdd, 0xe3, 0x52, 0xde, 0xad, 0x81, 0xa9, 0x66, 0x69, 0x73, 0x2e, 0x65,
	0xdb, 0x64, 0xe9, 0xa5, 0x6d, 0x48, 0x4c, 0x83, 0x97, 0xb3, 0xb4, 0x17, 0x5c, 0xdb, 0x7d, 0x41,
	0xd7, 0x9e, 0xdb, 0xe9, 0xca, 0x45, 0x3b, 0xe1, 0x5b, 0xe8, 0x9a, 0x80, 0x98, 0xd7, 0x20, 0x8e,
	0xa3, 0x32, 0x27, 0xad, 0xdb, 0xfa, 0x6d, 0xf0, 0x7e, 0x4e, 0xd8, 0xb3, 0x96, 0x5f, 0x5d, 0xca,
	0xf2, 0xc1, 0x87, 0x8f, 0x4f, 0x86, 0xce, 0x93, 0x93, 0xa1, 0xf3, 0xc7, 0xc9, 0xd0, 0x79, 0x74,
	0x3a, 0x5c, 0x79, 0x72, 0x3a, 0x5c, 0xf9, 0xf5, 0x74, 0xb8, 0xf2, 0xf5, 0x2d, 0xeb, 0x25, 0x63,
	0xac, 0xa3, 0xe3, 0x6f, 0x9a, 0x2f, 0xb2, 0x3a, 0x2e, 0x41, 0x9e, 0x7f, 0xa1, 0x67, 0xab, 0xba,
	0xcf, 0x3b, 0x7f, 0x07, 0x00, 0x00, 0xff, 0xff, 0xdf, 0x52, 0x38, 0xd6, 0xc2, 0x07, 0x00, 0x00,
}

func (m *NAVBand) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NAVBand) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NAVBand) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FeeRate != 0 {
		i = encodeVarintNav(dAtA, i, uint64(m.FeeRate))
		i--
		dAtA[i] = 0x18
	}
	if m.UpperBound != 0 {
		i = encodeVarintNav(dAtA, i, uint64(m.UpperBound))
		i--
		dAtA[i] = 0x10
	}
	if m.LowerBound != 0 {
		i = encodeVarintNav(dAtA, i, uint64(m.LowerBound))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NAVConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NAVConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NAVConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CircuitBreakerThreshold != 0 {
		i = encodeVarintNav(dAtA, i, uint64(m.CircuitBreakerThreshold))
		i--
		dAtA[i] = 0x28
	}
	if m.MaxNavDeviation != 0 {
		i = encodeVarintNav(dAtA, i, uint64(m.MaxNavDeviation))
		i--
		dAtA[i] = 0x20
	}
	if m.MinNavUpdateInterval != 0 {
		i = encodeVarintNav(dAtA, i, uint64(m.MinNavUpdateInterval))
		i--
		dAtA[i] = 0x18
	}
	if len(m.WithdrawalBands) > 0 {
		for iNdEx := len(m.WithdrawalBands) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.WithdrawalBands[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNav(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.DepositBands) > 0 {
		for iNdEx := len(m.DepositBands) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DepositBands[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNav(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *NAVInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NAVInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NAVInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CircuitBreakerActive {
		i--
		if m.CircuitBreakerActive {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.ChangeBps != 0 {
		i = encodeVarintNav(dAtA, i, uint64(m.ChangeBps))
		i--
		dAtA[i] = 0x20
	}
	n1, err1 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.LastUpdate, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.LastUpdate):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintNav(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x1a
	{
		size := m.PreviousNav.Size()
		i -= size
		if _, err := m.PreviousNav.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintNav(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.CurrentNav.Size()
		i -= size
		if _, err := m.CurrentNav.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintNav(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *NAVUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NAVUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NAVUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Reason) > 0 {
		i -= len(m.Reason)
		copy(dAtA[i:], m.Reason)
		i = encodeVarintNav(dAtA, i, uint64(len(m.Reason)))
		i--
		dAtA[i] = 0x2a
	}
	if m.BlockHeight != 0 {
		i = encodeVarintNav(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x20
	}
	n2, err2 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.Timestamp, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.Timestamp):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintNav(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x1a
	{
		size := m.NewNav.Size()
		i -= size
		if _, err := m.NewNav.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintNav(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.PreviousNav.Size()
		i -= size
		if _, err := m.PreviousNav.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintNav(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *PricingInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PricingInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PricingInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.ExpectedAmount.Size()
		i -= size
		if _, err := m.ExpectedAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintNav(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if m.EffectiveFeeRate != 0 {
		i = encodeVarintNav(dAtA, i, uint64(m.EffectiveFeeRate))
		i--
		dAtA[i] = 0x18
	}
	if m.AppliedBand != nil {
		{
			size, err := m.AppliedBand.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNav(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	{
		size := m.SharePrice.Size()
		i -= size
		if _, err := m.SharePrice.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintNav(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *LossEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LossEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LossEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n4, err4 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.Timestamp, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.Timestamp):])
	if err4 != nil {
		return 0, err4
	}
	i -= n4
	i = encodeVarintNav(dAtA, i, uint64(n4))
	i--
	dAtA[i] = 0x32
	if len(m.RecoveryPlan) > 0 {
		i -= len(m.RecoveryPlan)
		copy(dAtA[i:], m.RecoveryPlan)
		i = encodeVarintNav(dAtA, i, uint64(len(m.RecoveryPlan)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Reason) > 0 {
		i -= len(m.Reason)
		copy(dAtA[i:], m.Reason)
		i = encodeVarintNav(dAtA, i, uint64(len(m.Reason)))
		i--
		dAtA[i] = 0x22
	}
	{
		size := m.NewNav.Size()
		i -= size
		if _, err := m.NewNav.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintNav(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.PreviousNav.Size()
		i -= size
		if _, err := m.PreviousNav.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintNav(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.LossAmount.Size()
		i -= size
		if _, err := m.LossAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintNav(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintNav(dAtA []byte, offset int, v uint64) int {
	offset -= sovNav(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *NAVBand) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LowerBound != 0 {
		n += 1 + sovNav(uint64(m.LowerBound))
	}
	if m.UpperBound != 0 {
		n += 1 + sovNav(uint64(m.UpperBound))
	}
	if m.FeeRate != 0 {
		n += 1 + sovNav(uint64(m.FeeRate))
	}
	return n
}

func (m *NAVConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.DepositBands) > 0 {
		for _, e := range m.DepositBands {
			l = e.Size()
			n += 1 + l + sovNav(uint64(l))
		}
	}
	if len(m.WithdrawalBands) > 0 {
		for _, e := range m.WithdrawalBands {
			l = e.Size()
			n += 1 + l + sovNav(uint64(l))
		}
	}
	if m.MinNavUpdateInterval != 0 {
		n += 1 + sovNav(uint64(m.MinNavUpdateInterval))
	}
	if m.MaxNavDeviation != 0 {
		n += 1 + sovNav(uint64(m.MaxNavDeviation))
	}
	if m.CircuitBreakerThreshold != 0 {
		n += 1 + sovNav(uint64(m.CircuitBreakerThreshold))
	}
	return n
}

func (m *NAVInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.CurrentNav.Size()
	n += 1 + l + sovNav(uint64(l))
	l = m.PreviousNav.Size()
	n += 1 + l + sovNav(uint64(l))
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.LastUpdate)
	n += 1 + l + sovNav(uint64(l))
	if m.ChangeBps != 0 {
		n += 1 + sovNav(uint64(m.ChangeBps))
	}
	if m.CircuitBreakerActive {
		n += 2
	}
	return n
}

func (m *NAVUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.PreviousNav.Size()
	n += 1 + l + sovNav(uint64(l))
	l = m.NewNav.Size()
	n += 1 + l + sovNav(uint64(l))
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.Timestamp)
	n += 1 + l + sovNav(uint64(l))
	if m.BlockHeight != 0 {
		n += 1 + sovNav(uint64(m.BlockHeight))
	}
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovNav(uint64(l))
	}
	return n
}

func (m *PricingInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.SharePrice.Size()
	n += 1 + l + sovNav(uint64(l))
	if m.AppliedBand != nil {
		l = m.AppliedBand.Size()
		n += 1 + l + sovNav(uint64(l))
	}
	if m.EffectiveFeeRate != 0 {
		n += 1 + sovNav(uint64(m.EffectiveFeeRate))
	}
	l = m.ExpectedAmount.Size()
	n += 1 + l + sovNav(uint64(l))
	return n
}

func (m *LossEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.LossAmount.Size()
	n += 1 + l + sovNav(uint64(l))
	l = m.PreviousNav.Size()
	n += 1 + l + sovNav(uint64(l))
	l = m.NewNav.Size()
	n += 1 + l + sovNav(uint64(l))
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovNav(uint64(l))
	}
	l = len(m.RecoveryPlan)
	if l > 0 {
		n += 1 + l + sovNav(uint64(l))
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.Timestamp)
	n += 1 + l + sovNav(uint64(l))
	return n
}

func sovNav(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozNav(x uint64) (n int) {
	return sovNav(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *NAVBand) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNav
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NAVBand: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NAVBand: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LowerBound", wireType)
			}
			m.LowerBound = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNav
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LowerBound |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpperBound", wireType)
			}
			m.UpperBound = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNav
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpperBound |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeRate", wireType)
			}
			m.FeeRate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNav
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FeeRate |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNav(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNav
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NAVConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNav
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NAVConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NAVConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepositBands", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNav
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNav
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNav
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DepositBands = append(m.DepositBands, &NAVBand{})
			if err := m.DepositBands[len(m.DepositBands)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithdrawalBands", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNav
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNav
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNav
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WithdrawalBands = append(m.WithdrawalBands, &NAVBand{})
			if err := m.WithdrawalBands[len(m.WithdrawalBands)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinNavUpdateInterval", wireType)
			}
			m.MinNavUpdateInterval = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNav
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinNavUpdateInterval |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxNavDeviation", wireType)
			}
			m.MaxNavDeviation = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNav
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxNavDeviation |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CircuitBreakerThreshold", wireType)
			}
			m.CircuitBreakerThreshold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNav
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CircuitBreakerThreshold |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNav(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNav
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NAVInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNav
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NAVInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NAVInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentNav", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNav
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNav
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNav
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CurrentNav.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreviousNav", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNav
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNav
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNav
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PreviousNav.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastUpdate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNav
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNav
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNav
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.LastUpdate, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChangeBps", wireType)
			}
			m.ChangeBps = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNav
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChangeBps |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CircuitBreakerActive", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNav
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CircuitBreakerActive = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipNav(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNav
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NAVUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNav
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NAVUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NAVUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreviousNav", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNav
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNav
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNav
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PreviousNav.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewNav", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNav
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNav
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNav
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.NewNav.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNav
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNav
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNav
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.Timestamp, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNav
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNav
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNav
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNav
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNav(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNav
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PricingInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNav
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PricingInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PricingInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SharePrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNav
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNav
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNav
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SharePrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppliedBand", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNav
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNav
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNav
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AppliedBand == nil {
				m.AppliedBand = &NAVBand{}
			}
			if err := m.AppliedBand.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EffectiveFeeRate", wireType)
			}
			m.EffectiveFeeRate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNav
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EffectiveFeeRate |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpectedAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNav
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNav
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNav
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ExpectedAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNav(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNav
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LossEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNav
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LossEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LossEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LossAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNav
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNav
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNav
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LossAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreviousNav", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNav
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNav
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNav
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PreviousNav.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewNav", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNav
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNav
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNav
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.NewNav.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNav
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNav
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNav
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecoveryPlan", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNav
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNav
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNav
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecoveryPlan = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNav
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNav
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNav
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.Timestamp, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNav(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNav
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipNav(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowNav
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNav
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNav
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthNav
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupNav
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthNav
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthNav        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowNav          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupNav = fmt.Errorf("proto: unexpected end of group")
)

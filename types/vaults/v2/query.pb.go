// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: noble/dollar/vaults/v2/query.proto

package v2

import (
	context "context"
	vaults "dollar.noble.xyz/v2/types/vaults"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryVaultInfoRequest requests information about a specific vault
type QueryVaultInfoRequest struct {
	VaultType vaults.VaultType `protobuf:"varint,1,opt,name=vault_type,json=vaultType,proto3,enum=noble.dollar.vaults.v1.VaultType" json:"vault_type,omitempty"`
}

func (m *QueryVaultInfoRequest) Reset()         { *m = QueryVaultInfoRequest{} }
func (m *QueryVaultInfoRequest) String() string { return proto.CompactTextString(m) }
func (*QueryVaultInfoRequest) ProtoMessage()    {}
func (*QueryVaultInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9037e95a7381a4ea, []int{0}
}
func (m *QueryVaultInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryVaultInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryVaultInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryVaultInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryVaultInfoRequest.Merge(m, src)
}
func (m *QueryVaultInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryVaultInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryVaultInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryVaultInfoRequest proto.InternalMessageInfo

func (m *QueryVaultInfoRequest) GetVaultType() vaults.VaultType {
	if m != nil {
		return m.VaultType
	}
	return vaults.UNSPECIFIED
}

// QueryVaultInfoResponse returns vault information
type QueryVaultInfoResponse struct {
	Config          VaultConfig `protobuf:"bytes,1,opt,name=config,proto3" json:"config"`
	TotalShares     string      `protobuf:"bytes,2,opt,name=total_shares,json=totalShares,proto3" json:"total_shares,omitempty"`
	TotalNav        string      `protobuf:"bytes,3,opt,name=total_nav,json=totalNav,proto3" json:"total_nav,omitempty"`
	SharePrice      string      `protobuf:"bytes,4,opt,name=share_price,json=sharePrice,proto3" json:"share_price,omitempty"`
	TotalDepositors uint64      `protobuf:"varint,5,opt,name=total_depositors,json=totalDepositors,proto3" json:"total_depositors,omitempty"`
}

func (m *QueryVaultInfoResponse) Reset()         { *m = QueryVaultInfoResponse{} }
func (m *QueryVaultInfoResponse) String() string { return proto.CompactTextString(m) }
func (*QueryVaultInfoResponse) ProtoMessage()    {}
func (*QueryVaultInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9037e95a7381a4ea, []int{1}
}
func (m *QueryVaultInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryVaultInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryVaultInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryVaultInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryVaultInfoResponse.Merge(m, src)
}
func (m *QueryVaultInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryVaultInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryVaultInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryVaultInfoResponse proto.InternalMessageInfo

func (m *QueryVaultInfoResponse) GetConfig() VaultConfig {
	if m != nil {
		return m.Config
	}
	return VaultConfig{}
}

func (m *QueryVaultInfoResponse) GetTotalShares() string {
	if m != nil {
		return m.TotalShares
	}
	return ""
}

func (m *QueryVaultInfoResponse) GetTotalNav() string {
	if m != nil {
		return m.TotalNav
	}
	return ""
}

func (m *QueryVaultInfoResponse) GetSharePrice() string {
	if m != nil {
		return m.SharePrice
	}
	return ""
}

func (m *QueryVaultInfoResponse) GetTotalDepositors() uint64 {
	if m != nil {
		return m.TotalDepositors
	}
	return 0
}

// QueryAllVaultsRequest requests information about all vaults
type QueryAllVaultsRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllVaultsRequest) Reset()         { *m = QueryAllVaultsRequest{} }
func (m *QueryAllVaultsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllVaultsRequest) ProtoMessage()    {}
func (*QueryAllVaultsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9037e95a7381a4ea, []int{2}
}
func (m *QueryAllVaultsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllVaultsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllVaultsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllVaultsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllVaultsRequest.Merge(m, src)
}
func (m *QueryAllVaultsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllVaultsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllVaultsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllVaultsRequest proto.InternalMessageInfo

func (m *QueryAllVaultsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryAllVaultsResponse returns information about all vaults
type QueryAllVaultsResponse struct {
	Vaults     []QueryVaultInfoResponse `protobuf:"bytes,1,rep,name=vaults,proto3" json:"vaults"`
	Pagination *query.PageResponse      `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllVaultsResponse) Reset()         { *m = QueryAllVaultsResponse{} }
func (m *QueryAllVaultsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllVaultsResponse) ProtoMessage()    {}
func (*QueryAllVaultsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9037e95a7381a4ea, []int{3}
}
func (m *QueryAllVaultsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllVaultsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllVaultsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllVaultsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllVaultsResponse.Merge(m, src)
}
func (m *QueryAllVaultsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllVaultsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllVaultsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllVaultsResponse proto.InternalMessageInfo

func (m *QueryAllVaultsResponse) GetVaults() []QueryVaultInfoResponse {
	if m != nil {
		return m.Vaults
	}
	return nil
}

func (m *QueryAllVaultsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryUserPositionRequest requests a user's position in a specific vault
type QueryUserPositionRequest struct {
	Address   string           `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	VaultType vaults.VaultType `protobuf:"varint,2,opt,name=vault_type,json=vaultType,proto3,enum=noble.dollar.vaults.v1.VaultType" json:"vault_type,omitempty"`
}

func (m *QueryUserPositionRequest) Reset()         { *m = QueryUserPositionRequest{} }
func (m *QueryUserPositionRequest) String() string { return proto.CompactTextString(m) }
func (*QueryUserPositionRequest) ProtoMessage()    {}
func (*QueryUserPositionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9037e95a7381a4ea, []int{4}
}
func (m *QueryUserPositionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryUserPositionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryUserPositionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryUserPositionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryUserPositionRequest.Merge(m, src)
}
func (m *QueryUserPositionRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryUserPositionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryUserPositionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryUserPositionRequest proto.InternalMessageInfo

func (m *QueryUserPositionRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *QueryUserPositionRequest) GetVaultType() vaults.VaultType {
	if m != nil {
		return m.VaultType
	}
	return vaults.UNSPECIFIED
}

// QueryUserPositionResponse returns a user's position
type QueryUserPositionResponse struct {
	Position        *UserPosition `protobuf:"bytes,1,opt,name=position,proto3" json:"position,omitempty"`
	CurrentValue    string        `protobuf:"bytes,2,opt,name=current_value,json=currentValue,proto3" json:"current_value,omitempty"`
	UnrealizedYield string        `protobuf:"bytes,3,opt,name=unrealized_yield,json=unrealizedYield,proto3" json:"unrealized_yield,omitempty"`
}

func (m *QueryUserPositionResponse) Reset()         { *m = QueryUserPositionResponse{} }
func (m *QueryUserPositionResponse) String() string { return proto.CompactTextString(m) }
func (*QueryUserPositionResponse) ProtoMessage()    {}
func (*QueryUserPositionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9037e95a7381a4ea, []int{5}
}
func (m *QueryUserPositionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryUserPositionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryUserPositionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryUserPositionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryUserPositionResponse.Merge(m, src)
}
func (m *QueryUserPositionResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryUserPositionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryUserPositionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryUserPositionResponse proto.InternalMessageInfo

func (m *QueryUserPositionResponse) GetPosition() *UserPosition {
	if m != nil {
		return m.Position
	}
	return nil
}

func (m *QueryUserPositionResponse) GetCurrentValue() string {
	if m != nil {
		return m.CurrentValue
	}
	return ""
}

func (m *QueryUserPositionResponse) GetUnrealizedYield() string {
	if m != nil {
		return m.UnrealizedYield
	}
	return ""
}

// QueryUserPositionsRequest requests all of a user's positions
type QueryUserPositionsRequest struct {
	Address    string             `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryUserPositionsRequest) Reset()         { *m = QueryUserPositionsRequest{} }
func (m *QueryUserPositionsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryUserPositionsRequest) ProtoMessage()    {}
func (*QueryUserPositionsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9037e95a7381a4ea, []int{6}
}
func (m *QueryUserPositionsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryUserPositionsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryUserPositionsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryUserPositionsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryUserPositionsRequest.Merge(m, src)
}
func (m *QueryUserPositionsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryUserPositionsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryUserPositionsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryUserPositionsRequest proto.InternalMessageInfo

func (m *QueryUserPositionsRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *QueryUserPositionsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryUserPositionsResponse returns all of a user's positions
type QueryUserPositionsResponse struct {
	Positions  []UserPositionWithVault `protobuf:"bytes,1,rep,name=positions,proto3" json:"positions"`
	Pagination *query.PageResponse     `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryUserPositionsResponse) Reset()         { *m = QueryUserPositionsResponse{} }
func (m *QueryUserPositionsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryUserPositionsResponse) ProtoMessage()    {}
func (*QueryUserPositionsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9037e95a7381a4ea, []int{7}
}
func (m *QueryUserPositionsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryUserPositionsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryUserPositionsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryUserPositionsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryUserPositionsResponse.Merge(m, src)
}
func (m *QueryUserPositionsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryUserPositionsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryUserPositionsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryUserPositionsResponse proto.InternalMessageInfo

func (m *QueryUserPositionsResponse) GetPositions() []UserPositionWithVault {
	if m != nil {
		return m.Positions
	}
	return nil
}

func (m *QueryUserPositionsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// UserPositionWithVault includes the vault type with the position
type UserPositionWithVault struct {
	VaultType    vaults.VaultType `protobuf:"varint,1,opt,name=vault_type,json=vaultType,proto3,enum=noble.dollar.vaults.v1.VaultType" json:"vault_type,omitempty"`
	Position     UserPosition     `protobuf:"bytes,2,opt,name=position,proto3" json:"position"`
	CurrentValue string           `protobuf:"bytes,3,opt,name=current_value,json=currentValue,proto3" json:"current_value,omitempty"`
}

func (m *UserPositionWithVault) Reset()         { *m = UserPositionWithVault{} }
func (m *UserPositionWithVault) String() string { return proto.CompactTextString(m) }
func (*UserPositionWithVault) ProtoMessage()    {}
func (*UserPositionWithVault) Descriptor() ([]byte, []int) {
	return fileDescriptor_9037e95a7381a4ea, []int{8}
}
func (m *UserPositionWithVault) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserPositionWithVault) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserPositionWithVault.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserPositionWithVault) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserPositionWithVault.Merge(m, src)
}
func (m *UserPositionWithVault) XXX_Size() int {
	return m.Size()
}
func (m *UserPositionWithVault) XXX_DiscardUnknown() {
	xxx_messageInfo_UserPositionWithVault.DiscardUnknown(m)
}

var xxx_messageInfo_UserPositionWithVault proto.InternalMessageInfo

func (m *UserPositionWithVault) GetVaultType() vaults.VaultType {
	if m != nil {
		return m.VaultType
	}
	return vaults.UNSPECIFIED
}

func (m *UserPositionWithVault) GetPosition() UserPosition {
	if m != nil {
		return m.Position
	}
	return UserPosition{}
}

func (m *UserPositionWithVault) GetCurrentValue() string {
	if m != nil {
		return m.CurrentValue
	}
	return ""
}

// QuerySharePriceRequest requests the share price for a vault
type QuerySharePriceRequest struct {
	VaultType vaults.VaultType `protobuf:"varint,1,opt,name=vault_type,json=vaultType,proto3,enum=noble.dollar.vaults.v1.VaultType" json:"vault_type,omitempty"`
}

func (m *QuerySharePriceRequest) Reset()         { *m = QuerySharePriceRequest{} }
func (m *QuerySharePriceRequest) String() string { return proto.CompactTextString(m) }
func (*QuerySharePriceRequest) ProtoMessage()    {}
func (*QuerySharePriceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9037e95a7381a4ea, []int{9}
}
func (m *QuerySharePriceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySharePriceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySharePriceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySharePriceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySharePriceRequest.Merge(m, src)
}
func (m *QuerySharePriceRequest) XXX_Size() int {
	return m.Size()
}
func (m *QuerySharePriceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySharePriceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySharePriceRequest proto.InternalMessageInfo

func (m *QuerySharePriceRequest) GetVaultType() vaults.VaultType {
	if m != nil {
		return m.VaultType
	}
	return vaults.UNSPECIFIED
}

// QuerySharePriceResponse returns the share price
type QuerySharePriceResponse struct {
	SharePrice  string `protobuf:"bytes,1,opt,name=share_price,json=sharePrice,proto3" json:"share_price,omitempty"`
	TotalShares string `protobuf:"bytes,2,opt,name=total_shares,json=totalShares,proto3" json:"total_shares,omitempty"`
	TotalNav    string `protobuf:"bytes,3,opt,name=total_nav,json=totalNav,proto3" json:"total_nav,omitempty"`
}

func (m *QuerySharePriceResponse) Reset()         { *m = QuerySharePriceResponse{} }
func (m *QuerySharePriceResponse) String() string { return proto.CompactTextString(m) }
func (*QuerySharePriceResponse) ProtoMessage()    {}
func (*QuerySharePriceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9037e95a7381a4ea, []int{10}
}
func (m *QuerySharePriceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySharePriceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySharePriceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySharePriceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySharePriceResponse.Merge(m, src)
}
func (m *QuerySharePriceResponse) XXX_Size() int {
	return m.Size()
}
func (m *QuerySharePriceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySharePriceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySharePriceResponse proto.InternalMessageInfo

func (m *QuerySharePriceResponse) GetSharePrice() string {
	if m != nil {
		return m.SharePrice
	}
	return ""
}

func (m *QuerySharePriceResponse) GetTotalShares() string {
	if m != nil {
		return m.TotalShares
	}
	return ""
}

func (m *QuerySharePriceResponse) GetTotalNav() string {
	if m != nil {
		return m.TotalNav
	}
	return ""
}

// QueryNAVInfoRequest requests NAV information
type QueryNAVInfoRequest struct {
	VaultType vaults.VaultType `protobuf:"varint,1,opt,name=vault_type,json=vaultType,proto3,enum=noble.dollar.vaults.v1.VaultType" json:"vault_type,omitempty"`
}

func (m *QueryNAVInfoRequest) Reset()         { *m = QueryNAVInfoRequest{} }
func (m *QueryNAVInfoRequest) String() string { return proto.CompactTextString(m) }
func (*QueryNAVInfoRequest) ProtoMessage()    {}
func (*QueryNAVInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9037e95a7381a4ea, []int{11}
}
func (m *QueryNAVInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryNAVInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryNAVInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryNAVInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryNAVInfoRequest.Merge(m, src)
}
func (m *QueryNAVInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryNAVInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryNAVInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryNAVInfoRequest proto.InternalMessageInfo

func (m *QueryNAVInfoRequest) GetVaultType() vaults.VaultType {
	if m != nil {
		return m.VaultType
	}
	return vaults.UNSPECIFIED
}

// QueryNAVInfoResponse returns NAV information
type QueryNAVInfoResponse struct {
	NavInfo NAVInfo `protobuf:"bytes,1,opt,name=nav_info,json=navInfo,proto3" json:"nav_info"`
}

func (m *QueryNAVInfoResponse) Reset()         { *m = QueryNAVInfoResponse{} }
func (m *QueryNAVInfoResponse) String() string { return proto.CompactTextString(m) }
func (*QueryNAVInfoResponse) ProtoMessage()    {}
func (*QueryNAVInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9037e95a7381a4ea, []int{12}
}
func (m *QueryNAVInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryNAVInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryNAVInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryNAVInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryNAVInfoResponse.Merge(m, src)
}
func (m *QueryNAVInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryNAVInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryNAVInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryNAVInfoResponse proto.InternalMessageInfo

func (m *QueryNAVInfoResponse) GetNavInfo() NAVInfo {
	if m != nil {
		return m.NavInfo
	}
	return NAVInfo{}
}

// QueryDepositPreviewRequest requests a deposit preview
type QueryDepositPreviewRequest struct {
	VaultType vaults.VaultType `protobuf:"varint,1,opt,name=vault_type,json=vaultType,proto3,enum=noble.dollar.vaults.v1.VaultType" json:"vault_type,omitempty"`
	Amount    string           `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (m *QueryDepositPreviewRequest) Reset()         { *m = QueryDepositPreviewRequest{} }
func (m *QueryDepositPreviewRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDepositPreviewRequest) ProtoMessage()    {}
func (*QueryDepositPreviewRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9037e95a7381a4ea, []int{13}
}
func (m *QueryDepositPreviewRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDepositPreviewRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDepositPreviewRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDepositPreviewRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDepositPreviewRequest.Merge(m, src)
}
func (m *QueryDepositPreviewRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDepositPreviewRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDepositPreviewRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDepositPreviewRequest proto.InternalMessageInfo

func (m *QueryDepositPreviewRequest) GetVaultType() vaults.VaultType {
	if m != nil {
		return m.VaultType
	}
	return vaults.UNSPECIFIED
}

func (m *QueryDepositPreviewRequest) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

// QueryDepositPreviewResponse returns deposit preview information
type QueryDepositPreviewResponse struct {
	SharesToReceive string `protobuf:"bytes,1,opt,name=shares_to_receive,json=sharesToReceive,proto3" json:"shares_to_receive,omitempty"`
	FeesToPay       string `protobuf:"bytes,2,opt,name=fees_to_pay,json=feesToPay,proto3" json:"fees_to_pay,omitempty"`
	NetAmount       string `protobuf:"bytes,3,opt,name=net_amount,json=netAmount,proto3" json:"net_amount,omitempty"`
	SharePrice      string `protobuf:"bytes,4,opt,name=share_price,json=sharePrice,proto3" json:"share_price,omitempty"`
	FeeRateBps      int32  `protobuf:"varint,5,opt,name=fee_rate_bps,json=feeRateBps,proto3" json:"fee_rate_bps,omitempty"`
}

func (m *QueryDepositPreviewResponse) Reset()         { *m = QueryDepositPreviewResponse{} }
func (m *QueryDepositPreviewResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDepositPreviewResponse) ProtoMessage()    {}
func (*QueryDepositPreviewResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9037e95a7381a4ea, []int{14}
}
func (m *QueryDepositPreviewResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDepositPreviewResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDepositPreviewResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDepositPreviewResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDepositPreviewResponse.Merge(m, src)
}
func (m *QueryDepositPreviewResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDepositPreviewResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDepositPreviewResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDepositPreviewResponse proto.InternalMessageInfo

func (m *QueryDepositPreviewResponse) GetSharesToReceive() string {
	if m != nil {
		return m.SharesToReceive
	}
	return ""
}

func (m *QueryDepositPreviewResponse) GetFeesToPay() string {
	if m != nil {
		return m.FeesToPay
	}
	return ""
}

func (m *QueryDepositPreviewResponse) GetNetAmount() string {
	if m != nil {
		return m.NetAmount
	}
	return ""
}

func (m *QueryDepositPreviewResponse) GetSharePrice() string {
	if m != nil {
		return m.SharePrice
	}
	return ""
}

func (m *QueryDepositPreviewResponse) GetFeeRateBps() int32 {
	if m != nil {
		return m.FeeRateBps
	}
	return 0
}

// QueryWithdrawalPreviewRequest requests a withdrawal preview
type QueryWithdrawalPreviewRequest struct {
	VaultType vaults.VaultType `protobuf:"varint,1,opt,name=vault_type,json=vaultType,proto3,enum=noble.dollar.vaults.v1.VaultType" json:"vault_type,omitempty"`
	Shares    string           `protobuf:"bytes,2,opt,name=shares,proto3" json:"shares,omitempty"`
}

func (m *QueryWithdrawalPreviewRequest) Reset()         { *m = QueryWithdrawalPreviewRequest{} }
func (m *QueryWithdrawalPreviewRequest) String() string { return proto.CompactTextString(m) }
func (*QueryWithdrawalPreviewRequest) ProtoMessage()    {}
func (*QueryWithdrawalPreviewRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9037e95a7381a4ea, []int{15}
}
func (m *QueryWithdrawalPreviewRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryWithdrawalPreviewRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryWithdrawalPreviewRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryWithdrawalPreviewRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryWithdrawalPreviewRequest.Merge(m, src)
}
func (m *QueryWithdrawalPreviewRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryWithdrawalPreviewRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryWithdrawalPreviewRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryWithdrawalPreviewRequest proto.InternalMessageInfo

func (m *QueryWithdrawalPreviewRequest) GetVaultType() vaults.VaultType {
	if m != nil {
		return m.VaultType
	}
	return vaults.UNSPECIFIED
}

func (m *QueryWithdrawalPreviewRequest) GetShares() string {
	if m != nil {
		return m.Shares
	}
	return ""
}

// QueryWithdrawalPreviewResponse returns withdrawal preview information
type QueryWithdrawalPreviewResponse struct {
	AmountToReceive string `protobuf:"bytes,1,opt,name=amount_to_receive,json=amountToReceive,proto3" json:"amount_to_receive,omitempty"`
	FeesToPay       string `protobuf:"bytes,2,opt,name=fees_to_pay,json=feesToPay,proto3" json:"fees_to_pay,omitempty"`
	GrossAmount     string `protobuf:"bytes,3,opt,name=gross_amount,json=grossAmount,proto3" json:"gross_amount,omitempty"`
	SharePrice      string `protobuf:"bytes,4,opt,name=share_price,json=sharePrice,proto3" json:"share_price,omitempty"`
	FeeRateBps      int32  `protobuf:"varint,5,opt,name=fee_rate_bps,json=feeRateBps,proto3" json:"fee_rate_bps,omitempty"`
}

func (m *QueryWithdrawalPreviewResponse) Reset()         { *m = QueryWithdrawalPreviewResponse{} }
func (m *QueryWithdrawalPreviewResponse) String() string { return proto.CompactTextString(m) }
func (*QueryWithdrawalPreviewResponse) ProtoMessage()    {}
func (*QueryWithdrawalPreviewResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9037e95a7381a4ea, []int{16}
}
func (m *QueryWithdrawalPreviewResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryWithdrawalPreviewResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryWithdrawalPreviewResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryWithdrawalPreviewResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryWithdrawalPreviewResponse.Merge(m, src)
}
func (m *QueryWithdrawalPreviewResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryWithdrawalPreviewResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryWithdrawalPreviewResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryWithdrawalPreviewResponse proto.InternalMessageInfo

func (m *QueryWithdrawalPreviewResponse) GetAmountToReceive() string {
	if m != nil {
		return m.AmountToReceive
	}
	return ""
}

func (m *QueryWithdrawalPreviewResponse) GetFeesToPay() string {
	if m != nil {
		return m.FeesToPay
	}
	return ""
}

func (m *QueryWithdrawalPreviewResponse) GetGrossAmount() string {
	if m != nil {
		return m.GrossAmount
	}
	return ""
}

func (m *QueryWithdrawalPreviewResponse) GetSharePrice() string {
	if m != nil {
		return m.SharePrice
	}
	return ""
}

func (m *QueryWithdrawalPreviewResponse) GetFeeRateBps() int32 {
	if m != nil {
		return m.FeeRateBps
	}
	return 0
}

// QueryExitQueueRequest requests the exit queue for a vault
type QueryExitQueueRequest struct {
	VaultType  vaults.VaultType   `protobuf:"varint,1,opt,name=vault_type,json=vaultType,proto3,enum=noble.dollar.vaults.v1.VaultType" json:"vault_type,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryExitQueueRequest) Reset()         { *m = QueryExitQueueRequest{} }
func (m *QueryExitQueueRequest) String() string { return proto.CompactTextString(m) }
func (*QueryExitQueueRequest) ProtoMessage()    {}
func (*QueryExitQueueRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9037e95a7381a4ea, []int{17}
}
func (m *QueryExitQueueRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryExitQueueRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryExitQueueRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryExitQueueRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryExitQueueRequest.Merge(m, src)
}
func (m *QueryExitQueueRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryExitQueueRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryExitQueueRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryExitQueueRequest proto.InternalMessageInfo

func (m *QueryExitQueueRequest) GetVaultType() vaults.VaultType {
	if m != nil {
		return m.VaultType
	}
	return vaults.UNSPECIFIED
}

func (m *QueryExitQueueRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryExitQueueResponse returns the exit queue
type QueryExitQueueResponse struct {
	ExitRequests []ExitRequestWithUser `protobuf:"bytes,1,rep,name=exit_requests,json=exitRequests,proto3" json:"exit_requests"`
	Pagination   *query.PageResponse   `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryExitQueueResponse) Reset()         { *m = QueryExitQueueResponse{} }
func (m *QueryExitQueueResponse) String() string { return proto.CompactTextString(m) }
func (*QueryExitQueueResponse) ProtoMessage()    {}
func (*QueryExitQueueResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9037e95a7381a4ea, []int{18}
}
func (m *QueryExitQueueResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryExitQueueResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryExitQueueResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryExitQueueResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryExitQueueResponse.Merge(m, src)
}
func (m *QueryExitQueueResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryExitQueueResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryExitQueueResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryExitQueueResponse proto.InternalMessageInfo

func (m *QueryExitQueueResponse) GetExitRequests() []ExitRequestWithUser {
	if m != nil {
		return m.ExitRequests
	}
	return nil
}

func (m *QueryExitQueueResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// ExitRequestWithUser includes the user address with the exit request
type ExitRequestWithUser struct {
	User        string      `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	ExitRequest ExitRequest `protobuf:"bytes,2,opt,name=exit_request,json=exitRequest,proto3" json:"exit_request"`
}

func (m *ExitRequestWithUser) Reset()         { *m = ExitRequestWithUser{} }
func (m *ExitRequestWithUser) String() string { return proto.CompactTextString(m) }
func (*ExitRequestWithUser) ProtoMessage()    {}
func (*ExitRequestWithUser) Descriptor() ([]byte, []int) {
	return fileDescriptor_9037e95a7381a4ea, []int{19}
}
func (m *ExitRequestWithUser) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExitRequestWithUser) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExitRequestWithUser.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExitRequestWithUser) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExitRequestWithUser.Merge(m, src)
}
func (m *ExitRequestWithUser) XXX_Size() int {
	return m.Size()
}
func (m *ExitRequestWithUser) XXX_DiscardUnknown() {
	xxx_messageInfo_ExitRequestWithUser.DiscardUnknown(m)
}

var xxx_messageInfo_ExitRequestWithUser proto.InternalMessageInfo

func (m *ExitRequestWithUser) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *ExitRequestWithUser) GetExitRequest() ExitRequest {
	if m != nil {
		return m.ExitRequest
	}
	return ExitRequest{}
}

// QueryUserExitRequestsRequest requests a user's exit requests
type QueryUserExitRequestsRequest struct {
	Address    string             `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryUserExitRequestsRequest) Reset()         { *m = QueryUserExitRequestsRequest{} }
func (m *QueryUserExitRequestsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryUserExitRequestsRequest) ProtoMessage()    {}
func (*QueryUserExitRequestsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9037e95a7381a4ea, []int{20}
}
func (m *QueryUserExitRequestsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryUserExitRequestsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryUserExitRequestsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryUserExitRequestsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryUserExitRequestsRequest.Merge(m, src)
}
func (m *QueryUserExitRequestsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryUserExitRequestsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryUserExitRequestsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryUserExitRequestsRequest proto.InternalMessageInfo

func (m *QueryUserExitRequestsRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *QueryUserExitRequestsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryUserExitRequestsResponse returns a user's exit requests
type QueryUserExitRequestsResponse struct {
	ExitRequests []ExitRequestWithVault `protobuf:"bytes,1,rep,name=exit_requests,json=exitRequests,proto3" json:"exit_requests"`
	Pagination   *query.PageResponse    `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryUserExitRequestsResponse) Reset()         { *m = QueryUserExitRequestsResponse{} }
func (m *QueryUserExitRequestsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryUserExitRequestsResponse) ProtoMessage()    {}
func (*QueryUserExitRequestsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9037e95a7381a4ea, []int{21}
}
func (m *QueryUserExitRequestsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryUserExitRequestsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryUserExitRequestsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryUserExitRequestsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryUserExitRequestsResponse.Merge(m, src)
}
func (m *QueryUserExitRequestsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryUserExitRequestsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryUserExitRequestsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryUserExitRequestsResponse proto.InternalMessageInfo

func (m *QueryUserExitRequestsResponse) GetExitRequests() []ExitRequestWithVault {
	if m != nil {
		return m.ExitRequests
	}
	return nil
}

func (m *QueryUserExitRequestsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// ExitRequestWithVault includes the vault type with the exit request
type ExitRequestWithVault struct {
	VaultType   vaults.VaultType `protobuf:"varint,1,opt,name=vault_type,json=vaultType,proto3,enum=noble.dollar.vaults.v1.VaultType" json:"vault_type,omitempty"`
	ExitRequest ExitRequest      `protobuf:"bytes,2,opt,name=exit_request,json=exitRequest,proto3" json:"exit_request"`
}

func (m *ExitRequestWithVault) Reset()         { *m = ExitRequestWithVault{} }
func (m *ExitRequestWithVault) String() string { return proto.CompactTextString(m) }
func (*ExitRequestWithVault) ProtoMessage()    {}
func (*ExitRequestWithVault) Descriptor() ([]byte, []int) {
	return fileDescriptor_9037e95a7381a4ea, []int{22}
}
func (m *ExitRequestWithVault) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExitRequestWithVault) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExitRequestWithVault.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExitRequestWithVault) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExitRequestWithVault.Merge(m, src)
}
func (m *ExitRequestWithVault) XXX_Size() int {
	return m.Size()
}
func (m *ExitRequestWithVault) XXX_DiscardUnknown() {
	xxx_messageInfo_ExitRequestWithVault.DiscardUnknown(m)
}

var xxx_messageInfo_ExitRequestWithVault proto.InternalMessageInfo

func (m *ExitRequestWithVault) GetVaultType() vaults.VaultType {
	if m != nil {
		return m.VaultType
	}
	return vaults.UNSPECIFIED
}

func (m *ExitRequestWithVault) GetExitRequest() ExitRequest {
	if m != nil {
		return m.ExitRequest
	}
	return ExitRequest{}
}

// QueryFeeInfoRequest requests fee information
type QueryFeeInfoRequest struct {
	VaultType vaults.VaultType `protobuf:"varint,1,opt,name=vault_type,json=vaultType,proto3,enum=noble.dollar.vaults.v1.VaultType" json:"vault_type,omitempty"`
}

func (m *QueryFeeInfoRequest) Reset()         { *m = QueryFeeInfoRequest{} }
func (m *QueryFeeInfoRequest) String() string { return proto.CompactTextString(m) }
func (*QueryFeeInfoRequest) ProtoMessage()    {}
func (*QueryFeeInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9037e95a7381a4ea, []int{23}
}
func (m *QueryFeeInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFeeInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFeeInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFeeInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFeeInfoRequest.Merge(m, src)
}
func (m *QueryFeeInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryFeeInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFeeInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFeeInfoRequest proto.InternalMessageInfo

func (m *QueryFeeInfoRequest) GetVaultType() vaults.VaultType {
	if m != nil {
		return m.VaultType
	}
	return vaults.UNSPECIFIED
}

// QueryFeeInfoResponse returns fee information
type QueryFeeInfoResponse struct {
	FeeConfig FeeConfig `protobuf:"bytes,1,opt,name=fee_config,json=feeConfig,proto3" json:"fee_config"`
}

func (m *QueryFeeInfoResponse) Reset()         { *m = QueryFeeInfoResponse{} }
func (m *QueryFeeInfoResponse) String() string { return proto.CompactTextString(m) }
func (*QueryFeeInfoResponse) ProtoMessage()    {}
func (*QueryFeeInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9037e95a7381a4ea, []int{24}
}
func (m *QueryFeeInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFeeInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFeeInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFeeInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFeeInfoResponse.Merge(m, src)
}
func (m *QueryFeeInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryFeeInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFeeInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFeeInfoResponse proto.InternalMessageInfo

func (m *QueryFeeInfoResponse) GetFeeConfig() FeeConfig {
	if m != nil {
		return m.FeeConfig
	}
	return FeeConfig{}
}

// QueryStatsRequest requests statistics for a vault
type QueryStatsRequest struct {
	VaultType vaults.VaultType `protobuf:"varint,1,opt,name=vault_type,json=vaultType,proto3,enum=noble.dollar.vaults.v1.VaultType" json:"vault_type,omitempty"`
}

func (m *QueryStatsRequest) Reset()         { *m = QueryStatsRequest{} }
func (m *QueryStatsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryStatsRequest) ProtoMessage()    {}
func (*QueryStatsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9037e95a7381a4ea, []int{25}
}
func (m *QueryStatsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStatsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStatsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStatsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStatsRequest.Merge(m, src)
}
func (m *QueryStatsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryStatsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStatsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStatsRequest proto.InternalMessageInfo

func (m *QueryStatsRequest) GetVaultType() vaults.VaultType {
	if m != nil {
		return m.VaultType
	}
	return vaults.UNSPECIFIED
}

// QueryStatsResponse returns vault statistics
type QueryStatsResponse struct {
	Stats VaultStatsEntry `protobuf:"bytes,1,opt,name=stats,proto3" json:"stats"`
}

func (m *QueryStatsResponse) Reset()         { *m = QueryStatsResponse{} }
func (m *QueryStatsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryStatsResponse) ProtoMessage()    {}
func (*QueryStatsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9037e95a7381a4ea, []int{26}
}
func (m *QueryStatsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStatsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStatsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStatsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStatsResponse.Merge(m, src)
}
func (m *QueryStatsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryStatsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStatsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStatsResponse proto.InternalMessageInfo

func (m *QueryStatsResponse) GetStats() VaultStatsEntry {
	if m != nil {
		return m.Stats
	}
	return VaultStatsEntry{}
}

// QueryAllStatsRequest requests statistics for all vaults
type QueryAllStatsRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllStatsRequest) Reset()         { *m = QueryAllStatsRequest{} }
func (m *QueryAllStatsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllStatsRequest) ProtoMessage()    {}
func (*QueryAllStatsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9037e95a7381a4ea, []int{27}
}
func (m *QueryAllStatsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllStatsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllStatsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllStatsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllStatsRequest.Merge(m, src)
}
func (m *QueryAllStatsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllStatsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllStatsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllStatsRequest proto.InternalMessageInfo

func (m *QueryAllStatsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryAllStatsResponse returns statistics for all vaults
type QueryAllStatsResponse struct {
	Stats      []VaultStatsEntry   `protobuf:"bytes,1,rep,name=stats,proto3" json:"stats"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllStatsResponse) Reset()         { *m = QueryAllStatsResponse{} }
func (m *QueryAllStatsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllStatsResponse) ProtoMessage()    {}
func (*QueryAllStatsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9037e95a7381a4ea, []int{28}
}
func (m *QueryAllStatsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllStatsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllStatsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllStatsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllStatsResponse.Merge(m, src)
}
func (m *QueryAllStatsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllStatsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllStatsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllStatsResponse proto.InternalMessageInfo

func (m *QueryAllStatsResponse) GetStats() []VaultStatsEntry {
	if m != nil {
		return m.Stats
	}
	return nil
}

func (m *QueryAllStatsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryParamsRequest requests module parameters
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9037e95a7381a4ea, []int{29}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse returns module parameters
type QueryParamsResponse struct {
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9037e95a7381a4ea, []int{30}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

func init() {
	proto.RegisterType((*QueryVaultInfoRequest)(nil), "noble.dollar.vaults.v2.QueryVaultInfoRequest")
	proto.RegisterType((*QueryVaultInfoResponse)(nil), "noble.dollar.vaults.v2.QueryVaultInfoResponse")
	proto.RegisterType((*QueryAllVaultsRequest)(nil), "noble.dollar.vaults.v2.QueryAllVaultsRequest")
	proto.RegisterType((*QueryAllVaultsResponse)(nil), "noble.dollar.vaults.v2.QueryAllVaultsResponse")
	proto.RegisterType((*QueryUserPositionRequest)(nil), "noble.dollar.vaults.v2.QueryUserPositionRequest")
	proto.RegisterType((*QueryUserPositionResponse)(nil), "noble.dollar.vaults.v2.QueryUserPositionResponse")
	proto.RegisterType((*QueryUserPositionsRequest)(nil), "noble.dollar.vaults.v2.QueryUserPositionsRequest")
	proto.RegisterType((*QueryUserPositionsResponse)(nil), "noble.dollar.vaults.v2.QueryUserPositionsResponse")
	proto.RegisterType((*UserPositionWithVault)(nil), "noble.dollar.vaults.v2.UserPositionWithVault")
	proto.RegisterType((*QuerySharePriceRequest)(nil), "noble.dollar.vaults.v2.QuerySharePriceRequest")
	proto.RegisterType((*QuerySharePriceResponse)(nil), "noble.dollar.vaults.v2.QuerySharePriceResponse")
	proto.RegisterType((*QueryNAVInfoRequest)(nil), "noble.dollar.vaults.v2.QueryNAVInfoRequest")
	proto.RegisterType((*QueryNAVInfoResponse)(nil), "noble.dollar.vaults.v2.QueryNAVInfoResponse")
	proto.RegisterType((*QueryDepositPreviewRequest)(nil), "noble.dollar.vaults.v2.QueryDepositPreviewRequest")
	proto.RegisterType((*QueryDepositPreviewResponse)(nil), "noble.dollar.vaults.v2.QueryDepositPreviewResponse")
	proto.RegisterType((*QueryWithdrawalPreviewRequest)(nil), "noble.dollar.vaults.v2.QueryWithdrawalPreviewRequest")
	proto.RegisterType((*QueryWithdrawalPreviewResponse)(nil), "noble.dollar.vaults.v2.QueryWithdrawalPreviewResponse")
	proto.RegisterType((*QueryExitQueueRequest)(nil), "noble.dollar.vaults.v2.QueryExitQueueRequest")
	proto.RegisterType((*QueryExitQueueResponse)(nil), "noble.dollar.vaults.v2.QueryExitQueueResponse")
	proto.RegisterType((*ExitRequestWithUser)(nil), "noble.dollar.vaults.v2.ExitRequestWithUser")
	proto.RegisterType((*QueryUserExitRequestsRequest)(nil), "noble.dollar.vaults.v2.QueryUserExitRequestsRequest")
	proto.RegisterType((*QueryUserExitRequestsResponse)(nil), "noble.dollar.vaults.v2.QueryUserExitRequestsResponse")
	proto.RegisterType((*ExitRequestWithVault)(nil), "noble.dollar.vaults.v2.ExitRequestWithVault")
	proto.RegisterType((*QueryFeeInfoRequest)(nil), "noble.dollar.vaults.v2.QueryFeeInfoRequest")
	proto.RegisterType((*QueryFeeInfoResponse)(nil), "noble.dollar.vaults.v2.QueryFeeInfoResponse")
	proto.RegisterType((*QueryStatsRequest)(nil), "noble.dollar.vaults.v2.QueryStatsRequest")
	proto.RegisterType((*QueryStatsResponse)(nil), "noble.dollar.vaults.v2.QueryStatsResponse")
	proto.RegisterType((*QueryAllStatsRequest)(nil), "noble.dollar.vaults.v2.QueryAllStatsRequest")
	proto.RegisterType((*QueryAllStatsResponse)(nil), "noble.dollar.vaults.v2.QueryAllStatsResponse")
	proto.RegisterType((*QueryParamsRequest)(nil), "noble.dollar.vaults.v2.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "noble.dollar.vaults.v2.QueryParamsResponse")
}

func init() {
	proto.RegisterFile("noble/dollar/vaults/v2/query.proto", fileDescriptor_9037e95a7381a4ea)
}

var fileDescriptor_9037e95a7381a4ea = []byte{
	// 1679 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x59, 0xcd, 0x6f, 0x13, 0x57,
	0x10, 0xcf, 0xcb, 0x27, 0x9e, 0x84, 0x8f, 0x3c, 0x02, 0x35, 0x06, 0x9c, 0x64, 0x43, 0x21, 0xe4,
	0xc3, 0x4b, 0x4c, 0x29, 0xaa, 0x54, 0x04, 0x09, 0x25, 0x6d, 0x25, 0x84, 0x82, 0x03, 0xa1, 0x70,
	0xe8, 0xea, 0x25, 0x79, 0x31, 0x2b, 0x39, 0xbb, 0x66, 0x77, 0x6d, 0x30, 0x28, 0x97, 0xde, 0x7a,
	0xa9, 0x68, 0x2b, 0x15, 0xa9, 0x07, 0x24, 0x54, 0xb5, 0x97, 0xaa, 0xea, 0x85, 0x03, 0xbd, 0xb5,
	0x97, 0x0a, 0xa9, 0x3d, 0x20, 0x7a, 0xe9, 0xa9, 0xaa, 0xa0, 0x52, 0xff, 0x8d, 0x6a, 0xdf, 0x9b,
	0xb5, 0xbd, 0xf6, 0xee, 0x7a, 0x4d, 0x8c, 0xd4, 0x4b, 0xe4, 0x9d, 0x9d, 0x99, 0xf7, 0x7b, 0xbf,
	0x99, 0xf7, 0x66, 0x66, 0x03, 0x8a, 0x61, 0xae, 0x16, 0xb8, 0xba, 0x6e, 0x16, 0x0a, 0xcc, 0x52,
	0xcb, 0xac, 0x54, 0x70, 0x6c, 0xb5, 0x9c, 0x55, 0x6f, 0x95, 0xb8, 0x55, 0xc9, 0x14, 0x2d, 0xd3,
	0x31, 0xe9, 0x7e, 0xa1, 0x93, 0x91, 0x3a, 0x19, 0xa9, 0x93, 0x29, 0x67, 0x53, 0xc3, 0x6c, 0x53,
	0x37, 0x4c, 0x55, 0xfc, 0x95, 0xaa, 0xa9, 0xa9, 0x35, 0xd3, 0xde, 0x34, 0x6d, 0x75, 0x95, 0xd9,
	0x5c, 0xfa, 0x50, 0xcb, 0x73, 0xab, 0xdc, 0x61, 0x73, 0x6a, 0x91, 0xe5, 0x75, 0x83, 0x39, 0xba,
	0x69, 0xa0, 0xee, 0x01, 0xa9, 0xab, 0x89, 0x27, 0x55, 0x3e, 0xe0, 0xab, 0x91, 0xbc, 0x99, 0x37,
	0xa5, 0xdc, 0xfd, 0x85, 0xd2, 0x43, 0x79, 0xd3, 0xcc, 0x17, 0xb8, 0xca, 0x8a, 0xba, 0xca, 0x0c,
	0xc3, 0x74, 0x84, 0x37, 0xcf, 0x66, 0x14, 0xdf, 0x8a, 0xa7, 0xd5, 0xd2, 0x86, 0xea, 0xe8, 0x9b,
	0xdc, 0x76, 0xd8, 0x66, 0x11, 0x15, 0x26, 0x02, 0xb7, 0x3a, 0x87, 0xbf, 0x22, 0x95, 0xb2, 0x7e,
	0xa5, 0xb1, 0x10, 0x25, 0x83, 0x95, 0x51, 0x63, 0x3c, 0x44, 0x63, 0x83, 0x73, 0xcf, 0xc9, 0x91,
	0x10, 0x95, 0x3c, 0x37, 0xb8, 0xad, 0xa3, 0x96, 0x72, 0x1d, 0xf6, 0x5d, 0x76, 0x69, 0x5c, 0x71,
	0xdf, 0x7f, 0x68, 0x6c, 0x98, 0x39, 0x7e, 0xab, 0xc4, 0x6d, 0x87, 0x9e, 0x03, 0x10, 0x36, 0x9a,
	0x53, 0x29, 0xf2, 0x24, 0x19, 0x23, 0x93, 0xbb, 0xb2, 0xe3, 0x99, 0xc0, 0x48, 0xcd, 0x65, 0x84,
	0xf5, 0x95, 0x4a, 0x91, 0xe7, 0x12, 0x65, 0xef, 0xa7, 0xf2, 0x2f, 0x81, 0xfd, 0x8d, 0xbe, 0xed,
	0xa2, 0x69, 0xd8, 0x9c, 0xce, 0x43, 0xff, 0x9a, 0x69, 0x6c, 0xe8, 0x79, 0xe1, 0x78, 0x30, 0x3b,
	0x11, 0xec, 0x38, 0x2b, 0x1d, 0x9f, 0x17, 0xaa, 0x0b, 0xbd, 0x4f, 0xff, 0x1a, 0xed, 0xca, 0xa1,
	0x21, 0x1d, 0x87, 0x21, 0xc7, 0x74, 0x58, 0x41, 0xb3, 0x6f, 0x32, 0x8b, 0xdb, 0xc9, 0xee, 0x31,
	0x32, 0x99, 0xc8, 0x0d, 0x0a, 0xd9, 0xb2, 0x10, 0xd1, 0x83, 0x90, 0x90, 0x2a, 0x06, 0x2b, 0x27,
	0x7b, 0xc4, 0xfb, 0x1d, 0x42, 0x70, 0x89, 0x95, 0xe9, 0x28, 0x0c, 0x0a, 0x4b, 0xad, 0x68, 0xe9,
	0x6b, 0x3c, 0xd9, 0x2b, 0x5e, 0x83, 0x10, 0x2d, 0xb9, 0x12, 0x7a, 0x1c, 0xf6, 0x48, 0xeb, 0x75,
	0x5e, 0x34, 0x6d, 0xdd, 0x31, 0x2d, 0x3b, 0xd9, 0x37, 0x46, 0x26, 0x7b, 0x73, 0xbb, 0x85, 0xfc,
	0xbd, 0xaa, 0x58, 0xd1, 0x90, 0xc4, 0xf9, 0x42, 0x41, 0x00, 0xb6, 0x3d, 0x12, 0x17, 0x01, 0x6a,
	0x69, 0x89, 0x7b, 0x3d, 0x9a, 0xc1, 0x54, 0x74, 0x73, 0x38, 0x23, 0xcf, 0x01, 0xe6, 0x70, 0x66,
	0x89, 0xe5, 0x39, 0xda, 0xe6, 0xea, 0x2c, 0x95, 0x1f, 0x3d, 0x2a, 0xeb, 0x56, 0x40, 0x2a, 0x2f,
	0x42, 0xbf, 0xa4, 0x2b, 0x49, 0xc6, 0x7a, 0x26, 0x07, 0xb3, 0x99, 0x30, 0x2a, 0x83, 0x43, 0xe1,
	0xb1, 0x2a, 0xf5, 0xe8, 0xfb, 0x3e, 0xc0, 0xdd, 0x02, 0xf0, 0xb1, 0x96, 0x80, 0xa5, 0x2b, 0x1f,
	0xe2, 0xfb, 0x04, 0x92, 0x62, 0xc5, 0xab, 0x36, 0xb7, 0x96, 0x5c, 0xa2, 0x74, 0xd3, 0xf0, 0x68,
	0xc9, 0xc2, 0x00, 0x5b, 0x5f, 0xb7, 0xb8, 0x6d, 0x0b, 0x4e, 0x12, 0x0b, 0xc9, 0xe7, 0x8f, 0x67,
	0x47, 0x70, 0x95, 0x79, 0xf9, 0x66, 0xd9, 0xb1, 0x74, 0x23, 0x9f, 0xf3, 0x14, 0x1b, 0xf2, 0xb1,
	0xfb, 0x15, 0xf2, 0xf1, 0x07, 0x02, 0x07, 0x02, 0x20, 0x21, 0x8f, 0xe7, 0x60, 0x47, 0x11, 0x65,
	0x18, 0xa8, 0x23, 0x61, 0x4c, 0xfa, 0xec, 0xab, 0x56, 0x74, 0x02, 0x76, 0xae, 0x95, 0x2c, 0x8b,
	0x1b, 0x8e, 0x56, 0x66, 0x85, 0x12, 0xc7, 0x94, 0x1c, 0x42, 0xe1, 0x8a, 0x2b, 0x73, 0xb3, 0xaa,
	0x64, 0x58, 0x9c, 0x15, 0xf4, 0xbb, 0x7c, 0x5d, 0xab, 0xe8, 0xbc, 0xb0, 0x8e, 0xa9, 0xb9, 0xbb,
	0x26, 0xbf, 0xee, 0x8a, 0x95, 0x07, 0x41, 0x78, 0xed, 0xed, 0x70, 0xb8, 0x18, 0x10, 0xdd, 0x57,
	0x49, 0xc7, 0x27, 0x04, 0x52, 0x41, 0xc8, 0x90, 0xca, 0xcb, 0x90, 0xf0, 0x48, 0xf1, 0xb2, 0x72,
	0x36, 0x0e, 0x97, 0xd7, 0x74, 0xe7, 0xa6, 0x88, 0x1c, 0x26, 0x65, 0xcd, 0x4b, 0xe7, 0xf2, 0xf2,
	0x57, 0x02, 0xfb, 0x02, 0xd7, 0xdc, 0xfe, 0x85, 0x47, 0x17, 0xeb, 0x52, 0xa8, 0x3b, 0x7e, 0x0a,
	0xe1, 0x6e, 0x23, 0x12, 0xa9, 0xa7, 0x39, 0x91, 0x94, 0x1b, 0x78, 0x23, 0x2c, 0x57, 0x6f, 0xac,
	0xce, 0xdd, 0xdc, 0x77, 0xe1, 0x8d, 0x26, 0xdf, 0x18, 0xdb, 0x86, 0x6b, 0x93, 0x34, 0x5d, 0x9b,
	0xdb, 0xbc, 0x97, 0x95, 0x6b, 0xb0, 0x57, 0xac, 0x7d, 0x69, 0x7e, 0xa5, 0xb3, 0xe5, 0xe8, 0x23,
	0x18, 0xf1, 0x3b, 0xae, 0x1d, 0x7c, 0x83, 0x95, 0x35, 0xdd, 0xd8, 0x30, 0xf1, 0xe0, 0x8f, 0x86,
	0x45, 0x0d, 0x4d, 0x31, 0x60, 0x03, 0x06, 0x2b, 0xbb, 0x8f, 0x4a, 0x19, 0x4f, 0x03, 0x56, 0x84,
	0x25, 0x8b, 0x97, 0x75, 0x7e, 0xbb, 0x63, 0xc8, 0xe9, 0x7e, 0xe8, 0x67, 0x9b, 0x66, 0xc9, 0x70,
	0x90, 0x4c, 0x7c, 0x52, 0x7e, 0x23, 0x70, 0x30, 0x70, 0x61, 0xdc, 0xd9, 0x14, 0x0c, 0xcb, 0x20,
	0x68, 0x8e, 0xa9, 0x59, 0x7c, 0x8d, 0xeb, 0x65, 0x2f, 0x62, 0xbb, 0xe5, 0x8b, 0x2b, 0x66, 0x4e,
	0x8a, 0x69, 0x1a, 0x06, 0xdd, 0xde, 0xc1, 0xd5, 0x2c, 0xb2, 0x0a, 0x2e, 0x94, 0x70, 0x45, 0x57,
	0xcc, 0x25, 0x56, 0xa1, 0x87, 0x01, 0x0c, 0xee, 0x68, 0x88, 0x43, 0x06, 0x2d, 0x61, 0x70, 0x67,
	0x5e, 0x08, 0x5a, 0x57, 0xd3, 0x31, 0x18, 0xda, 0xe0, 0x5c, 0xb3, 0x98, 0xc3, 0xb5, 0xd5, 0xa2,
	0xac, 0xa4, 0x7d, 0x39, 0xd8, 0xe0, 0x3c, 0xc7, 0x1c, 0xbe, 0x50, 0xb4, 0x95, 0x0a, 0x1c, 0x16,
	0x9b, 0x71, 0x4f, 0xe4, 0xba, 0xc5, 0x6e, 0xb3, 0xc2, 0xeb, 0x20, 0xd2, 0x97, 0x95, 0xf8, 0xa4,
	0x3c, 0x27, 0x90, 0x0e, 0x5b, 0xbb, 0xc6, 0xa5, 0xdc, 0x7b, 0x00, 0x97, 0xf2, 0x45, 0x7c, 0x2e,
	0xc7, 0x61, 0x28, 0x6f, 0x99, 0xb6, 0xed, 0x67, 0x73, 0x50, 0xc8, 0x3a, 0xc7, 0xe7, 0x23, 0x82,
	0x5d, 0xc9, 0x85, 0x3b, 0xba, 0x73, 0xb9, 0xc4, 0x4b, 0x9d, 0xbb, 0x20, 0x3a, 0x56, 0x48, 0x7e,
	0xf2, 0xfa, 0x9a, 0x3a, 0x8c, 0x48, 0xf8, 0x0a, 0xec, 0xe4, 0x77, 0x74, 0x47, 0xb3, 0xa4, 0x99,
	0x57, 0x48, 0xa6, 0xc3, 0xce, 0xa6, 0xeb, 0x01, 0x97, 0x70, 0xa3, 0xe8, 0x5e, 0xb0, 0x78, 0x4e,
	0x87, 0x78, 0xed, 0x55, 0x07, 0x2b, 0xc9, 0xe7, 0x04, 0xf6, 0x06, 0x2c, 0x4a, 0x67, 0xa0, 0xb7,
	0x64, 0x73, 0xab, 0x65, 0x55, 0x16, 0x5a, 0xf4, 0x22, 0x0c, 0xd5, 0x6f, 0x13, 0x01, 0x4d, 0xc4,
	0xd8, 0x25, 0xee, 0x6e, 0xb0, 0x6e, 0x77, 0xca, 0xd7, 0x04, 0x0e, 0x55, 0x0b, 0x73, 0x9d, 0xee,
	0xff, 0xa2, 0x6b, 0xf8, 0x85, 0xe0, 0x09, 0x6f, 0x06, 0x87, 0x31, 0xbf, 0x16, 0x1c, 0xf3, 0x99,
	0x98, 0x31, 0xaf, 0xef, 0x1d, 0x5e, 0x53, 0xd0, 0xbf, 0x23, 0x30, 0x12, 0xb4, 0x6a, 0x07, 0xce,
	0x54, 0x67, 0x33, 0xc1, 0x2b, 0xa3, 0x8b, 0x9c, 0x77, 0xb6, 0x8c, 0x7e, 0x8c, 0x65, 0xb4, 0xea,
	0x18, 0x63, 0xb7, 0x08, 0xee, 0xe5, 0xa3, 0xf9, 0xc6, 0xba, 0xf1, 0x30, 0xf0, 0x8b, 0x9c, 0xfb,
	0x86, 0x3a, 0xf7, 0x72, 0x94, 0x02, 0xe5, 0x2a, 0x0c, 0xcb, 0xde, 0xc3, 0x61, 0xb5, 0xb4, 0xdd,
	0x3e, 0xec, 0xeb, 0x40, 0xeb, 0xdd, 0x22, 0xe8, 0xf3, 0xd0, 0x67, 0xbb, 0x02, 0xc4, 0x7b, 0x2c,
	0x72, 0x0c, 0x15, 0xa6, 0x17, 0x0c, 0xc7, 0xaa, 0x20, 0x6a, 0x69, 0x5b, 0x65, 0x64, 0xbe, 0x50,
	0xf0, 0x81, 0xee, 0xd4, 0xf0, 0xf7, 0x2d, 0xa9, 0x8d, 0x97, 0xa1, 0xf0, 0x7b, 0x5e, 0x15, 0x7e,
	0xe7, 0xce, 0xc6, 0x08, 0x52, 0xbc, 0xc4, 0x2c, 0xb6, 0xe9, 0xb1, 0xa0, 0x2c, 0x63, 0x22, 0x7a,
	0x52, 0x84, 0xfe, 0x2e, 0xf4, 0x17, 0x85, 0x04, 0x89, 0x49, 0x87, 0x61, 0x97, 0x76, 0xde, 0x98,
	0x2a, 0x6d, 0xb2, 0x0f, 0x29, 0xf4, 0x09, 0xaf, 0xf4, 0x21, 0x81, 0x44, 0x75, 0xa8, 0xa5, 0xb3,
	0x71, 0x87, 0x5f, 0x81, 0x2d, 0xd5, 0xe6, 0xac, 0xac, 0x64, 0x3f, 0xf9, 0xe3, 0x9f, 0x2f, 0xbb,
	0x67, 0xe8, 0x94, 0x1a, 0xf5, 0x15, 0x47, 0xbd, 0x57, 0xcb, 0xd5, 0x2d, 0xfa, 0x05, 0x81, 0x44,
	0x75, 0x6a, 0x6f, 0x01, 0xb0, 0xf1, 0xfb, 0x41, 0x0b, 0x80, 0x4d, 0x1f, 0x03, 0x94, 0xa3, 0x02,
	0xe0, 0x18, 0x4d, 0x47, 0x02, 0xb4, 0xe9, 0x63, 0x02, 0x43, 0xf5, 0x23, 0x08, 0x3d, 0x11, 0xb9,
	0x50, 0xc0, 0x0c, 0x9f, 0x9a, 0x6b, 0xc3, 0x02, 0xd1, 0x9d, 0x15, 0xe8, 0xde, 0xa1, 0xa7, 0xc3,
	0xd0, 0x79, 0x13, 0x90, 0x7a, 0x0f, 0x6b, 0xcf, 0x96, 0x9f, 0xcb, 0xef, 0x09, 0xec, 0xf4, 0x8d,
	0x9c, 0x34, 0x3e, 0x8a, 0x2a, 0xa7, 0xd9, 0x76, 0x4c, 0x10, 0xf9, 0x49, 0x81, 0x7c, 0x96, 0x4e,
	0xb7, 0x42, 0x6e, 0xd7, 0xa0, 0xd3, 0x47, 0x04, 0xa0, 0x36, 0x41, 0xd1, 0xe8, 0x58, 0x36, 0x8d,
	0x71, 0x29, 0x35, 0xb6, 0x7e, 0xdc, 0xec, 0x14, 0xbd, 0xa4, 0x9f, 0xd1, 0xaf, 0x08, 0x0c, 0xe0,
	0x54, 0x43, 0xa7, 0x23, 0x17, 0xf4, 0xcf, 0x63, 0xa9, 0x99, 0x78, 0xca, 0x08, 0xed, 0x84, 0x80,
	0x36, 0x45, 0x27, 0xd5, 0xf0, 0x2f, 0x9b, 0x7e, 0x60, 0x3f, 0x13, 0xd8, 0xe5, 0x1f, 0x6b, 0x68,
	0x74, 0xe0, 0x02, 0x87, 0xaf, 0xd4, 0xc9, 0xb6, 0x6c, 0x10, 0xed, 0x05, 0x81, 0xf6, 0x2c, 0x3d,
	0x13, 0x4e, 0xa4, 0x30, 0x50, 0xf1, 0xcb, 0xa0, 0x0f, 0xb9, 0x7a, 0x4f, 0x76, 0xf5, 0x5b, 0xf4,
	0x77, 0x02, 0xc3, 0x4d, 0x03, 0x05, 0x3d, 0x15, 0x89, 0x28, 0x6c, 0xf8, 0x49, 0xbd, 0xdd, 0xae,
	0x19, 0xee, 0xe5, 0x03, 0xb1, 0x97, 0x05, 0x7a, 0xae, 0xd5, 0x5e, 0x6e, 0x57, 0x5d, 0x34, 0x6c,
	0x47, 0xce, 0x48, 0x5b, 0xf4, 0x1b, 0x02, 0x89, 0x6a, 0x9b, 0xde, 0xe2, 0x22, 0x6b, 0x1c, 0x39,
	0x5a, 0x5c, 0x64, 0x4d, 0xdd, 0xbf, 0x72, 0x5a, 0xc0, 0x9e, 0xa3, 0x6a, 0x18, 0x6c, 0xb7, 0xd7,
	0x99, 0xbd, 0xe5, 0xda, 0xf8, 0xf3, 0xe6, 0x09, 0x81, 0x3d, 0x8d, 0xfd, 0x25, 0x7d, 0xab, 0xe5,
	0x91, 0x0f, 0xe8, 0x95, 0x53, 0xa7, 0xda, 0xb4, 0x6a, 0x0b, 0xba, 0xd7, 0xe2, 0xd6, 0xdd, 0x17,
	0x0f, 0x08, 0x0c, 0x60, 0x57, 0xd5, 0xe2, 0x2c, 0xfa, 0x9b, 0xba, 0x16, 0x67, 0xb1, 0xa1, 0x51,
	0x53, 0xe6, 0x04, 0xbe, 0x69, 0x7a, 0x5c, 0x8d, 0xf8, 0x1f, 0x42, 0x53, 0x0d, 0xeb, 0x13, 0xed,
	0x03, 0x3d, 0x1e, 0x7d, 0x29, 0xd5, 0xb5, 0x3f, 0xa9, 0xa9, 0x38, 0xaa, 0x71, 0xaf, 0x2e, 0xd1,
	0xaa, 0xf8, 0x41, 0x7d, 0x46, 0x60, 0x87, 0xd7, 0x11, 0xd1, 0x99, 0x56, 0x85, 0xd2, 0x07, 0x6d,
	0x36, 0xa6, 0x36, 0xa2, 0x7b, 0x53, 0xa0, 0x1b, 0xa5, 0x87, 0x23, 0xd1, 0xd1, 0x4f, 0x09, 0xf4,
	0xcb, 0x6e, 0x85, 0x46, 0xef, 0xdd, 0xd7, 0x20, 0xa5, 0xa6, 0x63, 0xe9, 0xc6, 0x2d, 0xf0, 0xb2,
	0x41, 0x5a, 0x38, 0xf3, 0xf4, 0x45, 0x9a, 0x3c, 0x7b, 0x91, 0x26, 0x7f, 0xbf, 0x48, 0x93, 0xfb,
	0x2f, 0xd3, 0x5d, 0xcf, 0x5e, 0xa6, 0xbb, 0xfe, 0x7c, 0x99, 0xee, 0xba, 0x31, 0x81, 0xeb, 0xc8,
	0x45, 0xef, 0x54, 0xee, 0xba, 0x56, 0x2e, 0xa3, 0x76, 0xcd, 0xcb, 0x6a, 0xbf, 0xf8, 0xe7, 0xd0,
	0xc9, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff, 0x77, 0xde, 0xc9, 0x68, 0xbe, 0x1b, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// VaultInfo returns configuration and state for a specific vault type
	VaultInfo(ctx context.Context, in *QueryVaultInfoRequest, opts ...grpc.CallOption) (*QueryVaultInfoResponse, error)
	// AllVaults returns information for all vault types
	AllVaults(ctx context.Context, in *QueryAllVaultsRequest, opts ...grpc.CallOption) (*QueryAllVaultsResponse, error)
	// UserPosition returns a user's position in a specific vault
	UserPosition(ctx context.Context, in *QueryUserPositionRequest, opts ...grpc.CallOption) (*QueryUserPositionResponse, error)
	// UserPositions returns all of a user's positions across vault types
	UserPositions(ctx context.Context, in *QueryUserPositionsRequest, opts ...grpc.CallOption) (*QueryUserPositionsResponse, error)
	// SharePrice returns the current share price for a vault type
	SharePrice(ctx context.Context, in *QuerySharePriceRequest, opts ...grpc.CallOption) (*QuerySharePriceResponse, error)
	// NAVInfo returns NAV information for a vault type
	NAVInfo(ctx context.Context, in *QueryNAVInfoRequest, opts ...grpc.CallOption) (*QueryNAVInfoResponse, error)
	// DepositPreview shows what a user would receive for a deposit
	DepositPreview(ctx context.Context, in *QueryDepositPreviewRequest, opts ...grpc.CallOption) (*QueryDepositPreviewResponse, error)
	// WithdrawalPreview shows what a user would receive for a withdrawal
	WithdrawalPreview(ctx context.Context, in *QueryWithdrawalPreviewRequest, opts ...grpc.CallOption) (*QueryWithdrawalPreviewResponse, error)
	// ExitQueue returns pending exit requests for a vault type
	ExitQueue(ctx context.Context, in *QueryExitQueueRequest, opts ...grpc.CallOption) (*QueryExitQueueResponse, error)
	// UserExitRequests returns a user's pending exit requests
	UserExitRequests(ctx context.Context, in *QueryUserExitRequestsRequest, opts ...grpc.CallOption) (*QueryUserExitRequestsResponse, error)
	// FeeInfo returns fee configuration for a vault type
	FeeInfo(ctx context.Context, in *QueryFeeInfoRequest, opts ...grpc.CallOption) (*QueryFeeInfoResponse, error)
	// Stats returns statistics for a vault type
	Stats(ctx context.Context, in *QueryStatsRequest, opts ...grpc.CallOption) (*QueryStatsResponse, error)
	// AllStats returns statistics for all vault types
	AllStats(ctx context.Context, in *QueryAllStatsRequest, opts ...grpc.CallOption) (*QueryAllStatsResponse, error)
	// Params returns the module parameters
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) VaultInfo(ctx context.Context, in *QueryVaultInfoRequest, opts ...grpc.CallOption) (*QueryVaultInfoResponse, error) {
	out := new(QueryVaultInfoResponse)
	err := c.cc.Invoke(ctx, "/noble.dollar.vaults.v2.Query/VaultInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AllVaults(ctx context.Context, in *QueryAllVaultsRequest, opts ...grpc.CallOption) (*QueryAllVaultsResponse, error) {
	out := new(QueryAllVaultsResponse)
	err := c.cc.Invoke(ctx, "/noble.dollar.vaults.v2.Query/AllVaults", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) UserPosition(ctx context.Context, in *QueryUserPositionRequest, opts ...grpc.CallOption) (*QueryUserPositionResponse, error) {
	out := new(QueryUserPositionResponse)
	err := c.cc.Invoke(ctx, "/noble.dollar.vaults.v2.Query/UserPosition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) UserPositions(ctx context.Context, in *QueryUserPositionsRequest, opts ...grpc.CallOption) (*QueryUserPositionsResponse, error) {
	out := new(QueryUserPositionsResponse)
	err := c.cc.Invoke(ctx, "/noble.dollar.vaults.v2.Query/UserPositions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SharePrice(ctx context.Context, in *QuerySharePriceRequest, opts ...grpc.CallOption) (*QuerySharePriceResponse, error) {
	out := new(QuerySharePriceResponse)
	err := c.cc.Invoke(ctx, "/noble.dollar.vaults.v2.Query/SharePrice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) NAVInfo(ctx context.Context, in *QueryNAVInfoRequest, opts ...grpc.CallOption) (*QueryNAVInfoResponse, error) {
	out := new(QueryNAVInfoResponse)
	err := c.cc.Invoke(ctx, "/noble.dollar.vaults.v2.Query/NAVInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DepositPreview(ctx context.Context, in *QueryDepositPreviewRequest, opts ...grpc.CallOption) (*QueryDepositPreviewResponse, error) {
	out := new(QueryDepositPreviewResponse)
	err := c.cc.Invoke(ctx, "/noble.dollar.vaults.v2.Query/DepositPreview", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) WithdrawalPreview(ctx context.Context, in *QueryWithdrawalPreviewRequest, opts ...grpc.CallOption) (*QueryWithdrawalPreviewResponse, error) {
	out := new(QueryWithdrawalPreviewResponse)
	err := c.cc.Invoke(ctx, "/noble.dollar.vaults.v2.Query/WithdrawalPreview", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ExitQueue(ctx context.Context, in *QueryExitQueueRequest, opts ...grpc.CallOption) (*QueryExitQueueResponse, error) {
	out := new(QueryExitQueueResponse)
	err := c.cc.Invoke(ctx, "/noble.dollar.vaults.v2.Query/ExitQueue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) UserExitRequests(ctx context.Context, in *QueryUserExitRequestsRequest, opts ...grpc.CallOption) (*QueryUserExitRequestsResponse, error) {
	out := new(QueryUserExitRequestsResponse)
	err := c.cc.Invoke(ctx, "/noble.dollar.vaults.v2.Query/UserExitRequests", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) FeeInfo(ctx context.Context, in *QueryFeeInfoRequest, opts ...grpc.CallOption) (*QueryFeeInfoResponse, error) {
	out := new(QueryFeeInfoResponse)
	err := c.cc.Invoke(ctx, "/noble.dollar.vaults.v2.Query/FeeInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Stats(ctx context.Context, in *QueryStatsRequest, opts ...grpc.CallOption) (*QueryStatsResponse, error) {
	out := new(QueryStatsResponse)
	err := c.cc.Invoke(ctx, "/noble.dollar.vaults.v2.Query/Stats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AllStats(ctx context.Context, in *QueryAllStatsRequest, opts ...grpc.CallOption) (*QueryAllStatsResponse, error) {
	out := new(QueryAllStatsResponse)
	err := c.cc.Invoke(ctx, "/noble.dollar.vaults.v2.Query/AllStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/noble.dollar.vaults.v2.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// VaultInfo returns configuration and state for a specific vault type
	VaultInfo(context.Context, *QueryVaultInfoRequest) (*QueryVaultInfoResponse, error)
	// AllVaults returns information for all vault types
	AllVaults(context.Context, *QueryAllVaultsRequest) (*QueryAllVaultsResponse, error)
	// UserPosition returns a user's position in a specific vault
	UserPosition(context.Context, *QueryUserPositionRequest) (*QueryUserPositionResponse, error)
	// UserPositions returns all of a user's positions across vault types
	UserPositions(context.Context, *QueryUserPositionsRequest) (*QueryUserPositionsResponse, error)
	// SharePrice returns the current share price for a vault type
	SharePrice(context.Context, *QuerySharePriceRequest) (*QuerySharePriceResponse, error)
	// NAVInfo returns NAV information for a vault type
	NAVInfo(context.Context, *QueryNAVInfoRequest) (*QueryNAVInfoResponse, error)
	// DepositPreview shows what a user would receive for a deposit
	DepositPreview(context.Context, *QueryDepositPreviewRequest) (*QueryDepositPreviewResponse, error)
	// WithdrawalPreview shows what a user would receive for a withdrawal
	WithdrawalPreview(context.Context, *QueryWithdrawalPreviewRequest) (*QueryWithdrawalPreviewResponse, error)
	// ExitQueue returns pending exit requests for a vault type
	ExitQueue(context.Context, *QueryExitQueueRequest) (*QueryExitQueueResponse, error)
	// UserExitRequests returns a user's pending exit requests
	UserExitRequests(context.Context, *QueryUserExitRequestsRequest) (*QueryUserExitRequestsResponse, error)
	// FeeInfo returns fee configuration for a vault type
	FeeInfo(context.Context, *QueryFeeInfoRequest) (*QueryFeeInfoResponse, error)
	// Stats returns statistics for a vault type
	Stats(context.Context, *QueryStatsRequest) (*QueryStatsResponse, error)
	// AllStats returns statistics for all vault types
	AllStats(context.Context, *QueryAllStatsRequest) (*QueryAllStatsResponse, error)
	// Params returns the module parameters
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) VaultInfo(ctx context.Context, req *QueryVaultInfoRequest) (*QueryVaultInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VaultInfo not implemented")
}
func (*UnimplementedQueryServer) AllVaults(ctx context.Context, req *QueryAllVaultsRequest) (*QueryAllVaultsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllVaults not implemented")
}
func (*UnimplementedQueryServer) UserPosition(ctx context.Context, req *QueryUserPositionRequest) (*QueryUserPositionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserPosition not implemented")
}
func (*UnimplementedQueryServer) UserPositions(ctx context.Context, req *QueryUserPositionsRequest) (*QueryUserPositionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserPositions not implemented")
}
func (*UnimplementedQueryServer) SharePrice(ctx context.Context, req *QuerySharePriceRequest) (*QuerySharePriceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SharePrice not implemented")
}
func (*UnimplementedQueryServer) NAVInfo(ctx context.Context, req *QueryNAVInfoRequest) (*QueryNAVInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NAVInfo not implemented")
}
func (*UnimplementedQueryServer) DepositPreview(ctx context.Context, req *QueryDepositPreviewRequest) (*QueryDepositPreviewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DepositPreview not implemented")
}
func (*UnimplementedQueryServer) WithdrawalPreview(ctx context.Context, req *QueryWithdrawalPreviewRequest) (*QueryWithdrawalPreviewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WithdrawalPreview not implemented")
}
func (*UnimplementedQueryServer) ExitQueue(ctx context.Context, req *QueryExitQueueRequest) (*QueryExitQueueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExitQueue not implemented")
}
func (*UnimplementedQueryServer) UserExitRequests(ctx context.Context, req *QueryUserExitRequestsRequest) (*QueryUserExitRequestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserExitRequests not implemented")
}
func (*UnimplementedQueryServer) FeeInfo(ctx context.Context, req *QueryFeeInfoRequest) (*QueryFeeInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FeeInfo not implemented")
}
func (*UnimplementedQueryServer) Stats(ctx context.Context, req *QueryStatsRequest) (*QueryStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stats not implemented")
}
func (*UnimplementedQueryServer) AllStats(ctx context.Context, req *QueryAllStatsRequest) (*QueryAllStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllStats not implemented")
}
func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_VaultInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryVaultInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).VaultInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/noble.dollar.vaults.v2.Query/VaultInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).VaultInfo(ctx, req.(*QueryVaultInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AllVaults_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllVaultsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AllVaults(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/noble.dollar.vaults.v2.Query/AllVaults",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AllVaults(ctx, req.(*QueryAllVaultsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_UserPosition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryUserPositionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).UserPosition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/noble.dollar.vaults.v2.Query/UserPosition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).UserPosition(ctx, req.(*QueryUserPositionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_UserPositions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryUserPositionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).UserPositions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/noble.dollar.vaults.v2.Query/UserPositions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).UserPositions(ctx, req.(*QueryUserPositionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SharePrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySharePriceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SharePrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/noble.dollar.vaults.v2.Query/SharePrice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SharePrice(ctx, req.(*QuerySharePriceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_NAVInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryNAVInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).NAVInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/noble.dollar.vaults.v2.Query/NAVInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).NAVInfo(ctx, req.(*QueryNAVInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DepositPreview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDepositPreviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DepositPreview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/noble.dollar.vaults.v2.Query/DepositPreview",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DepositPreview(ctx, req.(*QueryDepositPreviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_WithdrawalPreview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryWithdrawalPreviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).WithdrawalPreview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/noble.dollar.vaults.v2.Query/WithdrawalPreview",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).WithdrawalPreview(ctx, req.(*QueryWithdrawalPreviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ExitQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryExitQueueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ExitQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/noble.dollar.vaults.v2.Query/ExitQueue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ExitQueue(ctx, req.(*QueryExitQueueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_UserExitRequests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryUserExitRequestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).UserExitRequests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/noble.dollar.vaults.v2.Query/UserExitRequests",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).UserExitRequests(ctx, req.(*QueryUserExitRequestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_FeeInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryFeeInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).FeeInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/noble.dollar.vaults.v2.Query/FeeInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).FeeInfo(ctx, req.(*QueryFeeInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Stats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Stats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/noble.dollar.vaults.v2.Query/Stats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Stats(ctx, req.(*QueryStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AllStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AllStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/noble.dollar.vaults.v2.Query/AllStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AllStats(ctx, req.(*QueryAllStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/noble.dollar.vaults.v2.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var Query_serviceDesc = _Query_serviceDesc
var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "noble.dollar.vaults.v2.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "VaultInfo",
			Handler:    _Query_VaultInfo_Handler,
		},
		{
			MethodName: "AllVaults",
			Handler:    _Query_AllVaults_Handler,
		},
		{
			MethodName: "UserPosition",
			Handler:    _Query_UserPosition_Handler,
		},
		{
			MethodName: "UserPositions",
			Handler:    _Query_UserPositions_Handler,
		},
		{
			MethodName: "SharePrice",
			Handler:    _Query_SharePrice_Handler,
		},
		{
			MethodName: "NAVInfo",
			Handler:    _Query_NAVInfo_Handler,
		},
		{
			MethodName: "DepositPreview",
			Handler:    _Query_DepositPreview_Handler,
		},
		{
			MethodName: "WithdrawalPreview",
			Handler:    _Query_WithdrawalPreview_Handler,
		},
		{
			MethodName: "ExitQueue",
			Handler:    _Query_ExitQueue_Handler,
		},
		{
			MethodName: "UserExitRequests",
			Handler:    _Query_UserExitRequests_Handler,
		},
		{
			MethodName: "FeeInfo",
			Handler:    _Query_FeeInfo_Handler,
		},
		{
			MethodName: "Stats",
			Handler:    _Query_Stats_Handler,
		},
		{
			MethodName: "AllStats",
			Handler:    _Query_AllStats_Handler,
		},
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "noble/dollar/vaults/v2/query.proto",
}

func (m *QueryVaultInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryVaultInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryVaultInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.VaultType != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.VaultType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryVaultInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryVaultInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryVaultInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TotalDepositors != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TotalDepositors))
		i--
		dAtA[i] = 0x28
	}
	if len(m.SharePrice) > 0 {
		i -= len(m.SharePrice)
		copy(dAtA[i:], m.SharePrice)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SharePrice)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.TotalNav) > 0 {
		i -= len(m.TotalNav)
		copy(dAtA[i:], m.TotalNav)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.TotalNav)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TotalShares) > 0 {
		i -= len(m.TotalShares)
		copy(dAtA[i:], m.TotalShares)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.TotalShares)))
		i--
		dAtA[i] = 0x12
	}
	{
		size, err := m.Config.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllVaultsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllVaultsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllVaultsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllVaultsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllVaultsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllVaultsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Vaults) > 0 {
		for iNdEx := len(m.Vaults) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Vaults[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryUserPositionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryUserPositionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryUserPositionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.VaultType != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.VaultType))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryUserPositionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryUserPositionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryUserPositionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UnrealizedYield) > 0 {
		i -= len(m.UnrealizedYield)
		copy(dAtA[i:], m.UnrealizedYield)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.UnrealizedYield)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.CurrentValue) > 0 {
		i -= len(m.CurrentValue)
		copy(dAtA[i:], m.CurrentValue)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.CurrentValue)))
		i--
		dAtA[i] = 0x12
	}
	if m.Position != nil {
		{
			size, err := m.Position.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryUserPositionsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryUserPositionsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryUserPositionsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryUserPositionsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryUserPositionsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryUserPositionsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Positions) > 0 {
		for iNdEx := len(m.Positions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Positions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *UserPositionWithVault) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserPositionWithVault) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserPositionWithVault) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CurrentValue) > 0 {
		i -= len(m.CurrentValue)
		copy(dAtA[i:], m.CurrentValue)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.CurrentValue)))
		i--
		dAtA[i] = 0x1a
	}
	{
		size, err := m.Position.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.VaultType != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.VaultType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QuerySharePriceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySharePriceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySharePriceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.VaultType != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.VaultType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QuerySharePriceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySharePriceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySharePriceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TotalNav) > 0 {
		i -= len(m.TotalNav)
		copy(dAtA[i:], m.TotalNav)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.TotalNav)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TotalShares) > 0 {
		i -= len(m.TotalShares)
		copy(dAtA[i:], m.TotalShares)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.TotalShares)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.SharePrice) > 0 {
		i -= len(m.SharePrice)
		copy(dAtA[i:], m.SharePrice)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SharePrice)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryNAVInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryNAVInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryNAVInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.VaultType != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.VaultType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryNAVInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryNAVInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryNAVInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.NavInfo.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryDepositPreviewRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDepositPreviewRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDepositPreviewRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Amount) > 0 {
		i -= len(m.Amount)
		copy(dAtA[i:], m.Amount)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Amount)))
		i--
		dAtA[i] = 0x12
	}
	if m.VaultType != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.VaultType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryDepositPreviewResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDepositPreviewResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDepositPreviewResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FeeRateBps != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.FeeRateBps))
		i--
		dAtA[i] = 0x28
	}
	if len(m.SharePrice) > 0 {
		i -= len(m.SharePrice)
		copy(dAtA[i:], m.SharePrice)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SharePrice)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.NetAmount) > 0 {
		i -= len(m.NetAmount)
		copy(dAtA[i:], m.NetAmount)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.NetAmount)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.FeesToPay) > 0 {
		i -= len(m.FeesToPay)
		copy(dAtA[i:], m.FeesToPay)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.FeesToPay)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.SharesToReceive) > 0 {
		i -= len(m.SharesToReceive)
		copy(dAtA[i:], m.SharesToReceive)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SharesToReceive)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryWithdrawalPreviewRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryWithdrawalPreviewRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryWithdrawalPreviewRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Shares) > 0 {
		i -= len(m.Shares)
		copy(dAtA[i:], m.Shares)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Shares)))
		i--
		dAtA[i] = 0x12
	}
	if m.VaultType != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.VaultType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryWithdrawalPreviewResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryWithdrawalPreviewResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryWithdrawalPreviewResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FeeRateBps != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.FeeRateBps))
		i--
		dAtA[i] = 0x28
	}
	if len(m.SharePrice) > 0 {
		i -= len(m.SharePrice)
		copy(dAtA[i:], m.SharePrice)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SharePrice)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.GrossAmount) > 0 {
		i -= len(m.GrossAmount)
		copy(dAtA[i:], m.GrossAmount)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.GrossAmount)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.FeesToPay) > 0 {
		i -= len(m.FeesToPay)
		copy(dAtA[i:], m.FeesToPay)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.FeesToPay)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.AmountToReceive) > 0 {
		i -= len(m.AmountToReceive)
		copy(dAtA[i:], m.AmountToReceive)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.AmountToReceive)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryExitQueueRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryExitQueueRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryExitQueueRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.VaultType != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.VaultType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryExitQueueResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryExitQueueResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryExitQueueResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ExitRequests) > 0 {
		for iNdEx := len(m.ExitRequests) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ExitRequests[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ExitRequestWithUser) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExitRequestWithUser) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExitRequestWithUser) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.ExitRequest.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.User) > 0 {
		i -= len(m.User)
		copy(dAtA[i:], m.User)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.User)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryUserExitRequestsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryUserExitRequestsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryUserExitRequestsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryUserExitRequestsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryUserExitRequestsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryUserExitRequestsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ExitRequests) > 0 {
		for iNdEx := len(m.ExitRequests) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ExitRequests[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ExitRequestWithVault) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExitRequestWithVault) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExitRequestWithVault) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.ExitRequest.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.VaultType != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.VaultType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryFeeInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFeeInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFeeInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.VaultType != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.VaultType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryFeeInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFeeInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFeeInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.FeeConfig.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryStatsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStatsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStatsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.VaultType != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.VaultType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryStatsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStatsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStatsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Stats.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllStatsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllStatsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllStatsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllStatsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllStatsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllStatsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Stats) > 0 {
		for iNdEx := len(m.Stats) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Stats[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryVaultInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VaultType != 0 {
		n += 1 + sovQuery(uint64(m.VaultType))
	}
	return n
}

func (m *QueryVaultInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Config.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = len(m.TotalShares)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.TotalNav)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.SharePrice)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.TotalDepositors != 0 {
		n += 1 + sovQuery(uint64(m.TotalDepositors))
	}
	return n
}

func (m *QueryAllVaultsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllVaultsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Vaults) > 0 {
		for _, e := range m.Vaults {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryUserPositionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.VaultType != 0 {
		n += 1 + sovQuery(uint64(m.VaultType))
	}
	return n
}

func (m *QueryUserPositionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Position != nil {
		l = m.Position.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.CurrentValue)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.UnrealizedYield)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryUserPositionsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryUserPositionsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Positions) > 0 {
		for _, e := range m.Positions {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *UserPositionWithVault) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VaultType != 0 {
		n += 1 + sovQuery(uint64(m.VaultType))
	}
	l = m.Position.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = len(m.CurrentValue)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySharePriceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VaultType != 0 {
		n += 1 + sovQuery(uint64(m.VaultType))
	}
	return n
}

func (m *QuerySharePriceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SharePrice)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.TotalShares)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.TotalNav)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryNAVInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VaultType != 0 {
		n += 1 + sovQuery(uint64(m.VaultType))
	}
	return n
}

func (m *QueryNAVInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.NavInfo.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryDepositPreviewRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VaultType != 0 {
		n += 1 + sovQuery(uint64(m.VaultType))
	}
	l = len(m.Amount)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDepositPreviewResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SharesToReceive)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.FeesToPay)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.NetAmount)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.SharePrice)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.FeeRateBps != 0 {
		n += 1 + sovQuery(uint64(m.FeeRateBps))
	}
	return n
}

func (m *QueryWithdrawalPreviewRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VaultType != 0 {
		n += 1 + sovQuery(uint64(m.VaultType))
	}
	l = len(m.Shares)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryWithdrawalPreviewResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AmountToReceive)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.FeesToPay)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.GrossAmount)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.SharePrice)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.FeeRateBps != 0 {
		n += 1 + sovQuery(uint64(m.FeeRateBps))
	}
	return n
}

func (m *QueryExitQueueRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VaultType != 0 {
		n += 1 + sovQuery(uint64(m.VaultType))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryExitQueueResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ExitRequests) > 0 {
		for _, e := range m.ExitRequests {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *ExitRequestWithUser) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.User)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = m.ExitRequest.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryUserExitRequestsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryUserExitRequestsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ExitRequests) > 0 {
		for _, e := range m.ExitRequests {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *ExitRequestWithVault) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VaultType != 0 {
		n += 1 + sovQuery(uint64(m.VaultType))
	}
	l = m.ExitRequest.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryFeeInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VaultType != 0 {
		n += 1 + sovQuery(uint64(m.VaultType))
	}
	return n
}

func (m *QueryFeeInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.FeeConfig.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryStatsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VaultType != 0 {
		n += 1 + sovQuery(uint64(m.VaultType))
	}
	return n
}

func (m *QueryStatsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Stats.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllStatsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllStatsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Stats) > 0 {
		for _, e := range m.Stats {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryVaultInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryVaultInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryVaultInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VaultType", wireType)
			}
			m.VaultType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VaultType |= vaults.VaultType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryVaultInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryVaultInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryVaultInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Config", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Config.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalShares", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TotalShares = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalNav", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TotalNav = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SharePrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SharePrice = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalDepositors", wireType)
			}
			m.TotalDepositors = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalDepositors |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllVaultsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllVaultsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllVaultsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllVaultsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllVaultsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllVaultsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vaults", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Vaults = append(m.Vaults, QueryVaultInfoResponse{})
			if err := m.Vaults[len(m.Vaults)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryUserPositionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryUserPositionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryUserPositionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VaultType", wireType)
			}
			m.VaultType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VaultType |= vaults.VaultType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryUserPositionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryUserPositionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryUserPositionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Position", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Position == nil {
				m.Position = &UserPosition{}
			}
			if err := m.Position.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CurrentValue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnrealizedYield", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UnrealizedYield = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryUserPositionsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryUserPositionsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryUserPositionsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryUserPositionsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryUserPositionsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryUserPositionsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Positions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Positions = append(m.Positions, UserPositionWithVault{})
			if err := m.Positions[len(m.Positions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserPositionWithVault) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserPositionWithVault: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserPositionWithVault: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VaultType", wireType)
			}
			m.VaultType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VaultType |= vaults.VaultType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Position", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Position.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CurrentValue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySharePriceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySharePriceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySharePriceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VaultType", wireType)
			}
			m.VaultType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VaultType |= vaults.VaultType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySharePriceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySharePriceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySharePriceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SharePrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SharePrice = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalShares", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TotalShares = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalNav", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TotalNav = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryNAVInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryNAVInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryNAVInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VaultType", wireType)
			}
			m.VaultType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VaultType |= vaults.VaultType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryNAVInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryNAVInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryNAVInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NavInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.NavInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDepositPreviewRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDepositPreviewRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDepositPreviewRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VaultType", wireType)
			}
			m.VaultType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VaultType |= vaults.VaultType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDepositPreviewResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDepositPreviewResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDepositPreviewResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SharesToReceive", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SharesToReceive = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeesToPay", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeesToPay = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NetAmount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SharePrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SharePrice = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeRateBps", wireType)
			}
			m.FeeRateBps = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FeeRateBps |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryWithdrawalPreviewRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryWithdrawalPreviewRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryWithdrawalPreviewRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VaultType", wireType)
			}
			m.VaultType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VaultType |= vaults.VaultType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shares", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Shares = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryWithdrawalPreviewResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryWithdrawalPreviewResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryWithdrawalPreviewResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmountToReceive", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AmountToReceive = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeesToPay", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeesToPay = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GrossAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GrossAmount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SharePrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SharePrice = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeRateBps", wireType)
			}
			m.FeeRateBps = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FeeRateBps |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryExitQueueRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryExitQueueRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryExitQueueRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VaultType", wireType)
			}
			m.VaultType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VaultType |= vaults.VaultType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryExitQueueResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryExitQueueResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryExitQueueResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExitRequests", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExitRequests = append(m.ExitRequests, ExitRequestWithUser{})
			if err := m.ExitRequests[len(m.ExitRequests)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExitRequestWithUser) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExitRequestWithUser: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExitRequestWithUser: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.User = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExitRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ExitRequest.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryUserExitRequestsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryUserExitRequestsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryUserExitRequestsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryUserExitRequestsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryUserExitRequestsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryUserExitRequestsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExitRequests", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExitRequests = append(m.ExitRequests, ExitRequestWithVault{})
			if err := m.ExitRequests[len(m.ExitRequests)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExitRequestWithVault) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExitRequestWithVault: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExitRequestWithVault: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VaultType", wireType)
			}
			m.VaultType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VaultType |= vaults.VaultType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExitRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ExitRequest.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFeeInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFeeInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFeeInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VaultType", wireType)
			}
			m.VaultType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VaultType |= vaults.VaultType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFeeInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFeeInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFeeInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FeeConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStatsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStatsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStatsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VaultType", wireType)
			}
			m.VaultType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VaultType |= vaults.VaultType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStatsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStatsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStatsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Stats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllStatsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllStatsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllStatsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllStatsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllStatsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllStatsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Stats = append(m.Stats, VaultStatsEntry{})
			if err := m.Stats[len(m.Stats)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)

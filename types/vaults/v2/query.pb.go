// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: noble/dollar/vaults/v2/query.proto

package v2

import (
	context "context"
	vaults "dollar.noble.xyz/v2/types/vaults"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryVaultInfoRequest requests information about a specific vault
type QueryVaultInfoRequest struct {
	VaultType vaults.VaultType `protobuf:"varint,1,opt,name=vault_type,json=vaultType,proto3,enum=noble.dollar.vaults.v1.VaultType" json:"vault_type,omitempty"`
}

func (m *QueryVaultInfoRequest) Reset()         { *m = QueryVaultInfoRequest{} }
func (m *QueryVaultInfoRequest) String() string { return proto.CompactTextString(m) }
func (*QueryVaultInfoRequest) ProtoMessage()    {}
func (*QueryVaultInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9037e95a7381a4ea, []int{0}
}
func (m *QueryVaultInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryVaultInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryVaultInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryVaultInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryVaultInfoRequest.Merge(m, src)
}
func (m *QueryVaultInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryVaultInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryVaultInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryVaultInfoRequest proto.InternalMessageInfo

func (m *QueryVaultInfoRequest) GetVaultType() vaults.VaultType {
	if m != nil {
		return m.VaultType
	}
	return vaults.UNSPECIFIED
}

// QueryVaultInfoResponse returns vault information
type QueryVaultInfoResponse struct {
	Config          VaultConfig `protobuf:"bytes,1,opt,name=config,proto3" json:"config"`
	TotalShares     string      `protobuf:"bytes,2,opt,name=total_shares,json=totalShares,proto3" json:"total_shares,omitempty"`
	TotalNav        string      `protobuf:"bytes,3,opt,name=total_nav,json=totalNav,proto3" json:"total_nav,omitempty"`
	SharePrice      string      `protobuf:"bytes,4,opt,name=share_price,json=sharePrice,proto3" json:"share_price,omitempty"`
	TotalDepositors uint64      `protobuf:"varint,5,opt,name=total_depositors,json=totalDepositors,proto3" json:"total_depositors,omitempty"`
}

func (m *QueryVaultInfoResponse) Reset()         { *m = QueryVaultInfoResponse{} }
func (m *QueryVaultInfoResponse) String() string { return proto.CompactTextString(m) }
func (*QueryVaultInfoResponse) ProtoMessage()    {}
func (*QueryVaultInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9037e95a7381a4ea, []int{1}
}
func (m *QueryVaultInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryVaultInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryVaultInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryVaultInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryVaultInfoResponse.Merge(m, src)
}
func (m *QueryVaultInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryVaultInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryVaultInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryVaultInfoResponse proto.InternalMessageInfo

func (m *QueryVaultInfoResponse) GetConfig() VaultConfig {
	if m != nil {
		return m.Config
	}
	return VaultConfig{}
}

func (m *QueryVaultInfoResponse) GetTotalShares() string {
	if m != nil {
		return m.TotalShares
	}
	return ""
}

func (m *QueryVaultInfoResponse) GetTotalNav() string {
	if m != nil {
		return m.TotalNav
	}
	return ""
}

func (m *QueryVaultInfoResponse) GetSharePrice() string {
	if m != nil {
		return m.SharePrice
	}
	return ""
}

func (m *QueryVaultInfoResponse) GetTotalDepositors() uint64 {
	if m != nil {
		return m.TotalDepositors
	}
	return 0
}

// QueryAllVaultsRequest requests information about all vaults
type QueryAllVaultsRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllVaultsRequest) Reset()         { *m = QueryAllVaultsRequest{} }
func (m *QueryAllVaultsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllVaultsRequest) ProtoMessage()    {}
func (*QueryAllVaultsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9037e95a7381a4ea, []int{2}
}
func (m *QueryAllVaultsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllVaultsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllVaultsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllVaultsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllVaultsRequest.Merge(m, src)
}
func (m *QueryAllVaultsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllVaultsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllVaultsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllVaultsRequest proto.InternalMessageInfo

func (m *QueryAllVaultsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryAllVaultsResponse returns information about all vaults
type QueryAllVaultsResponse struct {
	Vaults     []QueryVaultInfoResponse `protobuf:"bytes,1,rep,name=vaults,proto3" json:"vaults"`
	Pagination *query.PageResponse      `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllVaultsResponse) Reset()         { *m = QueryAllVaultsResponse{} }
func (m *QueryAllVaultsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllVaultsResponse) ProtoMessage()    {}
func (*QueryAllVaultsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9037e95a7381a4ea, []int{3}
}
func (m *QueryAllVaultsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllVaultsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllVaultsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllVaultsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllVaultsResponse.Merge(m, src)
}
func (m *QueryAllVaultsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllVaultsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllVaultsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllVaultsResponse proto.InternalMessageInfo

func (m *QueryAllVaultsResponse) GetVaults() []QueryVaultInfoResponse {
	if m != nil {
		return m.Vaults
	}
	return nil
}

func (m *QueryAllVaultsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryUserPositionRequest requests a user's position in a specific vault
type QueryUserPositionRequest struct {
	Address   string           `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	VaultType vaults.VaultType `protobuf:"varint,2,opt,name=vault_type,json=vaultType,proto3,enum=noble.dollar.vaults.v1.VaultType" json:"vault_type,omitempty"`
}

func (m *QueryUserPositionRequest) Reset()         { *m = QueryUserPositionRequest{} }
func (m *QueryUserPositionRequest) String() string { return proto.CompactTextString(m) }
func (*QueryUserPositionRequest) ProtoMessage()    {}
func (*QueryUserPositionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9037e95a7381a4ea, []int{4}
}
func (m *QueryUserPositionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryUserPositionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryUserPositionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryUserPositionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryUserPositionRequest.Merge(m, src)
}
func (m *QueryUserPositionRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryUserPositionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryUserPositionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryUserPositionRequest proto.InternalMessageInfo

func (m *QueryUserPositionRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *QueryUserPositionRequest) GetVaultType() vaults.VaultType {
	if m != nil {
		return m.VaultType
	}
	return vaults.UNSPECIFIED
}

// QueryUserPositionResponse returns a user's position
type QueryUserPositionResponse struct {
	Position        *UserPosition `protobuf:"bytes,1,opt,name=position,proto3" json:"position,omitempty"`
	CurrentValue    string        `protobuf:"bytes,2,opt,name=current_value,json=currentValue,proto3" json:"current_value,omitempty"`
	UnrealizedYield string        `protobuf:"bytes,3,opt,name=unrealized_yield,json=unrealizedYield,proto3" json:"unrealized_yield,omitempty"`
}

func (m *QueryUserPositionResponse) Reset()         { *m = QueryUserPositionResponse{} }
func (m *QueryUserPositionResponse) String() string { return proto.CompactTextString(m) }
func (*QueryUserPositionResponse) ProtoMessage()    {}
func (*QueryUserPositionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9037e95a7381a4ea, []int{5}
}
func (m *QueryUserPositionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryUserPositionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryUserPositionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryUserPositionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryUserPositionResponse.Merge(m, src)
}
func (m *QueryUserPositionResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryUserPositionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryUserPositionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryUserPositionResponse proto.InternalMessageInfo

func (m *QueryUserPositionResponse) GetPosition() *UserPosition {
	if m != nil {
		return m.Position
	}
	return nil
}

func (m *QueryUserPositionResponse) GetCurrentValue() string {
	if m != nil {
		return m.CurrentValue
	}
	return ""
}

func (m *QueryUserPositionResponse) GetUnrealizedYield() string {
	if m != nil {
		return m.UnrealizedYield
	}
	return ""
}

// QueryUserPositionsRequest requests all of a user's positions
type QueryUserPositionsRequest struct {
	Address    string             `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryUserPositionsRequest) Reset()         { *m = QueryUserPositionsRequest{} }
func (m *QueryUserPositionsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryUserPositionsRequest) ProtoMessage()    {}
func (*QueryUserPositionsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9037e95a7381a4ea, []int{6}
}
func (m *QueryUserPositionsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryUserPositionsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryUserPositionsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryUserPositionsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryUserPositionsRequest.Merge(m, src)
}
func (m *QueryUserPositionsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryUserPositionsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryUserPositionsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryUserPositionsRequest proto.InternalMessageInfo

func (m *QueryUserPositionsRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *QueryUserPositionsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryUserPositionsResponse returns all of a user's positions
type QueryUserPositionsResponse struct {
	Positions  []UserPositionWithVault `protobuf:"bytes,1,rep,name=positions,proto3" json:"positions"`
	Pagination *query.PageResponse     `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryUserPositionsResponse) Reset()         { *m = QueryUserPositionsResponse{} }
func (m *QueryUserPositionsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryUserPositionsResponse) ProtoMessage()    {}
func (*QueryUserPositionsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9037e95a7381a4ea, []int{7}
}
func (m *QueryUserPositionsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryUserPositionsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryUserPositionsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryUserPositionsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryUserPositionsResponse.Merge(m, src)
}
func (m *QueryUserPositionsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryUserPositionsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryUserPositionsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryUserPositionsResponse proto.InternalMessageInfo

func (m *QueryUserPositionsResponse) GetPositions() []UserPositionWithVault {
	if m != nil {
		return m.Positions
	}
	return nil
}

func (m *QueryUserPositionsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// UserPositionWithVault includes the vault type with the position
type UserPositionWithVault struct {
	VaultType    vaults.VaultType `protobuf:"varint,1,opt,name=vault_type,json=vaultType,proto3,enum=noble.dollar.vaults.v1.VaultType" json:"vault_type,omitempty"`
	Position     UserPosition     `protobuf:"bytes,2,opt,name=position,proto3" json:"position"`
	CurrentValue string           `protobuf:"bytes,3,opt,name=current_value,json=currentValue,proto3" json:"current_value,omitempty"`
}

func (m *UserPositionWithVault) Reset()         { *m = UserPositionWithVault{} }
func (m *UserPositionWithVault) String() string { return proto.CompactTextString(m) }
func (*UserPositionWithVault) ProtoMessage()    {}
func (*UserPositionWithVault) Descriptor() ([]byte, []int) {
	return fileDescriptor_9037e95a7381a4ea, []int{8}
}
func (m *UserPositionWithVault) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserPositionWithVault) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserPositionWithVault.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserPositionWithVault) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserPositionWithVault.Merge(m, src)
}
func (m *UserPositionWithVault) XXX_Size() int {
	return m.Size()
}
func (m *UserPositionWithVault) XXX_DiscardUnknown() {
	xxx_messageInfo_UserPositionWithVault.DiscardUnknown(m)
}

var xxx_messageInfo_UserPositionWithVault proto.InternalMessageInfo

func (m *UserPositionWithVault) GetVaultType() vaults.VaultType {
	if m != nil {
		return m.VaultType
	}
	return vaults.UNSPECIFIED
}

func (m *UserPositionWithVault) GetPosition() UserPosition {
	if m != nil {
		return m.Position
	}
	return UserPosition{}
}

func (m *UserPositionWithVault) GetCurrentValue() string {
	if m != nil {
		return m.CurrentValue
	}
	return ""
}

// QuerySharePriceRequest requests the share price for a vault
type QuerySharePriceRequest struct {
	VaultType vaults.VaultType `protobuf:"varint,1,opt,name=vault_type,json=vaultType,proto3,enum=noble.dollar.vaults.v1.VaultType" json:"vault_type,omitempty"`
}

func (m *QuerySharePriceRequest) Reset()         { *m = QuerySharePriceRequest{} }
func (m *QuerySharePriceRequest) String() string { return proto.CompactTextString(m) }
func (*QuerySharePriceRequest) ProtoMessage()    {}
func (*QuerySharePriceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9037e95a7381a4ea, []int{9}
}
func (m *QuerySharePriceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySharePriceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySharePriceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySharePriceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySharePriceRequest.Merge(m, src)
}
func (m *QuerySharePriceRequest) XXX_Size() int {
	return m.Size()
}
func (m *QuerySharePriceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySharePriceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySharePriceRequest proto.InternalMessageInfo

func (m *QuerySharePriceRequest) GetVaultType() vaults.VaultType {
	if m != nil {
		return m.VaultType
	}
	return vaults.UNSPECIFIED
}

// QuerySharePriceResponse returns the share price
type QuerySharePriceResponse struct {
	SharePrice  string `protobuf:"bytes,1,opt,name=share_price,json=sharePrice,proto3" json:"share_price,omitempty"`
	TotalShares string `protobuf:"bytes,2,opt,name=total_shares,json=totalShares,proto3" json:"total_shares,omitempty"`
	TotalNav    string `protobuf:"bytes,3,opt,name=total_nav,json=totalNav,proto3" json:"total_nav,omitempty"`
}

func (m *QuerySharePriceResponse) Reset()         { *m = QuerySharePriceResponse{} }
func (m *QuerySharePriceResponse) String() string { return proto.CompactTextString(m) }
func (*QuerySharePriceResponse) ProtoMessage()    {}
func (*QuerySharePriceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9037e95a7381a4ea, []int{10}
}
func (m *QuerySharePriceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySharePriceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySharePriceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySharePriceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySharePriceResponse.Merge(m, src)
}
func (m *QuerySharePriceResponse) XXX_Size() int {
	return m.Size()
}
func (m *QuerySharePriceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySharePriceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySharePriceResponse proto.InternalMessageInfo

func (m *QuerySharePriceResponse) GetSharePrice() string {
	if m != nil {
		return m.SharePrice
	}
	return ""
}

func (m *QuerySharePriceResponse) GetTotalShares() string {
	if m != nil {
		return m.TotalShares
	}
	return ""
}

func (m *QuerySharePriceResponse) GetTotalNav() string {
	if m != nil {
		return m.TotalNav
	}
	return ""
}

// QueryNAVInfoRequest requests NAV information
type QueryNAVInfoRequest struct {
	VaultType vaults.VaultType `protobuf:"varint,1,opt,name=vault_type,json=vaultType,proto3,enum=noble.dollar.vaults.v1.VaultType" json:"vault_type,omitempty"`
}

func (m *QueryNAVInfoRequest) Reset()         { *m = QueryNAVInfoRequest{} }
func (m *QueryNAVInfoRequest) String() string { return proto.CompactTextString(m) }
func (*QueryNAVInfoRequest) ProtoMessage()    {}
func (*QueryNAVInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9037e95a7381a4ea, []int{11}
}
func (m *QueryNAVInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryNAVInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryNAVInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryNAVInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryNAVInfoRequest.Merge(m, src)
}
func (m *QueryNAVInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryNAVInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryNAVInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryNAVInfoRequest proto.InternalMessageInfo

func (m *QueryNAVInfoRequest) GetVaultType() vaults.VaultType {
	if m != nil {
		return m.VaultType
	}
	return vaults.UNSPECIFIED
}

// QueryNAVInfoResponse returns NAV information
type QueryNAVInfoResponse struct {
	NavInfo NAVInfo `protobuf:"bytes,1,opt,name=nav_info,json=navInfo,proto3" json:"nav_info"`
}

func (m *QueryNAVInfoResponse) Reset()         { *m = QueryNAVInfoResponse{} }
func (m *QueryNAVInfoResponse) String() string { return proto.CompactTextString(m) }
func (*QueryNAVInfoResponse) ProtoMessage()    {}
func (*QueryNAVInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9037e95a7381a4ea, []int{12}
}
func (m *QueryNAVInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryNAVInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryNAVInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryNAVInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryNAVInfoResponse.Merge(m, src)
}
func (m *QueryNAVInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryNAVInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryNAVInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryNAVInfoResponse proto.InternalMessageInfo

func (m *QueryNAVInfoResponse) GetNavInfo() NAVInfo {
	if m != nil {
		return m.NavInfo
	}
	return NAVInfo{}
}

// QueryDepositPreviewRequest requests a deposit preview
type QueryDepositPreviewRequest struct {
	VaultType vaults.VaultType `protobuf:"varint,1,opt,name=vault_type,json=vaultType,proto3,enum=noble.dollar.vaults.v1.VaultType" json:"vault_type,omitempty"`
	Amount    string           `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (m *QueryDepositPreviewRequest) Reset()         { *m = QueryDepositPreviewRequest{} }
func (m *QueryDepositPreviewRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDepositPreviewRequest) ProtoMessage()    {}
func (*QueryDepositPreviewRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9037e95a7381a4ea, []int{13}
}
func (m *QueryDepositPreviewRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDepositPreviewRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDepositPreviewRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDepositPreviewRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDepositPreviewRequest.Merge(m, src)
}
func (m *QueryDepositPreviewRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDepositPreviewRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDepositPreviewRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDepositPreviewRequest proto.InternalMessageInfo

func (m *QueryDepositPreviewRequest) GetVaultType() vaults.VaultType {
	if m != nil {
		return m.VaultType
	}
	return vaults.UNSPECIFIED
}

func (m *QueryDepositPreviewRequest) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

// QueryDepositPreviewResponse returns deposit preview information
type QueryDepositPreviewResponse struct {
	SharesToReceive string `protobuf:"bytes,1,opt,name=shares_to_receive,json=sharesToReceive,proto3" json:"shares_to_receive,omitempty"`
	FeesToPay       string `protobuf:"bytes,2,opt,name=fees_to_pay,json=feesToPay,proto3" json:"fees_to_pay,omitempty"`
	NetAmount       string `protobuf:"bytes,3,opt,name=net_amount,json=netAmount,proto3" json:"net_amount,omitempty"`
	SharePrice      string `protobuf:"bytes,4,opt,name=share_price,json=sharePrice,proto3" json:"share_price,omitempty"`
	FeeRateBps      int32  `protobuf:"varint,5,opt,name=fee_rate_bps,json=feeRateBps,proto3" json:"fee_rate_bps,omitempty"`
}

func (m *QueryDepositPreviewResponse) Reset()         { *m = QueryDepositPreviewResponse{} }
func (m *QueryDepositPreviewResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDepositPreviewResponse) ProtoMessage()    {}
func (*QueryDepositPreviewResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9037e95a7381a4ea, []int{14}
}
func (m *QueryDepositPreviewResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDepositPreviewResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDepositPreviewResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDepositPreviewResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDepositPreviewResponse.Merge(m, src)
}
func (m *QueryDepositPreviewResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDepositPreviewResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDepositPreviewResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDepositPreviewResponse proto.InternalMessageInfo

func (m *QueryDepositPreviewResponse) GetSharesToReceive() string {
	if m != nil {
		return m.SharesToReceive
	}
	return ""
}

func (m *QueryDepositPreviewResponse) GetFeesToPay() string {
	if m != nil {
		return m.FeesToPay
	}
	return ""
}

func (m *QueryDepositPreviewResponse) GetNetAmount() string {
	if m != nil {
		return m.NetAmount
	}
	return ""
}

func (m *QueryDepositPreviewResponse) GetSharePrice() string {
	if m != nil {
		return m.SharePrice
	}
	return ""
}

func (m *QueryDepositPreviewResponse) GetFeeRateBps() int32 {
	if m != nil {
		return m.FeeRateBps
	}
	return 0
}

// QueryWithdrawalPreviewRequest requests a withdrawal preview
type QueryWithdrawalPreviewRequest struct {
	VaultType vaults.VaultType `protobuf:"varint,1,opt,name=vault_type,json=vaultType,proto3,enum=noble.dollar.vaults.v1.VaultType" json:"vault_type,omitempty"`
	Shares    string           `protobuf:"bytes,2,opt,name=shares,proto3" json:"shares,omitempty"`
}

func (m *QueryWithdrawalPreviewRequest) Reset()         { *m = QueryWithdrawalPreviewRequest{} }
func (m *QueryWithdrawalPreviewRequest) String() string { return proto.CompactTextString(m) }
func (*QueryWithdrawalPreviewRequest) ProtoMessage()    {}
func (*QueryWithdrawalPreviewRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9037e95a7381a4ea, []int{15}
}
func (m *QueryWithdrawalPreviewRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryWithdrawalPreviewRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryWithdrawalPreviewRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryWithdrawalPreviewRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryWithdrawalPreviewRequest.Merge(m, src)
}
func (m *QueryWithdrawalPreviewRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryWithdrawalPreviewRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryWithdrawalPreviewRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryWithdrawalPreviewRequest proto.InternalMessageInfo

func (m *QueryWithdrawalPreviewRequest) GetVaultType() vaults.VaultType {
	if m != nil {
		return m.VaultType
	}
	return vaults.UNSPECIFIED
}

func (m *QueryWithdrawalPreviewRequest) GetShares() string {
	if m != nil {
		return m.Shares
	}
	return ""
}

// QueryWithdrawalPreviewResponse returns withdrawal preview information
type QueryWithdrawalPreviewResponse struct {
	AmountToReceive string `protobuf:"bytes,1,opt,name=amount_to_receive,json=amountToReceive,proto3" json:"amount_to_receive,omitempty"`
	FeesToPay       string `protobuf:"bytes,2,opt,name=fees_to_pay,json=feesToPay,proto3" json:"fees_to_pay,omitempty"`
	GrossAmount     string `protobuf:"bytes,3,opt,name=gross_amount,json=grossAmount,proto3" json:"gross_amount,omitempty"`
	SharePrice      string `protobuf:"bytes,4,opt,name=share_price,json=sharePrice,proto3" json:"share_price,omitempty"`
	FeeRateBps      int32  `protobuf:"varint,5,opt,name=fee_rate_bps,json=feeRateBps,proto3" json:"fee_rate_bps,omitempty"`
}

func (m *QueryWithdrawalPreviewResponse) Reset()         { *m = QueryWithdrawalPreviewResponse{} }
func (m *QueryWithdrawalPreviewResponse) String() string { return proto.CompactTextString(m) }
func (*QueryWithdrawalPreviewResponse) ProtoMessage()    {}
func (*QueryWithdrawalPreviewResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9037e95a7381a4ea, []int{16}
}
func (m *QueryWithdrawalPreviewResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryWithdrawalPreviewResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryWithdrawalPreviewResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryWithdrawalPreviewResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryWithdrawalPreviewResponse.Merge(m, src)
}
func (m *QueryWithdrawalPreviewResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryWithdrawalPreviewResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryWithdrawalPreviewResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryWithdrawalPreviewResponse proto.InternalMessageInfo

func (m *QueryWithdrawalPreviewResponse) GetAmountToReceive() string {
	if m != nil {
		return m.AmountToReceive
	}
	return ""
}

func (m *QueryWithdrawalPreviewResponse) GetFeesToPay() string {
	if m != nil {
		return m.FeesToPay
	}
	return ""
}

func (m *QueryWithdrawalPreviewResponse) GetGrossAmount() string {
	if m != nil {
		return m.GrossAmount
	}
	return ""
}

func (m *QueryWithdrawalPreviewResponse) GetSharePrice() string {
	if m != nil {
		return m.SharePrice
	}
	return ""
}

func (m *QueryWithdrawalPreviewResponse) GetFeeRateBps() int32 {
	if m != nil {
		return m.FeeRateBps
	}
	return 0
}

// QueryExitQueueRequest requests the exit queue for a vault
type QueryExitQueueRequest struct {
	VaultType  vaults.VaultType   `protobuf:"varint,1,opt,name=vault_type,json=vaultType,proto3,enum=noble.dollar.vaults.v1.VaultType" json:"vault_type,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryExitQueueRequest) Reset()         { *m = QueryExitQueueRequest{} }
func (m *QueryExitQueueRequest) String() string { return proto.CompactTextString(m) }
func (*QueryExitQueueRequest) ProtoMessage()    {}
func (*QueryExitQueueRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9037e95a7381a4ea, []int{17}
}
func (m *QueryExitQueueRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryExitQueueRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryExitQueueRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryExitQueueRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryExitQueueRequest.Merge(m, src)
}
func (m *QueryExitQueueRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryExitQueueRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryExitQueueRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryExitQueueRequest proto.InternalMessageInfo

func (m *QueryExitQueueRequest) GetVaultType() vaults.VaultType {
	if m != nil {
		return m.VaultType
	}
	return vaults.UNSPECIFIED
}

func (m *QueryExitQueueRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryExitQueueResponse returns the exit queue
type QueryExitQueueResponse struct {
	ExitRequests []ExitRequestWithUser `protobuf:"bytes,1,rep,name=exit_requests,json=exitRequests,proto3" json:"exit_requests"`
	Pagination   *query.PageResponse   `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryExitQueueResponse) Reset()         { *m = QueryExitQueueResponse{} }
func (m *QueryExitQueueResponse) String() string { return proto.CompactTextString(m) }
func (*QueryExitQueueResponse) ProtoMessage()    {}
func (*QueryExitQueueResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9037e95a7381a4ea, []int{18}
}
func (m *QueryExitQueueResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryExitQueueResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryExitQueueResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryExitQueueResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryExitQueueResponse.Merge(m, src)
}
func (m *QueryExitQueueResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryExitQueueResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryExitQueueResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryExitQueueResponse proto.InternalMessageInfo

func (m *QueryExitQueueResponse) GetExitRequests() []ExitRequestWithUser {
	if m != nil {
		return m.ExitRequests
	}
	return nil
}

func (m *QueryExitQueueResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// ExitRequestWithUser includes the user address with the exit request
type ExitRequestWithUser struct {
	User        string      `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	ExitRequest ExitRequest `protobuf:"bytes,2,opt,name=exit_request,json=exitRequest,proto3" json:"exit_request"`
}

func (m *ExitRequestWithUser) Reset()         { *m = ExitRequestWithUser{} }
func (m *ExitRequestWithUser) String() string { return proto.CompactTextString(m) }
func (*ExitRequestWithUser) ProtoMessage()    {}
func (*ExitRequestWithUser) Descriptor() ([]byte, []int) {
	return fileDescriptor_9037e95a7381a4ea, []int{19}
}
func (m *ExitRequestWithUser) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExitRequestWithUser) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExitRequestWithUser.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExitRequestWithUser) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExitRequestWithUser.Merge(m, src)
}
func (m *ExitRequestWithUser) XXX_Size() int {
	return m.Size()
}
func (m *ExitRequestWithUser) XXX_DiscardUnknown() {
	xxx_messageInfo_ExitRequestWithUser.DiscardUnknown(m)
}

var xxx_messageInfo_ExitRequestWithUser proto.InternalMessageInfo

func (m *ExitRequestWithUser) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *ExitRequestWithUser) GetExitRequest() ExitRequest {
	if m != nil {
		return m.ExitRequest
	}
	return ExitRequest{}
}

// QueryUserExitRequestsRequest requests a user's exit requests
type QueryUserExitRequestsRequest struct {
	Address    string             `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryUserExitRequestsRequest) Reset()         { *m = QueryUserExitRequestsRequest{} }
func (m *QueryUserExitRequestsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryUserExitRequestsRequest) ProtoMessage()    {}
func (*QueryUserExitRequestsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9037e95a7381a4ea, []int{20}
}
func (m *QueryUserExitRequestsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryUserExitRequestsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryUserExitRequestsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryUserExitRequestsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryUserExitRequestsRequest.Merge(m, src)
}
func (m *QueryUserExitRequestsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryUserExitRequestsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryUserExitRequestsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryUserExitRequestsRequest proto.InternalMessageInfo

func (m *QueryUserExitRequestsRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *QueryUserExitRequestsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryUserExitRequestsResponse returns a user's exit requests
type QueryUserExitRequestsResponse struct {
	ExitRequests []ExitRequestWithVault `protobuf:"bytes,1,rep,name=exit_requests,json=exitRequests,proto3" json:"exit_requests"`
	Pagination   *query.PageResponse    `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryUserExitRequestsResponse) Reset()         { *m = QueryUserExitRequestsResponse{} }
func (m *QueryUserExitRequestsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryUserExitRequestsResponse) ProtoMessage()    {}
func (*QueryUserExitRequestsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9037e95a7381a4ea, []int{21}
}
func (m *QueryUserExitRequestsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryUserExitRequestsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryUserExitRequestsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryUserExitRequestsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryUserExitRequestsResponse.Merge(m, src)
}
func (m *QueryUserExitRequestsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryUserExitRequestsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryUserExitRequestsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryUserExitRequestsResponse proto.InternalMessageInfo

func (m *QueryUserExitRequestsResponse) GetExitRequests() []ExitRequestWithVault {
	if m != nil {
		return m.ExitRequests
	}
	return nil
}

func (m *QueryUserExitRequestsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// ExitRequestWithVault includes the vault type with the exit request
type ExitRequestWithVault struct {
	VaultType   vaults.VaultType `protobuf:"varint,1,opt,name=vault_type,json=vaultType,proto3,enum=noble.dollar.vaults.v1.VaultType" json:"vault_type,omitempty"`
	ExitRequest ExitRequest      `protobuf:"bytes,2,opt,name=exit_request,json=exitRequest,proto3" json:"exit_request"`
}

func (m *ExitRequestWithVault) Reset()         { *m = ExitRequestWithVault{} }
func (m *ExitRequestWithVault) String() string { return proto.CompactTextString(m) }
func (*ExitRequestWithVault) ProtoMessage()    {}
func (*ExitRequestWithVault) Descriptor() ([]byte, []int) {
	return fileDescriptor_9037e95a7381a4ea, []int{22}
}
func (m *ExitRequestWithVault) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExitRequestWithVault) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExitRequestWithVault.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExitRequestWithVault) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExitRequestWithVault.Merge(m, src)
}
func (m *ExitRequestWithVault) XXX_Size() int {
	return m.Size()
}
func (m *ExitRequestWithVault) XXX_DiscardUnknown() {
	xxx_messageInfo_ExitRequestWithVault.DiscardUnknown(m)
}

var xxx_messageInfo_ExitRequestWithVault proto.InternalMessageInfo

func (m *ExitRequestWithVault) GetVaultType() vaults.VaultType {
	if m != nil {
		return m.VaultType
	}
	return vaults.UNSPECIFIED
}

func (m *ExitRequestWithVault) GetExitRequest() ExitRequest {
	if m != nil {
		return m.ExitRequest
	}
	return ExitRequest{}
}

// QueryFeeInfoRequest requests fee information
type QueryFeeInfoRequest struct {
	VaultType vaults.VaultType `protobuf:"varint,1,opt,name=vault_type,json=vaultType,proto3,enum=noble.dollar.vaults.v1.VaultType" json:"vault_type,omitempty"`
}

func (m *QueryFeeInfoRequest) Reset()         { *m = QueryFeeInfoRequest{} }
func (m *QueryFeeInfoRequest) String() string { return proto.CompactTextString(m) }
func (*QueryFeeInfoRequest) ProtoMessage()    {}
func (*QueryFeeInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9037e95a7381a4ea, []int{23}
}
func (m *QueryFeeInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFeeInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFeeInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFeeInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFeeInfoRequest.Merge(m, src)
}
func (m *QueryFeeInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryFeeInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFeeInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFeeInfoRequest proto.InternalMessageInfo

func (m *QueryFeeInfoRequest) GetVaultType() vaults.VaultType {
	if m != nil {
		return m.VaultType
	}
	return vaults.UNSPECIFIED
}

// QueryFeeInfoResponse returns fee information
type QueryFeeInfoResponse struct {
	FeeConfig FeeConfig `protobuf:"bytes,1,opt,name=fee_config,json=feeConfig,proto3" json:"fee_config"`
}

func (m *QueryFeeInfoResponse) Reset()         { *m = QueryFeeInfoResponse{} }
func (m *QueryFeeInfoResponse) String() string { return proto.CompactTextString(m) }
func (*QueryFeeInfoResponse) ProtoMessage()    {}
func (*QueryFeeInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9037e95a7381a4ea, []int{24}
}
func (m *QueryFeeInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFeeInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFeeInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFeeInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFeeInfoResponse.Merge(m, src)
}
func (m *QueryFeeInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryFeeInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFeeInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFeeInfoResponse proto.InternalMessageInfo

func (m *QueryFeeInfoResponse) GetFeeConfig() FeeConfig {
	if m != nil {
		return m.FeeConfig
	}
	return FeeConfig{}
}

// QueryStatsRequest requests statistics for a vault
type QueryStatsRequest struct {
	VaultType vaults.VaultType `protobuf:"varint,1,opt,name=vault_type,json=vaultType,proto3,enum=noble.dollar.vaults.v1.VaultType" json:"vault_type,omitempty"`
}

func (m *QueryStatsRequest) Reset()         { *m = QueryStatsRequest{} }
func (m *QueryStatsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryStatsRequest) ProtoMessage()    {}
func (*QueryStatsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9037e95a7381a4ea, []int{25}
}
func (m *QueryStatsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStatsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStatsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStatsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStatsRequest.Merge(m, src)
}
func (m *QueryStatsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryStatsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStatsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStatsRequest proto.InternalMessageInfo

func (m *QueryStatsRequest) GetVaultType() vaults.VaultType {
	if m != nil {
		return m.VaultType
	}
	return vaults.UNSPECIFIED
}

// QueryStatsResponse returns vault statistics
type QueryStatsResponse struct {
	Stats VaultStatsEntry `protobuf:"bytes,1,opt,name=stats,proto3" json:"stats"`
}

func (m *QueryStatsResponse) Reset()         { *m = QueryStatsResponse{} }
func (m *QueryStatsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryStatsResponse) ProtoMessage()    {}
func (*QueryStatsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9037e95a7381a4ea, []int{26}
}
func (m *QueryStatsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStatsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStatsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStatsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStatsResponse.Merge(m, src)
}
func (m *QueryStatsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryStatsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStatsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStatsResponse proto.InternalMessageInfo

func (m *QueryStatsResponse) GetStats() VaultStatsEntry {
	if m != nil {
		return m.Stats
	}
	return VaultStatsEntry{}
}

// QueryAllStatsRequest requests statistics for all vaults
type QueryAllStatsRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllStatsRequest) Reset()         { *m = QueryAllStatsRequest{} }
func (m *QueryAllStatsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllStatsRequest) ProtoMessage()    {}
func (*QueryAllStatsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9037e95a7381a4ea, []int{27}
}
func (m *QueryAllStatsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllStatsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllStatsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllStatsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllStatsRequest.Merge(m, src)
}
func (m *QueryAllStatsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllStatsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllStatsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllStatsRequest proto.InternalMessageInfo

func (m *QueryAllStatsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryAllStatsResponse returns statistics for all vaults
type QueryAllStatsResponse struct {
	Stats      []VaultStatsEntry   `protobuf:"bytes,1,rep,name=stats,proto3" json:"stats"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllStatsResponse) Reset()         { *m = QueryAllStatsResponse{} }
func (m *QueryAllStatsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllStatsResponse) ProtoMessage()    {}
func (*QueryAllStatsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9037e95a7381a4ea, []int{28}
}
func (m *QueryAllStatsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllStatsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllStatsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllStatsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllStatsResponse.Merge(m, src)
}
func (m *QueryAllStatsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllStatsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllStatsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllStatsResponse proto.InternalMessageInfo

func (m *QueryAllStatsResponse) GetStats() []VaultStatsEntry {
	if m != nil {
		return m.Stats
	}
	return nil
}

func (m *QueryAllStatsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryParamsRequest requests module parameters
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9037e95a7381a4ea, []int{29}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse returns module parameters
type QueryParamsResponse struct {
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9037e95a7381a4ea, []int{30}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// QueryCrossChainRoutesRequest requests all cross-chain routes
type QueryCrossChainRoutesRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryCrossChainRoutesRequest) Reset()         { *m = QueryCrossChainRoutesRequest{} }
func (m *QueryCrossChainRoutesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryCrossChainRoutesRequest) ProtoMessage()    {}
func (*QueryCrossChainRoutesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9037e95a7381a4ea, []int{31}
}
func (m *QueryCrossChainRoutesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCrossChainRoutesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCrossChainRoutesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCrossChainRoutesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCrossChainRoutesRequest.Merge(m, src)
}
func (m *QueryCrossChainRoutesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryCrossChainRoutesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCrossChainRoutesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCrossChainRoutesRequest proto.InternalMessageInfo

func (m *QueryCrossChainRoutesRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryCrossChainRoutesResponse returns all cross-chain routes
type QueryCrossChainRoutesResponse struct {
	Routes     []CrossChainRoute   `protobuf:"bytes,1,rep,name=routes,proto3" json:"routes"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryCrossChainRoutesResponse) Reset()         { *m = QueryCrossChainRoutesResponse{} }
func (m *QueryCrossChainRoutesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryCrossChainRoutesResponse) ProtoMessage()    {}
func (*QueryCrossChainRoutesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9037e95a7381a4ea, []int{32}
}
func (m *QueryCrossChainRoutesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCrossChainRoutesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCrossChainRoutesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCrossChainRoutesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCrossChainRoutesResponse.Merge(m, src)
}
func (m *QueryCrossChainRoutesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryCrossChainRoutesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCrossChainRoutesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCrossChainRoutesResponse proto.InternalMessageInfo

func (m *QueryCrossChainRoutesResponse) GetRoutes() []CrossChainRoute {
	if m != nil {
		return m.Routes
	}
	return nil
}

func (m *QueryCrossChainRoutesResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryCrossChainRouteRequest requests a specific cross-chain route
type QueryCrossChainRouteRequest struct {
	RouteId string `protobuf:"bytes,1,opt,name=route_id,json=routeId,proto3" json:"route_id,omitempty"`
}

func (m *QueryCrossChainRouteRequest) Reset()         { *m = QueryCrossChainRouteRequest{} }
func (m *QueryCrossChainRouteRequest) String() string { return proto.CompactTextString(m) }
func (*QueryCrossChainRouteRequest) ProtoMessage()    {}
func (*QueryCrossChainRouteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9037e95a7381a4ea, []int{33}
}
func (m *QueryCrossChainRouteRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCrossChainRouteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCrossChainRouteRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCrossChainRouteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCrossChainRouteRequest.Merge(m, src)
}
func (m *QueryCrossChainRouteRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryCrossChainRouteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCrossChainRouteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCrossChainRouteRequest proto.InternalMessageInfo

func (m *QueryCrossChainRouteRequest) GetRouteId() string {
	if m != nil {
		return m.RouteId
	}
	return ""
}

// QueryCrossChainRouteResponse returns a specific cross-chain route
type QueryCrossChainRouteResponse struct {
	Route CrossChainRoute `protobuf:"bytes,1,opt,name=route,proto3" json:"route"`
}

func (m *QueryCrossChainRouteResponse) Reset()         { *m = QueryCrossChainRouteResponse{} }
func (m *QueryCrossChainRouteResponse) String() string { return proto.CompactTextString(m) }
func (*QueryCrossChainRouteResponse) ProtoMessage()    {}
func (*QueryCrossChainRouteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9037e95a7381a4ea, []int{34}
}
func (m *QueryCrossChainRouteResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCrossChainRouteResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCrossChainRouteResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCrossChainRouteResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCrossChainRouteResponse.Merge(m, src)
}
func (m *QueryCrossChainRouteResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryCrossChainRouteResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCrossChainRouteResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCrossChainRouteResponse proto.InternalMessageInfo

func (m *QueryCrossChainRouteResponse) GetRoute() CrossChainRoute {
	if m != nil {
		return m.Route
	}
	return CrossChainRoute{}
}

// QueryRemotePositionRequest requests a user's remote position on a route
type QueryRemotePositionRequest struct {
	RouteId string `protobuf:"bytes,1,opt,name=route_id,json=routeId,proto3" json:"route_id,omitempty"`
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryRemotePositionRequest) Reset()         { *m = QueryRemotePositionRequest{} }
func (m *QueryRemotePositionRequest) String() string { return proto.CompactTextString(m) }
func (*QueryRemotePositionRequest) ProtoMessage()    {}
func (*QueryRemotePositionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9037e95a7381a4ea, []int{35}
}
func (m *QueryRemotePositionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRemotePositionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRemotePositionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRemotePositionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRemotePositionRequest.Merge(m, src)
}
func (m *QueryRemotePositionRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryRemotePositionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRemotePositionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRemotePositionRequest proto.InternalMessageInfo

func (m *QueryRemotePositionRequest) GetRouteId() string {
	if m != nil {
		return m.RouteId
	}
	return ""
}

func (m *QueryRemotePositionRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

// QueryRemotePositionResponse returns a user's remote position
type QueryRemotePositionResponse struct {
	Position RemotePosition `protobuf:"bytes,1,opt,name=position,proto3" json:"position"`
}

func (m *QueryRemotePositionResponse) Reset()         { *m = QueryRemotePositionResponse{} }
func (m *QueryRemotePositionResponse) String() string { return proto.CompactTextString(m) }
func (*QueryRemotePositionResponse) ProtoMessage()    {}
func (*QueryRemotePositionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9037e95a7381a4ea, []int{36}
}
func (m *QueryRemotePositionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRemotePositionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRemotePositionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRemotePositionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRemotePositionResponse.Merge(m, src)
}
func (m *QueryRemotePositionResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryRemotePositionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRemotePositionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRemotePositionResponse proto.InternalMessageInfo

func (m *QueryRemotePositionResponse) GetPosition() RemotePosition {
	if m != nil {
		return m.Position
	}
	return RemotePosition{}
}

// QueryRemotePositionsRequest requests all remote positions for a user
type QueryRemotePositionsRequest struct {
	Address    string             `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryRemotePositionsRequest) Reset()         { *m = QueryRemotePositionsRequest{} }
func (m *QueryRemotePositionsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryRemotePositionsRequest) ProtoMessage()    {}
func (*QueryRemotePositionsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9037e95a7381a4ea, []int{37}
}
func (m *QueryRemotePositionsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRemotePositionsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRemotePositionsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRemotePositionsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRemotePositionsRequest.Merge(m, src)
}
func (m *QueryRemotePositionsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryRemotePositionsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRemotePositionsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRemotePositionsRequest proto.InternalMessageInfo

func (m *QueryRemotePositionsRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *QueryRemotePositionsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryRemotePositionsResponse returns all remote positions for a user
type QueryRemotePositionsResponse struct {
	Positions  []RemotePositionWithRoute `protobuf:"bytes,1,rep,name=positions,proto3" json:"positions"`
	Pagination *query.PageResponse       `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryRemotePositionsResponse) Reset()         { *m = QueryRemotePositionsResponse{} }
func (m *QueryRemotePositionsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryRemotePositionsResponse) ProtoMessage()    {}
func (*QueryRemotePositionsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9037e95a7381a4ea, []int{38}
}
func (m *QueryRemotePositionsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRemotePositionsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRemotePositionsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRemotePositionsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRemotePositionsResponse.Merge(m, src)
}
func (m *QueryRemotePositionsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryRemotePositionsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRemotePositionsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRemotePositionsResponse proto.InternalMessageInfo

func (m *QueryRemotePositionsResponse) GetPositions() []RemotePositionWithRoute {
	if m != nil {
		return m.Positions
	}
	return nil
}

func (m *QueryRemotePositionsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// RemotePositionWithRoute includes the route ID with the position
type RemotePositionWithRoute struct {
	RouteId  string         `protobuf:"bytes,1,opt,name=route_id,json=routeId,proto3" json:"route_id,omitempty"`
	Position RemotePosition `protobuf:"bytes,2,opt,name=position,proto3" json:"position"`
}

func (m *RemotePositionWithRoute) Reset()         { *m = RemotePositionWithRoute{} }
func (m *RemotePositionWithRoute) String() string { return proto.CompactTextString(m) }
func (*RemotePositionWithRoute) ProtoMessage()    {}
func (*RemotePositionWithRoute) Descriptor() ([]byte, []int) {
	return fileDescriptor_9037e95a7381a4ea, []int{39}
}
func (m *RemotePositionWithRoute) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemotePositionWithRoute) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemotePositionWithRoute.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RemotePositionWithRoute) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemotePositionWithRoute.Merge(m, src)
}
func (m *RemotePositionWithRoute) XXX_Size() int {
	return m.Size()
}
func (m *RemotePositionWithRoute) XXX_DiscardUnknown() {
	xxx_messageInfo_RemotePositionWithRoute.DiscardUnknown(m)
}

var xxx_messageInfo_RemotePositionWithRoute proto.InternalMessageInfo

func (m *RemotePositionWithRoute) GetRouteId() string {
	if m != nil {
		return m.RouteId
	}
	return ""
}

func (m *RemotePositionWithRoute) GetPosition() RemotePosition {
	if m != nil {
		return m.Position
	}
	return RemotePosition{}
}

// QueryInFlightPositionRequest requests an in-flight operation
type QueryInFlightPositionRequest struct {
	Nonce uint64 `protobuf:"varint,1,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (m *QueryInFlightPositionRequest) Reset()         { *m = QueryInFlightPositionRequest{} }
func (m *QueryInFlightPositionRequest) String() string { return proto.CompactTextString(m) }
func (*QueryInFlightPositionRequest) ProtoMessage()    {}
func (*QueryInFlightPositionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9037e95a7381a4ea, []int{40}
}
func (m *QueryInFlightPositionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryInFlightPositionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryInFlightPositionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryInFlightPositionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryInFlightPositionRequest.Merge(m, src)
}
func (m *QueryInFlightPositionRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryInFlightPositionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryInFlightPositionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryInFlightPositionRequest proto.InternalMessageInfo

func (m *QueryInFlightPositionRequest) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

// QueryInFlightPositionResponse returns an in-flight operation
type QueryInFlightPositionResponse struct {
	Position InFlightPosition `protobuf:"bytes,1,opt,name=position,proto3" json:"position"`
}

func (m *QueryInFlightPositionResponse) Reset()         { *m = QueryInFlightPositionResponse{} }
func (m *QueryInFlightPositionResponse) String() string { return proto.CompactTextString(m) }
func (*QueryInFlightPositionResponse) ProtoMessage()    {}
func (*QueryInFlightPositionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9037e95a7381a4ea, []int{41}
}
func (m *QueryInFlightPositionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryInFlightPositionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryInFlightPositionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryInFlightPositionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryInFlightPositionResponse.Merge(m, src)
}
func (m *QueryInFlightPositionResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryInFlightPositionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryInFlightPositionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryInFlightPositionResponse proto.InternalMessageInfo

func (m *QueryInFlightPositionResponse) GetPosition() InFlightPosition {
	if m != nil {
		return m.Position
	}
	return InFlightPosition{}
}

// QueryInFlightPositionsRequest requests all in-flight operations for a user
type QueryInFlightPositionsRequest struct {
	Address    string             `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryInFlightPositionsRequest) Reset()         { *m = QueryInFlightPositionsRequest{} }
func (m *QueryInFlightPositionsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryInFlightPositionsRequest) ProtoMessage()    {}
func (*QueryInFlightPositionsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9037e95a7381a4ea, []int{42}
}
func (m *QueryInFlightPositionsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryInFlightPositionsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryInFlightPositionsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryInFlightPositionsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryInFlightPositionsRequest.Merge(m, src)
}
func (m *QueryInFlightPositionsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryInFlightPositionsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryInFlightPositionsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryInFlightPositionsRequest proto.InternalMessageInfo

func (m *QueryInFlightPositionsRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *QueryInFlightPositionsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryInFlightPositionsResponse returns all in-flight operations for a user
type QueryInFlightPositionsResponse struct {
	Positions  []InFlightPosition  `protobuf:"bytes,1,rep,name=positions,proto3" json:"positions"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryInFlightPositionsResponse) Reset()         { *m = QueryInFlightPositionsResponse{} }
func (m *QueryInFlightPositionsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryInFlightPositionsResponse) ProtoMessage()    {}
func (*QueryInFlightPositionsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9037e95a7381a4ea, []int{43}
}
func (m *QueryInFlightPositionsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryInFlightPositionsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryInFlightPositionsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryInFlightPositionsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryInFlightPositionsResponse.Merge(m, src)
}
func (m *QueryInFlightPositionsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryInFlightPositionsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryInFlightPositionsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryInFlightPositionsResponse proto.InternalMessageInfo

func (m *QueryInFlightPositionsResponse) GetPositions() []InFlightPosition {
	if m != nil {
		return m.Positions
	}
	return nil
}

func (m *QueryInFlightPositionsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryCrossChainSnapshotRequest requests cross-chain snapshot for a vault
type QueryCrossChainSnapshotRequest struct {
	VaultType vaults.VaultType `protobuf:"varint,1,opt,name=vault_type,json=vaultType,proto3,enum=noble.dollar.vaults.v1.VaultType" json:"vault_type,omitempty"`
	Timestamp int64            `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (m *QueryCrossChainSnapshotRequest) Reset()         { *m = QueryCrossChainSnapshotRequest{} }
func (m *QueryCrossChainSnapshotRequest) String() string { return proto.CompactTextString(m) }
func (*QueryCrossChainSnapshotRequest) ProtoMessage()    {}
func (*QueryCrossChainSnapshotRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9037e95a7381a4ea, []int{44}
}
func (m *QueryCrossChainSnapshotRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCrossChainSnapshotRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCrossChainSnapshotRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCrossChainSnapshotRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCrossChainSnapshotRequest.Merge(m, src)
}
func (m *QueryCrossChainSnapshotRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryCrossChainSnapshotRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCrossChainSnapshotRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCrossChainSnapshotRequest proto.InternalMessageInfo

func (m *QueryCrossChainSnapshotRequest) GetVaultType() vaults.VaultType {
	if m != nil {
		return m.VaultType
	}
	return vaults.UNSPECIFIED
}

func (m *QueryCrossChainSnapshotRequest) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

// QueryCrossChainSnapshotResponse returns cross-chain snapshot
type QueryCrossChainSnapshotResponse struct {
	Snapshot CrossChainPositionSnapshot `protobuf:"bytes,1,opt,name=snapshot,proto3" json:"snapshot"`
}

func (m *QueryCrossChainSnapshotResponse) Reset()         { *m = QueryCrossChainSnapshotResponse{} }
func (m *QueryCrossChainSnapshotResponse) String() string { return proto.CompactTextString(m) }
func (*QueryCrossChainSnapshotResponse) ProtoMessage()    {}
func (*QueryCrossChainSnapshotResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9037e95a7381a4ea, []int{45}
}
func (m *QueryCrossChainSnapshotResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCrossChainSnapshotResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCrossChainSnapshotResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCrossChainSnapshotResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCrossChainSnapshotResponse.Merge(m, src)
}
func (m *QueryCrossChainSnapshotResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryCrossChainSnapshotResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCrossChainSnapshotResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCrossChainSnapshotResponse proto.InternalMessageInfo

func (m *QueryCrossChainSnapshotResponse) GetSnapshot() CrossChainPositionSnapshot {
	if m != nil {
		return m.Snapshot
	}
	return CrossChainPositionSnapshot{}
}

// QueryDriftAlertsRequest requests drift alerts
type QueryDriftAlertsRequest struct {
	RouteId    string             `protobuf:"bytes,1,opt,name=route_id,json=routeId,proto3" json:"route_id,omitempty"`
	Address    string             `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryDriftAlertsRequest) Reset()         { *m = QueryDriftAlertsRequest{} }
func (m *QueryDriftAlertsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDriftAlertsRequest) ProtoMessage()    {}
func (*QueryDriftAlertsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9037e95a7381a4ea, []int{46}
}
func (m *QueryDriftAlertsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDriftAlertsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDriftAlertsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDriftAlertsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDriftAlertsRequest.Merge(m, src)
}
func (m *QueryDriftAlertsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDriftAlertsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDriftAlertsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDriftAlertsRequest proto.InternalMessageInfo

func (m *QueryDriftAlertsRequest) GetRouteId() string {
	if m != nil {
		return m.RouteId
	}
	return ""
}

func (m *QueryDriftAlertsRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *QueryDriftAlertsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryDriftAlertsResponse returns drift alerts
type QueryDriftAlertsResponse struct {
	Alerts     []DriftAlertWithDetails `protobuf:"bytes,1,rep,name=alerts,proto3" json:"alerts"`
	Pagination *query.PageResponse     `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryDriftAlertsResponse) Reset()         { *m = QueryDriftAlertsResponse{} }
func (m *QueryDriftAlertsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDriftAlertsResponse) ProtoMessage()    {}
func (*QueryDriftAlertsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9037e95a7381a4ea, []int{47}
}
func (m *QueryDriftAlertsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDriftAlertsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDriftAlertsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDriftAlertsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDriftAlertsResponse.Merge(m, src)
}
func (m *QueryDriftAlertsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDriftAlertsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDriftAlertsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDriftAlertsResponse proto.InternalMessageInfo

func (m *QueryDriftAlertsResponse) GetAlerts() []DriftAlertWithDetails {
	if m != nil {
		return m.Alerts
	}
	return nil
}

func (m *QueryDriftAlertsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// DriftAlertWithDetails includes additional context with the alert
type DriftAlertWithDetails struct {
	Alert    DriftAlert      `protobuf:"bytes,1,opt,name=alert,proto3" json:"alert"`
	Route    CrossChainRoute `protobuf:"bytes,2,opt,name=route,proto3" json:"route"`
	Position RemotePosition  `protobuf:"bytes,3,opt,name=position,proto3" json:"position"`
}

func (m *DriftAlertWithDetails) Reset()         { *m = DriftAlertWithDetails{} }
func (m *DriftAlertWithDetails) String() string { return proto.CompactTextString(m) }
func (*DriftAlertWithDetails) ProtoMessage()    {}
func (*DriftAlertWithDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor_9037e95a7381a4ea, []int{48}
}
func (m *DriftAlertWithDetails) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DriftAlertWithDetails) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DriftAlertWithDetails.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DriftAlertWithDetails) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DriftAlertWithDetails.Merge(m, src)
}
func (m *DriftAlertWithDetails) XXX_Size() int {
	return m.Size()
}
func (m *DriftAlertWithDetails) XXX_DiscardUnknown() {
	xxx_messageInfo_DriftAlertWithDetails.DiscardUnknown(m)
}

var xxx_messageInfo_DriftAlertWithDetails proto.InternalMessageInfo

func (m *DriftAlertWithDetails) GetAlert() DriftAlert {
	if m != nil {
		return m.Alert
	}
	return DriftAlert{}
}

func (m *DriftAlertWithDetails) GetRoute() CrossChainRoute {
	if m != nil {
		return m.Route
	}
	return CrossChainRoute{}
}

func (m *DriftAlertWithDetails) GetPosition() RemotePosition {
	if m != nil {
		return m.Position
	}
	return RemotePosition{}
}

func init() {
	proto.RegisterType((*QueryVaultInfoRequest)(nil), "noble.dollar.vaults.v2.QueryVaultInfoRequest")
	proto.RegisterType((*QueryVaultInfoResponse)(nil), "noble.dollar.vaults.v2.QueryVaultInfoResponse")
	proto.RegisterType((*QueryAllVaultsRequest)(nil), "noble.dollar.vaults.v2.QueryAllVaultsRequest")
	proto.RegisterType((*QueryAllVaultsResponse)(nil), "noble.dollar.vaults.v2.QueryAllVaultsResponse")
	proto.RegisterType((*QueryUserPositionRequest)(nil), "noble.dollar.vaults.v2.QueryUserPositionRequest")
	proto.RegisterType((*QueryUserPositionResponse)(nil), "noble.dollar.vaults.v2.QueryUserPositionResponse")
	proto.RegisterType((*QueryUserPositionsRequest)(nil), "noble.dollar.vaults.v2.QueryUserPositionsRequest")
	proto.RegisterType((*QueryUserPositionsResponse)(nil), "noble.dollar.vaults.v2.QueryUserPositionsResponse")
	proto.RegisterType((*UserPositionWithVault)(nil), "noble.dollar.vaults.v2.UserPositionWithVault")
	proto.RegisterType((*QuerySharePriceRequest)(nil), "noble.dollar.vaults.v2.QuerySharePriceRequest")
	proto.RegisterType((*QuerySharePriceResponse)(nil), "noble.dollar.vaults.v2.QuerySharePriceResponse")
	proto.RegisterType((*QueryNAVInfoRequest)(nil), "noble.dollar.vaults.v2.QueryNAVInfoRequest")
	proto.RegisterType((*QueryNAVInfoResponse)(nil), "noble.dollar.vaults.v2.QueryNAVInfoResponse")
	proto.RegisterType((*QueryDepositPreviewRequest)(nil), "noble.dollar.vaults.v2.QueryDepositPreviewRequest")
	proto.RegisterType((*QueryDepositPreviewResponse)(nil), "noble.dollar.vaults.v2.QueryDepositPreviewResponse")
	proto.RegisterType((*QueryWithdrawalPreviewRequest)(nil), "noble.dollar.vaults.v2.QueryWithdrawalPreviewRequest")
	proto.RegisterType((*QueryWithdrawalPreviewResponse)(nil), "noble.dollar.vaults.v2.QueryWithdrawalPreviewResponse")
	proto.RegisterType((*QueryExitQueueRequest)(nil), "noble.dollar.vaults.v2.QueryExitQueueRequest")
	proto.RegisterType((*QueryExitQueueResponse)(nil), "noble.dollar.vaults.v2.QueryExitQueueResponse")
	proto.RegisterType((*ExitRequestWithUser)(nil), "noble.dollar.vaults.v2.ExitRequestWithUser")
	proto.RegisterType((*QueryUserExitRequestsRequest)(nil), "noble.dollar.vaults.v2.QueryUserExitRequestsRequest")
	proto.RegisterType((*QueryUserExitRequestsResponse)(nil), "noble.dollar.vaults.v2.QueryUserExitRequestsResponse")
	proto.RegisterType((*ExitRequestWithVault)(nil), "noble.dollar.vaults.v2.ExitRequestWithVault")
	proto.RegisterType((*QueryFeeInfoRequest)(nil), "noble.dollar.vaults.v2.QueryFeeInfoRequest")
	proto.RegisterType((*QueryFeeInfoResponse)(nil), "noble.dollar.vaults.v2.QueryFeeInfoResponse")
	proto.RegisterType((*QueryStatsRequest)(nil), "noble.dollar.vaults.v2.QueryStatsRequest")
	proto.RegisterType((*QueryStatsResponse)(nil), "noble.dollar.vaults.v2.QueryStatsResponse")
	proto.RegisterType((*QueryAllStatsRequest)(nil), "noble.dollar.vaults.v2.QueryAllStatsRequest")
	proto.RegisterType((*QueryAllStatsResponse)(nil), "noble.dollar.vaults.v2.QueryAllStatsResponse")
	proto.RegisterType((*QueryParamsRequest)(nil), "noble.dollar.vaults.v2.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "noble.dollar.vaults.v2.QueryParamsResponse")
	proto.RegisterType((*QueryCrossChainRoutesRequest)(nil), "noble.dollar.vaults.v2.QueryCrossChainRoutesRequest")
	proto.RegisterType((*QueryCrossChainRoutesResponse)(nil), "noble.dollar.vaults.v2.QueryCrossChainRoutesResponse")
	proto.RegisterType((*QueryCrossChainRouteRequest)(nil), "noble.dollar.vaults.v2.QueryCrossChainRouteRequest")
	proto.RegisterType((*QueryCrossChainRouteResponse)(nil), "noble.dollar.vaults.v2.QueryCrossChainRouteResponse")
	proto.RegisterType((*QueryRemotePositionRequest)(nil), "noble.dollar.vaults.v2.QueryRemotePositionRequest")
	proto.RegisterType((*QueryRemotePositionResponse)(nil), "noble.dollar.vaults.v2.QueryRemotePositionResponse")
	proto.RegisterType((*QueryRemotePositionsRequest)(nil), "noble.dollar.vaults.v2.QueryRemotePositionsRequest")
	proto.RegisterType((*QueryRemotePositionsResponse)(nil), "noble.dollar.vaults.v2.QueryRemotePositionsResponse")
	proto.RegisterType((*RemotePositionWithRoute)(nil), "noble.dollar.vaults.v2.RemotePositionWithRoute")
	proto.RegisterType((*QueryInFlightPositionRequest)(nil), "noble.dollar.vaults.v2.QueryInFlightPositionRequest")
	proto.RegisterType((*QueryInFlightPositionResponse)(nil), "noble.dollar.vaults.v2.QueryInFlightPositionResponse")
	proto.RegisterType((*QueryInFlightPositionsRequest)(nil), "noble.dollar.vaults.v2.QueryInFlightPositionsRequest")
	proto.RegisterType((*QueryInFlightPositionsResponse)(nil), "noble.dollar.vaults.v2.QueryInFlightPositionsResponse")
	proto.RegisterType((*QueryCrossChainSnapshotRequest)(nil), "noble.dollar.vaults.v2.QueryCrossChainSnapshotRequest")
	proto.RegisterType((*QueryCrossChainSnapshotResponse)(nil), "noble.dollar.vaults.v2.QueryCrossChainSnapshotResponse")
	proto.RegisterType((*QueryDriftAlertsRequest)(nil), "noble.dollar.vaults.v2.QueryDriftAlertsRequest")
	proto.RegisterType((*QueryDriftAlertsResponse)(nil), "noble.dollar.vaults.v2.QueryDriftAlertsResponse")
	proto.RegisterType((*DriftAlertWithDetails)(nil), "noble.dollar.vaults.v2.DriftAlertWithDetails")
}

func init() {
	proto.RegisterFile("noble/dollar/vaults/v2/query.proto", fileDescriptor_9037e95a7381a4ea)
}

var fileDescriptor_9037e95a7381a4ea = []byte{
	// 2317 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x5a, 0xdd, 0x6f, 0x1c, 0x57,
	0x15, 0xcf, 0xf5, 0xf7, 0x1e, 0x3b, 0x71, 0x7c, 0xeb, 0xa4, 0xce, 0x36, 0x59, 0xdb, 0xe3, 0x92,
	0x3a, 0xfe, 0xd8, 0x89, 0xd7, 0x69, 0x12, 0x4a, 0x3f, 0x62, 0x27, 0x31, 0x09, 0x54, 0x95, 0xb3,
	0x4e, 0x13, 0xd2, 0x07, 0x56, 0x63, 0xef, 0xdd, 0xf5, 0xa8, 0xeb, 0x99, 0xcd, 0xcc, 0xec, 0x26,
	0x1b, 0xcb, 0x08, 0xf1, 0x86, 0x90, 0x50, 0x01, 0x89, 0x0a, 0x90, 0x90, 0x0a, 0x82, 0x17, 0x84,
	0xa8, 0x50, 0x25, 0x5a, 0xa9, 0x0f, 0x20, 0xa4, 0x52, 0x09, 0x1e, 0xaa, 0xf0, 0xc2, 0x13, 0x42,
	0x09, 0x82, 0x7f, 0xa3, 0x9a, 0x7b, 0xcf, 0xec, 0xce, 0xe7, 0xce, 0xac, 0xbd, 0x96, 0xf2, 0x62,
	0xed, 0xdc, 0x39, 0xe7, 0x9e, 0xdf, 0xf9, 0xb8, 0xe7, 0x9e, 0x33, 0xc7, 0x20, 0x69, 0xfa, 0x66,
	0x85, 0xc9, 0x45, 0xbd, 0x52, 0x51, 0x0c, 0xb9, 0xae, 0xd4, 0x2a, 0x96, 0x29, 0xd7, 0x73, 0xf2,
	0xfd, 0x1a, 0x33, 0x1a, 0xd9, 0xaa, 0xa1, 0x5b, 0x3a, 0x3d, 0xc9, 0x69, 0xb2, 0x82, 0x26, 0x2b,
	0x68, 0xb2, 0xf5, 0x5c, 0x7a, 0x4c, 0xd9, 0x51, 0x35, 0x5d, 0xe6, 0x7f, 0x05, 0x69, 0x7a, 0x6e,
	0x4b, 0x37, 0x77, 0x74, 0x53, 0xde, 0x54, 0x4c, 0x26, 0xf6, 0x90, 0xeb, 0x4b, 0x9b, 0xcc, 0x52,
	0x96, 0xe4, 0xaa, 0x52, 0x56, 0x35, 0xc5, 0x52, 0x75, 0x0d, 0x69, 0x4f, 0x09, 0xda, 0x02, 0x7f,
	0x92, 0xc5, 0x03, 0xbe, 0x1a, 0x2f, 0xeb, 0x65, 0x5d, 0xac, 0xdb, 0xbf, 0x70, 0xf5, 0x74, 0x59,
	0xd7, 0xcb, 0x15, 0x26, 0x2b, 0x55, 0x55, 0x56, 0x34, 0x4d, 0xb7, 0xf8, 0x6e, 0x0e, 0xcf, 0x24,
	0xbe, 0xe5, 0x4f, 0x9b, 0xb5, 0x92, 0x6c, 0xa9, 0x3b, 0xcc, 0xb4, 0x94, 0x9d, 0x2a, 0x12, 0xcc,
	0x84, 0xaa, 0xba, 0x84, 0xbf, 0xda, 0x12, 0xe5, 0xbc, 0x44, 0x53, 0x11, 0x44, 0x9a, 0x52, 0x47,
	0x8a, 0xe9, 0x08, 0x8a, 0x12, 0x63, 0xce, 0x26, 0x2f, 0x46, 0x90, 0x94, 0x99, 0xc6, 0x4c, 0xd5,
	0xa1, 0x9a, 0x8d, 0xa0, 0xda, 0x32, 0x74, 0xd3, 0x2c, 0x6c, 0x6d, 0x2b, 0x2a, 0x9a, 0x53, 0xba,
	0x07, 0x27, 0x6e, 0xd9, 0x06, 0xbf, 0x63, 0xd3, 0xdc, 0xd4, 0x4a, 0x7a, 0x9e, 0xdd, 0xaf, 0x31,
	0xd3, 0xa2, 0x57, 0x00, 0x38, 0x5f, 0xc1, 0x6a, 0x54, 0xd9, 0x04, 0x99, 0x22, 0xb3, 0xc7, 0x72,
	0xd3, 0xd9, 0x50, 0x9f, 0x2e, 0x65, 0x39, 0xf7, 0xed, 0x46, 0x95, 0xe5, 0x53, 0x75, 0xe7, 0xa7,
	0xf4, 0x7f, 0x02, 0x27, 0xfd, 0x7b, 0x9b, 0x55, 0x5d, 0x33, 0x19, 0x5d, 0x81, 0x81, 0x2d, 0x5d,
	0x2b, 0xa9, 0x65, 0xbe, 0xf1, 0x70, 0x6e, 0x26, 0x7c, 0xe3, 0x9c, 0xd8, 0xf8, 0x2a, 0x27, 0x5d,
	0xed, 0xfb, 0xfc, 0xdf, 0x93, 0x47, 0xf2, 0xc8, 0x48, 0xa7, 0x61, 0xc4, 0xd2, 0x2d, 0xa5, 0x52,
	0x30, 0xb7, 0x15, 0x83, 0x99, 0x13, 0x3d, 0x53, 0x64, 0x36, 0x95, 0x1f, 0xe6, 0x6b, 0x1b, 0x7c,
	0x89, 0xbe, 0x00, 0x29, 0x41, 0xa2, 0x29, 0xf5, 0x89, 0x5e, 0xfe, 0x7e, 0x88, 0x2f, 0xbc, 0xa5,
	0xd4, 0xe9, 0x24, 0x0c, 0x73, 0xce, 0x42, 0xd5, 0x50, 0xb7, 0xd8, 0x44, 0x1f, 0x7f, 0x0d, 0x7c,
	0x69, 0xdd, 0x5e, 0xa1, 0xe7, 0xe0, 0xb8, 0xe0, 0x2e, 0xb2, 0xaa, 0x6e, 0xaa, 0x96, 0x6e, 0x98,
	0x13, 0xfd, 0x53, 0x64, 0xb6, 0x2f, 0x3f, 0xca, 0xd7, 0xaf, 0x35, 0x97, 0xa5, 0x02, 0x1a, 0x71,
	0xa5, 0x52, 0xe1, 0x80, 0x4d, 0xc7, 0x88, 0x6b, 0x00, 0xad, 0x00, 0x46, 0x5d, 0xcf, 0x66, 0x31,
	0x68, 0xed, 0x68, 0xcf, 0x8a, 0x13, 0x83, 0xd1, 0x9e, 0x5d, 0x57, 0xca, 0x0c, 0x79, 0xf3, 0x2e,
	0x4e, 0xe9, 0x0f, 0x8e, 0x29, 0x5d, 0x12, 0xd0, 0x94, 0x6f, 0xc2, 0x80, 0x30, 0xd7, 0x04, 0x99,
	0xea, 0x9d, 0x1d, 0xce, 0x65, 0xa3, 0x4c, 0x19, 0xee, 0x0a, 0xc7, 0xaa, 0x82, 0x8e, 0x7e, 0xdd,
	0x03, 0xb8, 0x87, 0x03, 0x7e, 0x29, 0x16, 0xb0, 0xd8, 0xca, 0x83, 0xf8, 0x3d, 0x02, 0x13, 0x5c,
	0xe2, 0xdb, 0x26, 0x33, 0xd6, 0x6d, 0x43, 0xa9, 0xba, 0xe6, 0x98, 0x25, 0x07, 0x83, 0x4a, 0xb1,
	0x68, 0x30, 0xd3, 0xe4, 0x36, 0x49, 0xad, 0x4e, 0x3c, 0xfe, 0x68, 0x71, 0x1c, 0xa5, 0xac, 0x88,
	0x37, 0x1b, 0x96, 0xa1, 0x6a, 0xe5, 0xbc, 0x43, 0xe8, 0x8b, 0xc7, 0x9e, 0x7d, 0xc4, 0xe3, 0xef,
	0x09, 0x9c, 0x0a, 0x81, 0x84, 0x76, 0xbc, 0x02, 0x43, 0x55, 0x5c, 0x43, 0x47, 0xbd, 0x18, 0x65,
	0x49, 0x0f, 0x7f, 0x93, 0x8b, 0xce, 0xc0, 0xd1, 0xad, 0x9a, 0x61, 0x30, 0xcd, 0x2a, 0xd4, 0x95,
	0x4a, 0x8d, 0x61, 0x48, 0x8e, 0xe0, 0xe2, 0x1d, 0x7b, 0xcd, 0x8e, 0xaa, 0x9a, 0x66, 0x30, 0xa5,
	0xa2, 0x3e, 0x62, 0xc5, 0x42, 0x43, 0x65, 0x95, 0x22, 0x86, 0xe6, 0x68, 0x6b, 0xfd, 0x9e, 0xbd,
	0x2c, 0xbd, 0x1f, 0x86, 0xd7, 0x3c, 0x88, 0x0d, 0xd7, 0x42, 0xbc, 0xbb, 0x9f, 0x70, 0xfc, 0x98,
	0x40, 0x3a, 0x0c, 0x19, 0x9a, 0xf2, 0x16, 0xa4, 0x1c, 0xa3, 0x38, 0x51, 0xb9, 0x98, 0xc4, 0x96,
	0x77, 0x55, 0x6b, 0x9b, 0x7b, 0x0e, 0x83, 0xb2, 0xb5, 0x4b, 0xf7, 0xe2, 0xf2, 0x33, 0x02, 0x27,
	0x42, 0x65, 0x1e, 0x3c, 0xe1, 0xd1, 0x35, 0x57, 0x08, 0xf5, 0x24, 0x0f, 0x21, 0xd4, 0xb6, 0x4d,
	0x20, 0xf5, 0x06, 0x03, 0x49, 0x7a, 0x07, 0x33, 0xc2, 0x46, 0x33, 0x63, 0x75, 0x2f, 0x73, 0x3f,
	0x82, 0xe7, 0x03, 0x7b, 0xa3, 0x6f, 0x7d, 0x69, 0x93, 0x04, 0xd2, 0xe6, 0x01, 0xf3, 0xb2, 0x74,
	0x17, 0x9e, 0xe3, 0xb2, 0xdf, 0x5a, 0xb9, 0xd3, 0xdd, 0xeb, 0xe8, 0x5b, 0x30, 0xee, 0xdd, 0xb8,
	0x75, 0xf0, 0x35, 0xa5, 0x5e, 0x50, 0xb5, 0x92, 0x8e, 0x07, 0x7f, 0x32, 0xca, 0x6b, 0xc8, 0x8a,
	0x0e, 0x1b, 0xd4, 0x94, 0xba, 0xfd, 0x28, 0xd5, 0xf1, 0x34, 0xe0, 0x8d, 0xb0, 0x6e, 0xb0, 0xba,
	0xca, 0x1e, 0x74, 0x0d, 0x39, 0x3d, 0x09, 0x03, 0xca, 0x8e, 0x5e, 0xd3, 0x2c, 0x34, 0x26, 0x3e,
	0x49, 0x7f, 0x27, 0xf0, 0x42, 0xa8, 0x60, 0xd4, 0x6c, 0x0e, 0xc6, 0x84, 0x13, 0x0a, 0x96, 0x5e,
	0x30, 0xd8, 0x16, 0x53, 0xeb, 0x8e, 0xc7, 0x46, 0xc5, 0x8b, 0xdb, 0x7a, 0x5e, 0x2c, 0xd3, 0x0c,
	0x0c, 0xdb, 0x55, 0x86, 0x4d, 0x59, 0x55, 0x1a, 0x28, 0x28, 0x65, 0x2f, 0xdd, 0xd6, 0xd7, 0x95,
	0x06, 0x3d, 0x03, 0xa0, 0x31, 0xab, 0x80, 0x38, 0x84, 0xd3, 0x52, 0x1a, 0xb3, 0x56, 0xf8, 0x42,
	0xfc, 0x6d, 0x3a, 0x05, 0x23, 0x25, 0xc6, 0x0a, 0x86, 0x62, 0xb1, 0xc2, 0x66, 0x55, 0xdc, 0xa4,
	0xfd, 0x79, 0x28, 0x31, 0x96, 0x57, 0x2c, 0xb6, 0x5a, 0x35, 0xa5, 0x06, 0x9c, 0xe1, 0xca, 0xd8,
	0x27, 0xb2, 0x68, 0x28, 0x0f, 0x94, 0xca, 0x61, 0x18, 0xd2, 0x13, 0x95, 0xf8, 0x24, 0x3d, 0x26,
	0x90, 0x89, 0x92, 0xdd, 0xb2, 0xa5, 0xd0, 0x3d, 0xc4, 0x96, 0xe2, 0x45, 0x72, 0x5b, 0x4e, 0xc3,
	0x48, 0x99, 0x17, 0x62, 0x1e, 0x6b, 0x0e, 0xf3, 0xb5, 0xee, 0xd9, 0xf3, 0x03, 0x82, 0x55, 0xc9,
	0xf5, 0x87, 0xaa, 0x75, 0xab, 0xc6, 0x6a, 0xdd, 0x4b, 0x10, 0x5d, 0xbb, 0x48, 0x3e, 0x71, 0xea,
	0x1a, 0x17, 0x46, 0x34, 0xf8, 0x1d, 0x38, 0xca, 0x1e, 0xaa, 0x56, 0xc1, 0x10, 0x6c, 0xce, 0x45,
	0x32, 0x1f, 0x75, 0x36, 0xed, 0x1d, 0x50, 0x84, 0xed, 0x45, 0x3b, 0xc1, 0xe2, 0x39, 0x1d, 0x61,
	0xad, 0x57, 0x5d, 0xbc, 0x49, 0x7e, 0x44, 0xe0, 0xb9, 0x10, 0xa1, 0x74, 0x01, 0xfa, 0x6a, 0x26,
	0x33, 0x62, 0x6f, 0x65, 0x4e, 0x45, 0xdf, 0x84, 0x11, 0xb7, 0x9a, 0x08, 0x68, 0x26, 0x81, 0x96,
	0xa8, 0xdd, 0xb0, 0x4b, 0x3b, 0xe9, 0xe7, 0x04, 0x4e, 0x37, 0x2f, 0x66, 0x17, 0xed, 0x33, 0x51,
	0x35, 0xfc, 0x85, 0xe0, 0x09, 0x0f, 0x82, 0x43, 0x9f, 0xdf, 0x0d, 0xf7, 0xf9, 0x42, 0x42, 0x9f,
	0xbb, 0x6b, 0x87, 0x43, 0x72, 0xfa, 0x6f, 0x09, 0x8c, 0x87, 0x49, 0xed, 0xc2, 0x99, 0xea, 0x6e,
	0x24, 0x38, 0xd7, 0xe8, 0x1a, 0x63, 0xdd, 0xbd, 0x46, 0xbf, 0x8d, 0xd7, 0x68, 0x73, 0x63, 0xf4,
	0xdd, 0x1a, 0xd8, 0xc9, 0xa7, 0xe0, 0x69, 0xeb, 0xa6, 0xa3, 0xc0, 0xaf, 0x31, 0xe6, 0x69, 0xea,
	0xec, 0xe4, 0x28, 0x16, 0xa4, 0xb7, 0x61, 0x4c, 0xd4, 0x1e, 0x96, 0xd2, 0x0a, 0xdb, 0x83, 0xc3,
	0xbe, 0x07, 0xd4, 0xbd, 0x2d, 0x82, 0xbe, 0x0a, 0xfd, 0xa6, 0xbd, 0x80, 0x78, 0x5f, 0x6a, 0xdb,
	0x86, 0x72, 0xd6, 0xeb, 0x9a, 0x65, 0x34, 0x10, 0xb5, 0xe0, 0x6d, 0x5a, 0x64, 0xa5, 0x52, 0xf1,
	0x80, 0xee, 0x56, 0xf3, 0xf7, 0x1b, 0xd2, 0x6a, 0x2f, 0x23, 0xe1, 0xf7, 0xee, 0x17, 0x7e, 0xf7,
	0xce, 0xc6, 0x38, 0x9a, 0x78, 0x5d, 0x31, 0x94, 0x1d, 0xc7, 0x0a, 0xd2, 0x06, 0x06, 0xa2, 0xb3,
	0x8a, 0xd0, 0x5f, 0x85, 0x81, 0x2a, 0x5f, 0x41, 0xc3, 0x64, 0xa2, 0xb0, 0x0b, 0x3e, 0xa7, 0x4d,
	0x15, 0x3c, 0x52, 0x09, 0xd3, 0xdc, 0x55, 0xfb, 0xca, 0xbc, 0xba, 0xad, 0xa8, 0x5a, 0x5e, 0xaf,
	0x59, 0xec, 0x30, 0xfa, 0xee, 0x33, 0x11, 0x82, 0x50, 0x8f, 0xeb, 0x30, 0x60, 0xf0, 0x95, 0x38,
	0x1f, 0xf8, 0x76, 0x70, 0x14, 0x12, 0xcc, 0xdd, 0x73, 0xc2, 0x65, 0x2c, 0x09, 0x7d, 0xe2, 0x1c,
	0xc3, 0x9c, 0x82, 0x21, 0x2e, 0xb1, 0xa0, 0x16, 0xb1, 0x7a, 0x19, 0xe4, 0xcf, 0x37, 0x8b, 0xd2,
	0x56, 0xb8, 0x4d, 0xdd, 0xc1, 0xc6, 0x49, 0xe3, 0xce, 0x4a, 0xb8, 0xa2, 0x82, 0x57, 0x7a, 0x17,
	0x4b, 0xe5, 0x3c, 0xdb, 0xd1, 0x2d, 0xe6, 0xff, 0x2e, 0x10, 0x8d, 0xce, 0x7d, 0x71, 0xf5, 0x24,
	0xbc, 0xb8, 0xa4, 0x32, 0xda, 0xc2, 0x2f, 0x0c, 0x15, 0xba, 0x11, 0xe8, 0xf8, 0xcf, 0x46, 0xe9,
	0xe4, 0xdd, 0xc1, 0xdf, 0xb0, 0x49, 0x3f, 0x23, 0xa1, 0x92, 0x9e, 0x89, 0x5b, 0xf7, 0x53, 0xa7,
	0x24, 0x08, 0x60, 0x43, 0x33, 0x6c, 0x04, 0xbb, 0x75, 0x39, 0x99, 0x1d, 0xec, 0xdb, 0xcf, 0xed,
	0xe3, 0xc3, 0xe8, 0xd7, 0xbf, 0x03, 0xcf, 0x47, 0x08, 0x6d, 0x17, 0x2d, 0x37, 0x02, 0x9d, 0xf8,
	0x7e, 0x5d, 0x7b, 0x01, 0xad, 0x77, 0x53, 0x5b, 0xab, 0xa8, 0xe5, 0x6d, 0xcb, 0x1f, 0xb2, 0xe3,
	0xd0, 0xaf, 0xe9, 0x1a, 0x76, 0xc2, 0x7d, 0x79, 0xf1, 0x20, 0xbd, 0x8b, 0x69, 0x23, 0xc8, 0x85,
	0x46, 0xff, 0x46, 0x20, 0xf6, 0x66, 0xa3, 0x00, 0xfa, 0xf7, 0x08, 0x40, 0xfc, 0x05, 0x89, 0x90,
	0xf6, 0x4c, 0xc4, 0xdf, 0x9f, 0x9c, 0xde, 0x2a, 0x04, 0x5d, 0xf3, 0x13, 0x66, 0x20, 0x02, 0x3b,
	0xb5, 0xc6, 0x61, 0x84, 0xde, 0x77, 0x1d, 0xe4, 0xad, 0x8c, 0xb6, 0xa1, 0x29, 0x55, 0x73, 0x5b,
	0xb7, 0xba, 0xd7, 0x49, 0x9d, 0x86, 0x54, 0x73, 0xe2, 0xc0, 0xc1, 0xf6, 0xe6, 0x5b, 0x0b, 0xd2,
	0x03, 0x98, 0x8c, 0x44, 0x80, 0xc6, 0xbb, 0x0d, 0x43, 0x26, 0xae, 0x61, 0x24, 0xe5, 0xe2, 0x33,
	0xb3, 0x63, 0x3d, 0x67, 0x37, 0x27, 0xa6, 0x9c, 0x9d, 0xa4, 0x0f, 0x09, 0x7e, 0x02, 0xba, 0x66,
	0xa8, 0x25, 0x6b, 0xa5, 0xc2, 0x8c, 0x56, 0x5d, 0xd3, 0xdd, 0x2c, 0xed, 0x0b, 0xb4, 0xde, 0x7d,
	0x07, 0xda, 0x87, 0xce, 0x17, 0x67, 0x0f, 0x64, 0xb4, 0xd2, 0x37, 0x61, 0x40, 0xe1, 0x2b, 0x71,
	0xdf, 0x23, 0x5b, 0xcc, 0x76, 0xa2, 0xb9, 0xc6, 0x2c, 0x45, 0xad, 0x34, 0xab, 0x0f, 0xb1, 0x45,
	0xf7, 0x22, 0xec, 0x7f, 0x04, 0x4e, 0x84, 0x0a, 0xa4, 0xaf, 0x43, 0x3f, 0x17, 0x86, 0x2e, 0x95,
	0xe2, 0xe1, 0x3a, 0xf7, 0x2c, 0x67, 0x6b, 0x5d, 0xd6, 0x3d, 0xfb, 0xbf, 0xac, 0x3d, 0x59, 0xb4,
	0xf7, 0x20, 0x59, 0x34, 0xf7, 0x83, 0x0c, 0xf4, 0x73, 0xdf, 0xd0, 0x5f, 0x12, 0x48, 0x35, 0x87,
	0x10, 0x74, 0x31, 0xe9, 0xb0, 0x82, 0xbb, 0x3b, 0xdd, 0xe1, 0x6c, 0x43, 0xca, 0x7d, 0xef, 0x9f,
	0xff, 0xfd, 0x49, 0xcf, 0x02, 0x9d, 0x93, 0xdb, 0xcd, 0xe7, 0xe4, 0xdd, 0xd6, 0x19, 0xde, 0xa3,
	0x3f, 0x26, 0x90, 0x6a, 0x4e, 0x59, 0x62, 0x00, 0xfa, 0xe7, 0x3d, 0x31, 0x00, 0x03, 0xc3, 0x1b,
	0xe9, 0x2c, 0x07, 0x38, 0x45, 0x33, 0x6d, 0x01, 0x9a, 0xf4, 0x23, 0x02, 0x23, 0xee, 0x4f, 0xc6,
	0xf4, 0x7c, 0x5b, 0x41, 0x21, 0x33, 0x97, 0xf4, 0x52, 0x07, 0x1c, 0x88, 0xee, 0x0d, 0x8e, 0xee,
	0xab, 0xf4, 0x52, 0x14, 0x3a, 0xc7, 0xbf, 0xf2, 0x2e, 0x1e, 0xe6, 0x3d, 0xaf, 0x2d, 0x7f, 0x47,
	0xe0, 0xa8, 0x67, 0x44, 0x40, 0x93, 0xa3, 0x68, 0xda, 0x34, 0xd7, 0x09, 0x0b, 0x22, 0x5f, 0xe6,
	0xc8, 0x17, 0xe9, 0x7c, 0x1c, 0x72, 0xb3, 0x05, 0x9d, 0x7e, 0x40, 0x00, 0x5a, 0x5f, 0xbc, 0x69,
	0x7b, 0x5f, 0x06, 0x3e, 0xbb, 0xa7, 0xe5, 0xc4, 0xf4, 0x49, 0xa3, 0x93, 0x7f, 0xfb, 0xf3, 0x5a,
	0xf4, 0xa7, 0x04, 0x06, 0xf1, 0x2b, 0x34, 0x9d, 0x6f, 0x2b, 0xd0, 0xfb, 0xfd, 0x3c, 0xbd, 0x90,
	0x8c, 0x18, 0xa1, 0x9d, 0xe7, 0xd0, 0xe6, 0xe8, 0xac, 0x1c, 0x3d, 0xb3, 0xf6, 0x02, 0xfb, 0x23,
	0x81, 0xe3, 0xfe, 0x26, 0x89, 0x5e, 0x68, 0x2b, 0x34, 0xa2, 0x79, 0x4b, 0xbf, 0xdc, 0x21, 0x17,
	0x62, 0x5e, 0xe2, 0x98, 0xe7, 0xe9, 0x39, 0xb9, 0xdd, 0xf0, 0x9b, 0xcf, 0xbe, 0x65, 0xec, 0xba,
	0x3e, 0x21, 0x30, 0xea, 0xdb, 0x8f, 0x2e, 0x77, 0x22, 0xdd, 0x81, 0x7c, 0xa1, 0x33, 0x26, 0x44,
	0xfc, 0x35, 0x8e, 0xf8, 0x65, 0xba, 0x9c, 0x14, 0xb1, 0xbc, 0xeb, 0x5c, 0xbc, 0x7b, 0xf4, 0xaf,
	0x04, 0x8e, 0x79, 0xb3, 0x2e, 0x6d, 0x7f, 0x52, 0x42, 0x5b, 0xae, 0xf4, 0x72, 0x47, 0x3c, 0x08,
	0xfc, 0x06, 0x07, 0xbe, 0x4a, 0xaf, 0x24, 0x00, 0xde, 0xca, 0x11, 0x4d, 0xec, 0xae, 0x33, 0xf7,
	0x29, 0x81, 0x51, 0x5f, 0x63, 0x42, 0x3b, 0x81, 0x64, 0x26, 0xf3, 0x40, 0x44, 0xef, 0x23, 0xbd,
	0xce, 0x15, 0xb9, 0x4c, 0x2f, 0x76, 0xa0, 0x88, 0xe9, 0x85, 0x7f, 0xdc, 0x5f, 0x91, 0xc6, 0x44,
	0x7d, 0x44, 0x23, 0x11, 0x13, 0xf5, 0x51, 0x8d, 0x44, 0x47, 0x31, 0xa4, 0x6a, 0x25, 0xbe, 0x89,
	0xbc, 0xcb, 0xbb, 0x94, 0x3d, 0xfa, 0x19, 0x81, 0xb1, 0x40, 0x59, 0x4e, 0x3b, 0x43, 0xd2, 0xf4,
	0xc0, 0xc5, 0x4e, 0xd9, 0x50, 0x83, 0x55, 0xae, 0xc1, 0xab, 0xf4, 0x95, 0x4e, 0x34, 0xa8, 0x99,
	0xcc, 0x70, 0xf9, 0xe1, 0x6f, 0x04, 0x68, 0xb0, 0x46, 0xa6, 0x17, 0x13, 0x1e, 0x4b, 0x5f, 0x59,
	0x9f, 0xbe, 0xd4, 0x31, 0x1f, 0xea, 0x72, 0x85, 0xeb, 0xf2, 0x0a, 0xbd, 0x9c, 0x40, 0x17, 0xa7,
	0xd6, 0xf6, 0xe6, 0xd1, 0x5f, 0x11, 0x18, 0x76, 0x15, 0xb0, 0xb4, 0xfd, 0xad, 0x12, 0xac, 0xce,
	0xd3, 0xe7, 0x93, 0x33, 0x24, 0x4d, 0xf6, 0x2e, 0xd0, 0x45, 0x9b, 0x9f, 0xfe, 0x99, 0xc0, 0x31,
	0xef, 0xcc, 0x31, 0x26, 0xf7, 0x84, 0x4e, 0x46, 0x63, 0x72, 0x4f, 0xf8, 0x50, 0x53, 0xba, 0xce,
	0xd1, 0xbe, 0x41, 0x5f, 0x8b, 0xbe, 0x35, 0x39, 0x83, 0x8c, 0xff, 0xb6, 0xe3, 0x31, 0xaf, 0xbc,
	0x2b, 0x46, 0x6e, 0x7b, 0xf4, 0x1f, 0x04, 0xc6, 0x02, 0xd3, 0xbe, 0x98, 0xd0, 0x8f, 0x9a, 0x4c,
	0xc6, 0x84, 0x7e, 0xe4, 0x50, 0x31, 0x3e, 0x8f, 0x3a, 0xba, 0x3c, 0x68, 0x6e, 0xe1, 0x53, 0x47,
	0x0c, 0x30, 0xf7, 0xe8, 0xaf, 0x09, 0xa4, 0x9a, 0x33, 0xb4, 0x98, 0xaa, 0xd5, 0x3f, 0x0f, 0x8c,
	0xa9, 0x5a, 0x03, 0xa3, 0x39, 0xe9, 0x12, 0x87, 0xbd, 0x44, 0xe5, 0x28, 0xd8, 0xec, 0xa1, 0x6a,
	0x2d, 0xde, 0xb7, 0x79, 0xbc, 0xc1, 0xfd, 0x31, 0x81, 0xe3, 0xfe, 0xe1, 0x4f, 0x4c, 0xba, 0x8c,
	0x18, 0x64, 0xc5, 0xa4, 0xcb, 0xa8, 0x09, 0x53, 0x42, 0xe8, 0xce, 0xfc, 0xc9, 0x95, 0x61, 0xde,
	0x27, 0x30, 0x88, 0x23, 0x8f, 0x98, 0xc2, 0xcb, 0x3b, 0x71, 0x89, 0x29, 0xbc, 0x7c, 0x53, 0x94,
	0xf8, 0x22, 0xa6, 0xc4, 0x98, 0x19, 0x68, 0x58, 0xfa, 0xf9, 0xb7, 0x7d, 0x7a, 0xae, 0x7d, 0x05,
	0xea, 0x9a, 0x4d, 0xa4, 0xe7, 0x92, 0x90, 0x26, 0xad, 0x53, 0xf9, 0x1c, 0xc1, 0x0b, 0xea, 0x87,
	0x04, 0x86, 0x9c, 0x71, 0x05, 0x5d, 0x88, 0xeb, 0x8a, 0x3c, 0xd0, 0x16, 0x13, 0x52, 0x23, 0xba,
	0xaf, 0x70, 0x74, 0x93, 0xf4, 0x4c, 0x5b, 0x74, 0xf4, 0xfb, 0x04, 0x06, 0xc4, 0x28, 0x81, 0xb6,
	0xd7, 0xdd, 0x33, 0xbd, 0x48, 0xcf, 0x27, 0xa2, 0x4d, 0xda, 0xcd, 0x89, 0xe9, 0xc5, 0xea, 0x6b,
	0x9f, 0x3f, 0xc9, 0x90, 0x2f, 0x9e, 0x64, 0xc8, 0x7f, 0x9e, 0x64, 0xc8, 0x7b, 0x4f, 0x33, 0x47,
	0xbe, 0x78, 0x9a, 0x39, 0xf2, 0xaf, 0xa7, 0x99, 0x23, 0xef, 0xcc, 0xa0, 0x1c, 0x21, 0xf4, 0x61,
	0xe3, 0x91, 0xcd, 0x65, 0x5b, 0xd4, 0x6c, 0xed, 0xb2, 0x39, 0xc0, 0xff, 0x73, 0x73, 0xf9, 0xcb,
	0x00, 0x00, 0x00, 0xff, 0xff, 0xe2, 0x63, 0x5d, 0x0c, 0x85, 0x2b, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// VaultInfo returns configuration and state for a specific vault type
	VaultInfo(ctx context.Context, in *QueryVaultInfoRequest, opts ...grpc.CallOption) (*QueryVaultInfoResponse, error)
	// AllVaults returns information for all vault types
	AllVaults(ctx context.Context, in *QueryAllVaultsRequest, opts ...grpc.CallOption) (*QueryAllVaultsResponse, error)
	// UserPosition returns a user's position in a specific vault
	UserPosition(ctx context.Context, in *QueryUserPositionRequest, opts ...grpc.CallOption) (*QueryUserPositionResponse, error)
	// UserPositions returns all of a user's positions across vault types
	UserPositions(ctx context.Context, in *QueryUserPositionsRequest, opts ...grpc.CallOption) (*QueryUserPositionsResponse, error)
	// SharePrice returns the current share price for a vault type
	SharePrice(ctx context.Context, in *QuerySharePriceRequest, opts ...grpc.CallOption) (*QuerySharePriceResponse, error)
	// NAVInfo returns NAV information for a vault type
	NAVInfo(ctx context.Context, in *QueryNAVInfoRequest, opts ...grpc.CallOption) (*QueryNAVInfoResponse, error)
	// CrossChainRoutes returns all available cross-chain routes
	CrossChainRoutes(ctx context.Context, in *QueryCrossChainRoutesRequest, opts ...grpc.CallOption) (*QueryCrossChainRoutesResponse, error)
	// CrossChainRoute returns information for a specific route
	CrossChainRoute(ctx context.Context, in *QueryCrossChainRouteRequest, opts ...grpc.CallOption) (*QueryCrossChainRouteResponse, error)
	// RemotePosition returns a user's remote position on a specific route
	RemotePosition(ctx context.Context, in *QueryRemotePositionRequest, opts ...grpc.CallOption) (*QueryRemotePositionResponse, error)
	// RemotePositions returns all remote positions for a user
	RemotePositions(ctx context.Context, in *QueryRemotePositionsRequest, opts ...grpc.CallOption) (*QueryRemotePositionsResponse, error)
	// InFlightPosition returns information about an in-flight operation
	InFlightPosition(ctx context.Context, in *QueryInFlightPositionRequest, opts ...grpc.CallOption) (*QueryInFlightPositionResponse, error)
	// InFlightPositions returns all in-flight operations for a user
	InFlightPositions(ctx context.Context, in *QueryInFlightPositionsRequest, opts ...grpc.CallOption) (*QueryInFlightPositionsResponse, error)
	// CrossChainSnapshot returns cross-chain position snapshot for a vault
	CrossChainSnapshot(ctx context.Context, in *QueryCrossChainSnapshotRequest, opts ...grpc.CallOption) (*QueryCrossChainSnapshotResponse, error)
	// DriftAlerts returns drift alerts for a user or route
	DriftAlerts(ctx context.Context, in *QueryDriftAlertsRequest, opts ...grpc.CallOption) (*QueryDriftAlertsResponse, error)
	// DepositPreview shows what a user would receive for a deposit
	DepositPreview(ctx context.Context, in *QueryDepositPreviewRequest, opts ...grpc.CallOption) (*QueryDepositPreviewResponse, error)
	// WithdrawalPreview shows what a user would receive for a withdrawal
	WithdrawalPreview(ctx context.Context, in *QueryWithdrawalPreviewRequest, opts ...grpc.CallOption) (*QueryWithdrawalPreviewResponse, error)
	// ExitQueue returns pending exit requests for a vault type
	ExitQueue(ctx context.Context, in *QueryExitQueueRequest, opts ...grpc.CallOption) (*QueryExitQueueResponse, error)
	// UserExitRequests returns a user's pending exit requests
	UserExitRequests(ctx context.Context, in *QueryUserExitRequestsRequest, opts ...grpc.CallOption) (*QueryUserExitRequestsResponse, error)
	// FeeInfo returns fee configuration for a vault type
	FeeInfo(ctx context.Context, in *QueryFeeInfoRequest, opts ...grpc.CallOption) (*QueryFeeInfoResponse, error)
	// Stats returns statistics for a vault type
	Stats(ctx context.Context, in *QueryStatsRequest, opts ...grpc.CallOption) (*QueryStatsResponse, error)
	// AllStats returns statistics for all vault types
	AllStats(ctx context.Context, in *QueryAllStatsRequest, opts ...grpc.CallOption) (*QueryAllStatsResponse, error)
	// Params returns the module parameters
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) VaultInfo(ctx context.Context, in *QueryVaultInfoRequest, opts ...grpc.CallOption) (*QueryVaultInfoResponse, error) {
	out := new(QueryVaultInfoResponse)
	err := c.cc.Invoke(ctx, "/noble.dollar.vaults.v2.Query/VaultInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AllVaults(ctx context.Context, in *QueryAllVaultsRequest, opts ...grpc.CallOption) (*QueryAllVaultsResponse, error) {
	out := new(QueryAllVaultsResponse)
	err := c.cc.Invoke(ctx, "/noble.dollar.vaults.v2.Query/AllVaults", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) UserPosition(ctx context.Context, in *QueryUserPositionRequest, opts ...grpc.CallOption) (*QueryUserPositionResponse, error) {
	out := new(QueryUserPositionResponse)
	err := c.cc.Invoke(ctx, "/noble.dollar.vaults.v2.Query/UserPosition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) UserPositions(ctx context.Context, in *QueryUserPositionsRequest, opts ...grpc.CallOption) (*QueryUserPositionsResponse, error) {
	out := new(QueryUserPositionsResponse)
	err := c.cc.Invoke(ctx, "/noble.dollar.vaults.v2.Query/UserPositions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SharePrice(ctx context.Context, in *QuerySharePriceRequest, opts ...grpc.CallOption) (*QuerySharePriceResponse, error) {
	out := new(QuerySharePriceResponse)
	err := c.cc.Invoke(ctx, "/noble.dollar.vaults.v2.Query/SharePrice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) NAVInfo(ctx context.Context, in *QueryNAVInfoRequest, opts ...grpc.CallOption) (*QueryNAVInfoResponse, error) {
	out := new(QueryNAVInfoResponse)
	err := c.cc.Invoke(ctx, "/noble.dollar.vaults.v2.Query/NAVInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CrossChainRoutes(ctx context.Context, in *QueryCrossChainRoutesRequest, opts ...grpc.CallOption) (*QueryCrossChainRoutesResponse, error) {
	out := new(QueryCrossChainRoutesResponse)
	err := c.cc.Invoke(ctx, "/noble.dollar.vaults.v2.Query/CrossChainRoutes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CrossChainRoute(ctx context.Context, in *QueryCrossChainRouteRequest, opts ...grpc.CallOption) (*QueryCrossChainRouteResponse, error) {
	out := new(QueryCrossChainRouteResponse)
	err := c.cc.Invoke(ctx, "/noble.dollar.vaults.v2.Query/CrossChainRoute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RemotePosition(ctx context.Context, in *QueryRemotePositionRequest, opts ...grpc.CallOption) (*QueryRemotePositionResponse, error) {
	out := new(QueryRemotePositionResponse)
	err := c.cc.Invoke(ctx, "/noble.dollar.vaults.v2.Query/RemotePosition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RemotePositions(ctx context.Context, in *QueryRemotePositionsRequest, opts ...grpc.CallOption) (*QueryRemotePositionsResponse, error) {
	out := new(QueryRemotePositionsResponse)
	err := c.cc.Invoke(ctx, "/noble.dollar.vaults.v2.Query/RemotePositions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) InFlightPosition(ctx context.Context, in *QueryInFlightPositionRequest, opts ...grpc.CallOption) (*QueryInFlightPositionResponse, error) {
	out := new(QueryInFlightPositionResponse)
	err := c.cc.Invoke(ctx, "/noble.dollar.vaults.v2.Query/InFlightPosition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) InFlightPositions(ctx context.Context, in *QueryInFlightPositionsRequest, opts ...grpc.CallOption) (*QueryInFlightPositionsResponse, error) {
	out := new(QueryInFlightPositionsResponse)
	err := c.cc.Invoke(ctx, "/noble.dollar.vaults.v2.Query/InFlightPositions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CrossChainSnapshot(ctx context.Context, in *QueryCrossChainSnapshotRequest, opts ...grpc.CallOption) (*QueryCrossChainSnapshotResponse, error) {
	out := new(QueryCrossChainSnapshotResponse)
	err := c.cc.Invoke(ctx, "/noble.dollar.vaults.v2.Query/CrossChainSnapshot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DriftAlerts(ctx context.Context, in *QueryDriftAlertsRequest, opts ...grpc.CallOption) (*QueryDriftAlertsResponse, error) {
	out := new(QueryDriftAlertsResponse)
	err := c.cc.Invoke(ctx, "/noble.dollar.vaults.v2.Query/DriftAlerts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DepositPreview(ctx context.Context, in *QueryDepositPreviewRequest, opts ...grpc.CallOption) (*QueryDepositPreviewResponse, error) {
	out := new(QueryDepositPreviewResponse)
	err := c.cc.Invoke(ctx, "/noble.dollar.vaults.v2.Query/DepositPreview", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) WithdrawalPreview(ctx context.Context, in *QueryWithdrawalPreviewRequest, opts ...grpc.CallOption) (*QueryWithdrawalPreviewResponse, error) {
	out := new(QueryWithdrawalPreviewResponse)
	err := c.cc.Invoke(ctx, "/noble.dollar.vaults.v2.Query/WithdrawalPreview", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ExitQueue(ctx context.Context, in *QueryExitQueueRequest, opts ...grpc.CallOption) (*QueryExitQueueResponse, error) {
	out := new(QueryExitQueueResponse)
	err := c.cc.Invoke(ctx, "/noble.dollar.vaults.v2.Query/ExitQueue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) UserExitRequests(ctx context.Context, in *QueryUserExitRequestsRequest, opts ...grpc.CallOption) (*QueryUserExitRequestsResponse, error) {
	out := new(QueryUserExitRequestsResponse)
	err := c.cc.Invoke(ctx, "/noble.dollar.vaults.v2.Query/UserExitRequests", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) FeeInfo(ctx context.Context, in *QueryFeeInfoRequest, opts ...grpc.CallOption) (*QueryFeeInfoResponse, error) {
	out := new(QueryFeeInfoResponse)
	err := c.cc.Invoke(ctx, "/noble.dollar.vaults.v2.Query/FeeInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Stats(ctx context.Context, in *QueryStatsRequest, opts ...grpc.CallOption) (*QueryStatsResponse, error) {
	out := new(QueryStatsResponse)
	err := c.cc.Invoke(ctx, "/noble.dollar.vaults.v2.Query/Stats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AllStats(ctx context.Context, in *QueryAllStatsRequest, opts ...grpc.CallOption) (*QueryAllStatsResponse, error) {
	out := new(QueryAllStatsResponse)
	err := c.cc.Invoke(ctx, "/noble.dollar.vaults.v2.Query/AllStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/noble.dollar.vaults.v2.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// VaultInfo returns configuration and state for a specific vault type
	VaultInfo(context.Context, *QueryVaultInfoRequest) (*QueryVaultInfoResponse, error)
	// AllVaults returns information for all vault types
	AllVaults(context.Context, *QueryAllVaultsRequest) (*QueryAllVaultsResponse, error)
	// UserPosition returns a user's position in a specific vault
	UserPosition(context.Context, *QueryUserPositionRequest) (*QueryUserPositionResponse, error)
	// UserPositions returns all of a user's positions across vault types
	UserPositions(context.Context, *QueryUserPositionsRequest) (*QueryUserPositionsResponse, error)
	// SharePrice returns the current share price for a vault type
	SharePrice(context.Context, *QuerySharePriceRequest) (*QuerySharePriceResponse, error)
	// NAVInfo returns NAV information for a vault type
	NAVInfo(context.Context, *QueryNAVInfoRequest) (*QueryNAVInfoResponse, error)
	// CrossChainRoutes returns all available cross-chain routes
	CrossChainRoutes(context.Context, *QueryCrossChainRoutesRequest) (*QueryCrossChainRoutesResponse, error)
	// CrossChainRoute returns information for a specific route
	CrossChainRoute(context.Context, *QueryCrossChainRouteRequest) (*QueryCrossChainRouteResponse, error)
	// RemotePosition returns a user's remote position on a specific route
	RemotePosition(context.Context, *QueryRemotePositionRequest) (*QueryRemotePositionResponse, error)
	// RemotePositions returns all remote positions for a user
	RemotePositions(context.Context, *QueryRemotePositionsRequest) (*QueryRemotePositionsResponse, error)
	// InFlightPosition returns information about an in-flight operation
	InFlightPosition(context.Context, *QueryInFlightPositionRequest) (*QueryInFlightPositionResponse, error)
	// InFlightPositions returns all in-flight operations for a user
	InFlightPositions(context.Context, *QueryInFlightPositionsRequest) (*QueryInFlightPositionsResponse, error)
	// CrossChainSnapshot returns cross-chain position snapshot for a vault
	CrossChainSnapshot(context.Context, *QueryCrossChainSnapshotRequest) (*QueryCrossChainSnapshotResponse, error)
	// DriftAlerts returns drift alerts for a user or route
	DriftAlerts(context.Context, *QueryDriftAlertsRequest) (*QueryDriftAlertsResponse, error)
	// DepositPreview shows what a user would receive for a deposit
	DepositPreview(context.Context, *QueryDepositPreviewRequest) (*QueryDepositPreviewResponse, error)
	// WithdrawalPreview shows what a user would receive for a withdrawal
	WithdrawalPreview(context.Context, *QueryWithdrawalPreviewRequest) (*QueryWithdrawalPreviewResponse, error)
	// ExitQueue returns pending exit requests for a vault type
	ExitQueue(context.Context, *QueryExitQueueRequest) (*QueryExitQueueResponse, error)
	// UserExitRequests returns a user's pending exit requests
	UserExitRequests(context.Context, *QueryUserExitRequestsRequest) (*QueryUserExitRequestsResponse, error)
	// FeeInfo returns fee configuration for a vault type
	FeeInfo(context.Context, *QueryFeeInfoRequest) (*QueryFeeInfoResponse, error)
	// Stats returns statistics for a vault type
	Stats(context.Context, *QueryStatsRequest) (*QueryStatsResponse, error)
	// AllStats returns statistics for all vault types
	AllStats(context.Context, *QueryAllStatsRequest) (*QueryAllStatsResponse, error)
	// Params returns the module parameters
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) VaultInfo(ctx context.Context, req *QueryVaultInfoRequest) (*QueryVaultInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VaultInfo not implemented")
}
func (*UnimplementedQueryServer) AllVaults(ctx context.Context, req *QueryAllVaultsRequest) (*QueryAllVaultsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllVaults not implemented")
}
func (*UnimplementedQueryServer) UserPosition(ctx context.Context, req *QueryUserPositionRequest) (*QueryUserPositionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserPosition not implemented")
}
func (*UnimplementedQueryServer) UserPositions(ctx context.Context, req *QueryUserPositionsRequest) (*QueryUserPositionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserPositions not implemented")
}
func (*UnimplementedQueryServer) SharePrice(ctx context.Context, req *QuerySharePriceRequest) (*QuerySharePriceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SharePrice not implemented")
}
func (*UnimplementedQueryServer) NAVInfo(ctx context.Context, req *QueryNAVInfoRequest) (*QueryNAVInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NAVInfo not implemented")
}
func (*UnimplementedQueryServer) CrossChainRoutes(ctx context.Context, req *QueryCrossChainRoutesRequest) (*QueryCrossChainRoutesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CrossChainRoutes not implemented")
}
func (*UnimplementedQueryServer) CrossChainRoute(ctx context.Context, req *QueryCrossChainRouteRequest) (*QueryCrossChainRouteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CrossChainRoute not implemented")
}
func (*UnimplementedQueryServer) RemotePosition(ctx context.Context, req *QueryRemotePositionRequest) (*QueryRemotePositionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemotePosition not implemented")
}
func (*UnimplementedQueryServer) RemotePositions(ctx context.Context, req *QueryRemotePositionsRequest) (*QueryRemotePositionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemotePositions not implemented")
}
func (*UnimplementedQueryServer) InFlightPosition(ctx context.Context, req *QueryInFlightPositionRequest) (*QueryInFlightPositionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InFlightPosition not implemented")
}
func (*UnimplementedQueryServer) InFlightPositions(ctx context.Context, req *QueryInFlightPositionsRequest) (*QueryInFlightPositionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InFlightPositions not implemented")
}
func (*UnimplementedQueryServer) CrossChainSnapshot(ctx context.Context, req *QueryCrossChainSnapshotRequest) (*QueryCrossChainSnapshotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CrossChainSnapshot not implemented")
}
func (*UnimplementedQueryServer) DriftAlerts(ctx context.Context, req *QueryDriftAlertsRequest) (*QueryDriftAlertsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DriftAlerts not implemented")
}
func (*UnimplementedQueryServer) DepositPreview(ctx context.Context, req *QueryDepositPreviewRequest) (*QueryDepositPreviewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DepositPreview not implemented")
}
func (*UnimplementedQueryServer) WithdrawalPreview(ctx context.Context, req *QueryWithdrawalPreviewRequest) (*QueryWithdrawalPreviewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WithdrawalPreview not implemented")
}
func (*UnimplementedQueryServer) ExitQueue(ctx context.Context, req *QueryExitQueueRequest) (*QueryExitQueueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExitQueue not implemented")
}
func (*UnimplementedQueryServer) UserExitRequests(ctx context.Context, req *QueryUserExitRequestsRequest) (*QueryUserExitRequestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserExitRequests not implemented")
}
func (*UnimplementedQueryServer) FeeInfo(ctx context.Context, req *QueryFeeInfoRequest) (*QueryFeeInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FeeInfo not implemented")
}
func (*UnimplementedQueryServer) Stats(ctx context.Context, req *QueryStatsRequest) (*QueryStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stats not implemented")
}
func (*UnimplementedQueryServer) AllStats(ctx context.Context, req *QueryAllStatsRequest) (*QueryAllStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllStats not implemented")
}
func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_VaultInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryVaultInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).VaultInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/noble.dollar.vaults.v2.Query/VaultInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).VaultInfo(ctx, req.(*QueryVaultInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AllVaults_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllVaultsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AllVaults(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/noble.dollar.vaults.v2.Query/AllVaults",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AllVaults(ctx, req.(*QueryAllVaultsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_UserPosition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryUserPositionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).UserPosition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/noble.dollar.vaults.v2.Query/UserPosition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).UserPosition(ctx, req.(*QueryUserPositionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_UserPositions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryUserPositionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).UserPositions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/noble.dollar.vaults.v2.Query/UserPositions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).UserPositions(ctx, req.(*QueryUserPositionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SharePrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySharePriceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SharePrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/noble.dollar.vaults.v2.Query/SharePrice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SharePrice(ctx, req.(*QuerySharePriceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_NAVInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryNAVInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).NAVInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/noble.dollar.vaults.v2.Query/NAVInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).NAVInfo(ctx, req.(*QueryNAVInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CrossChainRoutes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCrossChainRoutesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CrossChainRoutes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/noble.dollar.vaults.v2.Query/CrossChainRoutes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CrossChainRoutes(ctx, req.(*QueryCrossChainRoutesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CrossChainRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCrossChainRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CrossChainRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/noble.dollar.vaults.v2.Query/CrossChainRoute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CrossChainRoute(ctx, req.(*QueryCrossChainRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RemotePosition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRemotePositionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RemotePosition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/noble.dollar.vaults.v2.Query/RemotePosition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RemotePosition(ctx, req.(*QueryRemotePositionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RemotePositions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRemotePositionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RemotePositions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/noble.dollar.vaults.v2.Query/RemotePositions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RemotePositions(ctx, req.(*QueryRemotePositionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_InFlightPosition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryInFlightPositionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).InFlightPosition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/noble.dollar.vaults.v2.Query/InFlightPosition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).InFlightPosition(ctx, req.(*QueryInFlightPositionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_InFlightPositions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryInFlightPositionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).InFlightPositions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/noble.dollar.vaults.v2.Query/InFlightPositions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).InFlightPositions(ctx, req.(*QueryInFlightPositionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CrossChainSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCrossChainSnapshotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CrossChainSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/noble.dollar.vaults.v2.Query/CrossChainSnapshot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CrossChainSnapshot(ctx, req.(*QueryCrossChainSnapshotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DriftAlerts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDriftAlertsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DriftAlerts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/noble.dollar.vaults.v2.Query/DriftAlerts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DriftAlerts(ctx, req.(*QueryDriftAlertsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DepositPreview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDepositPreviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DepositPreview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/noble.dollar.vaults.v2.Query/DepositPreview",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DepositPreview(ctx, req.(*QueryDepositPreviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_WithdrawalPreview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryWithdrawalPreviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).WithdrawalPreview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/noble.dollar.vaults.v2.Query/WithdrawalPreview",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).WithdrawalPreview(ctx, req.(*QueryWithdrawalPreviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ExitQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryExitQueueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ExitQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/noble.dollar.vaults.v2.Query/ExitQueue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ExitQueue(ctx, req.(*QueryExitQueueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_UserExitRequests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryUserExitRequestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).UserExitRequests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/noble.dollar.vaults.v2.Query/UserExitRequests",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).UserExitRequests(ctx, req.(*QueryUserExitRequestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_FeeInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryFeeInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).FeeInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/noble.dollar.vaults.v2.Query/FeeInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).FeeInfo(ctx, req.(*QueryFeeInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Stats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Stats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/noble.dollar.vaults.v2.Query/Stats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Stats(ctx, req.(*QueryStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AllStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AllStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/noble.dollar.vaults.v2.Query/AllStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AllStats(ctx, req.(*QueryAllStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/noble.dollar.vaults.v2.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var Query_serviceDesc = _Query_serviceDesc
var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "noble.dollar.vaults.v2.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "VaultInfo",
			Handler:    _Query_VaultInfo_Handler,
		},
		{
			MethodName: "AllVaults",
			Handler:    _Query_AllVaults_Handler,
		},
		{
			MethodName: "UserPosition",
			Handler:    _Query_UserPosition_Handler,
		},
		{
			MethodName: "UserPositions",
			Handler:    _Query_UserPositions_Handler,
		},
		{
			MethodName: "SharePrice",
			Handler:    _Query_SharePrice_Handler,
		},
		{
			MethodName: "NAVInfo",
			Handler:    _Query_NAVInfo_Handler,
		},
		{
			MethodName: "CrossChainRoutes",
			Handler:    _Query_CrossChainRoutes_Handler,
		},
		{
			MethodName: "CrossChainRoute",
			Handler:    _Query_CrossChainRoute_Handler,
		},
		{
			MethodName: "RemotePosition",
			Handler:    _Query_RemotePosition_Handler,
		},
		{
			MethodName: "RemotePositions",
			Handler:    _Query_RemotePositions_Handler,
		},
		{
			MethodName: "InFlightPosition",
			Handler:    _Query_InFlightPosition_Handler,
		},
		{
			MethodName: "InFlightPositions",
			Handler:    _Query_InFlightPositions_Handler,
		},
		{
			MethodName: "CrossChainSnapshot",
			Handler:    _Query_CrossChainSnapshot_Handler,
		},
		{
			MethodName: "DriftAlerts",
			Handler:    _Query_DriftAlerts_Handler,
		},
		{
			MethodName: "DepositPreview",
			Handler:    _Query_DepositPreview_Handler,
		},
		{
			MethodName: "WithdrawalPreview",
			Handler:    _Query_WithdrawalPreview_Handler,
		},
		{
			MethodName: "ExitQueue",
			Handler:    _Query_ExitQueue_Handler,
		},
		{
			MethodName: "UserExitRequests",
			Handler:    _Query_UserExitRequests_Handler,
		},
		{
			MethodName: "FeeInfo",
			Handler:    _Query_FeeInfo_Handler,
		},
		{
			MethodName: "Stats",
			Handler:    _Query_Stats_Handler,
		},
		{
			MethodName: "AllStats",
			Handler:    _Query_AllStats_Handler,
		},
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "noble/dollar/vaults/v2/query.proto",
}

func (m *QueryVaultInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryVaultInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryVaultInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.VaultType != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.VaultType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryVaultInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryVaultInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryVaultInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TotalDepositors != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TotalDepositors))
		i--
		dAtA[i] = 0x28
	}
	if len(m.SharePrice) > 0 {
		i -= len(m.SharePrice)
		copy(dAtA[i:], m.SharePrice)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SharePrice)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.TotalNav) > 0 {
		i -= len(m.TotalNav)
		copy(dAtA[i:], m.TotalNav)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.TotalNav)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TotalShares) > 0 {
		i -= len(m.TotalShares)
		copy(dAtA[i:], m.TotalShares)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.TotalShares)))
		i--
		dAtA[i] = 0x12
	}
	{
		size, err := m.Config.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllVaultsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllVaultsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllVaultsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllVaultsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllVaultsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllVaultsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Vaults) > 0 {
		for iNdEx := len(m.Vaults) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Vaults[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryUserPositionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryUserPositionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryUserPositionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.VaultType != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.VaultType))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryUserPositionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryUserPositionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryUserPositionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UnrealizedYield) > 0 {
		i -= len(m.UnrealizedYield)
		copy(dAtA[i:], m.UnrealizedYield)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.UnrealizedYield)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.CurrentValue) > 0 {
		i -= len(m.CurrentValue)
		copy(dAtA[i:], m.CurrentValue)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.CurrentValue)))
		i--
		dAtA[i] = 0x12
	}
	if m.Position != nil {
		{
			size, err := m.Position.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryUserPositionsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryUserPositionsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryUserPositionsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryUserPositionsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryUserPositionsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryUserPositionsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Positions) > 0 {
		for iNdEx := len(m.Positions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Positions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *UserPositionWithVault) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserPositionWithVault) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserPositionWithVault) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CurrentValue) > 0 {
		i -= len(m.CurrentValue)
		copy(dAtA[i:], m.CurrentValue)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.CurrentValue)))
		i--
		dAtA[i] = 0x1a
	}
	{
		size, err := m.Position.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.VaultType != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.VaultType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QuerySharePriceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySharePriceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySharePriceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.VaultType != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.VaultType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QuerySharePriceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySharePriceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySharePriceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TotalNav) > 0 {
		i -= len(m.TotalNav)
		copy(dAtA[i:], m.TotalNav)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.TotalNav)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TotalShares) > 0 {
		i -= len(m.TotalShares)
		copy(dAtA[i:], m.TotalShares)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.TotalShares)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.SharePrice) > 0 {
		i -= len(m.SharePrice)
		copy(dAtA[i:], m.SharePrice)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SharePrice)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryNAVInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryNAVInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryNAVInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.VaultType != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.VaultType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryNAVInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryNAVInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryNAVInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.NavInfo.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryDepositPreviewRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDepositPreviewRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDepositPreviewRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Amount) > 0 {
		i -= len(m.Amount)
		copy(dAtA[i:], m.Amount)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Amount)))
		i--
		dAtA[i] = 0x12
	}
	if m.VaultType != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.VaultType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryDepositPreviewResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDepositPreviewResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDepositPreviewResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FeeRateBps != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.FeeRateBps))
		i--
		dAtA[i] = 0x28
	}
	if len(m.SharePrice) > 0 {
		i -= len(m.SharePrice)
		copy(dAtA[i:], m.SharePrice)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SharePrice)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.NetAmount) > 0 {
		i -= len(m.NetAmount)
		copy(dAtA[i:], m.NetAmount)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.NetAmount)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.FeesToPay) > 0 {
		i -= len(m.FeesToPay)
		copy(dAtA[i:], m.FeesToPay)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.FeesToPay)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.SharesToReceive) > 0 {
		i -= len(m.SharesToReceive)
		copy(dAtA[i:], m.SharesToReceive)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SharesToReceive)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryWithdrawalPreviewRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryWithdrawalPreviewRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryWithdrawalPreviewRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Shares) > 0 {
		i -= len(m.Shares)
		copy(dAtA[i:], m.Shares)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Shares)))
		i--
		dAtA[i] = 0x12
	}
	if m.VaultType != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.VaultType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryWithdrawalPreviewResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryWithdrawalPreviewResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryWithdrawalPreviewResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FeeRateBps != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.FeeRateBps))
		i--
		dAtA[i] = 0x28
	}
	if len(m.SharePrice) > 0 {
		i -= len(m.SharePrice)
		copy(dAtA[i:], m.SharePrice)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SharePrice)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.GrossAmount) > 0 {
		i -= len(m.GrossAmount)
		copy(dAtA[i:], m.GrossAmount)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.GrossAmount)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.FeesToPay) > 0 {
		i -= len(m.FeesToPay)
		copy(dAtA[i:], m.FeesToPay)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.FeesToPay)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.AmountToReceive) > 0 {
		i -= len(m.AmountToReceive)
		copy(dAtA[i:], m.AmountToReceive)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.AmountToReceive)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryExitQueueRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryExitQueueRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryExitQueueRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.VaultType != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.VaultType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryExitQueueResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryExitQueueResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryExitQueueResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ExitRequests) > 0 {
		for iNdEx := len(m.ExitRequests) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ExitRequests[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ExitRequestWithUser) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExitRequestWithUser) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExitRequestWithUser) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.ExitRequest.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.User) > 0 {
		i -= len(m.User)
		copy(dAtA[i:], m.User)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.User)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryUserExitRequestsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryUserExitRequestsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryUserExitRequestsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryUserExitRequestsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryUserExitRequestsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryUserExitRequestsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ExitRequests) > 0 {
		for iNdEx := len(m.ExitRequests) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ExitRequests[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ExitRequestWithVault) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExitRequestWithVault) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExitRequestWithVault) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.ExitRequest.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.VaultType != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.VaultType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryFeeInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFeeInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFeeInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.VaultType != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.VaultType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryFeeInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFeeInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFeeInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.FeeConfig.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryStatsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStatsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStatsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.VaultType != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.VaultType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryStatsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStatsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStatsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Stats.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllStatsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllStatsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllStatsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllStatsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllStatsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllStatsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Stats) > 0 {
		for iNdEx := len(m.Stats) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Stats[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryCrossChainRoutesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCrossChainRoutesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCrossChainRoutesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryCrossChainRoutesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCrossChainRoutesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCrossChainRoutesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Routes) > 0 {
		for iNdEx := len(m.Routes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Routes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryCrossChainRouteRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCrossChainRouteRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCrossChainRouteRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RouteId) > 0 {
		i -= len(m.RouteId)
		copy(dAtA[i:], m.RouteId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.RouteId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryCrossChainRouteResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCrossChainRouteResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCrossChainRouteResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Route.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryRemotePositionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRemotePositionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRemotePositionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.RouteId) > 0 {
		i -= len(m.RouteId)
		copy(dAtA[i:], m.RouteId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.RouteId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryRemotePositionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRemotePositionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRemotePositionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Position.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryRemotePositionsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRemotePositionsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRemotePositionsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryRemotePositionsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRemotePositionsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRemotePositionsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Positions) > 0 {
		for iNdEx := len(m.Positions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Positions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RemotePositionWithRoute) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemotePositionWithRoute) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RemotePositionWithRoute) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Position.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.RouteId) > 0 {
		i -= len(m.RouteId)
		copy(dAtA[i:], m.RouteId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.RouteId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryInFlightPositionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryInFlightPositionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryInFlightPositionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Nonce != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryInFlightPositionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryInFlightPositionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryInFlightPositionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Position.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryInFlightPositionsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryInFlightPositionsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryInFlightPositionsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryInFlightPositionsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryInFlightPositionsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryInFlightPositionsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Positions) > 0 {
		for iNdEx := len(m.Positions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Positions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryCrossChainSnapshotRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCrossChainSnapshotRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCrossChainSnapshotRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Timestamp != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x10
	}
	if m.VaultType != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.VaultType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryCrossChainSnapshotResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCrossChainSnapshotResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCrossChainSnapshotResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Snapshot.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryDriftAlertsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDriftAlertsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDriftAlertsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.RouteId) > 0 {
		i -= len(m.RouteId)
		copy(dAtA[i:], m.RouteId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.RouteId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDriftAlertsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDriftAlertsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDriftAlertsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Alerts) > 0 {
		for iNdEx := len(m.Alerts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Alerts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *DriftAlertWithDetails) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DriftAlertWithDetails) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DriftAlertWithDetails) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Position.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.Route.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.Alert.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryVaultInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VaultType != 0 {
		n += 1 + sovQuery(uint64(m.VaultType))
	}
	return n
}

func (m *QueryVaultInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Config.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = len(m.TotalShares)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.TotalNav)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.SharePrice)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.TotalDepositors != 0 {
		n += 1 + sovQuery(uint64(m.TotalDepositors))
	}
	return n
}

func (m *QueryAllVaultsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllVaultsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Vaults) > 0 {
		for _, e := range m.Vaults {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryUserPositionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.VaultType != 0 {
		n += 1 + sovQuery(uint64(m.VaultType))
	}
	return n
}

func (m *QueryUserPositionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Position != nil {
		l = m.Position.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.CurrentValue)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.UnrealizedYield)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryUserPositionsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryUserPositionsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Positions) > 0 {
		for _, e := range m.Positions {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *UserPositionWithVault) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VaultType != 0 {
		n += 1 + sovQuery(uint64(m.VaultType))
	}
	l = m.Position.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = len(m.CurrentValue)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySharePriceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VaultType != 0 {
		n += 1 + sovQuery(uint64(m.VaultType))
	}
	return n
}

func (m *QuerySharePriceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SharePrice)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.TotalShares)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.TotalNav)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryNAVInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VaultType != 0 {
		n += 1 + sovQuery(uint64(m.VaultType))
	}
	return n
}

func (m *QueryNAVInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.NavInfo.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryDepositPreviewRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VaultType != 0 {
		n += 1 + sovQuery(uint64(m.VaultType))
	}
	l = len(m.Amount)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDepositPreviewResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SharesToReceive)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.FeesToPay)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.NetAmount)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.SharePrice)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.FeeRateBps != 0 {
		n += 1 + sovQuery(uint64(m.FeeRateBps))
	}
	return n
}

func (m *QueryWithdrawalPreviewRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VaultType != 0 {
		n += 1 + sovQuery(uint64(m.VaultType))
	}
	l = len(m.Shares)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryWithdrawalPreviewResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AmountToReceive)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.FeesToPay)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.GrossAmount)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.SharePrice)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.FeeRateBps != 0 {
		n += 1 + sovQuery(uint64(m.FeeRateBps))
	}
	return n
}

func (m *QueryExitQueueRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VaultType != 0 {
		n += 1 + sovQuery(uint64(m.VaultType))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryExitQueueResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ExitRequests) > 0 {
		for _, e := range m.ExitRequests {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *ExitRequestWithUser) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.User)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = m.ExitRequest.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryUserExitRequestsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryUserExitRequestsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ExitRequests) > 0 {
		for _, e := range m.ExitRequests {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *ExitRequestWithVault) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VaultType != 0 {
		n += 1 + sovQuery(uint64(m.VaultType))
	}
	l = m.ExitRequest.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryFeeInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VaultType != 0 {
		n += 1 + sovQuery(uint64(m.VaultType))
	}
	return n
}

func (m *QueryFeeInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.FeeConfig.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryStatsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VaultType != 0 {
		n += 1 + sovQuery(uint64(m.VaultType))
	}
	return n
}

func (m *QueryStatsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Stats.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllStatsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllStatsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Stats) > 0 {
		for _, e := range m.Stats {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryCrossChainRoutesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryCrossChainRoutesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Routes) > 0 {
		for _, e := range m.Routes {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryCrossChainRouteRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RouteId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryCrossChainRouteResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Route.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryRemotePositionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RouteId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryRemotePositionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Position.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryRemotePositionsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryRemotePositionsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Positions) > 0 {
		for _, e := range m.Positions {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *RemotePositionWithRoute) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RouteId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = m.Position.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryInFlightPositionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Nonce != 0 {
		n += 1 + sovQuery(uint64(m.Nonce))
	}
	return n
}

func (m *QueryInFlightPositionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Position.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryInFlightPositionsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryInFlightPositionsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Positions) > 0 {
		for _, e := range m.Positions {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryCrossChainSnapshotRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VaultType != 0 {
		n += 1 + sovQuery(uint64(m.VaultType))
	}
	if m.Timestamp != 0 {
		n += 1 + sovQuery(uint64(m.Timestamp))
	}
	return n
}

func (m *QueryCrossChainSnapshotResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Snapshot.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryDriftAlertsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RouteId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDriftAlertsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Alerts) > 0 {
		for _, e := range m.Alerts {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *DriftAlertWithDetails) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Alert.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.Route.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.Position.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryVaultInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryVaultInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryVaultInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VaultType", wireType)
			}
			m.VaultType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VaultType |= vaults.VaultType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryVaultInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryVaultInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryVaultInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Config", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Config.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalShares", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TotalShares = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalNav", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TotalNav = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SharePrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SharePrice = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalDepositors", wireType)
			}
			m.TotalDepositors = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalDepositors |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllVaultsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllVaultsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllVaultsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllVaultsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllVaultsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllVaultsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vaults", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Vaults = append(m.Vaults, QueryVaultInfoResponse{})
			if err := m.Vaults[len(m.Vaults)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryUserPositionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryUserPositionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryUserPositionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VaultType", wireType)
			}
			m.VaultType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VaultType |= vaults.VaultType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryUserPositionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryUserPositionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryUserPositionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Position", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Position == nil {
				m.Position = &UserPosition{}
			}
			if err := m.Position.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CurrentValue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnrealizedYield", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UnrealizedYield = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryUserPositionsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryUserPositionsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryUserPositionsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryUserPositionsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryUserPositionsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryUserPositionsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Positions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Positions = append(m.Positions, UserPositionWithVault{})
			if err := m.Positions[len(m.Positions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserPositionWithVault) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserPositionWithVault: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserPositionWithVault: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VaultType", wireType)
			}
			m.VaultType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VaultType |= vaults.VaultType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Position", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Position.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CurrentValue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySharePriceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySharePriceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySharePriceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VaultType", wireType)
			}
			m.VaultType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VaultType |= vaults.VaultType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySharePriceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySharePriceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySharePriceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SharePrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SharePrice = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalShares", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TotalShares = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalNav", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TotalNav = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryNAVInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryNAVInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryNAVInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VaultType", wireType)
			}
			m.VaultType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VaultType |= vaults.VaultType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryNAVInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryNAVInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryNAVInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NavInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.NavInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDepositPreviewRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDepositPreviewRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDepositPreviewRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VaultType", wireType)
			}
			m.VaultType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VaultType |= vaults.VaultType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDepositPreviewResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDepositPreviewResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDepositPreviewResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SharesToReceive", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SharesToReceive = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeesToPay", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeesToPay = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NetAmount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SharePrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SharePrice = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeRateBps", wireType)
			}
			m.FeeRateBps = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FeeRateBps |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryWithdrawalPreviewRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryWithdrawalPreviewRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryWithdrawalPreviewRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VaultType", wireType)
			}
			m.VaultType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VaultType |= vaults.VaultType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shares", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Shares = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryWithdrawalPreviewResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryWithdrawalPreviewResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryWithdrawalPreviewResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmountToReceive", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AmountToReceive = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeesToPay", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeesToPay = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GrossAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GrossAmount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SharePrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SharePrice = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeRateBps", wireType)
			}
			m.FeeRateBps = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FeeRateBps |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryExitQueueRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryExitQueueRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryExitQueueRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VaultType", wireType)
			}
			m.VaultType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VaultType |= vaults.VaultType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryExitQueueResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryExitQueueResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryExitQueueResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExitRequests", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExitRequests = append(m.ExitRequests, ExitRequestWithUser{})
			if err := m.ExitRequests[len(m.ExitRequests)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExitRequestWithUser) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExitRequestWithUser: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExitRequestWithUser: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.User = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExitRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ExitRequest.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryUserExitRequestsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryUserExitRequestsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryUserExitRequestsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryUserExitRequestsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryUserExitRequestsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryUserExitRequestsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExitRequests", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExitRequests = append(m.ExitRequests, ExitRequestWithVault{})
			if err := m.ExitRequests[len(m.ExitRequests)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExitRequestWithVault) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExitRequestWithVault: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExitRequestWithVault: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VaultType", wireType)
			}
			m.VaultType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VaultType |= vaults.VaultType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExitRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ExitRequest.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFeeInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFeeInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFeeInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VaultType", wireType)
			}
			m.VaultType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VaultType |= vaults.VaultType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFeeInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFeeInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFeeInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FeeConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStatsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStatsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStatsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VaultType", wireType)
			}
			m.VaultType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VaultType |= vaults.VaultType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStatsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStatsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStatsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Stats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllStatsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllStatsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllStatsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllStatsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllStatsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllStatsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Stats = append(m.Stats, VaultStatsEntry{})
			if err := m.Stats[len(m.Stats)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCrossChainRoutesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCrossChainRoutesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCrossChainRoutesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCrossChainRoutesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCrossChainRoutesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCrossChainRoutesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Routes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Routes = append(m.Routes, CrossChainRoute{})
			if err := m.Routes[len(m.Routes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCrossChainRouteRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCrossChainRouteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCrossChainRouteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RouteId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RouteId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCrossChainRouteResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCrossChainRouteResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCrossChainRouteResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Route", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Route.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRemotePositionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRemotePositionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRemotePositionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RouteId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RouteId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRemotePositionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRemotePositionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRemotePositionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Position", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Position.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRemotePositionsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRemotePositionsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRemotePositionsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRemotePositionsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRemotePositionsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRemotePositionsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Positions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Positions = append(m.Positions, RemotePositionWithRoute{})
			if err := m.Positions[len(m.Positions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemotePositionWithRoute) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemotePositionWithRoute: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemotePositionWithRoute: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RouteId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RouteId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Position", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Position.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryInFlightPositionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryInFlightPositionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryInFlightPositionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryInFlightPositionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryInFlightPositionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryInFlightPositionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Position", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Position.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryInFlightPositionsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryInFlightPositionsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryInFlightPositionsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryInFlightPositionsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryInFlightPositionsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryInFlightPositionsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Positions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Positions = append(m.Positions, InFlightPosition{})
			if err := m.Positions[len(m.Positions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCrossChainSnapshotRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCrossChainSnapshotRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCrossChainSnapshotRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VaultType", wireType)
			}
			m.VaultType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VaultType |= vaults.VaultType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCrossChainSnapshotResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCrossChainSnapshotResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCrossChainSnapshotResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Snapshot", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Snapshot.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDriftAlertsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDriftAlertsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDriftAlertsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RouteId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RouteId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDriftAlertsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDriftAlertsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDriftAlertsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Alerts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Alerts = append(m.Alerts, DriftAlertWithDetails{})
			if err := m.Alerts[len(m.Alerts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DriftAlertWithDetails) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DriftAlertWithDetails: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DriftAlertWithDetails: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Alert", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Alert.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Route", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Route.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Position", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Position.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)

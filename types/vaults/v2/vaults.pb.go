// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: noble/dollar/vaults/v2/vaults.proto

package v2

import (
	cosmossdk_io_math "cosmossdk.io/math"
	_ "dollar.noble.xyz/v2/types/vaults"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// ExitRequestStatus represents the status of an exit request
type ExitRequestStatus int32

const (
	// Request is pending (waiting for unlock time)
	EXIT_REQUEST_STATUS_PENDING ExitRequestStatus = 0
	// Request is ready to be processed
	EXIT_REQUEST_STATUS_READY ExitRequestStatus = 1
	// Request has been processed
	EXIT_REQUEST_STATUS_PROCESSED ExitRequestStatus = 2
	// Request was cancelled by user
	EXIT_REQUEST_STATUS_CANCELLED ExitRequestStatus = 3
	// Request expired without processing
	EXIT_REQUEST_STATUS_EXPIRED ExitRequestStatus = 4
)

var ExitRequestStatus_name = map[int32]string{
	0: "EXIT_REQUEST_STATUS_PENDING",
	1: "EXIT_REQUEST_STATUS_READY",
	2: "EXIT_REQUEST_STATUS_PROCESSED",
	3: "EXIT_REQUEST_STATUS_CANCELLED",
	4: "EXIT_REQUEST_STATUS_EXPIRED",
}

var ExitRequestStatus_value = map[string]int32{
	"EXIT_REQUEST_STATUS_PENDING":   0,
	"EXIT_REQUEST_STATUS_READY":     1,
	"EXIT_REQUEST_STATUS_PROCESSED": 2,
	"EXIT_REQUEST_STATUS_CANCELLED": 3,
	"EXIT_REQUEST_STATUS_EXPIRED":   4,
}

func (x ExitRequestStatus) String() string {
	return proto.EnumName(ExitRequestStatus_name, int32(x))
}

func (ExitRequestStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a9e05010b6747034, []int{0}
}

// UserPosition represents a user's position in the V2 share-based vault system
type UserPosition struct {
	// Total shares owned by the user
	Shares cosmossdk_io_math.Int `protobuf:"bytes,1,opt,name=shares,proto3,customtype=cosmossdk.io/math.Int" json:"shares"`
	// Original deposit amount (for tracking purposes)
	OriginalDeposit cosmossdk_io_math.Int `protobuf:"bytes,2,opt,name=original_deposit,json=originalDeposit,proto3,customtype=cosmossdk.io/math.Int" json:"original_deposit"`
	// Timestamp of first deposit
	FirstDepositTime time.Time `protobuf:"bytes,3,opt,name=first_deposit_time,json=firstDepositTime,proto3,stdtime" json:"first_deposit_time"`
	// Timestamp of last deposit/withdrawal
	LastActivityTime time.Time `protobuf:"bytes,4,opt,name=last_activity_time,json=lastActivityTime,proto3,stdtime" json:"last_activity_time"`
	// Whether user wants to receive yield (vs contributing to fee pool)
	ReceiveYield bool `protobuf:"varint,5,opt,name=receive_yield,json=receiveYield,proto3" json:"receive_yield,omitempty"`
	// Shares pending exit (for staked vaults)
	SharesPendingExit cosmossdk_io_math.Int `protobuf:"bytes,6,opt,name=shares_pending_exit,json=sharesPendingExit,proto3,customtype=cosmossdk.io/math.Int" json:"shares_pending_exit"`
	// Number of active exit requests
	ActiveExitRequests int32 `protobuf:"varint,7,opt,name=active_exit_requests,json=activeExitRequests,proto3" json:"active_exit_requests,omitempty"`
}

func (m *UserPosition) Reset()         { *m = UserPosition{} }
func (m *UserPosition) String() string { return proto.CompactTextString(m) }
func (*UserPosition) ProtoMessage()    {}
func (*UserPosition) Descriptor() ([]byte, []int) {
	return fileDescriptor_a9e05010b6747034, []int{0}
}
func (m *UserPosition) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserPosition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserPosition.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserPosition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserPosition.Merge(m, src)
}
func (m *UserPosition) XXX_Size() int {
	return m.Size()
}
func (m *UserPosition) XXX_DiscardUnknown() {
	xxx_messageInfo_UserPosition.DiscardUnknown(m)
}

var xxx_messageInfo_UserPosition proto.InternalMessageInfo

func (m *UserPosition) GetFirstDepositTime() time.Time {
	if m != nil {
		return m.FirstDepositTime
	}
	return time.Time{}
}

func (m *UserPosition) GetLastActivityTime() time.Time {
	if m != nil {
		return m.LastActivityTime
	}
	return time.Time{}
}

func (m *UserPosition) GetReceiveYield() bool {
	if m != nil {
		return m.ReceiveYield
	}
	return false
}

func (m *UserPosition) GetActiveExitRequests() int32 {
	if m != nil {
		return m.ActiveExitRequests
	}
	return 0
}

// ExitRequest represents a pending exit from a staked vault
type ExitRequest struct {
	// Unique request ID
	RequestId string `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// Shares to be exited
	Shares cosmossdk_io_math.Int `protobuf:"bytes,2,opt,name=shares,proto3,customtype=cosmossdk.io/math.Int" json:"shares"`
	// When the exit was requested
	RequestTime time.Time `protobuf:"bytes,3,opt,name=request_time,json=requestTime,proto3,stdtime" json:"request_time"`
	// When the exit can be processed (after unbonding period)
	UnlockTime time.Time `protobuf:"bytes,4,opt,name=unlock_time,json=unlockTime,proto3,stdtime" json:"unlock_time"`
	// Current status of the exit request
	Status ExitRequestStatus `protobuf:"varint,5,opt,name=status,proto3,enum=noble.dollar.vaults.v2.ExitRequestStatus" json:"status,omitempty"`
	// Estimated amount to receive (calculated at request time)
	EstimatedAmount cosmossdk_io_math.Int `protobuf:"bytes,6,opt,name=estimated_amount,json=estimatedAmount,proto3,customtype=cosmossdk.io/math.Int" json:"estimated_amount"`
	// Block height when request was made
	RequestBlockHeight int64 `protobuf:"varint,7,opt,name=request_block_height,json=requestBlockHeight,proto3" json:"request_block_height,omitempty"`
}

func (m *ExitRequest) Reset()         { *m = ExitRequest{} }
func (m *ExitRequest) String() string { return proto.CompactTextString(m) }
func (*ExitRequest) ProtoMessage()    {}
func (*ExitRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a9e05010b6747034, []int{1}
}
func (m *ExitRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExitRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExitRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExitRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExitRequest.Merge(m, src)
}
func (m *ExitRequest) XXX_Size() int {
	return m.Size()
}
func (m *ExitRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ExitRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ExitRequest proto.InternalMessageInfo

func (m *ExitRequest) GetRequestId() string {
	if m != nil {
		return m.RequestId
	}
	return ""
}

func (m *ExitRequest) GetRequestTime() time.Time {
	if m != nil {
		return m.RequestTime
	}
	return time.Time{}
}

func (m *ExitRequest) GetUnlockTime() time.Time {
	if m != nil {
		return m.UnlockTime
	}
	return time.Time{}
}

func (m *ExitRequest) GetStatus() ExitRequestStatus {
	if m != nil {
		return m.Status
	}
	return EXIT_REQUEST_STATUS_PENDING
}

func (m *ExitRequest) GetRequestBlockHeight() int64 {
	if m != nil {
		return m.RequestBlockHeight
	}
	return 0
}

// VaultState represents the current state of a V2 vault
type VaultState struct {
	// Total shares issued
	TotalShares cosmossdk_io_math.Int `protobuf:"bytes,1,opt,name=total_shares,json=totalShares,proto3,customtype=cosmossdk.io/math.Int" json:"total_shares"`
	// Total Net Asset Value
	TotalNav cosmossdk_io_math.Int `protobuf:"bytes,2,opt,name=total_nav,json=totalNav,proto3,customtype=cosmossdk.io/math.Int" json:"total_nav"`
	// Current share price (NAV per share)
	SharePrice cosmossdk_io_math.LegacyDec `protobuf:"bytes,3,opt,name=share_price,json=sharePrice,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"share_price"`
	// Total number of users with positions
	TotalUsers uint64 `protobuf:"varint,4,opt,name=total_users,json=totalUsers,proto3" json:"total_users,omitempty"`
	// Whether deposits are currently enabled
	DepositsEnabled bool `protobuf:"varint,5,opt,name=deposits_enabled,json=depositsEnabled,proto3" json:"deposits_enabled,omitempty"`
	// Whether withdrawals are currently enabled
	WithdrawalsEnabled bool `protobuf:"varint,6,opt,name=withdrawals_enabled,json=withdrawalsEnabled,proto3" json:"withdrawals_enabled,omitempty"`
	// Last NAV update timestamp
	LastNavUpdate time.Time `protobuf:"bytes,7,opt,name=last_nav_update,json=lastNavUpdate,proto3,stdtime" json:"last_nav_update"`
	// Total shares pending exit
	TotalSharesPendingExit cosmossdk_io_math.Int `protobuf:"bytes,8,opt,name=total_shares_pending_exit,json=totalSharesPendingExit,proto3,customtype=cosmossdk.io/math.Int" json:"total_shares_pending_exit"`
	// Number of pending exit requests
	PendingExitRequests int32 `protobuf:"varint,9,opt,name=pending_exit_requests,json=pendingExitRequests,proto3" json:"pending_exit_requests,omitempty"`
}

func (m *VaultState) Reset()         { *m = VaultState{} }
func (m *VaultState) String() string { return proto.CompactTextString(m) }
func (*VaultState) ProtoMessage()    {}
func (*VaultState) Descriptor() ([]byte, []int) {
	return fileDescriptor_a9e05010b6747034, []int{2}
}
func (m *VaultState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VaultState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VaultState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VaultState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VaultState.Merge(m, src)
}
func (m *VaultState) XXX_Size() int {
	return m.Size()
}
func (m *VaultState) XXX_DiscardUnknown() {
	xxx_messageInfo_VaultState.DiscardUnknown(m)
}

var xxx_messageInfo_VaultState proto.InternalMessageInfo

func (m *VaultState) GetTotalUsers() uint64 {
	if m != nil {
		return m.TotalUsers
	}
	return 0
}

func (m *VaultState) GetDepositsEnabled() bool {
	if m != nil {
		return m.DepositsEnabled
	}
	return false
}

func (m *VaultState) GetWithdrawalsEnabled() bool {
	if m != nil {
		return m.WithdrawalsEnabled
	}
	return false
}

func (m *VaultState) GetLastNavUpdate() time.Time {
	if m != nil {
		return m.LastNavUpdate
	}
	return time.Time{}
}

func (m *VaultState) GetPendingExitRequests() int32 {
	if m != nil {
		return m.PendingExitRequests
	}
	return 0
}

// ShareCalculation contains details about share price calculations
type ShareCalculation struct {
	// Total NAV used in calculation
	TotalNav cosmossdk_io_math.Int `protobuf:"bytes,1,opt,name=total_nav,json=totalNav,proto3,customtype=cosmossdk.io/math.Int" json:"total_nav"`
	// Total shares used in calculation
	TotalShares cosmossdk_io_math.Int `protobuf:"bytes,2,opt,name=total_shares,json=totalShares,proto3,customtype=cosmossdk.io/math.Int" json:"total_shares"`
	// Resulting share price
	SharePrice cosmossdk_io_math.LegacyDec `protobuf:"bytes,3,opt,name=share_price,json=sharePrice,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"share_price"`
	// Calculation timestamp
	CalculationTime time.Time `protobuf:"bytes,4,opt,name=calculation_time,json=calculationTime,proto3,stdtime" json:"calculation_time"`
}

func (m *ShareCalculation) Reset()         { *m = ShareCalculation{} }
func (m *ShareCalculation) String() string { return proto.CompactTextString(m) }
func (*ShareCalculation) ProtoMessage()    {}
func (*ShareCalculation) Descriptor() ([]byte, []int) {
	return fileDescriptor_a9e05010b6747034, []int{3}
}
func (m *ShareCalculation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShareCalculation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ShareCalculation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ShareCalculation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShareCalculation.Merge(m, src)
}
func (m *ShareCalculation) XXX_Size() int {
	return m.Size()
}
func (m *ShareCalculation) XXX_DiscardUnknown() {
	xxx_messageInfo_ShareCalculation.DiscardUnknown(m)
}

var xxx_messageInfo_ShareCalculation proto.InternalMessageInfo

func (m *ShareCalculation) GetCalculationTime() time.Time {
	if m != nil {
		return m.CalculationTime
	}
	return time.Time{}
}

// DepositResult contains the outcome of a deposit operation
type DepositResult struct {
	// Amount deposited (after fees)
	AmountDeposited cosmossdk_io_math.Int `protobuf:"bytes,1,opt,name=amount_deposited,json=amountDeposited,proto3,customtype=cosmossdk.io/math.Int" json:"amount_deposited"`
	// Shares received
	SharesReceived cosmossdk_io_math.Int `protobuf:"bytes,2,opt,name=shares_received,json=sharesReceived,proto3,customtype=cosmossdk.io/math.Int" json:"shares_received"`
	// Fees paid
	FeesPaid cosmossdk_io_math.Int `protobuf:"bytes,3,opt,name=fees_paid,json=feesPaid,proto3,customtype=cosmossdk.io/math.Int" json:"fees_paid"`
	// Share price at time of deposit
	SharePrice cosmossdk_io_math.LegacyDec `protobuf:"bytes,4,opt,name=share_price,json=sharePrice,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"share_price"`
}

func (m *DepositResult) Reset()         { *m = DepositResult{} }
func (m *DepositResult) String() string { return proto.CompactTextString(m) }
func (*DepositResult) ProtoMessage()    {}
func (*DepositResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_a9e05010b6747034, []int{4}
}
func (m *DepositResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DepositResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DepositResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DepositResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DepositResult.Merge(m, src)
}
func (m *DepositResult) XXX_Size() int {
	return m.Size()
}
func (m *DepositResult) XXX_DiscardUnknown() {
	xxx_messageInfo_DepositResult.DiscardUnknown(m)
}

var xxx_messageInfo_DepositResult proto.InternalMessageInfo

// WithdrawalResult contains the outcome of a withdrawal operation
type WithdrawalResult struct {
	// Shares redeemed
	SharesRedeemed cosmossdk_io_math.Int `protobuf:"bytes,1,opt,name=shares_redeemed,json=sharesRedeemed,proto3,customtype=cosmossdk.io/math.Int" json:"shares_redeemed"`
	// Amount withdrawn (after fees)
	AmountWithdrawn cosmossdk_io_math.Int `protobuf:"bytes,2,opt,name=amount_withdrawn,json=amountWithdrawn,proto3,customtype=cosmossdk.io/math.Int" json:"amount_withdrawn"`
	// Fees paid
	FeesPaid cosmossdk_io_math.Int `protobuf:"bytes,3,opt,name=fees_paid,json=feesPaid,proto3,customtype=cosmossdk.io/math.Int" json:"fees_paid"`
	// Share price at time of withdrawal
	SharePrice cosmossdk_io_math.LegacyDec `protobuf:"bytes,4,opt,name=share_price,json=sharePrice,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"share_price"`
}

func (m *WithdrawalResult) Reset()         { *m = WithdrawalResult{} }
func (m *WithdrawalResult) String() string { return proto.CompactTextString(m) }
func (*WithdrawalResult) ProtoMessage()    {}
func (*WithdrawalResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_a9e05010b6747034, []int{5}
}
func (m *WithdrawalResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WithdrawalResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WithdrawalResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WithdrawalResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WithdrawalResult.Merge(m, src)
}
func (m *WithdrawalResult) XXX_Size() int {
	return m.Size()
}
func (m *WithdrawalResult) XXX_DiscardUnknown() {
	xxx_messageInfo_WithdrawalResult.DiscardUnknown(m)
}

var xxx_messageInfo_WithdrawalResult proto.InternalMessageInfo

// YieldDistribution represents yield distribution to shareholders
type YieldDistribution struct {
	// Total yield amount distributed
	TotalYield cosmossdk_io_math.Int `protobuf:"bytes,1,opt,name=total_yield,json=totalYield,proto3,customtype=cosmossdk.io/math.Int" json:"total_yield"`
	// Yield per share
	YieldPerShare cosmossdk_io_math.LegacyDec `protobuf:"bytes,2,opt,name=yield_per_share,json=yieldPerShare,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"yield_per_share"`
	// Distribution timestamp
	DistributionTime time.Time `protobuf:"bytes,3,opt,name=distribution_time,json=distributionTime,proto3,stdtime" json:"distribution_time"`
	// Number of eligible shareholders
	EligibleShareholders uint64 `protobuf:"varint,4,opt,name=eligible_shareholders,json=eligibleShareholders,proto3" json:"eligible_shareholders,omitempty"`
	// Source of the yield (e.g., "staking_rewards", "trading_fees")
	YieldSource string `protobuf:"bytes,5,opt,name=yield_source,json=yieldSource,proto3" json:"yield_source,omitempty"`
}

func (m *YieldDistribution) Reset()         { *m = YieldDistribution{} }
func (m *YieldDistribution) String() string { return proto.CompactTextString(m) }
func (*YieldDistribution) ProtoMessage()    {}
func (*YieldDistribution) Descriptor() ([]byte, []int) {
	return fileDescriptor_a9e05010b6747034, []int{6}
}
func (m *YieldDistribution) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *YieldDistribution) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_YieldDistribution.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *YieldDistribution) XXX_Merge(src proto.Message) {
	xxx_messageInfo_YieldDistribution.Merge(m, src)
}
func (m *YieldDistribution) XXX_Size() int {
	return m.Size()
}
func (m *YieldDistribution) XXX_DiscardUnknown() {
	xxx_messageInfo_YieldDistribution.DiscardUnknown(m)
}

var xxx_messageInfo_YieldDistribution proto.InternalMessageInfo

func (m *YieldDistribution) GetDistributionTime() time.Time {
	if m != nil {
		return m.DistributionTime
	}
	return time.Time{}
}

func (m *YieldDistribution) GetEligibleShareholders() uint64 {
	if m != nil {
		return m.EligibleShareholders
	}
	return 0
}

func (m *YieldDistribution) GetYieldSource() string {
	if m != nil {
		return m.YieldSource
	}
	return ""
}

func init() {
	proto.RegisterEnum("noble.dollar.vaults.v2.ExitRequestStatus", ExitRequestStatus_name, ExitRequestStatus_value)
	proto.RegisterType((*UserPosition)(nil), "noble.dollar.vaults.v2.UserPosition")
	proto.RegisterType((*ExitRequest)(nil), "noble.dollar.vaults.v2.ExitRequest")
	proto.RegisterType((*VaultState)(nil), "noble.dollar.vaults.v2.VaultState")
	proto.RegisterType((*ShareCalculation)(nil), "noble.dollar.vaults.v2.ShareCalculation")
	proto.RegisterType((*DepositResult)(nil), "noble.dollar.vaults.v2.DepositResult")
	proto.RegisterType((*WithdrawalResult)(nil), "noble.dollar.vaults.v2.WithdrawalResult")
	proto.RegisterType((*YieldDistribution)(nil), "noble.dollar.vaults.v2.YieldDistribution")
}

func init() {
	proto.RegisterFile("noble/dollar/vaults/v2/vaults.proto", fileDescriptor_a9e05010b6747034)
}

var fileDescriptor_a9e05010b6747034 = []byte{
	// 1135 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x57, 0x4f, 0x4f, 0x1b, 0x47,
	0x14, 0xf7, 0x1a, 0x87, 0xe2, 0x67, 0x88, 0xcd, 0x04, 0x22, 0x43, 0x84, 0x4d, 0xe0, 0x42, 0x22,
	0xd5, 0x4e, 0x89, 0xd4, 0x5b, 0x0f, 0x06, 0xaf, 0x12, 0x4b, 0x94, 0x98, 0x35, 0x34, 0xa1, 0x95,
	0xba, 0x1d, 0xef, 0x0e, 0xf6, 0x88, 0xf5, 0xae, 0xbb, 0x33, 0xeb, 0x40, 0x3f, 0x41, 0x8f, 0x39,
	0xf5, 0x0b, 0xf4, 0xd2, 0x63, 0x0f, 0xfd, 0x00, 0x3d, 0xe6, 0x18, 0xf5, 0x14, 0xf5, 0x90, 0x46,
	0x70, 0xe8, 0xb1, 0x6a, 0xa5, 0xde, 0xab, 0xf9, 0xb3, 0x78, 0x49, 0x88, 0x54, 0x96, 0xf4, 0xd0,
	0x8b, 0xe5, 0x7d, 0x7f, 0x7e, 0xfb, 0xe6, 0xf7, 0xde, 0xfc, 0x66, 0x16, 0x56, 0xfd, 0xa0, 0xeb,
	0x91, 0xba, 0x1b, 0x78, 0x1e, 0x0e, 0xeb, 0x23, 0x1c, 0x79, 0x9c, 0xd5, 0x47, 0xeb, 0xfa, 0x5f,
	0x6d, 0x18, 0x06, 0x3c, 0x40, 0x37, 0x65, 0x50, 0x4d, 0x05, 0xd5, 0xb4, 0x6b, 0xb4, 0xbe, 0x38,
	0x8b, 0x07, 0xd4, 0x0f, 0xea, 0xf2, 0x57, 0x85, 0x2e, 0x2e, 0x38, 0x01, 0x1b, 0x04, 0xcc, 0x96,
	0x4f, 0x75, 0xf5, 0xa0, 0x5d, 0x73, 0xbd, 0xa0, 0x17, 0x28, 0xbb, 0xf8, 0xa7, 0xad, 0xd5, 0x5e,
	0x10, 0xf4, 0x3c, 0x52, 0x97, 0x4f, 0xdd, 0xe8, 0xa0, 0xce, 0xe9, 0x80, 0x30, 0x8e, 0x07, 0x43,
	0x1d, 0x70, 0x71, 0x85, 0x1f, 0x9d, 0xab, 0x70, 0xe5, 0xbb, 0x1c, 0x4c, 0xef, 0x31, 0x12, 0xb6,
	0x03, 0x46, 0x39, 0x0d, 0x7c, 0xf4, 0x10, 0x26, 0x59, 0x1f, 0x87, 0x84, 0x95, 0x8d, 0x65, 0x63,
	0x2d, 0xbf, 0x71, 0xef, 0xf9, 0xab, 0x6a, 0xe6, 0xd7, 0x57, 0xd5, 0x79, 0x55, 0x12, 0x73, 0x0f,
	0x6b, 0x34, 0xa8, 0x0f, 0x30, 0xef, 0xd7, 0x5a, 0x3e, 0xff, 0xe5, 0xa7, 0x0f, 0x41, 0xd7, 0xda,
	0xf2, 0xf9, 0x0f, 0xbf, 0xff, 0x78, 0xd7, 0xb0, 0x74, 0x3e, 0xfa, 0x02, 0x4a, 0x41, 0x48, 0x7b,
	0xd4, 0xc7, 0x9e, 0xed, 0x92, 0xa1, 0x78, 0x41, 0x39, 0x9b, 0x12, 0xb3, 0x18, 0x23, 0x35, 0x15,
	0x10, 0xb2, 0x00, 0x1d, 0xd0, 0x90, 0xf1, 0x18, 0xd9, 0x16, 0xab, 0x2f, 0x4f, 0x2c, 0x1b, 0x6b,
	0x85, 0xf5, 0xc5, 0x9a, 0xa2, 0xa6, 0x16, 0x53, 0x53, 0xdb, 0x8d, 0xa9, 0xd9, 0x98, 0x12, 0xaf,
	0x7e, 0xf6, 0x5b, 0xd5, 0xb0, 0x4a, 0x32, 0x5f, 0xe3, 0x89, 0x00, 0x81, 0xe9, 0x61, 0xc6, 0x6d,
	0xec, 0x70, 0x3a, 0xa2, 0xfc, 0x58, 0x61, 0xe6, 0x2e, 0x83, 0x29, 0xf2, 0x1b, 0x3a, 0x5d, 0x62,
	0xae, 0xc2, 0x4c, 0x48, 0x1c, 0x42, 0x47, 0xc4, 0x3e, 0xa6, 0xc4, 0x73, 0xcb, 0xd7, 0x96, 0x8d,
	0xb5, 0x29, 0x6b, 0x5a, 0x1b, 0xf7, 0x85, 0x0d, 0x7d, 0x05, 0x37, 0x14, 0x67, 0xf6, 0x90, 0xf8,
	0x2e, 0xf5, 0x7b, 0x36, 0x39, 0xa2, 0xbc, 0x3c, 0x99, 0x92, 0xac, 0x59, 0x05, 0xd6, 0x56, 0x58,
	0xe6, 0x11, 0xe5, 0xe8, 0x1e, 0xcc, 0xc9, 0x55, 0x11, 0x89, 0x6c, 0x87, 0xe4, 0xeb, 0x88, 0x30,
	0xce, 0xca, 0x1f, 0x2c, 0x1b, 0x6b, 0xd7, 0x2c, 0xa4, 0x7c, 0x22, 0xd2, 0xd2, 0x9e, 0x95, 0x97,
	0x13, 0x50, 0x48, 0x18, 0xd0, 0x12, 0x80, 0xce, 0xb2, 0xa9, 0xab, 0x66, 0xc3, 0xca, 0x6b, 0x4b,
	0xcb, 0x4d, 0x8c, 0x4d, 0xf6, 0x8a, 0x63, 0xf3, 0x00, 0xa6, 0xe3, 0x17, 0x5d, 0xba, 0xa7, 0x05,
	0x9d, 0x29, 0xa9, 0x37, 0xa1, 0x10, 0xf9, 0x5e, 0xe0, 0x1c, 0x5e, 0xbe, 0x8f, 0xa0, 0x12, 0x25,
	0x4c, 0x03, 0x26, 0x19, 0xc7, 0x3c, 0x62, 0xb2, 0x75, 0xd7, 0xd7, 0xef, 0xd4, 0x2e, 0xde, 0xd4,
	0xb5, 0x04, 0x5b, 0x1d, 0x99, 0x60, 0xe9, 0x44, 0xb1, 0x13, 0x08, 0xe3, 0x74, 0x80, 0x39, 0x71,
	0x6d, 0x3c, 0x08, 0x22, 0x3f, 0x7d, 0x73, 0x8b, 0x67, 0x48, 0x0d, 0x09, 0x24, 0x5a, 0x1b, 0xf3,
	0xd5, 0x95, 0xab, 0xed, 0x13, 0xda, 0xeb, 0x73, 0xd9, 0xda, 0x09, 0x0b, 0x69, 0xdf, 0x86, 0x70,
	0x3d, 0x94, 0x9e, 0x95, 0xbf, 0x73, 0x00, 0x9f, 0x89, 0xb2, 0x45, 0x99, 0x04, 0x75, 0x60, 0x9a,
	0x07, 0x1c, 0x7b, 0xf6, 0x15, 0xf7, 0x7d, 0x41, 0xa2, 0x74, 0x54, 0x17, 0x3f, 0x85, 0xbc, 0x02,
	0xf5, 0xf1, 0x28, 0xf5, 0x48, 0x4c, 0x49, 0x88, 0x6d, 0x3c, 0x42, 0x8f, 0xa1, 0x20, 0xab, 0xb3,
	0x87, 0x21, 0x75, 0xd4, 0x4c, 0xe4, 0x37, 0x3e, 0xd6, 0x80, 0xb7, 0xde, 0x06, 0xdc, 0x22, 0x3d,
	0xec, 0x1c, 0x37, 0x89, 0x93, 0x80, 0x6d, 0x12, 0x47, 0xc1, 0x82, 0x84, 0x6a, 0x0b, 0x24, 0x54,
	0x05, 0x55, 0xb6, 0x1d, 0x31, 0x12, 0x32, 0x39, 0x24, 0x39, 0x0b, 0xa4, 0x49, 0xc8, 0x22, 0x43,
	0x77, 0xa0, 0xa4, 0x25, 0x86, 0xd9, 0xc4, 0xc7, 0x5d, 0x8f, 0xc4, 0x7b, 0xb8, 0x18, 0xdb, 0x4d,
	0x65, 0x46, 0x75, 0xb8, 0xf1, 0x94, 0xf2, 0xbe, 0x1b, 0xe2, 0xa7, 0xd8, 0x1b, 0x47, 0x4f, 0xca,
	0x68, 0x94, 0x70, 0xc5, 0x09, 0x5b, 0x50, 0x94, 0x82, 0xe3, 0xe3, 0x91, 0x1d, 0x0d, 0x5d, 0xcc,
	0x89, 0xec, 0xda, 0xbf, 0x9d, 0xd2, 0x19, 0x91, 0xbc, 0x8d, 0x47, 0x7b, 0x32, 0x15, 0x1d, 0xc2,
	0x42, 0xb2, 0x8f, 0xe7, 0xb5, 0x64, 0x2a, 0x65, 0x0b, 0x6e, 0x26, 0x9a, 0x9a, 0x14, 0x94, 0x75,
	0x98, 0x4f, 0xe2, 0x8f, 0x15, 0x25, 0x2f, 0x15, 0xe5, 0xc6, 0x70, 0x1c, 0x7b, 0x26, 0x29, 0xaf,
	0xb3, 0x50, 0x92, 0x48, 0x9b, 0xd8, 0x73, 0x22, 0x0f, 0xcb, 0xf3, 0xe6, 0xdc, 0xa0, 0x18, 0x57,
	0x1e, 0x94, 0x37, 0x87, 0x39, 0xfb, 0x3e, 0x86, 0xf9, 0x3f, 0x9b, 0xbe, 0x47, 0x50, 0x72, 0xc6,
	0x5c, 0x5c, 0x5e, 0xa7, 0x8a, 0x89, 0x6c, 0xe1, 0x5f, 0xf9, 0x23, 0x0b, 0x33, 0xfa, 0x48, 0xb3,
	0x08, 0x8b, 0x3c, 0x2e, 0xb4, 0x47, 0x29, 0x4e, 0x7c, 0x52, 0x12, 0x37, 0x35, 0xcd, 0x45, 0x85,
	0xd4, 0x8c, 0x81, 0xd0, 0x3e, 0x14, 0xf5, 0xb0, 0xe9, 0xf3, 0xcc, 0x4d, 0x4d, 0xf8, 0x75, 0x05,
	0x64, 0x69, 0x1c, 0x31, 0x17, 0x07, 0x44, 0x4c, 0x31, 0xa6, 0xae, 0x66, 0x3c, 0xc5, 0x5c, 0x08,
	0x88, 0x36, 0xa6, 0xee, 0x9b, 0x2d, 0xcc, 0xbd, 0xaf, 0x16, 0xae, 0xfc, 0x95, 0x85, 0xd2, 0xe3,
	0xb3, 0xad, 0xad, 0x49, 0x4f, 0xf2, 0xe2, 0x12, 0x32, 0xb8, 0x02, 0xe7, 0x67, 0xbc, 0x28, 0x9c,
	0x44, 0x3f, 0x63, 0x41, 0xf1, 0xd3, 0xdf, 0xaa, 0x14, 0x52, 0x5c, 0xbe, 0xff, 0xbf, 0x21, 0xfd,
	0xcf, 0x2c, 0xcc, 0xca, 0xab, 0x53, 0x93, 0x32, 0x1e, 0xd2, 0x6e, 0x24, 0xa5, 0x64, 0x27, 0xd6,
	0x72, 0x75, 0xd3, 0x4a, 0xcb, 0xb8, 0x52, 0x7f, 0x75, 0x33, 0xfb, 0x12, 0x8a, 0x12, 0xcc, 0x1e,
	0x92, 0x50, 0x49, 0x8a, 0x26, 0x3b, 0xed, 0x2a, 0x66, 0x24, 0x5c, 0x9b, 0x84, 0x52, 0x5a, 0xd0,
	0x0e, 0xcc, 0xba, 0x89, 0x25, 0xa4, 0xb8, 0xc5, 0x26, 0xd3, 0xe5, 0x7d, 0xe5, 0x3e, 0xcc, 0x13,
	0x8f, 0xf6, 0x68, 0xd7, 0x23, 0xaa, 0xe2, 0x7e, 0xe0, 0xb9, 0xe3, 0xb3, 0x6d, 0x2e, 0x76, 0x76,
	0x12, 0x3e, 0x74, 0x1b, 0xa6, 0xd5, 0x3a, 0x59, 0x10, 0x85, 0x0e, 0x91, 0x27, 0x5c, 0xde, 0x2a,
	0x48, 0x5b, 0x47, 0x9a, 0xee, 0xfe, 0x6c, 0xc0, 0xec, 0x5b, 0x57, 0x1c, 0x54, 0x85, 0x5b, 0xe6,
	0x93, 0xd6, 0xae, 0x6d, 0x99, 0x3b, 0x7b, 0x66, 0x67, 0xd7, 0xee, 0xec, 0x36, 0x76, 0xf7, 0x3a,
	0x76, 0xdb, 0xdc, 0x6e, 0xb6, 0xb6, 0x1f, 0x94, 0x32, 0x68, 0x09, 0x16, 0x2e, 0x0a, 0xb0, 0xcc,
	0x46, 0x73, 0xbf, 0x64, 0xa0, 0xdb, 0xb0, 0x74, 0x61, 0xbe, 0xf5, 0x68, 0xd3, 0xec, 0x74, 0xcc,
	0x66, 0x29, 0xfb, 0xae, 0x90, 0xcd, 0xc6, 0xf6, 0xa6, 0xb9, 0xb5, 0x65, 0x36, 0x4b, 0x13, 0xef,
	0xaa, 0xc2, 0x7c, 0xd2, 0x6e, 0x59, 0x66, 0xb3, 0x94, 0x5b, 0xcc, 0x7d, 0xfb, 0x7d, 0x25, 0xb3,
	0xf1, 0xc9, 0xf3, 0x93, 0x8a, 0xf1, 0xe2, 0xa4, 0x62, 0xbc, 0x3e, 0xa9, 0x18, 0xcf, 0x4e, 0x2b,
	0x99, 0x17, 0xa7, 0x95, 0xcc, 0xcb, 0xd3, 0x4a, 0xe6, 0xf3, 0x55, 0x7d, 0x9b, 0x53, 0x57, 0xbb,
	0xa3, 0xe3, 0x6f, 0xc4, 0xa7, 0x1c, 0x3f, 0x1e, 0x12, 0x36, 0xfe, 0xb4, 0xeb, 0x4e, 0xca, 0x4e,
	0xdc, 0xff, 0x27, 0x00, 0x00, 0xff, 0xff, 0xad, 0x1a, 0x27, 0x66, 0xfb, 0x0d, 0x00, 0x00,
}

func (m *UserPosition) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserPosition) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserPosition) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ActiveExitRequests != 0 {
		i = encodeVarintVaults(dAtA, i, uint64(m.ActiveExitRequests))
		i--
		dAtA[i] = 0x38
	}
	{
		size := m.SharesPendingExit.Size()
		i -= size
		if _, err := m.SharesPendingExit.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintVaults(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	if m.ReceiveYield {
		i--
		if m.ReceiveYield {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	n1, err1 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.LastActivityTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.LastActivityTime):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintVaults(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x22
	n2, err2 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.FirstDepositTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.FirstDepositTime):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintVaults(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x1a
	{
		size := m.OriginalDeposit.Size()
		i -= size
		if _, err := m.OriginalDeposit.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintVaults(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.Shares.Size()
		i -= size
		if _, err := m.Shares.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintVaults(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ExitRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExitRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExitRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RequestBlockHeight != 0 {
		i = encodeVarintVaults(dAtA, i, uint64(m.RequestBlockHeight))
		i--
		dAtA[i] = 0x38
	}
	{
		size := m.EstimatedAmount.Size()
		i -= size
		if _, err := m.EstimatedAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintVaults(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	if m.Status != 0 {
		i = encodeVarintVaults(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x28
	}
	n3, err3 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.UnlockTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.UnlockTime):])
	if err3 != nil {
		return 0, err3
	}
	i -= n3
	i = encodeVarintVaults(dAtA, i, uint64(n3))
	i--
	dAtA[i] = 0x22
	n4, err4 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.RequestTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.RequestTime):])
	if err4 != nil {
		return 0, err4
	}
	i -= n4
	i = encodeVarintVaults(dAtA, i, uint64(n4))
	i--
	dAtA[i] = 0x1a
	{
		size := m.Shares.Size()
		i -= size
		if _, err := m.Shares.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintVaults(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.RequestId) > 0 {
		i -= len(m.RequestId)
		copy(dAtA[i:], m.RequestId)
		i = encodeVarintVaults(dAtA, i, uint64(len(m.RequestId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VaultState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VaultState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VaultState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PendingExitRequests != 0 {
		i = encodeVarintVaults(dAtA, i, uint64(m.PendingExitRequests))
		i--
		dAtA[i] = 0x48
	}
	{
		size := m.TotalSharesPendingExit.Size()
		i -= size
		if _, err := m.TotalSharesPendingExit.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintVaults(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	n5, err5 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.LastNavUpdate, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.LastNavUpdate):])
	if err5 != nil {
		return 0, err5
	}
	i -= n5
	i = encodeVarintVaults(dAtA, i, uint64(n5))
	i--
	dAtA[i] = 0x3a
	if m.WithdrawalsEnabled {
		i--
		if m.WithdrawalsEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.DepositsEnabled {
		i--
		if m.DepositsEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.TotalUsers != 0 {
		i = encodeVarintVaults(dAtA, i, uint64(m.TotalUsers))
		i--
		dAtA[i] = 0x20
	}
	{
		size := m.SharePrice.Size()
		i -= size
		if _, err := m.SharePrice.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintVaults(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.TotalNav.Size()
		i -= size
		if _, err := m.TotalNav.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintVaults(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.TotalShares.Size()
		i -= size
		if _, err := m.TotalShares.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintVaults(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ShareCalculation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShareCalculation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ShareCalculation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n6, err6 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.CalculationTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.CalculationTime):])
	if err6 != nil {
		return 0, err6
	}
	i -= n6
	i = encodeVarintVaults(dAtA, i, uint64(n6))
	i--
	dAtA[i] = 0x22
	{
		size := m.SharePrice.Size()
		i -= size
		if _, err := m.SharePrice.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintVaults(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.TotalShares.Size()
		i -= size
		if _, err := m.TotalShares.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintVaults(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.TotalNav.Size()
		i -= size
		if _, err := m.TotalNav.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintVaults(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *DepositResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DepositResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DepositResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.SharePrice.Size()
		i -= size
		if _, err := m.SharePrice.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintVaults(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.FeesPaid.Size()
		i -= size
		if _, err := m.FeesPaid.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintVaults(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.SharesReceived.Size()
		i -= size
		if _, err := m.SharesReceived.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintVaults(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.AmountDeposited.Size()
		i -= size
		if _, err := m.AmountDeposited.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintVaults(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *WithdrawalResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WithdrawalResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WithdrawalResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.SharePrice.Size()
		i -= size
		if _, err := m.SharePrice.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintVaults(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.FeesPaid.Size()
		i -= size
		if _, err := m.FeesPaid.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintVaults(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.AmountWithdrawn.Size()
		i -= size
		if _, err := m.AmountWithdrawn.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintVaults(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.SharesRedeemed.Size()
		i -= size
		if _, err := m.SharesRedeemed.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintVaults(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *YieldDistribution) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *YieldDistribution) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *YieldDistribution) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.YieldSource) > 0 {
		i -= len(m.YieldSource)
		copy(dAtA[i:], m.YieldSource)
		i = encodeVarintVaults(dAtA, i, uint64(len(m.YieldSource)))
		i--
		dAtA[i] = 0x2a
	}
	if m.EligibleShareholders != 0 {
		i = encodeVarintVaults(dAtA, i, uint64(m.EligibleShareholders))
		i--
		dAtA[i] = 0x20
	}
	n7, err7 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.DistributionTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.DistributionTime):])
	if err7 != nil {
		return 0, err7
	}
	i -= n7
	i = encodeVarintVaults(dAtA, i, uint64(n7))
	i--
	dAtA[i] = 0x1a
	{
		size := m.YieldPerShare.Size()
		i -= size
		if _, err := m.YieldPerShare.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintVaults(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.TotalYield.Size()
		i -= size
		if _, err := m.TotalYield.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintVaults(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintVaults(dAtA []byte, offset int, v uint64) int {
	offset -= sovVaults(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *UserPosition) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Shares.Size()
	n += 1 + l + sovVaults(uint64(l))
	l = m.OriginalDeposit.Size()
	n += 1 + l + sovVaults(uint64(l))
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.FirstDepositTime)
	n += 1 + l + sovVaults(uint64(l))
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.LastActivityTime)
	n += 1 + l + sovVaults(uint64(l))
	if m.ReceiveYield {
		n += 2
	}
	l = m.SharesPendingExit.Size()
	n += 1 + l + sovVaults(uint64(l))
	if m.ActiveExitRequests != 0 {
		n += 1 + sovVaults(uint64(m.ActiveExitRequests))
	}
	return n
}

func (m *ExitRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RequestId)
	if l > 0 {
		n += 1 + l + sovVaults(uint64(l))
	}
	l = m.Shares.Size()
	n += 1 + l + sovVaults(uint64(l))
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.RequestTime)
	n += 1 + l + sovVaults(uint64(l))
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.UnlockTime)
	n += 1 + l + sovVaults(uint64(l))
	if m.Status != 0 {
		n += 1 + sovVaults(uint64(m.Status))
	}
	l = m.EstimatedAmount.Size()
	n += 1 + l + sovVaults(uint64(l))
	if m.RequestBlockHeight != 0 {
		n += 1 + sovVaults(uint64(m.RequestBlockHeight))
	}
	return n
}

func (m *VaultState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.TotalShares.Size()
	n += 1 + l + sovVaults(uint64(l))
	l = m.TotalNav.Size()
	n += 1 + l + sovVaults(uint64(l))
	l = m.SharePrice.Size()
	n += 1 + l + sovVaults(uint64(l))
	if m.TotalUsers != 0 {
		n += 1 + sovVaults(uint64(m.TotalUsers))
	}
	if m.DepositsEnabled {
		n += 2
	}
	if m.WithdrawalsEnabled {
		n += 2
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.LastNavUpdate)
	n += 1 + l + sovVaults(uint64(l))
	l = m.TotalSharesPendingExit.Size()
	n += 1 + l + sovVaults(uint64(l))
	if m.PendingExitRequests != 0 {
		n += 1 + sovVaults(uint64(m.PendingExitRequests))
	}
	return n
}

func (m *ShareCalculation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.TotalNav.Size()
	n += 1 + l + sovVaults(uint64(l))
	l = m.TotalShares.Size()
	n += 1 + l + sovVaults(uint64(l))
	l = m.SharePrice.Size()
	n += 1 + l + sovVaults(uint64(l))
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.CalculationTime)
	n += 1 + l + sovVaults(uint64(l))
	return n
}

func (m *DepositResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.AmountDeposited.Size()
	n += 1 + l + sovVaults(uint64(l))
	l = m.SharesReceived.Size()
	n += 1 + l + sovVaults(uint64(l))
	l = m.FeesPaid.Size()
	n += 1 + l + sovVaults(uint64(l))
	l = m.SharePrice.Size()
	n += 1 + l + sovVaults(uint64(l))
	return n
}

func (m *WithdrawalResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.SharesRedeemed.Size()
	n += 1 + l + sovVaults(uint64(l))
	l = m.AmountWithdrawn.Size()
	n += 1 + l + sovVaults(uint64(l))
	l = m.FeesPaid.Size()
	n += 1 + l + sovVaults(uint64(l))
	l = m.SharePrice.Size()
	n += 1 + l + sovVaults(uint64(l))
	return n
}

func (m *YieldDistribution) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.TotalYield.Size()
	n += 1 + l + sovVaults(uint64(l))
	l = m.YieldPerShare.Size()
	n += 1 + l + sovVaults(uint64(l))
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.DistributionTime)
	n += 1 + l + sovVaults(uint64(l))
	if m.EligibleShareholders != 0 {
		n += 1 + sovVaults(uint64(m.EligibleShareholders))
	}
	l = len(m.YieldSource)
	if l > 0 {
		n += 1 + l + sovVaults(uint64(l))
	}
	return n
}

func sovVaults(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozVaults(x uint64) (n int) {
	return sovVaults(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *UserPosition) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVaults
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserPosition: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserPosition: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shares", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVaults
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVaults
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVaults
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Shares.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginalDeposit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVaults
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVaults
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVaults
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.OriginalDeposit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstDepositTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVaults
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVaults
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVaults
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.FirstDepositTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastActivityTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVaults
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVaults
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVaults
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.LastActivityTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceiveYield", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVaults
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ReceiveYield = bool(v != 0)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SharesPendingExit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVaults
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVaults
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVaults
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SharesPendingExit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveExitRequests", wireType)
			}
			m.ActiveExitRequests = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVaults
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActiveExitRequests |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVaults(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVaults
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExitRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVaults
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExitRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExitRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVaults
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVaults
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVaults
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shares", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVaults
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVaults
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVaults
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Shares.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVaults
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVaults
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVaults
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.RequestTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnlockTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVaults
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVaults
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVaults
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.UnlockTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVaults
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= ExitRequestStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EstimatedAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVaults
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVaults
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVaults
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EstimatedAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestBlockHeight", wireType)
			}
			m.RequestBlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVaults
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestBlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVaults(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVaults
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VaultState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVaults
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VaultState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VaultState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalShares", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVaults
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVaults
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVaults
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalShares.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalNav", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVaults
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVaults
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVaults
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalNav.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SharePrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVaults
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVaults
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVaults
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SharePrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalUsers", wireType)
			}
			m.TotalUsers = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVaults
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalUsers |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepositsEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVaults
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DepositsEnabled = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithdrawalsEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVaults
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WithdrawalsEnabled = bool(v != 0)
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastNavUpdate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVaults
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVaults
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVaults
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.LastNavUpdate, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalSharesPendingExit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVaults
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVaults
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVaults
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalSharesPendingExit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendingExitRequests", wireType)
			}
			m.PendingExitRequests = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVaults
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PendingExitRequests |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVaults(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVaults
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShareCalculation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVaults
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShareCalculation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShareCalculation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalNav", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVaults
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVaults
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVaults
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalNav.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalShares", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVaults
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVaults
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVaults
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalShares.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SharePrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVaults
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVaults
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVaults
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SharePrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CalculationTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVaults
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVaults
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVaults
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.CalculationTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVaults(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVaults
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DepositResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVaults
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DepositResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DepositResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmountDeposited", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVaults
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVaults
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVaults
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AmountDeposited.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SharesReceived", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVaults
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVaults
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVaults
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SharesReceived.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeesPaid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVaults
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVaults
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVaults
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FeesPaid.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SharePrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVaults
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVaults
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVaults
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SharePrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVaults(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVaults
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WithdrawalResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVaults
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WithdrawalResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WithdrawalResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SharesRedeemed", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVaults
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVaults
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVaults
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SharesRedeemed.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmountWithdrawn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVaults
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVaults
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVaults
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AmountWithdrawn.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeesPaid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVaults
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVaults
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVaults
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FeesPaid.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SharePrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVaults
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVaults
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVaults
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SharePrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVaults(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVaults
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *YieldDistribution) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVaults
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: YieldDistribution: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: YieldDistribution: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalYield", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVaults
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVaults
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVaults
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalYield.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field YieldPerShare", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVaults
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVaults
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVaults
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.YieldPerShare.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DistributionTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVaults
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVaults
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVaults
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.DistributionTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EligibleShareholders", wireType)
			}
			m.EligibleShareholders = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVaults
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EligibleShareholders |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field YieldSource", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVaults
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVaults
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVaults
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.YieldSource = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVaults(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVaults
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipVaults(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowVaults
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVaults
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVaults
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthVaults
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupVaults
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthVaults
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthVaults        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowVaults          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupVaults = fmt.Errorf("proto: unexpected end of group")
)

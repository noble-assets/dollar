// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: noble/dollar/vaults/v1/events.proto

package vaults

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// PositionLocked is an event emitted when a user locks $USDN into a Vault.
type PositionLocked struct {
	Account   string                      `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	VaultType string                      `protobuf:"bytes,2,opt,name=vault_type,json=vaultType,proto3" json:"vault_type,omitempty"`
	Index     cosmossdk_io_math.LegacyDec `protobuf:"bytes,3,opt,name=index,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"index"`
	Amount    cosmossdk_io_math.Int       `protobuf:"bytes,4,opt,name=amount,proto3,customtype=cosmossdk.io/math.Int" json:"amount"`
	Principal cosmossdk_io_math.Int       `protobuf:"bytes,5,opt,name=principal,proto3,customtype=cosmossdk.io/math.Int" json:"principal"`
}

func (m *PositionLocked) Reset()         { *m = PositionLocked{} }
func (m *PositionLocked) String() string { return proto.CompactTextString(m) }
func (*PositionLocked) ProtoMessage()    {}
func (*PositionLocked) Descriptor() ([]byte, []int) {
	return fileDescriptor_63fabd8b34b744a3, []int{0}
}
func (m *PositionLocked) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PositionLocked) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PositionLocked.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PositionLocked) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PositionLocked.Merge(m, src)
}
func (m *PositionLocked) XXX_Size() int {
	return m.Size()
}
func (m *PositionLocked) XXX_DiscardUnknown() {
	xxx_messageInfo_PositionLocked.DiscardUnknown(m)
}

var xxx_messageInfo_PositionLocked proto.InternalMessageInfo

func (m *PositionLocked) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *PositionLocked) GetVaultType() string {
	if m != nil {
		return m.VaultType
	}
	return ""
}

// PositionUnlocked is an event emitted when a user unlocks their $USDN from a Vault.
type PositionUnlocked struct {
	Account   string                      `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	VaultType string                      `protobuf:"bytes,2,opt,name=vault_type,json=vaultType,proto3" json:"vault_type,omitempty"`
	Index     cosmossdk_io_math.LegacyDec `protobuf:"bytes,3,opt,name=index,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"index"`
	Amount    cosmossdk_io_math.Int       `protobuf:"bytes,4,opt,name=amount,proto3,customtype=cosmossdk.io/math.Int" json:"amount"`
	Principal cosmossdk_io_math.Int       `protobuf:"bytes,5,opt,name=principal,proto3,customtype=cosmossdk.io/math.Int" json:"principal"`
}

func (m *PositionUnlocked) Reset()         { *m = PositionUnlocked{} }
func (m *PositionUnlocked) String() string { return proto.CompactTextString(m) }
func (*PositionUnlocked) ProtoMessage()    {}
func (*PositionUnlocked) Descriptor() ([]byte, []int) {
	return fileDescriptor_63fabd8b34b744a3, []int{1}
}
func (m *PositionUnlocked) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PositionUnlocked) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PositionUnlocked.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PositionUnlocked) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PositionUnlocked.Merge(m, src)
}
func (m *PositionUnlocked) XXX_Size() int {
	return m.Size()
}
func (m *PositionUnlocked) XXX_DiscardUnknown() {
	xxx_messageInfo_PositionUnlocked.DiscardUnknown(m)
}

var xxx_messageInfo_PositionUnlocked proto.InternalMessageInfo

func (m *PositionUnlocked) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *PositionUnlocked) GetVaultType() string {
	if m != nil {
		return m.VaultType
	}
	return ""
}

// PausedStateUpdated is an event emitted when the module pause
// state is changed.
type PausedStateUpdated struct {
	Paused string `protobuf:"bytes,1,opt,name=paused,proto3" json:"paused,omitempty"`
}

func (m *PausedStateUpdated) Reset()         { *m = PausedStateUpdated{} }
func (m *PausedStateUpdated) String() string { return proto.CompactTextString(m) }
func (*PausedStateUpdated) ProtoMessage()    {}
func (*PausedStateUpdated) Descriptor() ([]byte, []int) {
	return fileDescriptor_63fabd8b34b744a3, []int{2}
}
func (m *PausedStateUpdated) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PausedStateUpdated) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PausedStateUpdated.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PausedStateUpdated) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PausedStateUpdated.Merge(m, src)
}
func (m *PausedStateUpdated) XXX_Size() int {
	return m.Size()
}
func (m *PausedStateUpdated) XXX_DiscardUnknown() {
	xxx_messageInfo_PausedStateUpdated.DiscardUnknown(m)
}

var xxx_messageInfo_PausedStateUpdated proto.InternalMessageInfo

func (m *PausedStateUpdated) GetPaused() string {
	if m != nil {
		return m.Paused
	}
	return ""
}

// RewardClaimed is an event emitted whenever a user claim their rewards.
type RewardClaimed struct {
	Account string                `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	Amount  cosmossdk_io_math.Int `protobuf:"bytes,2,opt,name=amount,proto3,customtype=cosmossdk.io/math.Int" json:"amount"`
}

func (m *RewardClaimed) Reset()         { *m = RewardClaimed{} }
func (m *RewardClaimed) String() string { return proto.CompactTextString(m) }
func (*RewardClaimed) ProtoMessage()    {}
func (*RewardClaimed) Descriptor() ([]byte, []int) {
	return fileDescriptor_63fabd8b34b744a3, []int{3}
}
func (m *RewardClaimed) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RewardClaimed) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RewardClaimed.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RewardClaimed) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RewardClaimed.Merge(m, src)
}
func (m *RewardClaimed) XXX_Size() int {
	return m.Size()
}
func (m *RewardClaimed) XXX_DiscardUnknown() {
	xxx_messageInfo_RewardClaimed.DiscardUnknown(m)
}

var xxx_messageInfo_RewardClaimed proto.InternalMessageInfo

func (m *RewardClaimed) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func init() {
	proto.RegisterType((*PositionLocked)(nil), "noble.dollar.vaults.v1.PositionLocked")
	proto.RegisterType((*PositionUnlocked)(nil), "noble.dollar.vaults.v1.PositionUnlocked")
	proto.RegisterType((*PausedStateUpdated)(nil), "noble.dollar.vaults.v1.PausedStateUpdated")
	proto.RegisterType((*RewardClaimed)(nil), "noble.dollar.vaults.v1.RewardClaimed")
}

func init() {
	proto.RegisterFile("noble/dollar/vaults/v1/events.proto", fileDescriptor_63fabd8b34b744a3)
}

var fileDescriptor_63fabd8b34b744a3 = []byte{
	// 406 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x93, 0xc1, 0xaa, 0x13, 0x31,
	0x14, 0x86, 0x67, 0x46, 0x5b, 0x69, 0x40, 0xd1, 0xa0, 0x65, 0xac, 0x74, 0x2a, 0x75, 0x23, 0xa2,
	0x13, 0x8b, 0xa0, 0xfb, 0xda, 0x85, 0x85, 0x22, 0xa5, 0xda, 0x8d, 0x9b, 0x92, 0x26, 0xa1, 0x86,
	0xce, 0x24, 0xc3, 0x24, 0x1d, 0x3b, 0x3e, 0x85, 0x8f, 0xe1, 0x52, 0xd1, 0x87, 0xe8, 0xb2, 0xb8,
	0x12, 0x17, 0x45, 0xda, 0x85, 0xaf, 0x21, 0x4d, 0x52, 0x7a, 0xe1, 0xc2, 0xe5, 0x72, 0xef, 0xf6,
	0x6e, 0x86, 0x39, 0xe7, 0xfc, 0xf3, 0xcd, 0xc9, 0x1f, 0x7e, 0xf0, 0x48, 0xc8, 0x69, 0xc2, 0x10,
	0x95, 0x49, 0x82, 0x73, 0x54, 0xe0, 0x45, 0xa2, 0x15, 0x2a, 0x3a, 0x88, 0x15, 0x4c, 0x68, 0x15,
	0x67, 0xb9, 0xd4, 0x12, 0xd6, 0x8d, 0x28, 0xb6, 0xa2, 0xd8, 0x8a, 0xe2, 0xa2, 0xd3, 0xb8, 0x83,
	0x53, 0x2e, 0x24, 0x32, 0x4f, 0x2b, 0x6d, 0xdc, 0x27, 0x52, 0xa5, 0x52, 0x4d, 0x4c, 0x85, 0x6c,
	0xe1, 0x46, 0x77, 0x67, 0x72, 0x26, 0x6d, 0x7f, 0xff, 0x66, 0xbb, 0xed, 0xef, 0x01, 0xb8, 0x35,
	0x94, 0x8a, 0x6b, 0x2e, 0xc5, 0x40, 0x92, 0x39, 0xa3, 0x30, 0x04, 0x37, 0x30, 0x21, 0x72, 0x21,
	0x74, 0xe8, 0x3f, 0xf4, 0x1f, 0xd7, 0x46, 0x87, 0x12, 0x36, 0x01, 0x30, 0x7f, 0x9f, 0xe8, 0x32,
	0x63, 0x61, 0x60, 0x86, 0x35, 0xd3, 0x79, 0x5f, 0x66, 0x0c, 0x0e, 0x40, 0x85, 0x0b, 0xca, 0x96,
	0xe1, 0xb5, 0xfd, 0xa4, 0xfb, 0x72, 0xb5, 0x69, 0x79, 0x7f, 0x36, 0xad, 0x07, 0x76, 0x0d, 0x45,
	0xe7, 0x31, 0x97, 0x28, 0xc5, 0xfa, 0x63, 0x3c, 0x60, 0x33, 0x4c, 0xca, 0x1e, 0x23, 0xbf, 0x7e,
	0x3e, 0x03, 0x6e, 0xcb, 0x1e, 0x23, 0x5f, 0xff, 0x7d, 0x7b, 0xe2, 0x8f, 0x2c, 0x04, 0xbe, 0x01,
	0x55, 0x9c, 0x9a, 0x2d, 0xae, 0x1b, 0xdc, 0x73, 0x87, 0xbb, 0x77, 0x1a, 0xd7, 0x17, 0xfa, 0x04,
	0xa8, 0x2f, 0xb4, 0x05, 0xb9, 0xef, 0xe1, 0x5b, 0x50, 0xcb, 0x72, 0x2e, 0x08, 0xcf, 0x70, 0x12,
	0x56, 0x2e, 0x08, 0x3b, 0x22, 0xda, 0x3f, 0x02, 0x70, 0xfb, 0xe0, 0xd9, 0x58, 0x24, 0x57, 0xae,
	0x9d, 0xcb, 0xb5, 0xa7, 0x00, 0x0e, 0xf1, 0x42, 0x31, 0xfa, 0x4e, 0x63, 0xcd, 0xc6, 0x19, 0xc5,
	0x9a, 0x51, 0x58, 0x07, 0xd5, 0xcc, 0x74, 0x9d, 0x6b, 0xae, 0x6a, 0x2b, 0x70, 0x73, 0xc4, 0x3e,
	0xe1, 0x9c, 0xbe, 0x4e, 0x30, 0x4f, 0xcf, 0xf4, 0xf7, 0x78, 0xe4, 0xe0, 0x72, 0x47, 0xee, 0xbe,
	0x5a, 0x6d, 0x23, 0x7f, 0xbd, 0x8d, 0xfc, 0xbf, 0xdb, 0xc8, 0xff, 0xb2, 0x8b, 0xbc, 0xf5, 0x2e,
	0xf2, 0x7e, 0xef, 0x22, 0xef, 0x43, 0xd3, 0x85, 0xcf, 0x26, 0x71, 0x59, 0x7e, 0x46, 0xfb, 0xcb,
	0x54, 0x2e, 0xb1, 0xd3, 0xaa, 0x09, 0xd3, 0x8b, 0xff, 0x01, 0x00, 0x00, 0xff, 0xff, 0x88, 0x4b,
	0xa6, 0x29, 0xcf, 0x03, 0x00, 0x00,
}

func (m *PositionLocked) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PositionLocked) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PositionLocked) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Principal.Size()
		i -= size
		if _, err := m.Principal.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.Index.Size()
		i -= size
		if _, err := m.Index.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.VaultType) > 0 {
		i -= len(m.VaultType)
		copy(dAtA[i:], m.VaultType)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.VaultType)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Account) > 0 {
		i -= len(m.Account)
		copy(dAtA[i:], m.Account)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Account)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PositionUnlocked) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PositionUnlocked) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PositionUnlocked) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Principal.Size()
		i -= size
		if _, err := m.Principal.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.Index.Size()
		i -= size
		if _, err := m.Index.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.VaultType) > 0 {
		i -= len(m.VaultType)
		copy(dAtA[i:], m.VaultType)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.VaultType)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Account) > 0 {
		i -= len(m.Account)
		copy(dAtA[i:], m.Account)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Account)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PausedStateUpdated) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PausedStateUpdated) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PausedStateUpdated) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Paused) > 0 {
		i -= len(m.Paused)
		copy(dAtA[i:], m.Paused)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Paused)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RewardClaimed) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RewardClaimed) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RewardClaimed) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Account) > 0 {
		i -= len(m.Account)
		copy(dAtA[i:], m.Account)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Account)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintEvents(dAtA []byte, offset int, v uint64) int {
	offset -= sovEvents(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PositionLocked) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Account)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.VaultType)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = m.Index.Size()
	n += 1 + l + sovEvents(uint64(l))
	l = m.Amount.Size()
	n += 1 + l + sovEvents(uint64(l))
	l = m.Principal.Size()
	n += 1 + l + sovEvents(uint64(l))
	return n
}

func (m *PositionUnlocked) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Account)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.VaultType)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = m.Index.Size()
	n += 1 + l + sovEvents(uint64(l))
	l = m.Amount.Size()
	n += 1 + l + sovEvents(uint64(l))
	l = m.Principal.Size()
	n += 1 + l + sovEvents(uint64(l))
	return n
}

func (m *PausedStateUpdated) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Paused)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *RewardClaimed) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Account)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovEvents(uint64(l))
	return n
}

func sovEvents(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEvents(x uint64) (n int) {
	return sovEvents(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PositionLocked) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PositionLocked: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PositionLocked: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VaultType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VaultType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Index.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Principal", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Principal.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PositionUnlocked) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PositionUnlocked: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PositionUnlocked: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VaultType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VaultType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Index.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Principal", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Principal.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PausedStateUpdated) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PausedStateUpdated: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PausedStateUpdated: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Paused", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Paused = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RewardClaimed) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RewardClaimed: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RewardClaimed: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvents(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEvents
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEvents
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEvents
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEvents        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvents          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEvents = fmt.Errorf("proto: unexpected end of group")
)

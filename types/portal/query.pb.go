// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: noble/dollar/portal/v1/query.proto

package portal

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueryOwner struct {
}

func (m *QueryOwner) Reset()         { *m = QueryOwner{} }
func (m *QueryOwner) String() string { return proto.CompactTextString(m) }
func (*QueryOwner) ProtoMessage()    {}
func (*QueryOwner) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd302ad343e561ab, []int{0}
}
func (m *QueryOwner) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOwner) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOwner.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOwner) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOwner.Merge(m, src)
}
func (m *QueryOwner) XXX_Size() int {
	return m.Size()
}
func (m *QueryOwner) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOwner.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOwner proto.InternalMessageInfo

type QueryOwnerResponse struct {
	Owner string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
}

func (m *QueryOwnerResponse) Reset()         { *m = QueryOwnerResponse{} }
func (m *QueryOwnerResponse) String() string { return proto.CompactTextString(m) }
func (*QueryOwnerResponse) ProtoMessage()    {}
func (*QueryOwnerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd302ad343e561ab, []int{1}
}
func (m *QueryOwnerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOwnerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOwnerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOwnerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOwnerResponse.Merge(m, src)
}
func (m *QueryOwnerResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryOwnerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOwnerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOwnerResponse proto.InternalMessageInfo

func (m *QueryOwnerResponse) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

type QueryPaused struct {
}

func (m *QueryPaused) Reset()         { *m = QueryPaused{} }
func (m *QueryPaused) String() string { return proto.CompactTextString(m) }
func (*QueryPaused) ProtoMessage()    {}
func (*QueryPaused) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd302ad343e561ab, []int{2}
}
func (m *QueryPaused) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPaused) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPaused.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPaused) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPaused.Merge(m, src)
}
func (m *QueryPaused) XXX_Size() int {
	return m.Size()
}
func (m *QueryPaused) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPaused.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPaused proto.InternalMessageInfo

type QueryPausedResponse struct {
	Paused bool `protobuf:"varint,1,opt,name=paused,proto3" json:"paused,omitempty"`
}

func (m *QueryPausedResponse) Reset()         { *m = QueryPausedResponse{} }
func (m *QueryPausedResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPausedResponse) ProtoMessage()    {}
func (*QueryPausedResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd302ad343e561ab, []int{3}
}
func (m *QueryPausedResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPausedResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPausedResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPausedResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPausedResponse.Merge(m, src)
}
func (m *QueryPausedResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPausedResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPausedResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPausedResponse proto.InternalMessageInfo

func (m *QueryPausedResponse) GetPaused() bool {
	if m != nil {
		return m.Paused
	}
	return false
}

type QueryPeers struct {
}

func (m *QueryPeers) Reset()         { *m = QueryPeers{} }
func (m *QueryPeers) String() string { return proto.CompactTextString(m) }
func (*QueryPeers) ProtoMessage()    {}
func (*QueryPeers) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd302ad343e561ab, []int{4}
}
func (m *QueryPeers) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPeers) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPeers.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPeers) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPeers.Merge(m, src)
}
func (m *QueryPeers) XXX_Size() int {
	return m.Size()
}
func (m *QueryPeers) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPeers.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPeers proto.InternalMessageInfo

type QueryPeersResponse struct {
	Peers map[uint16]Peer `protobuf:"bytes,1,rep,name=peers,proto3,castkey=uint16" json:"peers" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *QueryPeersResponse) Reset()         { *m = QueryPeersResponse{} }
func (m *QueryPeersResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPeersResponse) ProtoMessage()    {}
func (*QueryPeersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd302ad343e561ab, []int{5}
}
func (m *QueryPeersResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPeersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPeersResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPeersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPeersResponse.Merge(m, src)
}
func (m *QueryPeersResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPeersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPeersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPeersResponse proto.InternalMessageInfo

func (m *QueryPeersResponse) GetPeers() map[uint16]Peer {
	if m != nil {
		return m.Peers
	}
	return nil
}

type QueryDestinationTokens struct {
	ChainId uint32 `protobuf:"varint,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
}

func (m *QueryDestinationTokens) Reset()         { *m = QueryDestinationTokens{} }
func (m *QueryDestinationTokens) String() string { return proto.CompactTextString(m) }
func (*QueryDestinationTokens) ProtoMessage()    {}
func (*QueryDestinationTokens) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd302ad343e561ab, []int{6}
}
func (m *QueryDestinationTokens) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDestinationTokens) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDestinationTokens.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDestinationTokens) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDestinationTokens.Merge(m, src)
}
func (m *QueryDestinationTokens) XXX_Size() int {
	return m.Size()
}
func (m *QueryDestinationTokens) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDestinationTokens.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDestinationTokens proto.InternalMessageInfo

func (m *QueryDestinationTokens) GetChainId() uint32 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

type QueryDestinationTokensResponse struct {
	DestinationTokens [][]byte `protobuf:"bytes,2,rep,name=destination_tokens,json=destinationTokens,proto3" json:"destination_tokens,omitempty"`
}

func (m *QueryDestinationTokensResponse) Reset()         { *m = QueryDestinationTokensResponse{} }
func (m *QueryDestinationTokensResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDestinationTokensResponse) ProtoMessage()    {}
func (*QueryDestinationTokensResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd302ad343e561ab, []int{7}
}
func (m *QueryDestinationTokensResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDestinationTokensResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDestinationTokensResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDestinationTokensResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDestinationTokensResponse.Merge(m, src)
}
func (m *QueryDestinationTokensResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDestinationTokensResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDestinationTokensResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDestinationTokensResponse proto.InternalMessageInfo

func (m *QueryDestinationTokensResponse) GetDestinationTokens() [][]byte {
	if m != nil {
		return m.DestinationTokens
	}
	return nil
}

type QueryNonce struct {
}

func (m *QueryNonce) Reset()         { *m = QueryNonce{} }
func (m *QueryNonce) String() string { return proto.CompactTextString(m) }
func (*QueryNonce) ProtoMessage()    {}
func (*QueryNonce) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd302ad343e561ab, []int{8}
}
func (m *QueryNonce) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryNonce) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryNonce.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryNonce) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryNonce.Merge(m, src)
}
func (m *QueryNonce) XXX_Size() int {
	return m.Size()
}
func (m *QueryNonce) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryNonce.DiscardUnknown(m)
}

var xxx_messageInfo_QueryNonce proto.InternalMessageInfo

type QueryNonceResponse struct {
	Nonce uint32 `protobuf:"varint,1,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (m *QueryNonceResponse) Reset()         { *m = QueryNonceResponse{} }
func (m *QueryNonceResponse) String() string { return proto.CompactTextString(m) }
func (*QueryNonceResponse) ProtoMessage()    {}
func (*QueryNonceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd302ad343e561ab, []int{9}
}
func (m *QueryNonceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryNonceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryNonceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryNonceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryNonceResponse.Merge(m, src)
}
func (m *QueryNonceResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryNonceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryNonceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryNonceResponse proto.InternalMessageInfo

func (m *QueryNonceResponse) GetNonce() uint32 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func init() {
	proto.RegisterType((*QueryOwner)(nil), "noble.dollar.portal.v1.QueryOwner")
	proto.RegisterType((*QueryOwnerResponse)(nil), "noble.dollar.portal.v1.QueryOwnerResponse")
	proto.RegisterType((*QueryPaused)(nil), "noble.dollar.portal.v1.QueryPaused")
	proto.RegisterType((*QueryPausedResponse)(nil), "noble.dollar.portal.v1.QueryPausedResponse")
	proto.RegisterType((*QueryPeers)(nil), "noble.dollar.portal.v1.QueryPeers")
	proto.RegisterType((*QueryPeersResponse)(nil), "noble.dollar.portal.v1.QueryPeersResponse")
	proto.RegisterMapType((map[uint16]Peer)(nil), "noble.dollar.portal.v1.QueryPeersResponse.PeersEntry")
	proto.RegisterType((*QueryDestinationTokens)(nil), "noble.dollar.portal.v1.QueryDestinationTokens")
	proto.RegisterType((*QueryDestinationTokensResponse)(nil), "noble.dollar.portal.v1.QueryDestinationTokensResponse")
	proto.RegisterType((*QueryNonce)(nil), "noble.dollar.portal.v1.QueryNonce")
	proto.RegisterType((*QueryNonceResponse)(nil), "noble.dollar.portal.v1.QueryNonceResponse")
}

func init() {
	proto.RegisterFile("noble/dollar/portal/v1/query.proto", fileDescriptor_cd302ad343e561ab)
}

var fileDescriptor_cd302ad343e561ab = []byte{
	// 613 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0x4d, 0x6f, 0xd3, 0x40,
	0x10, 0xcd, 0x26, 0x72, 0x28, 0x93, 0x56, 0x22, 0x5b, 0x54, 0x05, 0xb7, 0x71, 0x22, 0xf7, 0x12,
	0xa5, 0x92, 0x57, 0x49, 0xbf, 0x10, 0xc7, 0x08, 0x0e, 0x5c, 0xa0, 0x44, 0xa8, 0x07, 0x2e, 0xc5,
	0x8d, 0x57, 0xc1, 0xaa, 0xbb, 0x6b, 0x6c, 0x27, 0x10, 0x10, 0x97, 0x72, 0x80, 0x23, 0x12, 0x7f,
	0x82, 0x23, 0xff, 0x80, 0x6b, 0x4f, 0xa8, 0x12, 0x17, 0x4e, 0x80, 0x12, 0x10, 0x7f, 0x03, 0x79,
	0xec, 0x38, 0x6d, 0xd3, 0x7c, 0x70, 0xb1, 0x76, 0x66, 0xdf, 0xcc, 0x3c, 0xbf, 0x79, 0x36, 0xe8,
	0x42, 0x1e, 0x3a, 0x9c, 0x59, 0xd2, 0x71, 0x4c, 0x8f, 0xb9, 0xd2, 0x0b, 0x4c, 0x87, 0x75, 0x6b,
	0xec, 0x79, 0x87, 0x7b, 0x3d, 0xc3, 0xf5, 0x64, 0x20, 0xe9, 0x0a, 0x62, 0x8c, 0x08, 0x63, 0x44,
	0x18, 0xa3, 0x5b, 0x53, 0xf3, 0xe6, 0xb1, 0x2d, 0x24, 0xc3, 0x67, 0x04, 0x55, 0x57, 0x5b, 0xd2,
	0x3f, 0x96, 0x7e, 0x54, 0x7e, 0xa9, 0x8f, 0x7a, 0xb3, 0x2d, 0xdb, 0x12, 0x8f, 0x2c, 0x3c, 0xc5,
	0xd9, 0xb5, 0xb6, 0x94, 0x6d, 0x87, 0x33, 0xd3, 0xb5, 0x99, 0x29, 0x84, 0x0c, 0xcc, 0xc0, 0x96,
	0xc2, 0x8f, 0x6f, 0xd7, 0x27, 0xf0, 0x8b, 0x59, 0x20, 0x48, 0x5f, 0x04, 0x78, 0x14, 0xce, 0x79,
	0xf8, 0x42, 0x70, 0x4f, 0xaf, 0x01, 0x1d, 0x45, 0x4d, 0xee, 0xbb, 0x52, 0xf8, 0x9c, 0xae, 0x82,
	0x22, 0xc3, 0x44, 0x81, 0x94, 0x49, 0xe5, 0x7a, 0x43, 0xf9, 0xf4, 0xf7, 0x73, 0x95, 0x34, 0xa3,
	0x9c, 0xbe, 0x04, 0x39, 0x2c, 0xd9, 0x33, 0x3b, 0x3e, 0xb7, 0xf4, 0x2d, 0x58, 0x3e, 0x17, 0x26,
	0x2d, 0x8a, 0x90, 0x75, 0x31, 0x83, 0x3d, 0x16, 0x86, 0x3d, 0xe2, 0x64, 0xc2, 0x62, 0x8f, 0x73,
	0xcf, 0xd7, 0xbf, 0x92, 0x98, 0x06, 0x86, 0x49, 0x8f, 0xa7, 0xa0, 0xb8, 0x61, 0xa2, 0x40, 0xca,
	0x99, 0x4a, 0xae, 0xbe, 0x6d, 0x5c, 0xad, 0xad, 0x31, 0x5e, 0x6a, 0x60, 0x74, 0x4f, 0x04, 0x5e,
	0xaf, 0xb1, 0x7c, 0xfa, 0xa3, 0x94, 0x3a, 0xf9, 0x59, 0xca, 0x76, 0x6c, 0x11, 0xd4, 0x76, 0xe2,
	0x77, 0xc1, 0xc6, 0xea, 0x3e, 0xc0, 0x08, 0x49, 0x6f, 0x40, 0xe6, 0x88, 0xf7, 0x90, 0xf0, 0x52,
	0x33, 0x3c, 0xd2, 0x3a, 0x28, 0x5d, 0xd3, 0xe9, 0xf0, 0x42, 0xba, 0x4c, 0x2a, 0xb9, 0xfa, 0xda,
	0x24, 0x06, 0x61, 0x93, 0x66, 0x04, 0xbd, 0x93, 0xbe, 0x4d, 0xf4, 0x4d, 0x58, 0x41, 0x52, 0x77,
	0xb9, 0x1f, 0xd8, 0x02, 0x97, 0xf4, 0x58, 0x1e, 0x71, 0xe1, 0xd3, 0x5b, 0xb0, 0xd0, 0x7a, 0x66,
	0xda, 0xe2, 0xc0, 0xb6, 0xe2, 0x41, 0xd7, 0x30, 0xbe, 0x6f, 0xe9, 0xfb, 0xa0, 0x5d, 0x5d, 0x94,
	0x08, 0xb2, 0x05, 0xd4, 0x1a, 0x5d, 0x1e, 0x04, 0x78, 0x5b, 0x48, 0x97, 0x33, 0x95, 0xc5, 0xa1,
	0xc0, 0x79, 0xeb, 0x72, 0x75, 0xa2, 0xf5, 0x03, 0x29, 0x5a, 0x3c, 0xd9, 0x38, 0x46, 0xe7, 0x37,
	0x2e, 0xc2, 0x44, 0xc4, 0x29, 0xd9, 0x38, 0xe6, 0xea, 0x7f, 0x14, 0x50, 0xb0, 0x86, 0xbe, 0x25,
	0xa0, 0xa0, 0x55, 0xa8, 0x3e, 0x75, 0x19, 0x88, 0x51, 0xab, 0xb3, 0x31, 0x43, 0x02, 0x7a, 0xf5,
	0x7d, 0x38, 0xf1, 0xe4, 0xdb, 0xef, 0x8f, 0xe9, 0x12, 0x2d, 0xb2, 0x09, 0x4e, 0x46, 0x07, 0xd2,
	0x77, 0x04, 0xb2, 0x91, 0xdd, 0xe8, 0xfa, 0x74, 0x4f, 0x20, 0x48, 0xdd, 0x98, 0x03, 0x94, 0x10,
	0xd9, 0x18, 0x11, 0x29, 0x53, 0x6d, 0x12, 0x91, 0xc8, 0xc6, 0xa8, 0x07, 0x1a, 0x68, 0x86, 0x1e,
	0x88, 0x99, 0xa1, 0xc7, 0x05, 0x03, 0xcf, 0xa9, 0x07, 0xba, 0x98, 0x7e, 0x21, 0x90, 0x1f, 0x77,
	0x9a, 0x31, 0x75, 0xda, 0x18, 0x5e, 0xdd, 0xf9, 0x3f, 0x7c, 0xc2, 0xb4, 0x31, 0x62, 0xba, 0x4b,
	0xb7, 0x27, 0x31, 0x1d, 0xf7, 0x2d, 0x7b, 0x3d, 0xfc, 0x10, 0xde, 0xa0, 0x8e, 0x68, 0xc8, 0x19,
	0x3a, 0x22, 0x66, 0x86, 0x8e, 0x17, 0x8c, 0x3d, 0xa7, 0x8e, 0xe8, 0xf3, 0xc6, 0xee, 0x69, 0x5f,
	0x23, 0x67, 0x7d, 0x8d, 0xfc, 0xea, 0x6b, 0xe4, 0xc3, 0x40, 0x4b, 0x9d, 0x0d, 0xb4, 0xd4, 0xf7,
	0x81, 0x96, 0x7a, 0x52, 0x8c, 0x47, 0x45, 0x73, 0x5f, 0xf6, 0x5e, 0xb1, 0xa0, 0xe7, 0x72, 0x3f,
	0xee, 0x70, 0x98, 0xc5, 0x5f, 0xeb, 0xe6, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x45, 0xa3, 0x3b,
	0x3e, 0x21, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	Owner(ctx context.Context, in *QueryOwner, opts ...grpc.CallOption) (*QueryOwnerResponse, error)
	Paused(ctx context.Context, in *QueryPaused, opts ...grpc.CallOption) (*QueryPausedResponse, error)
	Peers(ctx context.Context, in *QueryPeers, opts ...grpc.CallOption) (*QueryPeersResponse, error)
	DestinationTokens(ctx context.Context, in *QueryDestinationTokens, opts ...grpc.CallOption) (*QueryDestinationTokensResponse, error)
	Nonce(ctx context.Context, in *QueryNonce, opts ...grpc.CallOption) (*QueryNonceResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Owner(ctx context.Context, in *QueryOwner, opts ...grpc.CallOption) (*QueryOwnerResponse, error) {
	out := new(QueryOwnerResponse)
	err := c.cc.Invoke(ctx, "/noble.dollar.portal.v1.Query/Owner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Paused(ctx context.Context, in *QueryPaused, opts ...grpc.CallOption) (*QueryPausedResponse, error) {
	out := new(QueryPausedResponse)
	err := c.cc.Invoke(ctx, "/noble.dollar.portal.v1.Query/Paused", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Peers(ctx context.Context, in *QueryPeers, opts ...grpc.CallOption) (*QueryPeersResponse, error) {
	out := new(QueryPeersResponse)
	err := c.cc.Invoke(ctx, "/noble.dollar.portal.v1.Query/Peers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DestinationTokens(ctx context.Context, in *QueryDestinationTokens, opts ...grpc.CallOption) (*QueryDestinationTokensResponse, error) {
	out := new(QueryDestinationTokensResponse)
	err := c.cc.Invoke(ctx, "/noble.dollar.portal.v1.Query/DestinationTokens", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Nonce(ctx context.Context, in *QueryNonce, opts ...grpc.CallOption) (*QueryNonceResponse, error) {
	out := new(QueryNonceResponse)
	err := c.cc.Invoke(ctx, "/noble.dollar.portal.v1.Query/Nonce", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	Owner(context.Context, *QueryOwner) (*QueryOwnerResponse, error)
	Paused(context.Context, *QueryPaused) (*QueryPausedResponse, error)
	Peers(context.Context, *QueryPeers) (*QueryPeersResponse, error)
	DestinationTokens(context.Context, *QueryDestinationTokens) (*QueryDestinationTokensResponse, error)
	Nonce(context.Context, *QueryNonce) (*QueryNonceResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Owner(ctx context.Context, req *QueryOwner) (*QueryOwnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Owner not implemented")
}
func (*UnimplementedQueryServer) Paused(ctx context.Context, req *QueryPaused) (*QueryPausedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Paused not implemented")
}
func (*UnimplementedQueryServer) Peers(ctx context.Context, req *QueryPeers) (*QueryPeersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Peers not implemented")
}
func (*UnimplementedQueryServer) DestinationTokens(ctx context.Context, req *QueryDestinationTokens) (*QueryDestinationTokensResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DestinationTokens not implemented")
}
func (*UnimplementedQueryServer) Nonce(ctx context.Context, req *QueryNonce) (*QueryNonceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Nonce not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Owner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOwner)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Owner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/noble.dollar.portal.v1.Query/Owner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Owner(ctx, req.(*QueryOwner))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Paused_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPaused)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Paused(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/noble.dollar.portal.v1.Query/Paused",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Paused(ctx, req.(*QueryPaused))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Peers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPeers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Peers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/noble.dollar.portal.v1.Query/Peers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Peers(ctx, req.(*QueryPeers))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DestinationTokens_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDestinationTokens)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DestinationTokens(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/noble.dollar.portal.v1.Query/DestinationTokens",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DestinationTokens(ctx, req.(*QueryDestinationTokens))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Nonce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryNonce)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Nonce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/noble.dollar.portal.v1.Query/Nonce",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Nonce(ctx, req.(*QueryNonce))
	}
	return interceptor(ctx, in, info, handler)
}

var Query_serviceDesc = _Query_serviceDesc
var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "noble.dollar.portal.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Owner",
			Handler:    _Query_Owner_Handler,
		},
		{
			MethodName: "Paused",
			Handler:    _Query_Paused_Handler,
		},
		{
			MethodName: "Peers",
			Handler:    _Query_Peers_Handler,
		},
		{
			MethodName: "DestinationTokens",
			Handler:    _Query_DestinationTokens_Handler,
		},
		{
			MethodName: "Nonce",
			Handler:    _Query_Nonce_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "noble/dollar/portal/v1/query.proto",
}

func (m *QueryOwner) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOwner) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOwner) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryOwnerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOwnerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOwnerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryPaused) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPaused) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPaused) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryPausedResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPausedResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPausedResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Paused {
		i--
		if m.Paused {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryPeers) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPeers) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPeers) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryPeersResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPeersResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPeersResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Peers) > 0 {
		for k := range m.Peers {
			v := m.Peers[k]
			baseI := i
			{
				size, err := (&v).MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
			i = encodeVarintQuery(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintQuery(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryDestinationTokens) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDestinationTokens) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDestinationTokens) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ChainId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryDestinationTokensResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDestinationTokensResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDestinationTokensResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DestinationTokens) > 0 {
		for iNdEx := len(m.DestinationTokens) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.DestinationTokens[iNdEx])
			copy(dAtA[i:], m.DestinationTokens[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.DestinationTokens[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryNonce) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryNonce) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryNonce) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryNonceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryNonceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryNonceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Nonce != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryOwner) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryOwnerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryPaused) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryPausedResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Paused {
		n += 2
	}
	return n
}

func (m *QueryPeers) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryPeersResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Peers) > 0 {
		for k, v := range m.Peers {
			_ = k
			_ = v
			l = v.Size()
			mapEntrySize := 1 + sovQuery(uint64(k)) + 1 + l + sovQuery(uint64(l))
			n += mapEntrySize + 1 + sovQuery(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *QueryDestinationTokens) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChainId != 0 {
		n += 1 + sovQuery(uint64(m.ChainId))
	}
	return n
}

func (m *QueryDestinationTokensResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.DestinationTokens) > 0 {
		for _, b := range m.DestinationTokens {
			l = len(b)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryNonce) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryNonceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Nonce != 0 {
		n += 1 + sovQuery(uint64(m.Nonce))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryOwner) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOwner: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOwner: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOwnerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOwnerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOwnerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPaused) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPaused: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPaused: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPausedResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPausedResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPausedResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Paused", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Paused = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPeers) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPeers: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPeers: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPeersResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPeersResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPeersResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Peers == nil {
				m.Peers = make(map[uint16]Peer)
			}
			var mapkey uint32
			mapvalue := &Peer{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowQuery
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowQuery
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthQuery
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthQuery
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &Peer{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipQuery(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthQuery
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Peers[uint16(mapkey)] = *mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDestinationTokens) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDestinationTokens: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDestinationTokens: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDestinationTokensResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDestinationTokensResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDestinationTokensResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationTokens", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestinationTokens = append(m.DestinationTokens, make([]byte, postIndex-iNdEx))
			copy(m.DestinationTokens[len(m.DestinationTokens)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryNonce) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryNonce: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryNonce: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryNonceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryNonceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryNonceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)

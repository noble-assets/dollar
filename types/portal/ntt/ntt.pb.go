// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: noble/dollar/portal/ntt/v1/ntt.proto

package ntt

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// NativeTokenTransfer is the type that stores information about a native token transfer.
//
// The wire format of the payload is as follows:
//   - NativeTokenTransferPrefix - 4 bytes
//   - numDecimals - 1 byte
//   - amount - 8 bytes
//   - sourceToken - 32 bytes
//   - to - 32 bytes
//   - toChain - 2 bytes
//   - additionalPayloadLength - 2 bytes, optional
//   - additionalPayload - `additionalPayloadLength` bytes
//
// https://github.com/wormhole-foundation/native-token-transfers/blob/67df54701e0f4b3793b6c621719911804c9875a3/evm/src/libraries/TransceiverStructs.sol#L97-L119
type NativeTokenTransfer struct {
	Amount            uint64 `protobuf:"varint,1,opt,name=amount,proto3" json:"amount,omitempty"`
	SourceToken       []byte `protobuf:"bytes,2,opt,name=source_token,json=sourceToken,proto3" json:"source_token,omitempty"`
	To                []byte `protobuf:"bytes,3,opt,name=to,proto3" json:"to,omitempty"`
	ToChain           uint16 `protobuf:"varint,4,opt,name=to_chain,json=toChain,proto3,customtype=uint16" json:"to_chain"`
	AdditionalPayload []byte `protobuf:"bytes,5,opt,name=additional_payload,json=additionalPayload,proto3" json:"additional_payload,omitempty"`
}

func (m *NativeTokenTransfer) Reset()         { *m = NativeTokenTransfer{} }
func (m *NativeTokenTransfer) String() string { return proto.CompactTextString(m) }
func (*NativeTokenTransfer) ProtoMessage()    {}
func (*NativeTokenTransfer) Descriptor() ([]byte, []int) {
	return fileDescriptor_85cb22844910462f, []int{0}
}
func (m *NativeTokenTransfer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NativeTokenTransfer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NativeTokenTransfer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NativeTokenTransfer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NativeTokenTransfer.Merge(m, src)
}
func (m *NativeTokenTransfer) XXX_Size() int {
	return m.Size()
}
func (m *NativeTokenTransfer) XXX_DiscardUnknown() {
	xxx_messageInfo_NativeTokenTransfer.DiscardUnknown(m)
}

var xxx_messageInfo_NativeTokenTransfer proto.InternalMessageInfo

func (m *NativeTokenTransfer) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *NativeTokenTransfer) GetSourceToken() []byte {
	if m != nil {
		return m.SourceToken
	}
	return nil
}

func (m *NativeTokenTransfer) GetTo() []byte {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *NativeTokenTransfer) GetAdditionalPayload() []byte {
	if m != nil {
		return m.AdditionalPayload
	}
	return nil
}

func init() {
	proto.RegisterType((*NativeTokenTransfer)(nil), "noble.dollar.portal.ntt.v1.NativeTokenTransfer")
}

func init() {
	proto.RegisterFile("noble/dollar/portal/ntt/v1/ntt.proto", fileDescriptor_85cb22844910462f)
}

var fileDescriptor_85cb22844910462f = []byte{
	// 291 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x90, 0xbf, 0x4e, 0x02, 0x31,
	0x18, 0xc0, 0xaf, 0x88, 0x68, 0x2a, 0x92, 0x58, 0x8d, 0xb9, 0x30, 0x14, 0x34, 0x0c, 0x38, 0x78,
	0x0d, 0x21, 0x71, 0x74, 0xc0, 0xdd, 0x18, 0xc2, 0xe4, 0x42, 0x0a, 0x57, 0xf1, 0x62, 0xed, 0x77,
	0x29, 0x1f, 0x17, 0xcf, 0xa7, 0xf0, 0x79, 0x7c, 0x02, 0x46, 0x46, 0xe3, 0x40, 0xcc, 0xdd, 0x8b,
	0x98, 0x6b, 0x49, 0x74, 0xea, 0x9f, 0xdf, 0xef, 0xfb, 0x86, 0x1f, 0xed, 0x19, 0x98, 0x69, 0x25,
	0x62, 0xd0, 0x5a, 0x5a, 0x91, 0x82, 0x45, 0xa9, 0x85, 0x41, 0x14, 0xd9, 0xa0, 0x3a, 0xa2, 0xd4,
	0x02, 0x02, 0x6b, 0x3b, 0x2b, 0xf2, 0x56, 0xe4, 0xad, 0xa8, 0xc2, 0xd9, 0xa0, 0x7d, 0xb6, 0x80,
	0x05, 0x38, 0x4d, 0x54, 0x37, 0x3f, 0x71, 0xf9, 0x49, 0xe8, 0xe9, 0xbd, 0xc4, 0x24, 0x53, 0x13,
	0x78, 0x51, 0x66, 0x62, 0xa5, 0x59, 0x3e, 0x29, 0xcb, 0xce, 0x69, 0x43, 0xbe, 0xc2, 0xca, 0x60,
	0x48, 0xba, 0xa4, 0x5f, 0x1f, 0xef, 0x5e, 0xec, 0x82, 0x36, 0x97, 0xb0, 0xb2, 0x73, 0x35, 0xc5,
	0xca, 0x0f, 0x6b, 0x5d, 0xd2, 0x6f, 0x8e, 0x8f, 0xfc, 0x9f, 0x5b, 0xc1, 0x5a, 0xb4, 0x86, 0x10,
	0xee, 0x39, 0x50, 0x43, 0x60, 0x57, 0xf4, 0x10, 0x61, 0x3a, 0x7f, 0x96, 0x89, 0x09, 0xeb, 0x5d,
	0xd2, 0x3f, 0x1e, 0xb5, 0xd6, 0xdb, 0x4e, 0xf0, 0xbd, 0xed, 0x34, 0x56, 0x89, 0xc1, 0xc1, 0xcd,
	0xf8, 0x00, 0xe1, 0xae, 0xc2, 0xec, 0x9a, 0x32, 0x19, 0xc7, 0x09, 0x26, 0x60, 0xa4, 0x9e, 0xa6,
	0x32, 0xd7, 0x20, 0xe3, 0x70, 0xdf, 0xad, 0x3a, 0xf9, 0x23, 0x0f, 0x1e, 0x8c, 0x6e, 0xd7, 0x05,
	0x27, 0x9b, 0x82, 0x93, 0x9f, 0x82, 0x93, 0x8f, 0x92, 0x07, 0x9b, 0x92, 0x07, 0x5f, 0x25, 0x0f,
	0x1e, 0x7b, 0xbb, 0x04, 0xbe, 0xc7, 0x5b, 0xfe, 0x2e, 0xb2, 0xa1, 0xc0, 0x3c, 0x55, 0xcb, 0x7f,
	0xed, 0x66, 0x0d, 0xd7, 0x60, 0xf8, 0x1b, 0x00, 0x00, 0xff, 0xff, 0x3b, 0xe1, 0x2a, 0xc0, 0x5d,
	0x01, 0x00, 0x00,
}

func (m *NativeTokenTransfer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NativeTokenTransfer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NativeTokenTransfer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AdditionalPayload) > 0 {
		i -= len(m.AdditionalPayload)
		copy(dAtA[i:], m.AdditionalPayload)
		i = encodeVarintNtt(dAtA, i, uint64(len(m.AdditionalPayload)))
		i--
		dAtA[i] = 0x2a
	}
	if m.ToChain != 0 {
		i = encodeVarintNtt(dAtA, i, uint64(m.ToChain))
		i--
		dAtA[i] = 0x20
	}
	if len(m.To) > 0 {
		i -= len(m.To)
		copy(dAtA[i:], m.To)
		i = encodeVarintNtt(dAtA, i, uint64(len(m.To)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SourceToken) > 0 {
		i -= len(m.SourceToken)
		copy(dAtA[i:], m.SourceToken)
		i = encodeVarintNtt(dAtA, i, uint64(len(m.SourceToken)))
		i--
		dAtA[i] = 0x12
	}
	if m.Amount != 0 {
		i = encodeVarintNtt(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintNtt(dAtA []byte, offset int, v uint64) int {
	offset -= sovNtt(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *NativeTokenTransfer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Amount != 0 {
		n += 1 + sovNtt(uint64(m.Amount))
	}
	l = len(m.SourceToken)
	if l > 0 {
		n += 1 + l + sovNtt(uint64(l))
	}
	l = len(m.To)
	if l > 0 {
		n += 1 + l + sovNtt(uint64(l))
	}
	if m.ToChain != 0 {
		n += 1 + sovNtt(uint64(m.ToChain))
	}
	l = len(m.AdditionalPayload)
	if l > 0 {
		n += 1 + l + sovNtt(uint64(l))
	}
	return n
}

func sovNtt(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozNtt(x uint64) (n int) {
	return sovNtt(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *NativeTokenTransfer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNtt
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NativeTokenTransfer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NativeTokenTransfer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNtt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceToken", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNtt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNtt
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthNtt
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceToken = append(m.SourceToken[:0], dAtA[iNdEx:postIndex]...)
			if m.SourceToken == nil {
				m.SourceToken = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNtt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNtt
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthNtt
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.To = append(m.To[:0], dAtA[iNdEx:postIndex]...)
			if m.To == nil {
				m.To = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToChain", wireType)
			}
			m.ToChain = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNtt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ToChain |= uint16(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdditionalPayload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNtt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNtt
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthNtt
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AdditionalPayload = append(m.AdditionalPayload[:0], dAtA[iNdEx:postIndex]...)
			if m.AdditionalPayload == nil {
				m.AdditionalPayload = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNtt(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNtt
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipNtt(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowNtt
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNtt
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNtt
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthNtt
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupNtt
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthNtt
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthNtt        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowNtt          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupNtt = fmt.Errorf("proto: unexpected end of group")
)

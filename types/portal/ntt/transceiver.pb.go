// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: noble/dollar/portal/ntt/v1/transceiver.proto

package ntt

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// TransceiverMessage is the type that stores information about a transceiver message.
//
// The wire format of the message is as follows:
//   - prefix - 4 bytes
//   - sourceManagerAddress - 32 bytes
//   - recipientManagerAddress - 32 bytes
//   - managerPayloadLength - 2 bytes
//   - managerPayload - `managerPayloadLength` bytes
//   - transceiverPayloadLength - 2 bytes
//   - transceiverPayload - `transceiverPayloadLength` bytes
//
// https://github.com/wormhole-foundation/native-token-transfers/blob/67df54701e0f4b3793b6c621719911804c9875a3/evm/src/libraries/TransceiverStructs.sol#L97-L119
type TransceiverMessage struct {
	SourceManagerAddress    []byte `protobuf:"bytes,1,opt,name=source_manager_address,json=sourceManagerAddress,proto3" json:"source_manager_address,omitempty"`
	RecipientManagerAddress []byte `protobuf:"bytes,2,opt,name=recipient_manager_address,json=recipientManagerAddress,proto3" json:"recipient_manager_address,omitempty"`
	ManagerPayload          []byte `protobuf:"bytes,3,opt,name=manager_payload,json=managerPayload,proto3" json:"manager_payload,omitempty"`
	TransceiverPayload      []byte `protobuf:"bytes,4,opt,name=transceiver_payload,json=transceiverPayload,proto3" json:"transceiver_payload,omitempty"`
}

func (m *TransceiverMessage) Reset()         { *m = TransceiverMessage{} }
func (m *TransceiverMessage) String() string { return proto.CompactTextString(m) }
func (*TransceiverMessage) ProtoMessage()    {}
func (*TransceiverMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_b335a48402e8ad12, []int{0}
}
func (m *TransceiverMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransceiverMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransceiverMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TransceiverMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransceiverMessage.Merge(m, src)
}
func (m *TransceiverMessage) XXX_Size() int {
	return m.Size()
}
func (m *TransceiverMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_TransceiverMessage.DiscardUnknown(m)
}

var xxx_messageInfo_TransceiverMessage proto.InternalMessageInfo

func (m *TransceiverMessage) GetSourceManagerAddress() []byte {
	if m != nil {
		return m.SourceManagerAddress
	}
	return nil
}

func (m *TransceiverMessage) GetRecipientManagerAddress() []byte {
	if m != nil {
		return m.RecipientManagerAddress
	}
	return nil
}

func (m *TransceiverMessage) GetManagerPayload() []byte {
	if m != nil {
		return m.ManagerPayload
	}
	return nil
}

func (m *TransceiverMessage) GetTransceiverPayload() []byte {
	if m != nil {
		return m.TransceiverPayload
	}
	return nil
}

func init() {
	proto.RegisterType((*TransceiverMessage)(nil), "noble.dollar.portal.ntt.v1.TransceiverMessage")
}

func init() {
	proto.RegisterFile("noble/dollar/portal/ntt/v1/transceiver.proto", fileDescriptor_b335a48402e8ad12)
}

var fileDescriptor_b335a48402e8ad12 = []byte{
	// 256 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x90, 0xb1, 0x4a, 0x04, 0x31,
	0x10, 0x86, 0x37, 0x2a, 0x16, 0x41, 0x14, 0xa2, 0xe8, 0x69, 0x11, 0x44, 0x04, 0x2d, 0x64, 0xc3,
	0xa9, 0x95, 0x85, 0xa0, 0xfd, 0x81, 0x88, 0x95, 0xcd, 0x91, 0xdb, 0x1d, 0x8e, 0x85, 0x98, 0x84,
	0xc9, 0xb8, 0xb8, 0x3e, 0x85, 0x8f, 0x65, 0x79, 0xa5, 0xe5, 0xb1, 0xfb, 0x22, 0x42, 0xb2, 0x9e,
	0x8b, 0xb6, 0xf3, 0x7f, 0x5f, 0x31, 0x1f, 0xbf, 0xb0, 0x6e, 0x66, 0x40, 0x95, 0xce, 0x18, 0x8d,
	0xca, 0x3b, 0x24, 0x6d, 0x94, 0x25, 0x52, 0xf5, 0x58, 0x11, 0x6a, 0x1b, 0x0a, 0xa8, 0x6a, 0xc0,
	0xdc, 0xa3, 0x23, 0x27, 0x8e, 0x22, 0x9d, 0x27, 0x3a, 0x4f, 0x74, 0x6e, 0x89, 0xf2, 0x7a, 0x7c,
	0xb2, 0x64, 0x5c, 0x3c, 0xfd, 0x1a, 0x13, 0x08, 0x41, 0xcf, 0x41, 0x5c, 0xf3, 0xfd, 0xe0, 0x5e,
	0xb1, 0x80, 0xe9, 0x8b, 0xb6, 0x7a, 0x0e, 0x38, 0xd5, 0x65, 0x89, 0x10, 0xc2, 0x88, 0x1d, 0xb3,
	0xf3, 0xad, 0xc7, 0xbd, 0xb4, 0x4e, 0xd2, 0x78, 0x97, 0x36, 0x71, 0xc3, 0x0f, 0x11, 0x8a, 0xca,
	0x57, 0x60, 0xe9, 0x9f, 0xb8, 0x16, 0xc5, 0x83, 0x15, 0xf0, 0xc7, 0x3d, 0xe3, 0x3b, 0x3f, 0x86,
	0xd7, 0x8d, 0x71, 0xba, 0x1c, 0xad, 0x47, 0x63, 0xbb, 0x3f, 0x3f, 0xa4, 0xab, 0x50, 0x7c, 0x77,
	0xf0, 0xe2, 0x0a, 0xde, 0x88, 0xb0, 0x18, 0x4c, 0xbd, 0x70, 0x7f, 0xfb, 0xd9, 0x4a, 0xb6, 0x68,
	0x25, 0x5b, 0xb6, 0x92, 0x7d, 0x74, 0x32, 0x5b, 0x74, 0x32, 0xfb, 0xea, 0x64, 0xf6, 0x7c, 0xda,
	0x27, 0x49, 0x7d, 0xde, 0x9a, 0x77, 0x55, 0x5f, 0x2a, 0x6a, 0x3c, 0x84, 0x41, 0xd3, 0xd9, 0x66,
	0xac, 0x78, 0xf5, 0x1d, 0x00, 0x00, 0xff, 0xff, 0x6f, 0x5a, 0xbc, 0xcd, 0x75, 0x01, 0x00, 0x00,
}

func (m *TransceiverMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransceiverMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransceiverMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TransceiverPayload) > 0 {
		i -= len(m.TransceiverPayload)
		copy(dAtA[i:], m.TransceiverPayload)
		i = encodeVarintTransceiver(dAtA, i, uint64(len(m.TransceiverPayload)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ManagerPayload) > 0 {
		i -= len(m.ManagerPayload)
		copy(dAtA[i:], m.ManagerPayload)
		i = encodeVarintTransceiver(dAtA, i, uint64(len(m.ManagerPayload)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.RecipientManagerAddress) > 0 {
		i -= len(m.RecipientManagerAddress)
		copy(dAtA[i:], m.RecipientManagerAddress)
		i = encodeVarintTransceiver(dAtA, i, uint64(len(m.RecipientManagerAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.SourceManagerAddress) > 0 {
		i -= len(m.SourceManagerAddress)
		copy(dAtA[i:], m.SourceManagerAddress)
		i = encodeVarintTransceiver(dAtA, i, uint64(len(m.SourceManagerAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTransceiver(dAtA []byte, offset int, v uint64) int {
	offset -= sovTransceiver(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TransceiverMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SourceManagerAddress)
	if l > 0 {
		n += 1 + l + sovTransceiver(uint64(l))
	}
	l = len(m.RecipientManagerAddress)
	if l > 0 {
		n += 1 + l + sovTransceiver(uint64(l))
	}
	l = len(m.ManagerPayload)
	if l > 0 {
		n += 1 + l + sovTransceiver(uint64(l))
	}
	l = len(m.TransceiverPayload)
	if l > 0 {
		n += 1 + l + sovTransceiver(uint64(l))
	}
	return n
}

func sovTransceiver(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTransceiver(x uint64) (n int) {
	return sovTransceiver(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TransceiverMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransceiver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransceiverMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransceiverMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceManagerAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransceiver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTransceiver
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTransceiver
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceManagerAddress = append(m.SourceManagerAddress[:0], dAtA[iNdEx:postIndex]...)
			if m.SourceManagerAddress == nil {
				m.SourceManagerAddress = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecipientManagerAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransceiver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTransceiver
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTransceiver
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecipientManagerAddress = append(m.RecipientManagerAddress[:0], dAtA[iNdEx:postIndex]...)
			if m.RecipientManagerAddress == nil {
				m.RecipientManagerAddress = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ManagerPayload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransceiver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTransceiver
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTransceiver
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ManagerPayload = append(m.ManagerPayload[:0], dAtA[iNdEx:postIndex]...)
			if m.ManagerPayload == nil {
				m.ManagerPayload = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransceiverPayload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransceiver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTransceiver
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTransceiver
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TransceiverPayload = append(m.TransceiverPayload[:0], dAtA[iNdEx:postIndex]...)
			if m.TransceiverPayload == nil {
				m.TransceiverPayload = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTransceiver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTransceiver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTransceiver(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTransceiver
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTransceiver
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTransceiver
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTransceiver
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTransceiver
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTransceiver
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTransceiver        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTransceiver          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTransceiver = fmt.Errorf("proto: unexpected end of group")
)

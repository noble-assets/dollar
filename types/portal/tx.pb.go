// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: noble/dollar/portal/v1/tx.proto

package portal

import (
	context "context"
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgDeliver is the entrypoint for delivering Noble Dollar Portal messages.
// This is the public message to enable permissionless manual relaying, and
// MsgDeliverInjection is an internal message used only by validators.
type MsgDeliver struct {
	Signer string `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty"`
	Vaa    []byte `protobuf:"bytes,2,opt,name=vaa,proto3" json:"vaa,omitempty"`
}

func (m *MsgDeliver) Reset()         { *m = MsgDeliver{} }
func (m *MsgDeliver) String() string { return proto.CompactTextString(m) }
func (*MsgDeliver) ProtoMessage()    {}
func (*MsgDeliver) Descriptor() ([]byte, []int) {
	return fileDescriptor_f5414e5ec63723f0, []int{0}
}
func (m *MsgDeliver) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeliver) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeliver.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeliver) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeliver.Merge(m, src)
}
func (m *MsgDeliver) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeliver) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeliver.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeliver proto.InternalMessageInfo

// MsgDeliverResponse is the response of the Deliver message.
type MsgDeliverResponse struct {
}

func (m *MsgDeliverResponse) Reset()         { *m = MsgDeliverResponse{} }
func (m *MsgDeliverResponse) String() string { return proto.CompactTextString(m) }
func (*MsgDeliverResponse) ProtoMessage()    {}
func (*MsgDeliverResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f5414e5ec63723f0, []int{1}
}
func (m *MsgDeliverResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeliverResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeliverResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeliverResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeliverResponse.Merge(m, src)
}
func (m *MsgDeliverResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeliverResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeliverResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeliverResponse proto.InternalMessageInfo

// MsgTransfer is the entrypoint for transferring the Noble Dollar cross-chain.
type MsgTransfer struct {
	Signer             string                `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty"`
	Amount             cosmossdk_io_math.Int `protobuf:"bytes,2,opt,name=amount,proto3,customtype=cosmossdk.io/math.Int" json:"amount"`
	DestinationChainId uint16                `protobuf:"varint,3,opt,name=destination_chain_id,json=destinationChainId,proto3,casttype=uint16" json:"destination_chain_id,omitempty"`
	DestinationToken   []byte                `protobuf:"bytes,4,opt,name=destination_token,json=destinationToken,proto3" json:"destination_token,omitempty"`
	Recipient          []byte                `protobuf:"bytes,5,opt,name=recipient,proto3" json:"recipient,omitempty"`
}

func (m *MsgTransfer) Reset()         { *m = MsgTransfer{} }
func (m *MsgTransfer) String() string { return proto.CompactTextString(m) }
func (*MsgTransfer) ProtoMessage()    {}
func (*MsgTransfer) Descriptor() ([]byte, []int) {
	return fileDescriptor_f5414e5ec63723f0, []int{2}
}
func (m *MsgTransfer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgTransfer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgTransfer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgTransfer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTransfer.Merge(m, src)
}
func (m *MsgTransfer) XXX_Size() int {
	return m.Size()
}
func (m *MsgTransfer) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTransfer.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTransfer proto.InternalMessageInfo

// MsgTransferResponse is the response of the Transfer message.
type MsgTransferResponse struct {
}

func (m *MsgTransferResponse) Reset()         { *m = MsgTransferResponse{} }
func (m *MsgTransferResponse) String() string { return proto.CompactTextString(m) }
func (*MsgTransferResponse) ProtoMessage()    {}
func (*MsgTransferResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f5414e5ec63723f0, []int{3}
}
func (m *MsgTransferResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgTransferResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgTransferResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgTransferResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTransferResponse.Merge(m, src)
}
func (m *MsgTransferResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgTransferResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTransferResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTransferResponse proto.InternalMessageInfo

// MsgSetPausedState allows the authority to configure the Noble Dollar Portal paused state.
type MsgSetPausedState struct {
	Signer string `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty"`
	Paused bool   `protobuf:"varint,2,opt,name=paused,proto3" json:"paused,omitempty"`
}

func (m *MsgSetPausedState) Reset()         { *m = MsgSetPausedState{} }
func (m *MsgSetPausedState) String() string { return proto.CompactTextString(m) }
func (*MsgSetPausedState) ProtoMessage()    {}
func (*MsgSetPausedState) Descriptor() ([]byte, []int) {
	return fileDescriptor_f5414e5ec63723f0, []int{4}
}
func (m *MsgSetPausedState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetPausedState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetPausedState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetPausedState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetPausedState.Merge(m, src)
}
func (m *MsgSetPausedState) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetPausedState) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetPausedState.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetPausedState proto.InternalMessageInfo

// MsgSetPausedStateResponse is the response of the SetPausedState message.
type MsgSetPausedStateResponse struct {
}

func (m *MsgSetPausedStateResponse) Reset()         { *m = MsgSetPausedStateResponse{} }
func (m *MsgSetPausedStateResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSetPausedStateResponse) ProtoMessage()    {}
func (*MsgSetPausedStateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f5414e5ec63723f0, []int{5}
}
func (m *MsgSetPausedStateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetPausedStateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetPausedStateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetPausedStateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetPausedStateResponse.Merge(m, src)
}
func (m *MsgSetPausedStateResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetPausedStateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetPausedStateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetPausedStateResponse proto.InternalMessageInfo

// MsgSetPeer allows the Noble Dollar Portal owner to set external peers.
type MsgSetPeer struct {
	Signer      string `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty"`
	Chain       uint16 `protobuf:"varint,2,opt,name=chain,proto3,customtype=uint16" json:"chain"`
	Transceiver []byte `protobuf:"bytes,3,opt,name=transceiver,proto3" json:"transceiver,omitempty"`
	Manager     []byte `protobuf:"bytes,4,opt,name=manager,proto3" json:"manager,omitempty"`
}

func (m *MsgSetPeer) Reset()         { *m = MsgSetPeer{} }
func (m *MsgSetPeer) String() string { return proto.CompactTextString(m) }
func (*MsgSetPeer) ProtoMessage()    {}
func (*MsgSetPeer) Descriptor() ([]byte, []int) {
	return fileDescriptor_f5414e5ec63723f0, []int{6}
}
func (m *MsgSetPeer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetPeer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetPeer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetPeer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetPeer.Merge(m, src)
}
func (m *MsgSetPeer) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetPeer) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetPeer.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetPeer proto.InternalMessageInfo

// MsgSetPeerResponse is the response of the SetPeer message.
type MsgSetPeerResponse struct {
}

func (m *MsgSetPeerResponse) Reset()         { *m = MsgSetPeerResponse{} }
func (m *MsgSetPeerResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSetPeerResponse) ProtoMessage()    {}
func (*MsgSetPeerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f5414e5ec63723f0, []int{7}
}
func (m *MsgSetPeerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetPeerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetPeerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetPeerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetPeerResponse.Merge(m, src)
}
func (m *MsgSetPeerResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetPeerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetPeerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetPeerResponse proto.InternalMessageInfo

// MsgSetBridgingPath allows the Noble Dollar Portal owner to set supported bridging paths.
type MsgSetBridgingPath struct {
	Signer             string `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty"`
	DestinationChainId uint16 `protobuf:"varint,2,opt,name=destination_chain_id,json=destinationChainId,proto3,casttype=uint16" json:"destination_chain_id,omitempty"`
	DestinationToken   []byte `protobuf:"bytes,3,opt,name=destination_token,json=destinationToken,proto3" json:"destination_token,omitempty"`
	Supported          bool   `protobuf:"varint,4,opt,name=supported,proto3" json:"supported,omitempty"`
}

func (m *MsgSetBridgingPath) Reset()         { *m = MsgSetBridgingPath{} }
func (m *MsgSetBridgingPath) String() string { return proto.CompactTextString(m) }
func (*MsgSetBridgingPath) ProtoMessage()    {}
func (*MsgSetBridgingPath) Descriptor() ([]byte, []int) {
	return fileDescriptor_f5414e5ec63723f0, []int{8}
}
func (m *MsgSetBridgingPath) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetBridgingPath) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetBridgingPath.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetBridgingPath) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetBridgingPath.Merge(m, src)
}
func (m *MsgSetBridgingPath) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetBridgingPath) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetBridgingPath.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetBridgingPath proto.InternalMessageInfo

// MsgSetBridgingPathResponse is the response of the SetBridgingPath message.
type MsgSetBridgingPathResponse struct {
}

func (m *MsgSetBridgingPathResponse) Reset()         { *m = MsgSetBridgingPathResponse{} }
func (m *MsgSetBridgingPathResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSetBridgingPathResponse) ProtoMessage()    {}
func (*MsgSetBridgingPathResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f5414e5ec63723f0, []int{9}
}
func (m *MsgSetBridgingPathResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetBridgingPathResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetBridgingPathResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetBridgingPathResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetBridgingPathResponse.Merge(m, src)
}
func (m *MsgSetBridgingPathResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetBridgingPathResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetBridgingPathResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetBridgingPathResponse proto.InternalMessageInfo

// MsgTransferOwnership allows the Noble Dollar Portal ownership to be transferred.
type MsgTransferOwnership struct {
	Signer   string `protobuf:"bytes,1,opt,name=signer,proto3" json:"signer,omitempty"`
	NewOwner string `protobuf:"bytes,2,opt,name=new_owner,json=newOwner,proto3" json:"new_owner,omitempty"`
}

func (m *MsgTransferOwnership) Reset()         { *m = MsgTransferOwnership{} }
func (m *MsgTransferOwnership) String() string { return proto.CompactTextString(m) }
func (*MsgTransferOwnership) ProtoMessage()    {}
func (*MsgTransferOwnership) Descriptor() ([]byte, []int) {
	return fileDescriptor_f5414e5ec63723f0, []int{10}
}
func (m *MsgTransferOwnership) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgTransferOwnership) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgTransferOwnership.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgTransferOwnership) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTransferOwnership.Merge(m, src)
}
func (m *MsgTransferOwnership) XXX_Size() int {
	return m.Size()
}
func (m *MsgTransferOwnership) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTransferOwnership.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTransferOwnership proto.InternalMessageInfo

// MsgTransferOwnershipResponse is the response of the TransferOwnership message.
type MsgTransferOwnershipResponse struct {
}

func (m *MsgTransferOwnershipResponse) Reset()         { *m = MsgTransferOwnershipResponse{} }
func (m *MsgTransferOwnershipResponse) String() string { return proto.CompactTextString(m) }
func (*MsgTransferOwnershipResponse) ProtoMessage()    {}
func (*MsgTransferOwnershipResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f5414e5ec63723f0, []int{11}
}
func (m *MsgTransferOwnershipResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgTransferOwnershipResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgTransferOwnershipResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgTransferOwnershipResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTransferOwnershipResponse.Merge(m, src)
}
func (m *MsgTransferOwnershipResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgTransferOwnershipResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTransferOwnershipResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTransferOwnershipResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgDeliver)(nil), "noble.dollar.portal.v1.MsgDeliver")
	proto.RegisterType((*MsgDeliverResponse)(nil), "noble.dollar.portal.v1.MsgDeliverResponse")
	proto.RegisterType((*MsgTransfer)(nil), "noble.dollar.portal.v1.MsgTransfer")
	proto.RegisterType((*MsgTransferResponse)(nil), "noble.dollar.portal.v1.MsgTransferResponse")
	proto.RegisterType((*MsgSetPausedState)(nil), "noble.dollar.portal.v1.MsgSetPausedState")
	proto.RegisterType((*MsgSetPausedStateResponse)(nil), "noble.dollar.portal.v1.MsgSetPausedStateResponse")
	proto.RegisterType((*MsgSetPeer)(nil), "noble.dollar.portal.v1.MsgSetPeer")
	proto.RegisterType((*MsgSetPeerResponse)(nil), "noble.dollar.portal.v1.MsgSetPeerResponse")
	proto.RegisterType((*MsgSetBridgingPath)(nil), "noble.dollar.portal.v1.MsgSetBridgingPath")
	proto.RegisterType((*MsgSetBridgingPathResponse)(nil), "noble.dollar.portal.v1.MsgSetBridgingPathResponse")
	proto.RegisterType((*MsgTransferOwnership)(nil), "noble.dollar.portal.v1.MsgTransferOwnership")
	proto.RegisterType((*MsgTransferOwnershipResponse)(nil), "noble.dollar.portal.v1.MsgTransferOwnershipResponse")
}

func init() { proto.RegisterFile("noble/dollar/portal/v1/tx.proto", fileDescriptor_f5414e5ec63723f0) }

var fileDescriptor_f5414e5ec63723f0 = []byte{
	// 812 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x56, 0x3d, 0x6f, 0xdb, 0x46,
	0x18, 0x16, 0x25, 0x5b, 0x96, 0xce, 0x1f, 0xb5, 0x58, 0xd9, 0x95, 0x59, 0x55, 0x12, 0xd8, 0x0e,
	0xae, 0x5c, 0x93, 0x96, 0x3f, 0x5a, 0x40, 0xe8, 0x52, 0xb5, 0x43, 0x3d, 0x08, 0x31, 0x68, 0x2f,
	0x0e, 0x02, 0x08, 0xb4, 0x78, 0xa1, 0x08, 0x4b, 0x77, 0x0c, 0xef, 0x24, 0xd9, 0x59, 0x12, 0x64,
	0x08, 0x82, 0x4c, 0x01, 0xf2, 0x07, 0x3c, 0x66, 0xf4, 0xe0, 0x21, 0x73, 0x26, 0x6f, 0x31, 0x3c,
	0x05, 0x19, 0x8c, 0xc0, 0x1e, 0x9c, 0xdf, 0x10, 0x64, 0x08, 0x48, 0x1e, 0x29, 0xca, 0xb2, 0x2c,
	0x45, 0x8b, 0xc0, 0x7b, 0xdf, 0xe7, 0xfd, 0x7a, 0xee, 0xe1, 0x4b, 0x81, 0x2c, 0xc2, 0x7b, 0x75,
	0x28, 0x6b, 0xb8, 0x5e, 0x57, 0x2d, 0xd9, 0xc4, 0x16, 0x55, 0xeb, 0x72, 0xab, 0x20, 0xd3, 0x03,
	0xc9, 0xb4, 0x30, 0xc5, 0xfc, 0xbc, 0x03, 0x90, 0x5c, 0x80, 0xe4, 0x02, 0xa4, 0x56, 0x41, 0x48,
	0xa8, 0x0d, 0x03, 0x61, 0xd9, 0xf9, 0x75, 0xa1, 0xc2, 0x4f, 0x55, 0x4c, 0x1a, 0x98, 0xc8, 0x0d,
	0xa2, 0xdb, 0x29, 0x1a, 0x44, 0x67, 0x8e, 0x05, 0xd7, 0x51, 0x71, 0x4e, 0xb2, 0x7b, 0x60, 0xae,
	0xa4, 0x8e, 0x75, 0xec, 0xda, 0xed, 0x27, 0xd7, 0x2a, 0x3e, 0x01, 0xa0, 0x4c, 0xf4, 0xff, 0x60,
	0xdd, 0x68, 0x41, 0x8b, 0x5f, 0x01, 0x51, 0x62, 0xe8, 0x08, 0x5a, 0x29, 0x2e, 0xc7, 0x2d, 0xc6,
	0x4b, 0xa9, 0xf3, 0x93, 0xe5, 0x24, 0xcb, 0xf2, 0x8f, 0xa6, 0x59, 0x90, 0x90, 0x6d, 0x6a, 0x19,
	0x48, 0x57, 0x18, 0x8e, 0x9f, 0x05, 0x91, 0x96, 0xaa, 0xa6, 0xc2, 0x39, 0x6e, 0x71, 0x4a, 0xb1,
	0x1f, 0x8b, 0xcb, 0x2f, 0x8e, 0xb2, 0xa1, 0xcf, 0x47, 0xd9, 0xd0, 0xb3, 0xeb, 0xe3, 0x3c, 0x83,
	0xbd, 0xbc, 0x3e, 0xce, 0xcf, 0x75, 0x4f, 0xce, 0x4a, 0x8a, 0x49, 0xc0, 0x77, 0x1a, 0x50, 0x20,
	0x31, 0x31, 0x22, 0x50, 0x7c, 0x17, 0x06, 0x93, 0x65, 0xa2, 0xef, 0x58, 0x2a, 0x22, 0x0f, 0x47,
	0x6a, 0xec, 0x7f, 0x10, 0x55, 0x1b, 0xb8, 0x89, 0xa8, 0xd3, 0x5b, 0xbc, 0xb4, 0x72, 0x7a, 0x91,
	0x0d, 0x7d, 0xbc, 0xc8, 0xce, 0xb9, 0x51, 0x44, 0xdb, 0x97, 0x0c, 0x2c, 0x37, 0x54, 0x5a, 0x93,
	0x36, 0x11, 0x3d, 0x3f, 0x59, 0x06, 0x2c, 0xdd, 0x26, 0xa2, 0x6f, 0xae, 0x8f, 0xf3, 0x9c, 0xc2,
	0xe2, 0xf9, 0xbf, 0x41, 0x52, 0x83, 0x84, 0x1a, 0x48, 0xa5, 0x06, 0x46, 0x95, 0x6a, 0x4d, 0x35,
	0x50, 0xc5, 0xd0, 0x52, 0x91, 0x1c, 0xb7, 0x38, 0x5d, 0x02, 0x5f, 0x2e, 0xb2, 0xd1, 0xa6, 0x81,
	0x68, 0xe1, 0x4f, 0x85, 0x0f, 0xe0, 0xfe, 0xb5, 0x61, 0x9b, 0x1a, 0xbf, 0x04, 0x12, 0xc1, 0x68,
	0x8a, 0xf7, 0x21, 0x4a, 0x8d, 0x39, 0x74, 0xcd, 0x06, 0x1c, 0x3b, 0xb6, 0x9d, 0x4f, 0x83, 0xb8,
	0x05, 0xab, 0x86, 0x69, 0x40, 0x44, 0x53, 0xe3, 0x0e, 0xa8, 0x63, 0x28, 0x4a, 0x7d, 0x98, 0x9d,
	0xef, 0x66, 0xd6, 0x23, 0x4d, 0x9c, 0x03, 0x3f, 0x06, 0x38, 0xf4, 0xb9, 0x7d, 0xcd, 0x81, 0x44,
	0x99, 0xe8, 0xdb, 0x90, 0x6e, 0xa9, 0x4d, 0x02, 0xb5, 0x6d, 0xaa, 0x52, 0x38, 0x02, 0xc3, 0xf3,
	0x20, 0x6a, 0x3a, 0x09, 0x1c, 0x86, 0x63, 0x0a, 0x3b, 0x15, 0xd7, 0xfb, 0xb4, 0x99, 0xee, 0x6e,
	0xb3, 0xbb, 0xbe, 0xf8, 0x33, 0x58, 0xe8, 0x69, 0xca, 0x6f, 0xf9, 0x3d, 0xe7, 0xc8, 0xd4, 0xf6,
	0xc2, 0x91, 0xd4, 0xf0, 0x1b, 0x18, 0x77, 0xee, 0xcd, 0x69, 0x75, 0xba, 0x34, 0xc3, 0xc4, 0xe0,
	0x5d, 0x9c, 0xeb, 0xe4, 0x73, 0x60, 0x92, 0xda, 0x6c, 0x55, 0xa1, 0x2d, 0x46, 0xe7, 0x82, 0xa7,
	0x94, 0xa0, 0x89, 0x4f, 0x81, 0x89, 0x86, 0x8a, 0x54, 0x1d, 0x5a, 0xec, 0x0e, 0xbd, 0xe3, 0xb0,
	0xb2, 0x67, 0x23, 0x30, 0xd9, 0xb3, 0x93, 0x3f, 0xe7, 0xf3, 0xb0, 0x67, 0x2e, 0x59, 0x86, 0xa6,
	0x1b, 0x48, 0xdf, 0x52, 0x69, 0x6d, 0x84, 0x79, 0xfb, 0x69, 0x36, 0x3c, 0xba, 0x66, 0x23, 0xfd,
	0x35, 0x4b, 0x9a, 0xa6, 0x3d, 0x1e, 0xd4, 0x1c, 0x52, 0x62, 0x4a, 0xc7, 0x50, 0xdc, 0xe8, 0x43,
	0xcb, 0x2f, 0x3d, 0xb4, 0x04, 0x27, 0x16, 0xd3, 0x40, 0xe8, 0xe5, 0xc1, 0xa7, 0xe9, 0x2d, 0x07,
	0x92, 0x01, 0x65, 0xdf, 0x6b, 0x23, 0x68, 0x91, 0x9a, 0x61, 0x8e, 0x40, 0xd4, 0x06, 0x88, 0x23,
	0xd8, 0xae, 0x60, 0x3b, 0x05, 0xdb, 0x14, 0xfd, 0x83, 0x62, 0x08, 0xb6, 0x9d, 0x62, 0xc5, 0xbf,
	0xfa, 0x8c, 0x95, 0xbd, 0xfd, 0x55, 0xf4, 0x3b, 0x14, 0x33, 0x20, 0x7d, 0x5b, 0xe7, 0xde, 0x68,
	0xab, 0x5f, 0xc7, 0x40, 0xa4, 0x4c, 0x74, 0x7e, 0x17, 0x4c, 0x78, 0x4b, 0x59, 0x94, 0x6e, 0xff,
	0x30, 0x48, 0x9d, 0xbd, 0x29, 0xe4, 0x07, 0x63, 0xbc, 0x12, 0xfc, 0x03, 0x10, 0xf3, 0xf7, 0xea,
	0xaf, 0x77, 0xc4, 0x79, 0x20, 0x61, 0x69, 0x08, 0x90, 0x9f, 0x1d, 0x81, 0x99, 0x1b, 0x9b, 0xe5,
	0xf7, 0x3b, 0xc2, 0xbb, 0xa1, 0x42, 0x61, 0x68, 0xa8, 0x5f, 0x6f, 0x17, 0x4c, 0x78, 0x6b, 0x41,
	0x1c, 0x10, 0x0d, 0x07, 0x10, 0x75, 0xe3, 0x6d, 0xe4, 0x1f, 0x81, 0x1f, 0x6e, 0xbe, 0x89, 0x03,
	0xc2, 0x83, 0x58, 0x61, 0x75, 0x78, 0xac, 0x5f, 0xb2, 0x0d, 0x12, 0xbd, 0xaa, 0xfe, 0x63, 0x08,
	0xfe, 0x7d, 0xb4, 0xb0, 0xfe, 0x3d, 0x68, 0xaf, 0xb0, 0x30, 0xfe, 0xd4, 0xfe, 0xe6, 0x95, 0x8a,
	0xa7, 0x97, 0x19, 0xee, 0xec, 0x32, 0xc3, 0x7d, 0xba, 0xcc, 0x70, 0xaf, 0xae, 0x32, 0xa1, 0xb3,
	0xab, 0x4c, 0xe8, 0xc3, 0x55, 0x26, 0x74, 0x3f, 0xc7, 0xf2, 0xb9, 0xc9, 0x0f, 0x0e, 0x1f, 0xcb,
	0xad, 0x35, 0x99, 0x1e, 0x9a, 0x90, 0x30, 0xb1, 0xef, 0x45, 0x9d, 0x7f, 0x14, 0x6b, 0xdf, 0x02,
	0x00, 0x00, 0xff, 0xff, 0x04, 0x1d, 0x9e, 0xd0, 0xe9, 0x08, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	Deliver(ctx context.Context, in *MsgDeliver, opts ...grpc.CallOption) (*MsgDeliverResponse, error)
	Transfer(ctx context.Context, in *MsgTransfer, opts ...grpc.CallOption) (*MsgTransferResponse, error)
	SetPausedState(ctx context.Context, in *MsgSetPausedState, opts ...grpc.CallOption) (*MsgSetPausedStateResponse, error)
	SetPeer(ctx context.Context, in *MsgSetPeer, opts ...grpc.CallOption) (*MsgSetPeerResponse, error)
	SetBridgingPath(ctx context.Context, in *MsgSetBridgingPath, opts ...grpc.CallOption) (*MsgSetBridgingPathResponse, error)
	TransferOwnership(ctx context.Context, in *MsgTransferOwnership, opts ...grpc.CallOption) (*MsgTransferOwnershipResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) Deliver(ctx context.Context, in *MsgDeliver, opts ...grpc.CallOption) (*MsgDeliverResponse, error) {
	out := new(MsgDeliverResponse)
	err := c.cc.Invoke(ctx, "/noble.dollar.portal.v1.Msg/Deliver", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) Transfer(ctx context.Context, in *MsgTransfer, opts ...grpc.CallOption) (*MsgTransferResponse, error) {
	out := new(MsgTransferResponse)
	err := c.cc.Invoke(ctx, "/noble.dollar.portal.v1.Msg/Transfer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SetPausedState(ctx context.Context, in *MsgSetPausedState, opts ...grpc.CallOption) (*MsgSetPausedStateResponse, error) {
	out := new(MsgSetPausedStateResponse)
	err := c.cc.Invoke(ctx, "/noble.dollar.portal.v1.Msg/SetPausedState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SetPeer(ctx context.Context, in *MsgSetPeer, opts ...grpc.CallOption) (*MsgSetPeerResponse, error) {
	out := new(MsgSetPeerResponse)
	err := c.cc.Invoke(ctx, "/noble.dollar.portal.v1.Msg/SetPeer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SetBridgingPath(ctx context.Context, in *MsgSetBridgingPath, opts ...grpc.CallOption) (*MsgSetBridgingPathResponse, error) {
	out := new(MsgSetBridgingPathResponse)
	err := c.cc.Invoke(ctx, "/noble.dollar.portal.v1.Msg/SetBridgingPath", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) TransferOwnership(ctx context.Context, in *MsgTransferOwnership, opts ...grpc.CallOption) (*MsgTransferOwnershipResponse, error) {
	out := new(MsgTransferOwnershipResponse)
	err := c.cc.Invoke(ctx, "/noble.dollar.portal.v1.Msg/TransferOwnership", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	Deliver(context.Context, *MsgDeliver) (*MsgDeliverResponse, error)
	Transfer(context.Context, *MsgTransfer) (*MsgTransferResponse, error)
	SetPausedState(context.Context, *MsgSetPausedState) (*MsgSetPausedStateResponse, error)
	SetPeer(context.Context, *MsgSetPeer) (*MsgSetPeerResponse, error)
	SetBridgingPath(context.Context, *MsgSetBridgingPath) (*MsgSetBridgingPathResponse, error)
	TransferOwnership(context.Context, *MsgTransferOwnership) (*MsgTransferOwnershipResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) Deliver(ctx context.Context, req *MsgDeliver) (*MsgDeliverResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Deliver not implemented")
}
func (*UnimplementedMsgServer) Transfer(ctx context.Context, req *MsgTransfer) (*MsgTransferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Transfer not implemented")
}
func (*UnimplementedMsgServer) SetPausedState(ctx context.Context, req *MsgSetPausedState) (*MsgSetPausedStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPausedState not implemented")
}
func (*UnimplementedMsgServer) SetPeer(ctx context.Context, req *MsgSetPeer) (*MsgSetPeerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPeer not implemented")
}
func (*UnimplementedMsgServer) SetBridgingPath(ctx context.Context, req *MsgSetBridgingPath) (*MsgSetBridgingPathResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetBridgingPath not implemented")
}
func (*UnimplementedMsgServer) TransferOwnership(ctx context.Context, req *MsgTransferOwnership) (*MsgTransferOwnershipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferOwnership not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_Deliver_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDeliver)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Deliver(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/noble.dollar.portal.v1.Msg/Deliver",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Deliver(ctx, req.(*MsgDeliver))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_Transfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgTransfer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Transfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/noble.dollar.portal.v1.Msg/Transfer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Transfer(ctx, req.(*MsgTransfer))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SetPausedState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSetPausedState)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetPausedState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/noble.dollar.portal.v1.Msg/SetPausedState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetPausedState(ctx, req.(*MsgSetPausedState))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SetPeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSetPeer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetPeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/noble.dollar.portal.v1.Msg/SetPeer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetPeer(ctx, req.(*MsgSetPeer))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SetBridgingPath_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSetBridgingPath)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetBridgingPath(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/noble.dollar.portal.v1.Msg/SetBridgingPath",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetBridgingPath(ctx, req.(*MsgSetBridgingPath))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_TransferOwnership_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgTransferOwnership)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).TransferOwnership(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/noble.dollar.portal.v1.Msg/TransferOwnership",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).TransferOwnership(ctx, req.(*MsgTransferOwnership))
	}
	return interceptor(ctx, in, info, handler)
}

var Msg_serviceDesc = _Msg_serviceDesc
var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "noble.dollar.portal.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Deliver",
			Handler:    _Msg_Deliver_Handler,
		},
		{
			MethodName: "Transfer",
			Handler:    _Msg_Transfer_Handler,
		},
		{
			MethodName: "SetPausedState",
			Handler:    _Msg_SetPausedState_Handler,
		},
		{
			MethodName: "SetPeer",
			Handler:    _Msg_SetPeer_Handler,
		},
		{
			MethodName: "SetBridgingPath",
			Handler:    _Msg_SetBridgingPath_Handler,
		},
		{
			MethodName: "TransferOwnership",
			Handler:    _Msg_TransferOwnership_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "noble/dollar/portal/v1/tx.proto",
}

func (m *MsgDeliver) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeliver) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeliver) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Vaa) > 0 {
		i -= len(m.Vaa)
		copy(dAtA[i:], m.Vaa)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Vaa)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgDeliverResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeliverResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeliverResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgTransfer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTransfer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgTransfer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Recipient) > 0 {
		i -= len(m.Recipient)
		copy(dAtA[i:], m.Recipient)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Recipient)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.DestinationToken) > 0 {
		i -= len(m.DestinationToken)
		copy(dAtA[i:], m.DestinationToken)
		i = encodeVarintTx(dAtA, i, uint64(len(m.DestinationToken)))
		i--
		dAtA[i] = 0x22
	}
	if m.DestinationChainId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.DestinationChainId))
		i--
		dAtA[i] = 0x18
	}
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgTransferResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTransferResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgTransferResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSetPausedState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetPausedState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetPausedState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Paused {
		i--
		if m.Paused {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSetPausedStateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetPausedStateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetPausedStateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSetPeer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetPeer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetPeer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Manager) > 0 {
		i -= len(m.Manager)
		copy(dAtA[i:], m.Manager)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Manager)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Transceiver) > 0 {
		i -= len(m.Transceiver)
		copy(dAtA[i:], m.Transceiver)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Transceiver)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Chain != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Chain))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSetPeerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetPeerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetPeerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSetBridgingPath) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetBridgingPath) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetBridgingPath) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Supported {
		i--
		if m.Supported {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.DestinationToken) > 0 {
		i -= len(m.DestinationToken)
		copy(dAtA[i:], m.DestinationToken)
		i = encodeVarintTx(dAtA, i, uint64(len(m.DestinationToken)))
		i--
		dAtA[i] = 0x1a
	}
	if m.DestinationChainId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.DestinationChainId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSetBridgingPathResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetBridgingPathResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetBridgingPathResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgTransferOwnership) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTransferOwnership) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgTransferOwnership) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NewOwner) > 0 {
		i -= len(m.NewOwner)
		copy(dAtA[i:], m.NewOwner)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NewOwner)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgTransferOwnershipResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTransferOwnershipResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgTransferOwnershipResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgDeliver) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Vaa)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgDeliverResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgTransfer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovTx(uint64(l))
	if m.DestinationChainId != 0 {
		n += 1 + sovTx(uint64(m.DestinationChainId))
	}
	l = len(m.DestinationToken)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Recipient)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgTransferResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSetPausedState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Paused {
		n += 2
	}
	return n
}

func (m *MsgSetPausedStateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSetPeer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Chain != 0 {
		n += 1 + sovTx(uint64(m.Chain))
	}
	l = len(m.Transceiver)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Manager)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgSetPeerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSetBridgingPath) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.DestinationChainId != 0 {
		n += 1 + sovTx(uint64(m.DestinationChainId))
	}
	l = len(m.DestinationToken)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Supported {
		n += 2
	}
	return n
}

func (m *MsgSetBridgingPathResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgTransferOwnership) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.NewOwner)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgTransferOwnershipResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgDeliver) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeliver: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeliver: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vaa", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Vaa = append(m.Vaa[:0], dAtA[iNdEx:postIndex]...)
			if m.Vaa == nil {
				m.Vaa = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeliverResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeliverResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeliverResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgTransfer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTransfer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTransfer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationChainId", wireType)
			}
			m.DestinationChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DestinationChainId |= uint16(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationToken", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestinationToken = append(m.DestinationToken[:0], dAtA[iNdEx:postIndex]...)
			if m.DestinationToken == nil {
				m.DestinationToken = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Recipient", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Recipient = append(m.Recipient[:0], dAtA[iNdEx:postIndex]...)
			if m.Recipient == nil {
				m.Recipient = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgTransferResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTransferResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTransferResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetPausedState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetPausedState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetPausedState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Paused", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Paused = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetPausedStateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetPausedStateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetPausedStateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetPeer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetPeer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetPeer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chain", wireType)
			}
			m.Chain = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Chain |= uint16(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Transceiver", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Transceiver = append(m.Transceiver[:0], dAtA[iNdEx:postIndex]...)
			if m.Transceiver == nil {
				m.Transceiver = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Manager", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Manager = append(m.Manager[:0], dAtA[iNdEx:postIndex]...)
			if m.Manager == nil {
				m.Manager = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetPeerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetPeerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetPeerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetBridgingPath) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetBridgingPath: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetBridgingPath: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationChainId", wireType)
			}
			m.DestinationChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DestinationChainId |= uint16(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationToken", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestinationToken = append(m.DestinationToken[:0], dAtA[iNdEx:postIndex]...)
			if m.DestinationToken == nil {
				m.DestinationToken = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Supported", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Supported = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetBridgingPathResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetBridgingPathResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetBridgingPathResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgTransferOwnership) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTransferOwnership: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTransferOwnership: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewOwner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewOwner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgTransferOwnershipResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTransferOwnershipResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTransferOwnershipResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: noble/dollar/v2/query.proto

package v2

import (
	context "context"
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueryStats struct {
}

func (m *QueryStats) Reset()         { *m = QueryStats{} }
func (m *QueryStats) String() string { return proto.CompactTextString(m) }
func (*QueryStats) ProtoMessage()    {}
func (*QueryStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_13ad0ac76919569d, []int{0}
}
func (m *QueryStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStats.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStats.Merge(m, src)
}
func (m *QueryStats) XXX_Size() int {
	return m.Size()
}
func (m *QueryStats) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStats.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStats proto.InternalMessageInfo

type QueryStatsResponse struct {
	TotalHolders       uint64                                      `protobuf:"varint,1,opt,name=total_holders,json=totalHolders,proto3" json:"total_holders,omitempty"`
	TotalPrincipal     cosmossdk_io_math.Int                       `protobuf:"bytes,2,opt,name=total_principal,json=totalPrincipal,proto3,customtype=cosmossdk.io/math.Int" json:"total_principal"`
	TotalYieldAccrued  cosmossdk_io_math.Int                       `protobuf:"bytes,3,opt,name=total_yield_accrued,json=totalYieldAccrued,proto3,customtype=cosmossdk.io/math.Int" json:"total_yield_accrued"`
	TotalExternalYield map[string]QueryStatsResponse_ExternalYield `protobuf:"bytes,4,rep,name=total_external_yield,json=totalExternalYield,proto3" json:"total_external_yield" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *QueryStatsResponse) Reset()         { *m = QueryStatsResponse{} }
func (m *QueryStatsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryStatsResponse) ProtoMessage()    {}
func (*QueryStatsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_13ad0ac76919569d, []int{1}
}
func (m *QueryStatsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStatsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStatsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStatsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStatsResponse.Merge(m, src)
}
func (m *QueryStatsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryStatsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStatsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStatsResponse proto.InternalMessageInfo

func (m *QueryStatsResponse) GetTotalHolders() uint64 {
	if m != nil {
		return m.TotalHolders
	}
	return 0
}

func (m *QueryStatsResponse) GetTotalExternalYield() map[string]QueryStatsResponse_ExternalYield {
	if m != nil {
		return m.TotalExternalYield
	}
	return nil
}

type QueryStatsResponse_ExternalYield struct {
	ChainId string                `protobuf:"bytes,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	Amount  cosmossdk_io_math.Int `protobuf:"bytes,2,opt,name=amount,proto3,customtype=cosmossdk.io/math.Int" json:"amount"`
}

func (m *QueryStatsResponse_ExternalYield) Reset()         { *m = QueryStatsResponse_ExternalYield{} }
func (m *QueryStatsResponse_ExternalYield) String() string { return proto.CompactTextString(m) }
func (*QueryStatsResponse_ExternalYield) ProtoMessage()    {}
func (*QueryStatsResponse_ExternalYield) Descriptor() ([]byte, []int) {
	return fileDescriptor_13ad0ac76919569d, []int{1, 0}
}
func (m *QueryStatsResponse_ExternalYield) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStatsResponse_ExternalYield) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStatsResponse_ExternalYield.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStatsResponse_ExternalYield) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStatsResponse_ExternalYield.Merge(m, src)
}
func (m *QueryStatsResponse_ExternalYield) XXX_Size() int {
	return m.Size()
}
func (m *QueryStatsResponse_ExternalYield) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStatsResponse_ExternalYield.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStatsResponse_ExternalYield proto.InternalMessageInfo

func (m *QueryStatsResponse_ExternalYield) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

type QueryYieldRecipients struct {
}

func (m *QueryYieldRecipients) Reset()         { *m = QueryYieldRecipients{} }
func (m *QueryYieldRecipients) String() string { return proto.CompactTextString(m) }
func (*QueryYieldRecipients) ProtoMessage()    {}
func (*QueryYieldRecipients) Descriptor() ([]byte, []int) {
	return fileDescriptor_13ad0ac76919569d, []int{2}
}
func (m *QueryYieldRecipients) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryYieldRecipients) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryYieldRecipients.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryYieldRecipients) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryYieldRecipients.Merge(m, src)
}
func (m *QueryYieldRecipients) XXX_Size() int {
	return m.Size()
}
func (m *QueryYieldRecipients) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryYieldRecipients.DiscardUnknown(m)
}

var xxx_messageInfo_QueryYieldRecipients proto.InternalMessageInfo

type QueryYieldRecipientsResponse struct {
	YieldRecipients map[string]string `protobuf:"bytes,1,rep,name=yield_recipients,json=yieldRecipients,proto3" json:"yield_recipients,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *QueryYieldRecipientsResponse) Reset()         { *m = QueryYieldRecipientsResponse{} }
func (m *QueryYieldRecipientsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryYieldRecipientsResponse) ProtoMessage()    {}
func (*QueryYieldRecipientsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_13ad0ac76919569d, []int{3}
}
func (m *QueryYieldRecipientsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryYieldRecipientsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryYieldRecipientsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryYieldRecipientsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryYieldRecipientsResponse.Merge(m, src)
}
func (m *QueryYieldRecipientsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryYieldRecipientsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryYieldRecipientsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryYieldRecipientsResponse proto.InternalMessageInfo

func (m *QueryYieldRecipientsResponse) GetYieldRecipients() map[string]string {
	if m != nil {
		return m.YieldRecipients
	}
	return nil
}

type QueryYieldRecipient struct {
	Provider   Provider `protobuf:"varint,1,opt,name=provider,proto3,enum=noble.dollar.v2.Provider" json:"provider,omitempty"`
	Identifier string   `protobuf:"bytes,2,opt,name=identifier,proto3" json:"identifier,omitempty"`
}

func (m *QueryYieldRecipient) Reset()         { *m = QueryYieldRecipient{} }
func (m *QueryYieldRecipient) String() string { return proto.CompactTextString(m) }
func (*QueryYieldRecipient) ProtoMessage()    {}
func (*QueryYieldRecipient) Descriptor() ([]byte, []int) {
	return fileDescriptor_13ad0ac76919569d, []int{4}
}
func (m *QueryYieldRecipient) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryYieldRecipient) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryYieldRecipient.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryYieldRecipient) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryYieldRecipient.Merge(m, src)
}
func (m *QueryYieldRecipient) XXX_Size() int {
	return m.Size()
}
func (m *QueryYieldRecipient) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryYieldRecipient.DiscardUnknown(m)
}

var xxx_messageInfo_QueryYieldRecipient proto.InternalMessageInfo

func (m *QueryYieldRecipient) GetProvider() Provider {
	if m != nil {
		return m.Provider
	}
	return Provider_IBC
}

func (m *QueryYieldRecipient) GetIdentifier() string {
	if m != nil {
		return m.Identifier
	}
	return ""
}

type QueryYieldRecipientResponse struct {
	YieldRecipient string `protobuf:"bytes,1,opt,name=yield_recipient,json=yieldRecipient,proto3" json:"yield_recipient,omitempty"`
}

func (m *QueryYieldRecipientResponse) Reset()         { *m = QueryYieldRecipientResponse{} }
func (m *QueryYieldRecipientResponse) String() string { return proto.CompactTextString(m) }
func (*QueryYieldRecipientResponse) ProtoMessage()    {}
func (*QueryYieldRecipientResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_13ad0ac76919569d, []int{5}
}
func (m *QueryYieldRecipientResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryYieldRecipientResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryYieldRecipientResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryYieldRecipientResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryYieldRecipientResponse.Merge(m, src)
}
func (m *QueryYieldRecipientResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryYieldRecipientResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryYieldRecipientResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryYieldRecipientResponse proto.InternalMessageInfo

func (m *QueryYieldRecipientResponse) GetYieldRecipient() string {
	if m != nil {
		return m.YieldRecipient
	}
	return ""
}

func init() {
	proto.RegisterType((*QueryStats)(nil), "noble.dollar.v2.QueryStats")
	proto.RegisterType((*QueryStatsResponse)(nil), "noble.dollar.v2.QueryStatsResponse")
	proto.RegisterMapType((map[string]QueryStatsResponse_ExternalYield)(nil), "noble.dollar.v2.QueryStatsResponse.TotalExternalYieldEntry")
	proto.RegisterType((*QueryStatsResponse_ExternalYield)(nil), "noble.dollar.v2.QueryStatsResponse.ExternalYield")
	proto.RegisterType((*QueryYieldRecipients)(nil), "noble.dollar.v2.QueryYieldRecipients")
	proto.RegisterType((*QueryYieldRecipientsResponse)(nil), "noble.dollar.v2.QueryYieldRecipientsResponse")
	proto.RegisterMapType((map[string]string)(nil), "noble.dollar.v2.QueryYieldRecipientsResponse.YieldRecipientsEntry")
	proto.RegisterType((*QueryYieldRecipient)(nil), "noble.dollar.v2.QueryYieldRecipient")
	proto.RegisterType((*QueryYieldRecipientResponse)(nil), "noble.dollar.v2.QueryYieldRecipientResponse")
}

func init() { proto.RegisterFile("noble/dollar/v2/query.proto", fileDescriptor_13ad0ac76919569d) }

var fileDescriptor_13ad0ac76919569d = []byte{
	// 714 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x55, 0xcf, 0x4f, 0x13, 0x5b,
	0x14, 0xee, 0xd0, 0x96, 0x07, 0x07, 0x68, 0xe1, 0xd2, 0xc7, 0x2b, 0xd3, 0xa6, 0xf0, 0x8a, 0x46,
	0x42, 0x64, 0x46, 0x6a, 0x34, 0x04, 0x57, 0x36, 0x41, 0x61, 0x87, 0xd5, 0x0d, 0x6e, 0xea, 0xd0,
	0xb9, 0x96, 0x1b, 0xa6, 0xf7, 0x8e, 0x33, 0xb7, 0x0d, 0x23, 0x61, 0xe3, 0xca, 0xa5, 0x89, 0x0b,
	0xff, 0x05, 0x13, 0x37, 0x2e, 0xdc, 0xbb, 0x65, 0x89, 0xba, 0x31, 0x2e, 0x88, 0x29, 0x26, 0xfe,
	0x1b, 0x66, 0xee, 0x9d, 0xfe, 0x9a, 0x16, 0xad, 0x6c, 0xc8, 0xdc, 0xf3, 0x9d, 0xf3, 0x9d, 0xef,
	0x7c, 0xe7, 0x84, 0x42, 0x86, 0xb2, 0x3d, 0x0b, 0xeb, 0x26, 0xb3, 0x2c, 0xc3, 0xd1, 0x1b, 0x05,
	0xfd, 0x59, 0x1d, 0x3b, 0x9e, 0x66, 0x3b, 0x8c, 0x33, 0x94, 0x14, 0xa0, 0x26, 0x41, 0xad, 0x51,
	0x50, 0x67, 0x8c, 0x1a, 0xa1, 0x4c, 0x17, 0x7f, 0x65, 0x8e, 0x9a, 0xa9, 0x30, 0xb7, 0xc6, 0x5c,
	0x59, 0xa7, 0x37, 0xd6, 0xba, 0x09, 0xd4, 0x79, 0x09, 0x96, 0xc5, 0x4b, 0x97, 0x8f, 0x00, 0x4a,
	0x55, 0x59, 0x95, 0xc9, 0xb8, 0xff, 0x15, 0x44, 0xb3, 0x55, 0xc6, 0xaa, 0x16, 0xd6, 0x0d, 0x9b,
	0xe8, 0x06, 0xa5, 0x8c, 0x1b, 0x9c, 0x30, 0xda, 0xaa, 0xc9, 0x86, 0xc5, 0x06, 0xca, 0x04, 0x9a,
	0x9f, 0x04, 0x78, 0xe0, 0xf7, 0x7e, 0xc8, 0x0d, 0xee, 0xe6, 0x9b, 0x31, 0x40, 0x9d, 0x67, 0x09,
	0xbb, 0x36, 0xa3, 0x2e, 0x46, 0x2b, 0x30, 0xc5, 0x19, 0x37, 0xac, 0xf2, 0x3e, 0xb3, 0x4c, 0xec,
	0xb8, 0x69, 0x65, 0x51, 0x59, 0x8e, 0x15, 0xe3, 0x6f, 0x7f, 0xbe, 0x5f, 0x51, 0x4a, 0x93, 0x02,
	0xdb, 0x92, 0x10, 0xda, 0x85, 0xa4, 0xcc, 0xb5, 0x1d, 0x42, 0x2b, 0xc4, 0x36, 0xac, 0xf4, 0xc8,
	0xa2, 0xb2, 0x3c, 0x5e, 0xbc, 0x71, 0x72, 0xb6, 0x10, 0xf9, 0x76, 0xb6, 0xf0, 0xaf, 0x9c, 0xc8,
	0x35, 0x0f, 0x34, 0xc2, 0xf4, 0x9a, 0xc1, 0xf7, 0xb5, 0x6d, 0xca, 0x3f, 0x7f, 0x58, 0x85, 0x60,
	0xd4, 0x6d, 0xca, 0x25, 0x71, 0x42, 0x10, 0xed, 0xb4, 0x78, 0xd0, 0x13, 0x98, 0x95, 0xd4, 0x1e,
	0xc1, 0x96, 0x59, 0x36, 0x2a, 0x15, 0xa7, 0x8e, 0xcd, 0x74, 0xf4, 0x92, 0xf4, 0x33, 0x82, 0x6c,
	0xd7, 0xe7, 0xba, 0x2b, 0xa9, 0x90, 0x0b, 0x29, 0xd9, 0x01, 0x1f, 0x72, 0xec, 0xd0, 0x56, 0xab,
	0x74, 0x6c, 0x31, 0xba, 0x3c, 0x51, 0xb8, 0xa3, 0x85, 0x56, 0xab, 0xf5, 0x7b, 0xa5, 0x3d, 0xf2,
	0xeb, 0x37, 0x83, 0x72, 0x41, 0xbe, 0x49, 0xb9, 0xe3, 0x15, 0x63, 0xbe, 0xbe, 0x12, 0xe2, 0x7d,
	0xb0, 0xca, 0x61, 0xaa, 0x27, 0x80, 0xe6, 0x61, 0xac, 0xb2, 0x6f, 0x10, 0x5a, 0x26, 0xa6, 0x70,
	0x7a, 0xbc, 0xf4, 0x8f, 0x78, 0x6f, 0x9b, 0x68, 0x0b, 0x46, 0x8d, 0x1a, 0xab, 0x53, 0x7e, 0x69,
	0x53, 0x83, 0x7a, 0xf5, 0x10, 0xfe, 0xbb, 0x40, 0x2a, 0x9a, 0x86, 0xe8, 0x01, 0xf6, 0x82, 0xd6,
	0xfe, 0x27, 0xba, 0x0f, 0xf1, 0x86, 0x61, 0xd5, 0xb1, 0xe8, 0x3a, 0x51, 0x58, 0x1b, 0xc6, 0x88,
	0x1e, 0xe2, 0x92, 0xac, 0xdf, 0x18, 0x59, 0x57, 0xf2, 0x73, 0x90, 0x12, 0xe9, 0x12, 0xc0, 0x15,
	0x62, 0x13, 0x4c, 0xb9, 0x9b, 0xff, 0xa4, 0x40, 0x76, 0x10, 0xd0, 0x3e, 0xc3, 0x1a, 0x4c, 0xcb,
	0xcd, 0x3b, 0x6d, 0x2c, 0xad, 0x88, 0xcd, 0x14, 0x07, 0x0b, 0xba, 0x80, 0x48, 0x0b, 0xc5, 0xc5,
	0xd4, 0xa5, 0xa4, 0xd7, 0x1b, 0x55, 0x8b, 0x90, 0x1a, 0x94, 0x38, 0xc0, 0x9e, 0x54, 0xb7, 0x3d,
	0xe3, 0xdd, 0xb3, 0x5a, 0x30, 0x3b, 0x40, 0x09, 0xba, 0x05, 0x63, 0xb6, 0xc3, 0x1a, 0xc4, 0xc4,
	0x8e, 0xe0, 0x49, 0x14, 0xe6, 0xfb, 0x26, 0xd8, 0x09, 0x12, 0x4a, 0xed, 0x54, 0x94, 0x03, 0x20,
	0x26, 0xa6, 0x9c, 0x3c, 0x25, 0xd8, 0x09, 0x9a, 0x75, 0x45, 0xf2, 0xf7, 0x20, 0x33, 0xa0, 0x5b,
	0xdb, 0xbf, 0x6b, 0x90, 0x0c, 0xf9, 0x17, 0x0c, 0x91, 0xe8, 0x1d, 0xbd, 0xf0, 0x31, 0x0a, 0x71,
	0x41, 0x84, 0x28, 0xc4, 0xc5, 0x56, 0x51, 0xe6, 0x37, 0x2b, 0x57, 0x97, 0x86, 0xb8, 0x87, 0xfc,
	0xd2, 0x4b, 0xff, 0xfe, 0x5e, 0x7c, 0xf9, 0xf1, 0x7a, 0x24, 0x8d, 0xe6, 0xf4, 0xf0, 0x7f, 0x25,
	0x57, 0xb4, 0x79, 0xa3, 0x40, 0x32, 0x64, 0x3a, 0xba, 0x3a, 0xd4, 0x72, 0xd5, 0xd5, 0xbf, 0xba,
	0x81, 0xbc, 0xd6, 0x91, 0xb3, 0x84, 0xfe, 0xef, 0x93, 0x13, 0x3e, 0x34, 0xf4, 0x4e, 0x81, 0x44,
	0x68, 0x8b, 0x57, 0x86, 0xe9, 0xa8, 0x5e, 0x1f, 0x26, 0xab, 0x2d, 0x6b, 0xb3, 0x23, 0x6b, 0x03,
	0xad, 0xff, 0x49, 0x96, 0x7e, 0xd4, 0xba, 0x8d, 0x63, 0xfd, 0xa8, 0x73, 0x08, 0xc7, 0xc5, 0xdb,
	0x27, 0xcd, 0x9c, 0x72, 0xda, 0xcc, 0x29, 0xdf, 0x9b, 0x39, 0xe5, 0xd5, 0x79, 0x2e, 0x72, 0x7a,
	0x9e, 0x8b, 0x7c, 0x3d, 0xcf, 0x45, 0x1e, 0x67, 0x03, 0x1d, 0x52, 0xd4, 0xa1, 0xf7, 0xdc, 0xa7,
	0xe5, 0x9e, 0x8d, 0x5d, 0xbd, 0x51, 0xd8, 0x1b, 0x15, 0xbf, 0x0a, 0x37, 0x7f, 0x05, 0x00, 0x00,
	0xff, 0xff, 0xc3, 0x15, 0xbe, 0xf6, 0xe2, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	Stats(ctx context.Context, in *QueryStats, opts ...grpc.CallOption) (*QueryStatsResponse, error)
	YieldRecipients(ctx context.Context, in *QueryYieldRecipients, opts ...grpc.CallOption) (*QueryYieldRecipientsResponse, error)
	YieldRecipient(ctx context.Context, in *QueryYieldRecipient, opts ...grpc.CallOption) (*QueryYieldRecipientResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Stats(ctx context.Context, in *QueryStats, opts ...grpc.CallOption) (*QueryStatsResponse, error) {
	out := new(QueryStatsResponse)
	err := c.cc.Invoke(ctx, "/noble.dollar.v2.Query/Stats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) YieldRecipients(ctx context.Context, in *QueryYieldRecipients, opts ...grpc.CallOption) (*QueryYieldRecipientsResponse, error) {
	out := new(QueryYieldRecipientsResponse)
	err := c.cc.Invoke(ctx, "/noble.dollar.v2.Query/YieldRecipients", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) YieldRecipient(ctx context.Context, in *QueryYieldRecipient, opts ...grpc.CallOption) (*QueryYieldRecipientResponse, error) {
	out := new(QueryYieldRecipientResponse)
	err := c.cc.Invoke(ctx, "/noble.dollar.v2.Query/YieldRecipient", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	Stats(context.Context, *QueryStats) (*QueryStatsResponse, error)
	YieldRecipients(context.Context, *QueryYieldRecipients) (*QueryYieldRecipientsResponse, error)
	YieldRecipient(context.Context, *QueryYieldRecipient) (*QueryYieldRecipientResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Stats(ctx context.Context, req *QueryStats) (*QueryStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stats not implemented")
}
func (*UnimplementedQueryServer) YieldRecipients(ctx context.Context, req *QueryYieldRecipients) (*QueryYieldRecipientsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method YieldRecipients not implemented")
}
func (*UnimplementedQueryServer) YieldRecipient(ctx context.Context, req *QueryYieldRecipient) (*QueryYieldRecipientResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method YieldRecipient not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Stats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryStats)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Stats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/noble.dollar.v2.Query/Stats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Stats(ctx, req.(*QueryStats))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_YieldRecipients_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryYieldRecipients)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).YieldRecipients(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/noble.dollar.v2.Query/YieldRecipients",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).YieldRecipients(ctx, req.(*QueryYieldRecipients))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_YieldRecipient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryYieldRecipient)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).YieldRecipient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/noble.dollar.v2.Query/YieldRecipient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).YieldRecipient(ctx, req.(*QueryYieldRecipient))
	}
	return interceptor(ctx, in, info, handler)
}

var Query_serviceDesc = _Query_serviceDesc
var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "noble.dollar.v2.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Stats",
			Handler:    _Query_Stats_Handler,
		},
		{
			MethodName: "YieldRecipients",
			Handler:    _Query_YieldRecipients_Handler,
		},
		{
			MethodName: "YieldRecipient",
			Handler:    _Query_YieldRecipient_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "noble/dollar/v2/query.proto",
}

func (m *QueryStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryStatsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStatsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStatsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TotalExternalYield) > 0 {
		for k := range m.TotalExternalYield {
			v := m.TotalExternalYield[k]
			baseI := i
			{
				size, err := (&v).MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintQuery(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintQuery(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x22
		}
	}
	{
		size := m.TotalYieldAccrued.Size()
		i -= size
		if _, err := m.TotalYieldAccrued.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.TotalPrincipal.Size()
		i -= size
		if _, err := m.TotalPrincipal.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.TotalHolders != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TotalHolders))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryStatsResponse_ExternalYield) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStatsResponse_ExternalYield) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStatsResponse_ExternalYield) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryYieldRecipients) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryYieldRecipients) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryYieldRecipients) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryYieldRecipientsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryYieldRecipientsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryYieldRecipientsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.YieldRecipients) > 0 {
		for k := range m.YieldRecipients {
			v := m.YieldRecipients[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintQuery(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintQuery(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintQuery(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryYieldRecipient) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryYieldRecipient) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryYieldRecipient) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Identifier) > 0 {
		i -= len(m.Identifier)
		copy(dAtA[i:], m.Identifier)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Identifier)))
		i--
		dAtA[i] = 0x12
	}
	if m.Provider != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Provider))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryYieldRecipientResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryYieldRecipientResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryYieldRecipientResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.YieldRecipient) > 0 {
		i -= len(m.YieldRecipient)
		copy(dAtA[i:], m.YieldRecipient)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.YieldRecipient)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryStatsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TotalHolders != 0 {
		n += 1 + sovQuery(uint64(m.TotalHolders))
	}
	l = m.TotalPrincipal.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.TotalYieldAccrued.Size()
	n += 1 + l + sovQuery(uint64(l))
	if len(m.TotalExternalYield) > 0 {
		for k, v := range m.TotalExternalYield {
			_ = k
			_ = v
			l = v.Size()
			mapEntrySize := 1 + len(k) + sovQuery(uint64(len(k))) + 1 + l + sovQuery(uint64(l))
			n += mapEntrySize + 1 + sovQuery(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *QueryStatsResponse_ExternalYield) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryYieldRecipients) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryYieldRecipientsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.YieldRecipients) > 0 {
		for k, v := range m.YieldRecipients {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovQuery(uint64(len(k))) + 1 + len(v) + sovQuery(uint64(len(v)))
			n += mapEntrySize + 1 + sovQuery(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *QueryYieldRecipient) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Provider != 0 {
		n += 1 + sovQuery(uint64(m.Provider))
	}
	l = len(m.Identifier)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryYieldRecipientResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.YieldRecipient)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStatsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStatsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStatsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalHolders", wireType)
			}
			m.TotalHolders = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalHolders |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalPrincipal", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalPrincipal.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalYieldAccrued", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalYieldAccrued.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalExternalYield", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TotalExternalYield == nil {
				m.TotalExternalYield = make(map[string]QueryStatsResponse_ExternalYield)
			}
			var mapkey string
			mapvalue := &QueryStatsResponse_ExternalYield{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowQuery
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthQuery
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthQuery
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowQuery
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthQuery
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthQuery
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &QueryStatsResponse_ExternalYield{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipQuery(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthQuery
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.TotalExternalYield[mapkey] = *mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStatsResponse_ExternalYield) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExternalYield: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExternalYield: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryYieldRecipients) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryYieldRecipients: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryYieldRecipients: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryYieldRecipientsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryYieldRecipientsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryYieldRecipientsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field YieldRecipients", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.YieldRecipients == nil {
				m.YieldRecipients = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowQuery
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthQuery
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthQuery
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowQuery
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthQuery
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthQuery
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipQuery(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthQuery
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.YieldRecipients[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryYieldRecipient) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryYieldRecipient: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryYieldRecipient: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Provider", wireType)
			}
			m.Provider = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Provider |= Provider(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identifier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identifier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryYieldRecipientResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryYieldRecipientResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryYieldRecipientResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field YieldRecipient", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.YieldRecipient = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)

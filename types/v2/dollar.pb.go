// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: noble/dollar/v2/dollar.proto

package v2

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Provider int32

const (
	Provider_IBC Provider = 0
)

var Provider_name = map[int32]string{
	0: "IBC",
}

var Provider_value = map[string]int32{
	"IBC": 0,
}

func (x Provider) String() string {
	return proto.EnumName(Provider_name, int32(x))
}

func (Provider) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e69c34fea15dc8ef, []int{0}
}

type Stats struct {
	TotalHolders       uint64                `protobuf:"varint,1,opt,name=total_holders,json=totalHolders,proto3" json:"total_holders,omitempty"`
	TotalPrincipal     cosmossdk_io_math.Int `protobuf:"bytes,2,opt,name=total_principal,json=totalPrincipal,proto3,customtype=cosmossdk.io/math.Int" json:"total_principal"`
	TotalYieldAccrued  cosmossdk_io_math.Int `protobuf:"bytes,3,opt,name=total_yield_accrued,json=totalYieldAccrued,proto3,customtype=cosmossdk.io/math.Int" json:"total_yield_accrued"`
	TotalExternalYield map[string]string     `protobuf:"bytes,4,rep,name=total_external_yield,json=totalExternalYield,proto3" json:"total_external_yield,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *Stats) Reset()         { *m = Stats{} }
func (m *Stats) String() string { return proto.CompactTextString(m) }
func (*Stats) ProtoMessage()    {}
func (*Stats) Descriptor() ([]byte, []int) {
	return fileDescriptor_e69c34fea15dc8ef, []int{0}
}
func (m *Stats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Stats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Stats.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Stats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Stats.Merge(m, src)
}
func (m *Stats) XXX_Size() int {
	return m.Size()
}
func (m *Stats) XXX_DiscardUnknown() {
	xxx_messageInfo_Stats.DiscardUnknown(m)
}

var xxx_messageInfo_Stats proto.InternalMessageInfo

func (m *Stats) GetTotalHolders() uint64 {
	if m != nil {
		return m.TotalHolders
	}
	return 0
}

func (m *Stats) GetTotalExternalYield() map[string]string {
	if m != nil {
		return m.TotalExternalYield
	}
	return nil
}

func init() {
	proto.RegisterEnum("noble.dollar.v2.Provider", Provider_name, Provider_value)
	proto.RegisterType((*Stats)(nil), "noble.dollar.v2.Stats")
	proto.RegisterMapType((map[string]string)(nil), "noble.dollar.v2.Stats.TotalExternalYieldEntry")
}

func init() { proto.RegisterFile("noble/dollar/v2/dollar.proto", fileDescriptor_e69c34fea15dc8ef) }

var fileDescriptor_e69c34fea15dc8ef = []byte{
	// 398 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x92, 0xcf, 0xae, 0xd2, 0x40,
	0x14, 0xc6, 0x3b, 0x14, 0x54, 0xc6, 0x3f, 0xc0, 0x80, 0xb1, 0x12, 0x52, 0x88, 0x6e, 0x08, 0x89,
	0x53, 0x53, 0x13, 0x63, 0xdc, 0x89, 0x21, 0x91, 0x1d, 0xa9, 0x6e, 0x70, 0x03, 0x43, 0x3b, 0x81,
	0x86, 0xa1, 0xd3, 0x4c, 0x87, 0x86, 0xfa, 0x14, 0xc6, 0xa7, 0x70, 0xe9, 0xc2, 0x87, 0x60, 0x49,
	0x5c, 0x19, 0x17, 0xc4, 0xc0, 0xc2, 0xd7, 0x30, 0x9d, 0x29, 0x9b, 0x7b, 0x73, 0x37, 0x77, 0xd3,
	0x9c, 0xf3, 0x9d, 0x73, 0x7e, 0xe7, 0xe4, 0xeb, 0xc0, 0x4e, 0xc4, 0x17, 0x8c, 0x3a, 0x01, 0x67,
	0x8c, 0x08, 0x27, 0x75, 0x8b, 0x08, 0xc7, 0x82, 0x4b, 0x8e, 0x6a, 0xaa, 0x8a, 0x0b, 0x2d, 0x75,
	0xdb, 0x0d, 0xb2, 0x09, 0x23, 0xee, 0xa8, 0xaf, 0xee, 0x69, 0x3f, 0xf5, 0x79, 0xb2, 0xe1, 0xc9,
	0x4c, 0x65, 0x8e, 0x4e, 0x8a, 0x52, 0x6b, 0xc9, 0x97, 0x5c, 0xeb, 0x79, 0xa4, 0xd5, 0x67, 0xdf,
	0x4c, 0x58, 0xf9, 0x28, 0x89, 0x4c, 0xd0, 0x73, 0xf8, 0x50, 0x72, 0x49, 0xd8, 0x6c, 0xc5, 0x59,
	0x40, 0x45, 0x62, 0x81, 0x1e, 0xe8, 0x97, 0xbd, 0x07, 0x4a, 0xfc, 0xa0, 0x35, 0x34, 0x85, 0x35,
	0xdd, 0x14, 0x8b, 0x30, 0xf2, 0xc3, 0x98, 0x30, 0xab, 0xd4, 0x03, 0xfd, 0xea, 0xf0, 0xe5, 0xfe,
	0xd8, 0x35, 0xfe, 0x1c, 0xbb, 0x8f, 0xf5, 0xce, 0x24, 0x58, 0xe3, 0x90, 0x3b, 0x1b, 0x22, 0x57,
	0x78, 0x1c, 0xc9, 0x5f, 0x3f, 0x5f, 0xc0, 0xe2, 0x98, 0x71, 0x24, 0xbf, 0xff, 0xfb, 0x31, 0x00,
	0xde, 0x23, 0x05, 0x9a, 0x5c, 0x38, 0x68, 0x0e, 0x9b, 0x1a, 0x9d, 0x85, 0x94, 0x05, 0x33, 0xe2,
	0xfb, 0x62, 0x4b, 0x03, 0xcb, 0xbc, 0x25, 0xbe, 0xa1, 0x60, 0xd3, 0x9c, 0xf5, 0x4e, 0xa3, 0xd0,
	0x1c, 0xb6, 0xf4, 0x06, 0xba, 0x93, 0x54, 0x44, 0x97, 0x55, 0x56, 0xb9, 0x67, 0xf6, 0xef, 0xbb,
	0x18, 0x5f, 0xf1, 0x17, 0x2b, 0x5f, 0xf0, 0xa7, 0x7c, 0x64, 0x54, 0x4c, 0x28, 0xde, 0x28, 0x92,
	0x22, 0xf3, 0x90, 0xbc, 0x56, 0x68, 0x8f, 0xe0, 0x93, 0x1b, 0xda, 0x51, 0x1d, 0x9a, 0x6b, 0x9a,
	0x29, 0x53, 0xab, 0x5e, 0x1e, 0xa2, 0x16, 0xac, 0xa4, 0x84, 0x6d, 0xa9, 0x76, 0xd0, 0xd3, 0xc9,
	0xdb, 0xd2, 0x1b, 0x30, 0x68, 0xc2, 0x7b, 0x13, 0xc1, 0xd3, 0x30, 0xa0, 0x02, 0xdd, 0x85, 0xe6,
	0x78, 0xf8, 0xbe, 0x6e, 0x0c, 0x5f, 0xef, 0x4f, 0x36, 0x38, 0x9c, 0x6c, 0xf0, 0xf7, 0x64, 0x83,
	0xaf, 0x67, 0xdb, 0x38, 0x9c, 0x6d, 0xe3, 0xf7, 0xd9, 0x36, 0x3e, 0x77, 0x8a, 0x93, 0xf5, 0xfd,
	0xbb, 0xec, 0x4b, 0xfe, 0x74, 0x64, 0x16, 0xd3, 0xc4, 0x49, 0xdd, 0xc5, 0x1d, 0xf5, 0xa3, 0x5f,
	0xfd, 0x0f, 0x00, 0x00, 0xff, 0xff, 0xf8, 0x06, 0xf7, 0xe1, 0x5d, 0x02, 0x00, 0x00,
}

func (m *Stats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Stats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Stats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TotalExternalYield) > 0 {
		for k := range m.TotalExternalYield {
			v := m.TotalExternalYield[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintDollar(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintDollar(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintDollar(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x22
		}
	}
	{
		size := m.TotalYieldAccrued.Size()
		i -= size
		if _, err := m.TotalYieldAccrued.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintDollar(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.TotalPrincipal.Size()
		i -= size
		if _, err := m.TotalPrincipal.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintDollar(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.TotalHolders != 0 {
		i = encodeVarintDollar(dAtA, i, uint64(m.TotalHolders))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintDollar(dAtA []byte, offset int, v uint64) int {
	offset -= sovDollar(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Stats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TotalHolders != 0 {
		n += 1 + sovDollar(uint64(m.TotalHolders))
	}
	l = m.TotalPrincipal.Size()
	n += 1 + l + sovDollar(uint64(l))
	l = m.TotalYieldAccrued.Size()
	n += 1 + l + sovDollar(uint64(l))
	if len(m.TotalExternalYield) > 0 {
		for k, v := range m.TotalExternalYield {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovDollar(uint64(len(k))) + 1 + len(v) + sovDollar(uint64(len(v)))
			n += mapEntrySize + 1 + sovDollar(uint64(mapEntrySize))
		}
	}
	return n
}

func sovDollar(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDollar(x uint64) (n int) {
	return sovDollar(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Stats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDollar
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Stats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Stats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalHolders", wireType)
			}
			m.TotalHolders = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDollar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalHolders |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalPrincipal", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDollar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDollar
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDollar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalPrincipal.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalYieldAccrued", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDollar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDollar
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDollar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalYieldAccrued.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalExternalYield", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDollar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDollar
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDollar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TotalExternalYield == nil {
				m.TotalExternalYield = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDollar
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDollar
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthDollar
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthDollar
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDollar
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthDollar
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthDollar
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipDollar(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthDollar
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.TotalExternalYield[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDollar(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDollar
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDollar(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDollar
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDollar
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDollar
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDollar
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDollar
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDollar
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDollar        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDollar          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDollar = fmt.Errorf("proto: unexpected end of group")
)
